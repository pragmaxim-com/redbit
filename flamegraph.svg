<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1446" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1429.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1429.00"> </text><svg id="frames" x="10" width="1180" total_samples="1542"><g><title>redb::transactions::WriteTransaction::process_freed_pages (1 samples, 0.06%)</title><rect x="0.0000%" y="965" width="0.0649%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free (1 samples, 0.06%)</title><rect x="0.0000%" y="949" width="0.0649%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free_helper (1 samples, 0.06%)</title><rect x="0.0000%" y="933" width="0.0649%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::invalidate_cache (1 samples, 0.06%)</title><rect x="0.0000%" y="917" width="0.0649%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="0.0000%" y="901" width="0.0649%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="0.0000%" y="885" width="0.0649%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="0.0000%" y="869" width="0.0649%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="0.0000%" y="853" width="0.0649%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="0.0000%" y="837" width="0.0649%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="0.0000%" y="821" width="0.0649%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="0.0000%" y="805" width="0.0649%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="0.0000%" y="789" width="0.0649%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="0.0000%" y="773" width="0.0649%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="0.0000%" y="757" width="0.0649%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="0.0000%" y="741" width="0.0649%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.0000%" y="725" width="0.0649%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.0000%" y="709" width="0.0649%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.0000%" y="693" width="0.0649%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::to_vec (1 samples, 0.06%)</title><rect x="0.0649%" y="885" width="0.0649%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.3149%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.06%)</title><rect x="0.0649%" y="869" width="0.0649%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.3149%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.0649%" y="853" width="0.0649%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.3149%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.0649%" y="837" width="0.0649%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.3149%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.0649%" y="821" width="0.0649%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.3149%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="0.0649%" y="805" width="0.0649%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.3149%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="0.0649%" y="789" width="0.0649%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.3149%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="0.0649%" y="773" width="0.0649%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.3149%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.0649%" y="757" width="0.0649%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.3149%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.0649%" y="741" width="0.0649%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.3149%" y="751.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.06%)</title><rect x="0.0649%" y="725" width="0.0649%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.3149%" y="735.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::to_vec::{{closure}} (1 samples, 0.06%)</title><rect x="0.0649%" y="709" width="0.0649%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.3149%" y="719.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (1 samples, 0.06%)</title><rect x="0.0649%" y="693" width="0.0649%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.3149%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="0.0649%" y="677" width="0.0649%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="0.3149%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="0.0649%" y="661" width="0.0649%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="0.3149%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="0.0649%" y="645" width="0.0649%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="0.3149%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="0.0649%" y="629" width="0.0649%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="0.3149%" y="639.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.0649%" y="613" width="0.0649%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="0.3149%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.0649%" y="597" width="0.0649%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="1"/><text x="0.3149%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="0.0649%" y="581" width="0.0649%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1"/><text x="0.3149%" y="591.50"></text></g><g><title>&lt;core::ops::try_trait::NeverShortCircuit&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="0.0649%" y="565" width="0.0649%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="1"/><text x="0.3149%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.0649%" y="549" width="0.0649%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="1"/><text x="0.3149%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.0649%" y="533" width="0.0649%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="1"/><text x="0.3149%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.0649%" y="517" width="0.0649%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="1"/><text x="0.3149%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.1297%" y="789" width="0.0649%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="1"/><text x="0.3797%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="0.1297%" y="773" width="0.0649%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="1"/><text x="0.3797%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.1297%" y="757" width="0.0649%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="1"/><text x="0.3797%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.1297%" y="741" width="0.0649%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="1"/><text x="0.3797%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.1297%" y="725" width="0.0649%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="1"/><text x="0.3797%" y="735.50"></text></g><g><title>&lt;redb::db::Database as core::ops::drop::Drop&gt;::drop (4 samples, 0.26%)</title><rect x="0.0000%" y="1045" width="0.2594%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1055.50"></text></g><g><title>redb::db::Database::ensure_allocator_state_table (4 samples, 0.26%)</title><rect x="0.0000%" y="1029" width="0.2594%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1039.50"></text></g><g><title>redb::transactions::WriteTransaction::commit (4 samples, 0.26%)</title><rect x="0.0000%" y="1013" width="0.2594%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1023.50"></text></g><g><title>redb::transactions::WriteTransaction::commit_inner (4 samples, 0.26%)</title><rect x="0.0000%" y="997" width="0.2594%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1007.50"></text></g><g><title>redb::transactions::WriteTransaction::durable_commit (4 samples, 0.26%)</title><rect x="0.0000%" y="981" width="0.2594%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="991.50"></text></g><g><title>redb::tree_store::table_tree::TableTreeMut::create_table_and_flush_table_root (3 samples, 0.19%)</title><rect x="0.0649%" y="965" width="0.1946%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="3"/><text x="0.3149%" y="975.50"></text></g><g><title>redb::transactions::WriteTransaction::durable_commit::{{closure}} (3 samples, 0.19%)</title><rect x="0.0649%" y="949" width="0.1946%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="3"/><text x="0.3149%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::try_save_allocator_state (3 samples, 0.19%)</title><rect x="0.0649%" y="933" width="0.1946%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="3"/><text x="0.3149%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::try_save_allocator_state_inner (3 samples, 0.19%)</title><rect x="0.0649%" y="917" width="0.1946%" height="15" fill="rgb(251,118,11)" fg:x="1" fg:w="3"/><text x="0.3149%" y="927.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (3 samples, 0.19%)</title><rect x="0.0649%" y="901" width="0.1946%" height="15" fill="rgb(217,147,25)" fg:x="1" fg:w="3"/><text x="0.3149%" y="911.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="0.1297%" y="885" width="0.1297%" height="15" fill="rgb(247,81,37)" fg:x="2" fg:w="2"/><text x="0.3797%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="0.1297%" y="869" width="0.1297%" height="15" fill="rgb(209,12,38)" fg:x="2" fg:w="2"/><text x="0.3797%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="0.1297%" y="853" width="0.1297%" height="15" fill="rgb(227,1,9)" fg:x="2" fg:w="2"/><text x="0.3797%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="0.1297%" y="837" width="0.1297%" height="15" fill="rgb(248,47,43)" fg:x="2" fg:w="2"/><text x="0.3797%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.13%)</title><rect x="0.1297%" y="821" width="0.1297%" height="15" fill="rgb(221,10,30)" fg:x="2" fg:w="2"/><text x="0.3797%" y="831.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="0.1297%" y="805" width="0.1297%" height="15" fill="rgb(210,229,1)" fg:x="2" fg:w="2"/><text x="0.3797%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u8,alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::array::iter::IntoIter&lt;u8,8_usize&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="0.1946%" y="789" width="0.0649%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="1"/><text x="0.4446%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.1946%" y="773" width="0.0649%" height="15" fill="rgb(234,67,33)" fg:x="3" fg:w="1"/><text x="0.4446%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.1946%" y="757" width="0.0649%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="1"/><text x="0.4446%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.1946%" y="741" width="0.0649%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="1"/><text x="0.4446%" y="751.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::to_vec (1 samples, 0.06%)</title><rect x="0.2594%" y="917" width="0.0649%" height="15" fill="rgb(213,79,30)" fg:x="4" fg:w="1"/><text x="0.5094%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.06%)</title><rect x="0.2594%" y="901" width="0.0649%" height="15" fill="rgb(246,177,23)" fg:x="4" fg:w="1"/><text x="0.5094%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.2594%" y="885" width="0.0649%" height="15" fill="rgb(230,62,27)" fg:x="4" fg:w="1"/><text x="0.5094%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.2594%" y="869" width="0.0649%" height="15" fill="rgb(216,154,8)" fg:x="4" fg:w="1"/><text x="0.5094%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.2594%" y="853" width="0.0649%" height="15" fill="rgb(244,35,45)" fg:x="4" fg:w="1"/><text x="0.5094%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="0.2594%" y="837" width="0.0649%" height="15" fill="rgb(251,115,12)" fg:x="4" fg:w="1"/><text x="0.5094%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="0.2594%" y="821" width="0.0649%" height="15" fill="rgb(240,54,50)" fg:x="4" fg:w="1"/><text x="0.5094%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="0.2594%" y="805" width="0.0649%" height="15" fill="rgb(233,84,52)" fg:x="4" fg:w="1"/><text x="0.5094%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.2594%" y="789" width="0.0649%" height="15" fill="rgb(207,117,47)" fg:x="4" fg:w="1"/><text x="0.5094%" y="799.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.2594%" y="773" width="0.0649%" height="15" fill="rgb(249,43,39)" fg:x="4" fg:w="1"/><text x="0.5094%" y="783.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.06%)</title><rect x="0.2594%" y="757" width="0.0649%" height="15" fill="rgb(209,38,44)" fg:x="4" fg:w="1"/><text x="0.5094%" y="767.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::to_vec::{{closure}} (1 samples, 0.06%)</title><rect x="0.2594%" y="741" width="0.0649%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="1"/><text x="0.5094%" y="751.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (1 samples, 0.06%)</title><rect x="0.2594%" y="725" width="0.0649%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="1"/><text x="0.5094%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="0.2594%" y="709" width="0.0649%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="1"/><text x="0.5094%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="0.2594%" y="693" width="0.0649%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="1"/><text x="0.5094%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="0.2594%" y="677" width="0.0649%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="1"/><text x="0.5094%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="0.2594%" y="661" width="0.0649%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="1"/><text x="0.5094%" y="671.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.2594%" y="645" width="0.0649%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="1"/><text x="0.5094%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.2594%" y="629" width="0.0649%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="1"/><text x="0.5094%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="0.2594%" y="613" width="0.0649%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="1"/><text x="0.5094%" y="623.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="0.2594%" y="597" width="0.0649%" height="15" fill="rgb(240,68,47)" fg:x="4" fg:w="1"/><text x="0.5094%" y="607.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (1 samples, 0.06%)</title><rect x="0.2594%" y="581" width="0.0649%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="1"/><text x="0.5094%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.06%)</title><rect x="0.2594%" y="565" width="0.0649%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="1"/><text x="0.5094%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.2594%" y="549" width="0.0649%" height="15" fill="rgb(224,169,11)" fg:x="4" fg:w="1"/><text x="0.5094%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.2594%" y="533" width="0.0649%" height="15" fill="rgb(250,166,2)" fg:x="4" fg:w="1"/><text x="0.5094%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.2594%" y="517" width="0.0649%" height="15" fill="rgb(242,216,29)" fg:x="4" fg:w="1"/><text x="0.5094%" y="527.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.3243%" y="837" width="0.0649%" height="15" fill="rgb(230,116,27)" fg:x="5" fg:w="1"/><text x="0.5743%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.3243%" y="821" width="0.0649%" height="15" fill="rgb(228,99,48)" fg:x="5" fg:w="1"/><text x="0.5743%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="0.3243%" y="805" width="0.0649%" height="15" fill="rgb(253,11,6)" fg:x="5" fg:w="1"/><text x="0.5743%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.3243%" y="789" width="0.0649%" height="15" fill="rgb(247,143,39)" fg:x="5" fg:w="1"/><text x="0.5743%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.3243%" y="773" width="0.0649%" height="15" fill="rgb(236,97,10)" fg:x="5" fg:w="1"/><text x="0.5743%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.3243%" y="757" width="0.0649%" height="15" fill="rgb(233,208,19)" fg:x="5" fg:w="1"/><text x="0.5743%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::db::Database&gt; (7 samples, 0.45%)</title><rect x="0.0000%" y="1061" width="0.4540%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;redb::tree_store::page_store::page_manager::TransactionalMemory&gt;&gt; (3 samples, 0.19%)</title><rect x="0.2594%" y="1045" width="0.1946%" height="15" fill="rgb(220,129,5)" fg:x="4" fg:w="3"/><text x="0.5094%" y="1055.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="0.2594%" y="1029" width="0.1946%" height="15" fill="rgb(242,17,10)" fg:x="4" fg:w="3"/><text x="0.5094%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.19%)</title><rect x="0.2594%" y="1013" width="0.1946%" height="15" fill="rgb(242,107,0)" fg:x="4" fg:w="3"/><text x="0.5094%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::page_manager::TransactionalMemory&gt; (3 samples, 0.19%)</title><rect x="0.2594%" y="997" width="0.1946%" height="15" fill="rgb(251,28,31)" fg:x="4" fg:w="3"/><text x="0.5094%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::page_manager::TransactionalMemory as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="0.2594%" y="981" width="0.1946%" height="15" fill="rgb(233,223,10)" fg:x="4" fg:w="3"/><text x="0.5094%" y="991.50"></text></g><g><title>redb::tree_store::page_store::region::Allocators::flush_to (3 samples, 0.19%)</title><rect x="0.2594%" y="965" width="0.1946%" height="15" fill="rgb(215,21,27)" fg:x="4" fg:w="3"/><text x="0.5094%" y="975.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::serialize (3 samples, 0.19%)</title><rect x="0.2594%" y="949" width="0.1946%" height="15" fill="rgb(232,23,21)" fg:x="4" fg:w="3"/><text x="0.5094%" y="959.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (3 samples, 0.19%)</title><rect x="0.2594%" y="933" width="0.1946%" height="15" fill="rgb(244,5,23)" fg:x="4" fg:w="3"/><text x="0.5094%" y="943.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="0.3243%" y="917" width="0.1297%" height="15" fill="rgb(226,81,46)" fg:x="5" fg:w="2"/><text x="0.5743%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="0.3243%" y="901" width="0.1297%" height="15" fill="rgb(247,70,30)" fg:x="5" fg:w="2"/><text x="0.5743%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="0.3243%" y="885" width="0.1297%" height="15" fill="rgb(212,68,19)" fg:x="5" fg:w="2"/><text x="0.5743%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="0.3243%" y="869" width="0.1297%" height="15" fill="rgb(240,187,13)" fg:x="5" fg:w="2"/><text x="0.5743%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.13%)</title><rect x="0.3243%" y="853" width="0.1297%" height="15" fill="rgb(223,113,26)" fg:x="5" fg:w="2"/><text x="0.5743%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.3891%" y="837" width="0.0649%" height="15" fill="rgb(206,192,2)" fg:x="6" fg:w="1"/><text x="0.6391%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.3891%" y="821" width="0.0649%" height="15" fill="rgb(241,108,4)" fg:x="6" fg:w="1"/><text x="0.6391%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.3891%" y="805" width="0.0649%" height="15" fill="rgb(247,173,49)" fg:x="6" fg:w="1"/><text x="0.6391%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.06%)</title><rect x="0.4540%" y="773" width="0.0649%" height="15" fill="rgb(224,114,35)" fg:x="7" fg:w="1"/><text x="0.7040%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.4540%" y="757" width="0.0649%" height="15" fill="rgb(245,159,27)" fg:x="7" fg:w="1"/><text x="0.7040%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.4540%" y="741" width="0.0649%" height="15" fill="rgb(245,172,44)" fg:x="7" fg:w="1"/><text x="0.7040%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.4540%" y="725" width="0.0649%" height="15" fill="rgb(236,23,11)" fg:x="7" fg:w="1"/><text x="0.7040%" y="735.50"></text></g><g><title>redb::tree_store::page_store::layout::RegionLayout::calculate (2 samples, 0.13%)</title><rect x="0.4540%" y="981" width="0.1297%" height="15" fill="rgb(205,117,38)" fg:x="7" fg:w="2"/><text x="0.7040%" y="991.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::header_pages_expensive (2 samples, 0.13%)</title><rect x="0.4540%" y="965" width="0.1297%" height="15" fill="rgb(237,72,25)" fg:x="7" fg:w="2"/><text x="0.7040%" y="975.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="0.4540%" y="949" width="0.1297%" height="15" fill="rgb(244,70,9)" fg:x="7" fg:w="2"/><text x="0.7040%" y="959.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="0.4540%" y="933" width="0.1297%" height="15" fill="rgb(217,125,39)" fg:x="7" fg:w="2"/><text x="0.7040%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="0.4540%" y="917" width="0.1297%" height="15" fill="rgb(235,36,10)" fg:x="7" fg:w="2"/><text x="0.7040%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="0.4540%" y="901" width="0.1297%" height="15" fill="rgb(251,123,47)" fg:x="7" fg:w="2"/><text x="0.7040%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="0.4540%" y="885" width="0.1297%" height="15" fill="rgb(221,13,13)" fg:x="7" fg:w="2"/><text x="0.7040%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.13%)</title><rect x="0.4540%" y="869" width="0.1297%" height="15" fill="rgb(238,131,9)" fg:x="7" fg:w="2"/><text x="0.7040%" y="879.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="0.4540%" y="853" width="0.1297%" height="15" fill="rgb(211,50,8)" fg:x="7" fg:w="2"/><text x="0.7040%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="0.4540%" y="837" width="0.1297%" height="15" fill="rgb(245,182,24)" fg:x="7" fg:w="2"/><text x="0.7040%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.13%)</title><rect x="0.4540%" y="821" width="0.1297%" height="15" fill="rgb(242,14,37)" fg:x="7" fg:w="2"/><text x="0.7040%" y="831.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (2 samples, 0.13%)</title><rect x="0.4540%" y="805" width="0.1297%" height="15" fill="rgb(246,228,12)" fg:x="7" fg:w="2"/><text x="0.7040%" y="815.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (2 samples, 0.13%)</title><rect x="0.4540%" y="789" width="0.1297%" height="15" fill="rgb(213,55,15)" fg:x="7" fg:w="2"/><text x="0.7040%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="0.5188%" y="773" width="0.0649%" height="15" fill="rgb(209,9,3)" fg:x="8" fg:w="1"/><text x="0.7688%" y="783.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="0.5188%" y="757" width="0.0649%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="1"/><text x="0.7688%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.5188%" y="741" width="0.0649%" height="15" fill="rgb(209,121,21)" fg:x="8" fg:w="1"/><text x="0.7688%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.5188%" y="725" width="0.0649%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="1"/><text x="0.7688%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.5188%" y="709" width="0.0649%" height="15" fill="rgb(232,18,1)" fg:x="8" fg:w="1"/><text x="0.7688%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.5837%" y="837" width="0.0649%" height="15" fill="rgb(215,41,42)" fg:x="9" fg:w="1"/><text x="0.8337%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="0.5837%" y="821" width="0.0649%" height="15" fill="rgb(224,123,36)" fg:x="9" fg:w="1"/><text x="0.8337%" y="831.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (1 samples, 0.06%)</title><rect x="0.5837%" y="805" width="0.0649%" height="15" fill="rgb(240,125,3)" fg:x="9" fg:w="1"/><text x="0.8337%" y="815.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.06%)</title><rect x="0.5837%" y="789" width="0.0649%" height="15" fill="rgb(205,98,50)" fg:x="9" fg:w="1"/><text x="0.8337%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.06%)</title><rect x="0.5837%" y="773" width="0.0649%" height="15" fill="rgb(205,185,37)" fg:x="9" fg:w="1"/><text x="0.8337%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1 samples, 0.06%)</title><rect x="0.5837%" y="757" width="0.0649%" height="15" fill="rgb(238,207,15)" fg:x="9" fg:w="1"/><text x="0.8337%" y="767.50"></text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="0.5837%" y="741" width="0.0649%" height="15" fill="rgb(213,199,42)" fg:x="9" fg:w="1"/><text x="0.8337%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.5837%" y="725" width="0.0649%" height="15" fill="rgb(235,201,11)" fg:x="9" fg:w="1"/><text x="0.8337%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.5837%" y="709" width="0.0649%" height="15" fill="rgb(207,46,11)" fg:x="9" fg:w="1"/><text x="0.8337%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.5837%" y="693" width="0.0649%" height="15" fill="rgb(241,35,35)" fg:x="9" fg:w="1"/><text x="0.8337%" y="703.50"></text></g><g><title>redb::tree_store::page_store::layout::DatabaseLayout::calculate (4 samples, 0.26%)</title><rect x="0.4540%" y="997" width="0.2594%" height="15" fill="rgb(243,32,47)" fg:x="7" fg:w="4"/><text x="0.7040%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::layout::RegionLayout::full_region_layout (2 samples, 0.13%)</title><rect x="0.5837%" y="981" width="0.1297%" height="15" fill="rgb(247,202,23)" fg:x="9" fg:w="2"/><text x="0.8337%" y="991.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::header_pages_expensive (2 samples, 0.13%)</title><rect x="0.5837%" y="965" width="0.1297%" height="15" fill="rgb(219,102,11)" fg:x="9" fg:w="2"/><text x="0.8337%" y="975.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="0.5837%" y="949" width="0.1297%" height="15" fill="rgb(243,110,44)" fg:x="9" fg:w="2"/><text x="0.8337%" y="959.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="0.5837%" y="933" width="0.1297%" height="15" fill="rgb(222,74,54)" fg:x="9" fg:w="2"/><text x="0.8337%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="0.5837%" y="917" width="0.1297%" height="15" fill="rgb(216,99,12)" fg:x="9" fg:w="2"/><text x="0.8337%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="0.5837%" y="901" width="0.1297%" height="15" fill="rgb(226,22,26)" fg:x="9" fg:w="2"/><text x="0.8337%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="0.5837%" y="885" width="0.1297%" height="15" fill="rgb(217,163,10)" fg:x="9" fg:w="2"/><text x="0.8337%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.13%)</title><rect x="0.5837%" y="869" width="0.1297%" height="15" fill="rgb(213,25,53)" fg:x="9" fg:w="2"/><text x="0.8337%" y="879.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="0.5837%" y="853" width="0.1297%" height="15" fill="rgb(252,105,26)" fg:x="9" fg:w="2"/><text x="0.8337%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u8,alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::array::iter::IntoIter&lt;u8,8_usize&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="0.6485%" y="837" width="0.0649%" height="15" fill="rgb(220,39,43)" fg:x="10" fg:w="1"/><text x="0.8985%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::array::iter::IntoIter&lt;u8,8_usize&gt;&gt;::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="0.6485%" y="821" width="0.0649%" height="15" fill="rgb(229,68,48)" fg:x="10" fg:w="1"/><text x="0.8985%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.6485%" y="805" width="0.0649%" height="15" fill="rgb(252,8,32)" fg:x="10" fg:w="1"/><text x="0.8985%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.6485%" y="789" width="0.0649%" height="15" fill="rgb(223,20,43)" fg:x="10" fg:w="1"/><text x="0.8985%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.6485%" y="773" width="0.0649%" height="15" fill="rgb(229,81,49)" fg:x="10" fg:w="1"/><text x="0.8985%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="0.7134%" y="933" width="0.0649%" height="15" fill="rgb(236,28,36)" fg:x="11" fg:w="1"/><text x="0.9634%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="0.7134%" y="917" width="0.0649%" height="15" fill="rgb(249,185,26)" fg:x="11" fg:w="1"/><text x="0.9634%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="0.7134%" y="901" width="0.0649%" height="15" fill="rgb(249,174,33)" fg:x="11" fg:w="1"/><text x="0.9634%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="0.7134%" y="885" width="0.0649%" height="15" fill="rgb(233,201,37)" fg:x="11" fg:w="1"/><text x="0.9634%" y="895.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.7134%" y="869" width="0.0649%" height="15" fill="rgb(221,78,26)" fg:x="11" fg:w="1"/><text x="0.9634%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="0.7134%" y="853" width="0.0649%" height="15" fill="rgb(250,127,30)" fg:x="11" fg:w="1"/><text x="0.9634%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="0.7134%" y="837" width="0.0649%" height="15" fill="rgb(230,49,44)" fg:x="11" fg:w="1"/><text x="0.9634%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.7134%" y="821" width="0.0649%" height="15" fill="rgb(229,67,23)" fg:x="11" fg:w="1"/><text x="0.9634%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.7134%" y="805" width="0.0649%" height="15" fill="rgb(249,83,47)" fg:x="11" fg:w="1"/><text x="0.9634%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.7134%" y="789" width="0.0649%" height="15" fill="rgb(215,43,3)" fg:x="11" fg:w="1"/><text x="0.9634%" y="799.50"></text></g><g><title>redb::db::Database::create (6 samples, 0.39%)</title><rect x="0.4540%" y="1061" width="0.3891%" height="15" fill="rgb(238,154,13)" fg:x="7" fg:w="6"/><text x="0.7040%" y="1071.50"></text></g><g><title>redb::db::Builder::create (6 samples, 0.39%)</title><rect x="0.4540%" y="1045" width="0.3891%" height="15" fill="rgb(219,56,2)" fg:x="7" fg:w="6"/><text x="0.7040%" y="1055.50"></text></g><g><title>redb::db::Database::new (6 samples, 0.39%)</title><rect x="0.4540%" y="1029" width="0.3891%" height="15" fill="rgb(233,0,4)" fg:x="7" fg:w="6"/><text x="0.7040%" y="1039.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::new (6 samples, 0.39%)</title><rect x="0.4540%" y="1013" width="0.3891%" height="15" fill="rgb(235,30,7)" fg:x="7" fg:w="6"/><text x="0.7040%" y="1023.50"></text></g><g><title>redb::tree_store::page_store::region::Allocators::flush_to (2 samples, 0.13%)</title><rect x="0.7134%" y="997" width="0.1297%" height="15" fill="rgb(250,79,13)" fg:x="11" fg:w="2"/><text x="0.9634%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::serialize (2 samples, 0.13%)</title><rect x="0.7134%" y="981" width="0.1297%" height="15" fill="rgb(211,146,34)" fg:x="11" fg:w="2"/><text x="0.9634%" y="991.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="0.7134%" y="965" width="0.1297%" height="15" fill="rgb(228,22,38)" fg:x="11" fg:w="2"/><text x="0.9634%" y="975.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="0.7134%" y="949" width="0.1297%" height="15" fill="rgb(235,168,5)" fg:x="11" fg:w="2"/><text x="0.9634%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="0.7782%" y="933" width="0.0649%" height="15" fill="rgb(221,155,16)" fg:x="12" fg:w="1"/><text x="1.0282%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.7782%" y="917" width="0.0649%" height="15" fill="rgb(215,215,53)" fg:x="12" fg:w="1"/><text x="1.0282%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.7782%" y="901" width="0.0649%" height="15" fill="rgb(223,4,10)" fg:x="12" fg:w="1"/><text x="1.0282%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.7782%" y="885" width="0.0649%" height="15" fill="rgb(234,103,6)" fg:x="12" fg:w="1"/><text x="1.0282%" y="895.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="0.8431%" y="1029" width="0.0649%" height="15" fill="rgb(227,97,0)" fg:x="13" fg:w="1"/><text x="1.0931%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="0.8431%" y="1013" width="0.0649%" height="15" fill="rgb(234,150,53)" fg:x="13" fg:w="1"/><text x="1.0931%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="0.8431%" y="997" width="0.0649%" height="15" fill="rgb(228,201,54)" fg:x="13" fg:w="1"/><text x="1.0931%" y="1007.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="0.8431%" y="981" width="0.0649%" height="15" fill="rgb(222,22,37)" fg:x="13" fg:w="1"/><text x="1.0931%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry_ranges (1 samples, 0.06%)</title><rect x="0.8431%" y="965" width="0.0649%" height="15" fill="rgb(237,53,32)" fg:x="13" fg:w="1"/><text x="1.0931%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="0.8431%" y="949" width="0.0649%" height="15" fill="rgb(233,25,53)" fg:x="13" fg:w="1"/><text x="1.0931%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="0.8431%" y="933" width="0.0649%" height="15" fill="rgb(210,40,34)" fg:x="13" fg:w="1"/><text x="1.0931%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="0.8431%" y="917" width="0.0649%" height="15" fill="rgb(241,220,44)" fg:x="13" fg:w="1"/><text x="1.0931%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.8431%" y="901" width="0.0649%" height="15" fill="rgb(235,28,35)" fg:x="13" fg:w="1"/><text x="1.0931%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.8431%" y="885" width="0.0649%" height="15" fill="rgb(210,56,17)" fg:x="13" fg:w="1"/><text x="1.0931%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.8431%" y="869" width="0.0649%" height="15" fill="rgb(224,130,29)" fg:x="13" fg:w="1"/><text x="1.0931%" y="879.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="0.8431%" y="1045" width="0.1297%" height="15" fill="rgb(235,212,8)" fg:x="13" fg:w="2"/><text x="1.0931%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="0.9079%" y="1029" width="0.0649%" height="15" fill="rgb(223,33,50)" fg:x="14" fg:w="1"/><text x="1.1579%" y="1039.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="0.9079%" y="1013" width="0.0649%" height="15" fill="rgb(219,149,13)" fg:x="14" fg:w="1"/><text x="1.1579%" y="1023.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="0.9079%" y="997" width="0.0649%" height="15" fill="rgb(250,156,29)" fg:x="14" fg:w="1"/><text x="1.1579%" y="1007.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}}::{{closure}} (1 samples, 0.06%)</title><rect x="0.9079%" y="981" width="0.0649%" height="15" fill="rgb(216,193,19)" fg:x="14" fg:w="1"/><text x="1.1579%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="0.9079%" y="965" width="0.0649%" height="15" fill="rgb(216,135,14)" fg:x="14" fg:w="1"/><text x="1.1579%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="0.9079%" y="949" width="0.0649%" height="15" fill="rgb(241,47,5)" fg:x="14" fg:w="1"/><text x="1.1579%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="0.9079%" y="933" width="0.0649%" height="15" fill="rgb(233,42,35)" fg:x="14" fg:w="1"/><text x="1.1579%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="0.9079%" y="917" width="0.0649%" height="15" fill="rgb(231,13,6)" fg:x="14" fg:w="1"/><text x="1.1579%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="0.9079%" y="901" width="0.0649%" height="15" fill="rgb(207,181,40)" fg:x="14" fg:w="1"/><text x="1.1579%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="0.9079%" y="885" width="0.0649%" height="15" fill="rgb(254,173,49)" fg:x="14" fg:w="1"/><text x="1.1579%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="0.9079%" y="869" width="0.0649%" height="15" fill="rgb(221,1,38)" fg:x="14" fg:w="1"/><text x="1.1579%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="0.9079%" y="853" width="0.0649%" height="15" fill="rgb(206,124,46)" fg:x="14" fg:w="1"/><text x="1.1579%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="0.9079%" y="837" width="0.0649%" height="15" fill="rgb(249,21,11)" fg:x="14" fg:w="1"/><text x="1.1579%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="0.9079%" y="821" width="0.0649%" height="15" fill="rgb(222,201,40)" fg:x="14" fg:w="1"/><text x="1.1579%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="0.9079%" y="805" width="0.0649%" height="15" fill="rgb(235,61,29)" fg:x="14" fg:w="1"/><text x="1.1579%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.9079%" y="789" width="0.0649%" height="15" fill="rgb(219,207,3)" fg:x="14" fg:w="1"/><text x="1.1579%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.9079%" y="773" width="0.0649%" height="15" fill="rgb(222,56,46)" fg:x="14" fg:w="1"/><text x="1.1579%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.9079%" y="757" width="0.0649%" height="15" fill="rgb(239,76,54)" fg:x="14" fg:w="1"/><text x="1.1579%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="0.9728%" y="901" width="0.0649%" height="15" fill="rgb(231,124,27)" fg:x="15" fg:w="1"/><text x="1.2228%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="0.9728%" y="885" width="0.0649%" height="15" fill="rgb(249,195,6)" fg:x="15" fg:w="1"/><text x="1.2228%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="0.9728%" y="869" width="0.0649%" height="15" fill="rgb(237,174,47)" fg:x="15" fg:w="1"/><text x="1.2228%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="0.9728%" y="853" width="0.0649%" height="15" fill="rgb(206,201,31)" fg:x="15" fg:w="1"/><text x="1.2228%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="0.9728%" y="837" width="0.0649%" height="15" fill="rgb(231,57,52)" fg:x="15" fg:w="1"/><text x="1.2228%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="0.9728%" y="821" width="0.0649%" height="15" fill="rgb(248,177,22)" fg:x="15" fg:w="1"/><text x="1.2228%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="0.9728%" y="805" width="0.0649%" height="15" fill="rgb(215,211,37)" fg:x="15" fg:w="1"/><text x="1.2228%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="0.9728%" y="789" width="0.0649%" height="15" fill="rgb(241,128,51)" fg:x="15" fg:w="1"/><text x="1.2228%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="0.9728%" y="773" width="0.0649%" height="15" fill="rgb(227,165,31)" fg:x="15" fg:w="1"/><text x="1.2228%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="0.9728%" y="1029" width="0.1297%" height="15" fill="rgb(228,167,24)" fg:x="15" fg:w="2"/><text x="1.2228%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="0.9728%" y="1013" width="0.1297%" height="15" fill="rgb(228,143,12)" fg:x="15" fg:w="2"/><text x="1.2228%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (2 samples, 0.13%)</title><rect x="0.9728%" y="997" width="0.1297%" height="15" fill="rgb(249,149,8)" fg:x="15" fg:w="2"/><text x="1.2228%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="0.9728%" y="981" width="0.1297%" height="15" fill="rgb(243,35,44)" fg:x="15" fg:w="2"/><text x="1.2228%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="0.9728%" y="965" width="0.1297%" height="15" fill="rgb(246,89,9)" fg:x="15" fg:w="2"/><text x="1.2228%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="0.9728%" y="949" width="0.1297%" height="15" fill="rgb(233,213,13)" fg:x="15" fg:w="2"/><text x="1.2228%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="0.9728%" y="933" width="0.1297%" height="15" fill="rgb(233,141,41)" fg:x="15" fg:w="2"/><text x="1.2228%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="0.9728%" y="917" width="0.1297%" height="15" fill="rgb(239,167,4)" fg:x="15" fg:w="2"/><text x="1.2228%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="1.0376%" y="901" width="0.0649%" height="15" fill="rgb(209,217,16)" fg:x="16" fg:w="1"/><text x="1.2876%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="1.0376%" y="885" width="0.0649%" height="15" fill="rgb(219,88,35)" fg:x="16" fg:w="1"/><text x="1.2876%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="1.0376%" y="869" width="0.0649%" height="15" fill="rgb(220,193,23)" fg:x="16" fg:w="1"/><text x="1.2876%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="1.0376%" y="853" width="0.0649%" height="15" fill="rgb(230,90,52)" fg:x="16" fg:w="1"/><text x="1.2876%" y="863.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="1.0376%" y="837" width="0.0649%" height="15" fill="rgb(252,106,19)" fg:x="16" fg:w="1"/><text x="1.2876%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.0376%" y="821" width="0.0649%" height="15" fill="rgb(206,74,20)" fg:x="16" fg:w="1"/><text x="1.2876%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.0376%" y="805" width="0.0649%" height="15" fill="rgb(230,138,44)" fg:x="16" fg:w="1"/><text x="1.2876%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.0376%" y="789" width="0.0649%" height="15" fill="rgb(235,182,43)" fg:x="16" fg:w="1"/><text x="1.2876%" y="799.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="1.1025%" y="949" width="0.0649%" height="15" fill="rgb(242,16,51)" fg:x="17" fg:w="1"/><text x="1.3525%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="1.1025%" y="933" width="0.0649%" height="15" fill="rgb(248,9,4)" fg:x="17" fg:w="1"/><text x="1.3525%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="1.1025%" y="917" width="0.0649%" height="15" fill="rgb(210,31,22)" fg:x="17" fg:w="1"/><text x="1.3525%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="1.1025%" y="901" width="0.0649%" height="15" fill="rgb(239,54,39)" fg:x="17" fg:w="1"/><text x="1.3525%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="1.1025%" y="885" width="0.0649%" height="15" fill="rgb(230,99,41)" fg:x="17" fg:w="1"/><text x="1.3525%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="1.1025%" y="869" width="0.0649%" height="15" fill="rgb(253,106,12)" fg:x="17" fg:w="1"/><text x="1.3525%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="1.1025%" y="853" width="0.0649%" height="15" fill="rgb(213,46,41)" fg:x="17" fg:w="1"/><text x="1.3525%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="1.1025%" y="837" width="0.0649%" height="15" fill="rgb(215,133,35)" fg:x="17" fg:w="1"/><text x="1.3525%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="1.1025%" y="821" width="0.0649%" height="15" fill="rgb(213,28,5)" fg:x="17" fg:w="1"/><text x="1.3525%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="1.1025%" y="805" width="0.0649%" height="15" fill="rgb(215,77,49)" fg:x="17" fg:w="1"/><text x="1.3525%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="1.1025%" y="789" width="0.0649%" height="15" fill="rgb(248,100,22)" fg:x="17" fg:w="1"/><text x="1.3525%" y="799.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="1.1025%" y="773" width="0.0649%" height="15" fill="rgb(208,67,9)" fg:x="17" fg:w="1"/><text x="1.3525%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (1 samples, 0.06%)</title><rect x="1.1025%" y="757" width="0.0649%" height="15" fill="rgb(219,133,21)" fg:x="17" fg:w="1"/><text x="1.3525%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.1025%" y="741" width="0.0649%" height="15" fill="rgb(246,46,29)" fg:x="17" fg:w="1"/><text x="1.3525%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.1025%" y="725" width="0.0649%" height="15" fill="rgb(246,185,52)" fg:x="17" fg:w="1"/><text x="1.3525%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.1025%" y="709" width="0.0649%" height="15" fill="rgb(252,136,11)" fg:x="17" fg:w="1"/><text x="1.3525%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="1.1025%" y="1029" width="0.1297%" height="15" fill="rgb(219,138,53)" fg:x="17" fg:w="2"/><text x="1.3525%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="1.1025%" y="1013" width="0.1297%" height="15" fill="rgb(211,51,23)" fg:x="17" fg:w="2"/><text x="1.3525%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (2 samples, 0.13%)</title><rect x="1.1025%" y="997" width="0.1297%" height="15" fill="rgb(247,221,28)" fg:x="17" fg:w="2"/><text x="1.3525%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="1.1025%" y="981" width="0.1297%" height="15" fill="rgb(251,222,45)" fg:x="17" fg:w="2"/><text x="1.3525%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="1.1025%" y="965" width="0.1297%" height="15" fill="rgb(217,162,53)" fg:x="17" fg:w="2"/><text x="1.3525%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="1.1673%" y="949" width="0.0649%" height="15" fill="rgb(229,93,14)" fg:x="18" fg:w="1"/><text x="1.4173%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="1.1673%" y="933" width="0.0649%" height="15" fill="rgb(209,67,49)" fg:x="18" fg:w="1"/><text x="1.4173%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="1.1673%" y="917" width="0.0649%" height="15" fill="rgb(213,87,29)" fg:x="18" fg:w="1"/><text x="1.4173%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="1.1673%" y="901" width="0.0649%" height="15" fill="rgb(205,151,52)" fg:x="18" fg:w="1"/><text x="1.4173%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="1.1673%" y="885" width="0.0649%" height="15" fill="rgb(253,215,39)" fg:x="18" fg:w="1"/><text x="1.4173%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="1.1673%" y="869" width="0.0649%" height="15" fill="rgb(221,220,41)" fg:x="18" fg:w="1"/><text x="1.4173%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="1.1673%" y="853" width="0.0649%" height="15" fill="rgb(218,133,21)" fg:x="18" fg:w="1"/><text x="1.4173%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="1.1673%" y="837" width="0.0649%" height="15" fill="rgb(221,193,43)" fg:x="18" fg:w="1"/><text x="1.4173%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="1.1673%" y="821" width="0.0649%" height="15" fill="rgb(240,128,52)" fg:x="18" fg:w="1"/><text x="1.4173%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="1.1673%" y="805" width="0.0649%" height="15" fill="rgb(253,114,12)" fg:x="18" fg:w="1"/><text x="1.4173%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="1.1673%" y="789" width="0.0649%" height="15" fill="rgb(215,223,47)" fg:x="18" fg:w="1"/><text x="1.4173%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="1.1673%" y="773" width="0.0649%" height="15" fill="rgb(248,225,23)" fg:x="18" fg:w="1"/><text x="1.4173%" y="783.50"></text></g><g><title>core::cmp::min (1 samples, 0.06%)</title><rect x="1.1673%" y="757" width="0.0649%" height="15" fill="rgb(250,108,0)" fg:x="18" fg:w="1"/><text x="1.4173%" y="767.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.06%)</title><rect x="1.1673%" y="741" width="0.0649%" height="15" fill="rgb(228,208,7)" fg:x="18" fg:w="1"/><text x="1.4173%" y="751.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.06%)</title><rect x="1.1673%" y="725" width="0.0649%" height="15" fill="rgb(244,45,10)" fg:x="18" fg:w="1"/><text x="1.4173%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.1673%" y="709" width="0.0649%" height="15" fill="rgb(207,125,25)" fg:x="18" fg:w="1"/><text x="1.4173%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.1673%" y="693" width="0.0649%" height="15" fill="rgb(210,195,18)" fg:x="18" fg:w="1"/><text x="1.4173%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.1673%" y="677" width="0.0649%" height="15" fill="rgb(249,80,12)" fg:x="18" fg:w="1"/><text x="1.4173%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="1.2322%" y="965" width="0.0649%" height="15" fill="rgb(221,65,9)" fg:x="19" fg:w="1"/><text x="1.4822%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="1.2322%" y="949" width="0.0649%" height="15" fill="rgb(235,49,36)" fg:x="19" fg:w="1"/><text x="1.4822%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="1.2322%" y="933" width="0.0649%" height="15" fill="rgb(225,32,20)" fg:x="19" fg:w="1"/><text x="1.4822%" y="943.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="1.2322%" y="917" width="0.0649%" height="15" fill="rgb(215,141,46)" fg:x="19" fg:w="1"/><text x="1.4822%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="1.2322%" y="901" width="0.0649%" height="15" fill="rgb(250,160,47)" fg:x="19" fg:w="1"/><text x="1.4822%" y="911.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="1.2322%" y="885" width="0.0649%" height="15" fill="rgb(216,222,40)" fg:x="19" fg:w="1"/><text x="1.4822%" y="895.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="1.2322%" y="869" width="0.0649%" height="15" fill="rgb(234,217,39)" fg:x="19" fg:w="1"/><text x="1.4822%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="1.2322%" y="853" width="0.0649%" height="15" fill="rgb(207,178,40)" fg:x="19" fg:w="1"/><text x="1.4822%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="1.2322%" y="837" width="0.0649%" height="15" fill="rgb(221,136,13)" fg:x="19" fg:w="1"/><text x="1.4822%" y="847.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="1.2322%" y="821" width="0.0649%" height="15" fill="rgb(249,199,10)" fg:x="19" fg:w="1"/><text x="1.4822%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.2322%" y="805" width="0.0649%" height="15" fill="rgb(249,222,13)" fg:x="19" fg:w="1"/><text x="1.4822%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.2322%" y="789" width="0.0649%" height="15" fill="rgb(244,185,38)" fg:x="19" fg:w="1"/><text x="1.4822%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.2322%" y="773" width="0.0649%" height="15" fill="rgb(236,202,9)" fg:x="19" fg:w="1"/><text x="1.4822%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="1.2322%" y="1029" width="0.1297%" height="15" fill="rgb(250,229,37)" fg:x="19" fg:w="2"/><text x="1.4822%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="1.2322%" y="1013" width="0.1297%" height="15" fill="rgb(206,174,23)" fg:x="19" fg:w="2"/><text x="1.4822%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="1.2322%" y="997" width="0.1297%" height="15" fill="rgb(211,33,43)" fg:x="19" fg:w="2"/><text x="1.4822%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="1.2322%" y="981" width="0.1297%" height="15" fill="rgb(245,58,50)" fg:x="19" fg:w="2"/><text x="1.4822%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="1.2970%" y="965" width="0.0649%" height="15" fill="rgb(244,68,36)" fg:x="20" fg:w="1"/><text x="1.5470%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="1.2970%" y="949" width="0.0649%" height="15" fill="rgb(232,229,15)" fg:x="20" fg:w="1"/><text x="1.5470%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="1.2970%" y="933" width="0.0649%" height="15" fill="rgb(254,30,23)" fg:x="20" fg:w="1"/><text x="1.5470%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="1.2970%" y="917" width="0.0649%" height="15" fill="rgb(235,160,14)" fg:x="20" fg:w="1"/><text x="1.5470%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="1.2970%" y="901" width="0.0649%" height="15" fill="rgb(212,155,44)" fg:x="20" fg:w="1"/><text x="1.5470%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="1.2970%" y="885" width="0.0649%" height="15" fill="rgb(226,2,50)" fg:x="20" fg:w="1"/><text x="1.5470%" y="895.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="1.2970%" y="869" width="0.0649%" height="15" fill="rgb(234,177,6)" fg:x="20" fg:w="1"/><text x="1.5470%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="1.2970%" y="853" width="0.0649%" height="15" fill="rgb(217,24,9)" fg:x="20" fg:w="1"/><text x="1.5470%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="1.2970%" y="837" width="0.0649%" height="15" fill="rgb(220,13,46)" fg:x="20" fg:w="1"/><text x="1.5470%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="1.2970%" y="821" width="0.0649%" height="15" fill="rgb(239,221,27)" fg:x="20" fg:w="1"/><text x="1.5470%" y="831.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="1.2970%" y="805" width="0.0649%" height="15" fill="rgb(222,198,25)" fg:x="20" fg:w="1"/><text x="1.5470%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="1.2970%" y="789" width="0.0649%" height="15" fill="rgb(211,99,13)" fg:x="20" fg:w="1"/><text x="1.5470%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="1.2970%" y="773" width="0.0649%" height="15" fill="rgb(232,111,31)" fg:x="20" fg:w="1"/><text x="1.5470%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.2970%" y="757" width="0.0649%" height="15" fill="rgb(245,82,37)" fg:x="20" fg:w="1"/><text x="1.5470%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.2970%" y="741" width="0.0649%" height="15" fill="rgb(227,149,46)" fg:x="20" fg:w="1"/><text x="1.5470%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.2970%" y="725" width="0.0649%" height="15" fill="rgb(218,36,50)" fg:x="20" fg:w="1"/><text x="1.5470%" y="735.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="1.3619%" y="821" width="0.0649%" height="15" fill="rgb(226,80,48)" fg:x="21" fg:w="1"/><text x="1.6119%" y="831.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="1.3619%" y="805" width="0.0649%" height="15" fill="rgb(238,224,15)" fg:x="21" fg:w="1"/><text x="1.6119%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="1.3619%" y="789" width="0.0649%" height="15" fill="rgb(241,136,10)" fg:x="21" fg:w="1"/><text x="1.6119%" y="799.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="1.3619%" y="773" width="0.0649%" height="15" fill="rgb(208,32,45)" fg:x="21" fg:w="1"/><text x="1.6119%" y="783.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="1.3619%" y="757" width="0.0649%" height="15" fill="rgb(207,135,9)" fg:x="21" fg:w="1"/><text x="1.6119%" y="767.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="1.3619%" y="741" width="0.0649%" height="15" fill="rgb(206,86,44)" fg:x="21" fg:w="1"/><text x="1.6119%" y="751.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="1.3619%" y="725" width="0.0649%" height="15" fill="rgb(245,177,15)" fg:x="21" fg:w="1"/><text x="1.6119%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.3619%" y="709" width="0.0649%" height="15" fill="rgb(206,64,50)" fg:x="21" fg:w="1"/><text x="1.6119%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.3619%" y="693" width="0.0649%" height="15" fill="rgb(234,36,40)" fg:x="21" fg:w="1"/><text x="1.6119%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.3619%" y="677" width="0.0649%" height="15" fill="rgb(213,64,8)" fg:x="21" fg:w="1"/><text x="1.6119%" y="687.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="1.3619%" y="997" width="0.1297%" height="15" fill="rgb(210,75,36)" fg:x="21" fg:w="2"/><text x="1.6119%" y="1007.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="1.3619%" y="981" width="0.1297%" height="15" fill="rgb(229,88,21)" fg:x="21" fg:w="2"/><text x="1.6119%" y="991.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="1.3619%" y="965" width="0.1297%" height="15" fill="rgb(252,204,47)" fg:x="21" fg:w="2"/><text x="1.6119%" y="975.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="1.3619%" y="949" width="0.1297%" height="15" fill="rgb(208,77,27)" fg:x="21" fg:w="2"/><text x="1.6119%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="1.3619%" y="933" width="0.1297%" height="15" fill="rgb(221,76,26)" fg:x="21" fg:w="2"/><text x="1.6119%" y="943.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="1.3619%" y="917" width="0.1297%" height="15" fill="rgb(225,139,18)" fg:x="21" fg:w="2"/><text x="1.6119%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="1.3619%" y="901" width="0.1297%" height="15" fill="rgb(230,137,11)" fg:x="21" fg:w="2"/><text x="1.6119%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="1.3619%" y="885" width="0.1297%" height="15" fill="rgb(212,28,1)" fg:x="21" fg:w="2"/><text x="1.6119%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="1.3619%" y="869" width="0.1297%" height="15" fill="rgb(248,164,17)" fg:x="21" fg:w="2"/><text x="1.6119%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="1.3619%" y="853" width="0.1297%" height="15" fill="rgb(222,171,42)" fg:x="21" fg:w="2"/><text x="1.6119%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="1.3619%" y="837" width="0.1297%" height="15" fill="rgb(243,84,45)" fg:x="21" fg:w="2"/><text x="1.6119%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.4267%" y="821" width="0.0649%" height="15" fill="rgb(252,49,23)" fg:x="22" fg:w="1"/><text x="1.6767%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.4267%" y="805" width="0.0649%" height="15" fill="rgb(215,19,7)" fg:x="22" fg:w="1"/><text x="1.6767%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.4267%" y="789" width="0.0649%" height="15" fill="rgb(238,81,41)" fg:x="22" fg:w="1"/><text x="1.6767%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="1.4916%" y="869" width="0.0649%" height="15" fill="rgb(210,199,37)" fg:x="23" fg:w="1"/><text x="1.7416%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="1.4916%" y="853" width="0.0649%" height="15" fill="rgb(244,192,49)" fg:x="23" fg:w="1"/><text x="1.7416%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="1.4916%" y="837" width="0.0649%" height="15" fill="rgb(226,211,11)" fg:x="23" fg:w="1"/><text x="1.7416%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="1.4916%" y="821" width="0.0649%" height="15" fill="rgb(236,162,54)" fg:x="23" fg:w="1"/><text x="1.7416%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.4916%" y="805" width="0.0649%" height="15" fill="rgb(220,229,9)" fg:x="23" fg:w="1"/><text x="1.7416%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.4916%" y="789" width="0.0649%" height="15" fill="rgb(250,87,22)" fg:x="23" fg:w="1"/><text x="1.7416%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.4916%" y="773" width="0.0649%" height="15" fill="rgb(239,43,17)" fg:x="23" fg:w="1"/><text x="1.7416%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="1.4916%" y="981" width="0.1297%" height="15" fill="rgb(231,177,25)" fg:x="23" fg:w="2"/><text x="1.7416%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="1.4916%" y="965" width="0.1297%" height="15" fill="rgb(219,179,1)" fg:x="23" fg:w="2"/><text x="1.7416%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="1.4916%" y="949" width="0.1297%" height="15" fill="rgb(238,219,53)" fg:x="23" fg:w="2"/><text x="1.7416%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="1.4916%" y="933" width="0.1297%" height="15" fill="rgb(232,167,36)" fg:x="23" fg:w="2"/><text x="1.7416%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="1.4916%" y="917" width="0.1297%" height="15" fill="rgb(244,19,51)" fg:x="23" fg:w="2"/><text x="1.7416%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="1.4916%" y="901" width="0.1297%" height="15" fill="rgb(224,6,22)" fg:x="23" fg:w="2"/><text x="1.7416%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="1.4916%" y="885" width="0.1297%" height="15" fill="rgb(224,145,5)" fg:x="23" fg:w="2"/><text x="1.7416%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="1.5564%" y="869" width="0.0649%" height="15" fill="rgb(234,130,49)" fg:x="24" fg:w="1"/><text x="1.8064%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="1.5564%" y="853" width="0.0649%" height="15" fill="rgb(254,6,2)" fg:x="24" fg:w="1"/><text x="1.8064%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="1.5564%" y="837" width="0.0649%" height="15" fill="rgb(208,96,46)" fg:x="24" fg:w="1"/><text x="1.8064%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="1.5564%" y="821" width="0.0649%" height="15" fill="rgb(239,3,39)" fg:x="24" fg:w="1"/><text x="1.8064%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="1.5564%" y="805" width="0.0649%" height="15" fill="rgb(233,210,1)" fg:x="24" fg:w="1"/><text x="1.8064%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="1.5564%" y="789" width="0.0649%" height="15" fill="rgb(244,137,37)" fg:x="24" fg:w="1"/><text x="1.8064%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="1.5564%" y="773" width="0.0649%" height="15" fill="rgb(240,136,2)" fg:x="24" fg:w="1"/><text x="1.8064%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="1.5564%" y="757" width="0.0649%" height="15" fill="rgb(239,18,37)" fg:x="24" fg:w="1"/><text x="1.8064%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.5564%" y="741" width="0.0649%" height="15" fill="rgb(218,185,22)" fg:x="24" fg:w="1"/><text x="1.8064%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.5564%" y="725" width="0.0649%" height="15" fill="rgb(225,218,4)" fg:x="24" fg:w="1"/><text x="1.8064%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.5564%" y="709" width="0.0649%" height="15" fill="rgb(230,182,32)" fg:x="24" fg:w="1"/><text x="1.8064%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.6213%" y="917" width="0.0649%" height="15" fill="rgb(242,56,43)" fg:x="25" fg:w="1"/><text x="1.8713%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.6213%" y="901" width="0.0649%" height="15" fill="rgb(233,99,24)" fg:x="25" fg:w="1"/><text x="1.8713%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.6213%" y="885" width="0.0649%" height="15" fill="rgb(234,209,42)" fg:x="25" fg:w="1"/><text x="1.8713%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.6861%" y="901" width="0.0649%" height="15" fill="rgb(227,7,12)" fg:x="26" fg:w="1"/><text x="1.9361%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.6861%" y="885" width="0.0649%" height="15" fill="rgb(245,203,43)" fg:x="26" fg:w="1"/><text x="1.9361%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.6861%" y="869" width="0.0649%" height="15" fill="rgb(238,205,33)" fg:x="26" fg:w="1"/><text x="1.9361%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="1.7510%" y="773" width="0.1297%" height="15" fill="rgb(231,56,7)" fg:x="27" fg:w="2"/><text x="2.0010%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="1.7510%" y="757" width="0.1297%" height="15" fill="rgb(244,186,29)" fg:x="27" fg:w="2"/><text x="2.0010%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="1.7510%" y="741" width="0.1297%" height="15" fill="rgb(234,111,31)" fg:x="27" fg:w="2"/><text x="2.0010%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.8807%" y="661" width="0.0649%" height="15" fill="rgb(241,149,10)" fg:x="29" fg:w="1"/><text x="2.1307%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.8807%" y="645" width="0.0649%" height="15" fill="rgb(249,206,44)" fg:x="29" fg:w="1"/><text x="2.1307%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.8807%" y="629" width="0.0649%" height="15" fill="rgb(251,153,30)" fg:x="29" fg:w="1"/><text x="2.1307%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="1.8807%" y="725" width="0.1297%" height="15" fill="rgb(239,152,38)" fg:x="29" fg:w="2"/><text x="2.1307%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="1.8807%" y="709" width="0.1297%" height="15" fill="rgb(249,139,47)" fg:x="29" fg:w="2"/><text x="2.1307%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="1.8807%" y="693" width="0.1297%" height="15" fill="rgb(244,64,35)" fg:x="29" fg:w="2"/><text x="2.1307%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="1.8807%" y="677" width="0.1297%" height="15" fill="rgb(216,46,15)" fg:x="29" fg:w="2"/><text x="2.1307%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="1.9455%" y="661" width="0.0649%" height="15" fill="rgb(250,74,19)" fg:x="30" fg:w="1"/><text x="2.1955%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="1.9455%" y="645" width="0.0649%" height="15" fill="rgb(249,42,33)" fg:x="30" fg:w="1"/><text x="2.1955%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="1.9455%" y="629" width="0.0649%" height="15" fill="rgb(242,149,17)" fg:x="30" fg:w="1"/><text x="2.1955%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="1.9455%" y="613" width="0.0649%" height="15" fill="rgb(244,29,21)" fg:x="30" fg:w="1"/><text x="2.1955%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="1.9455%" y="597" width="0.0649%" height="15" fill="rgb(220,130,37)" fg:x="30" fg:w="1"/><text x="2.1955%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.0104%" y="661" width="0.0649%" height="15" fill="rgb(211,67,2)" fg:x="31" fg:w="1"/><text x="2.2604%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.0104%" y="645" width="0.0649%" height="15" fill="rgb(235,68,52)" fg:x="31" fg:w="1"/><text x="2.2604%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.0104%" y="629" width="0.0649%" height="15" fill="rgb(246,142,3)" fg:x="31" fg:w="1"/><text x="2.2604%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.0752%" y="549" width="0.0649%" height="15" fill="rgb(241,25,7)" fg:x="32" fg:w="1"/><text x="2.3252%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.0752%" y="533" width="0.0649%" height="15" fill="rgb(242,119,39)" fg:x="32" fg:w="1"/><text x="2.3252%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.0752%" y="517" width="0.0649%" height="15" fill="rgb(241,98,45)" fg:x="32" fg:w="1"/><text x="2.3252%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="2.0752%" y="613" width="0.1297%" height="15" fill="rgb(254,28,30)" fg:x="32" fg:w="2"/><text x="2.3252%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="2.0752%" y="597" width="0.1297%" height="15" fill="rgb(241,142,54)" fg:x="32" fg:w="2"/><text x="2.3252%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="2.0752%" y="581" width="0.1297%" height="15" fill="rgb(222,85,15)" fg:x="32" fg:w="2"/><text x="2.3252%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="2.0752%" y="565" width="0.1297%" height="15" fill="rgb(210,85,47)" fg:x="32" fg:w="2"/><text x="2.3252%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="2.1401%" y="549" width="0.0649%" height="15" fill="rgb(224,206,25)" fg:x="33" fg:w="1"/><text x="2.3901%" y="559.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="2.1401%" y="533" width="0.0649%" height="15" fill="rgb(243,201,19)" fg:x="33" fg:w="1"/><text x="2.3901%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="2.1401%" y="517" width="0.0649%" height="15" fill="rgb(236,59,4)" fg:x="33" fg:w="1"/><text x="2.3901%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="2.1401%" y="501" width="0.0649%" height="15" fill="rgb(254,179,45)" fg:x="33" fg:w="1"/><text x="2.3901%" y="511.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="2.1401%" y="485" width="0.0649%" height="15" fill="rgb(226,14,10)" fg:x="33" fg:w="1"/><text x="2.3901%" y="495.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="2.1401%" y="469" width="0.0649%" height="15" fill="rgb(244,27,41)" fg:x="33" fg:w="1"/><text x="2.3901%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.1401%" y="453" width="0.0649%" height="15" fill="rgb(235,35,32)" fg:x="33" fg:w="1"/><text x="2.3901%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.1401%" y="437" width="0.0649%" height="15" fill="rgb(218,68,31)" fg:x="33" fg:w="1"/><text x="2.3901%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.1401%" y="421" width="0.0649%" height="15" fill="rgb(207,120,37)" fg:x="33" fg:w="1"/><text x="2.3901%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="2.0752%" y="629" width="0.1946%" height="15" fill="rgb(227,98,0)" fg:x="32" fg:w="3"/><text x="2.3252%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="2.2049%" y="613" width="0.0649%" height="15" fill="rgb(207,7,3)" fg:x="34" fg:w="1"/><text x="2.4549%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="2.2049%" y="597" width="0.0649%" height="15" fill="rgb(206,98,19)" fg:x="34" fg:w="1"/><text x="2.4549%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="2.2049%" y="581" width="0.0649%" height="15" fill="rgb(217,5,26)" fg:x="34" fg:w="1"/><text x="2.4549%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="2.2049%" y="565" width="0.0649%" height="15" fill="rgb(235,190,38)" fg:x="34" fg:w="1"/><text x="2.4549%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="2.2049%" y="549" width="0.0649%" height="15" fill="rgb(247,86,24)" fg:x="34" fg:w="1"/><text x="2.4549%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="2.2049%" y="533" width="0.0649%" height="15" fill="rgb(205,101,16)" fg:x="34" fg:w="1"/><text x="2.4549%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="2.2049%" y="517" width="0.0649%" height="15" fill="rgb(246,168,33)" fg:x="34" fg:w="1"/><text x="2.4549%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="2.2049%" y="501" width="0.0649%" height="15" fill="rgb(231,114,1)" fg:x="34" fg:w="1"/><text x="2.4549%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="2.2049%" y="485" width="0.0649%" height="15" fill="rgb(207,184,53)" fg:x="34" fg:w="1"/><text x="2.4549%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="2.2049%" y="469" width="0.0649%" height="15" fill="rgb(224,95,51)" fg:x="34" fg:w="1"/><text x="2.4549%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="2.2049%" y="453" width="0.0649%" height="15" fill="rgb(212,188,45)" fg:x="34" fg:w="1"/><text x="2.4549%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="2.2049%" y="437" width="0.0649%" height="15" fill="rgb(223,154,38)" fg:x="34" fg:w="1"/><text x="2.4549%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="2.2049%" y="421" width="0.0649%" height="15" fill="rgb(251,22,52)" fg:x="34" fg:w="1"/><text x="2.4549%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="2.2049%" y="405" width="0.0649%" height="15" fill="rgb(229,209,22)" fg:x="34" fg:w="1"/><text x="2.4549%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="2.2049%" y="389" width="0.0649%" height="15" fill="rgb(234,138,34)" fg:x="34" fg:w="1"/><text x="2.4549%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.2049%" y="373" width="0.0649%" height="15" fill="rgb(212,95,11)" fg:x="34" fg:w="1"/><text x="2.4549%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.2049%" y="357" width="0.0649%" height="15" fill="rgb(240,179,47)" fg:x="34" fg:w="1"/><text x="2.4549%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.2049%" y="341" width="0.0649%" height="15" fill="rgb(240,163,11)" fg:x="34" fg:w="1"/><text x="2.4549%" y="351.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="2.0104%" y="693" width="0.3243%" height="15" fill="rgb(236,37,12)" fg:x="31" fg:w="5"/><text x="2.2604%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="2.0104%" y="677" width="0.3243%" height="15" fill="rgb(232,164,16)" fg:x="31" fg:w="5"/><text x="2.2604%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="2.0752%" y="661" width="0.2594%" height="15" fill="rgb(244,205,15)" fg:x="32" fg:w="4"/><text x="2.3252%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="2.0752%" y="645" width="0.2594%" height="15" fill="rgb(223,117,47)" fg:x="32" fg:w="4"/><text x="2.3252%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.2698%" y="629" width="0.0649%" height="15" fill="rgb(244,107,35)" fg:x="35" fg:w="1"/><text x="2.5198%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.2698%" y="613" width="0.0649%" height="15" fill="rgb(205,140,8)" fg:x="35" fg:w="1"/><text x="2.5198%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.2698%" y="597" width="0.0649%" height="15" fill="rgb(228,84,46)" fg:x="35" fg:w="1"/><text x="2.5198%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="1.8807%" y="741" width="0.5188%" height="15" fill="rgb(254,188,9)" fg:x="29" fg:w="8"/><text x="2.1307%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="2.0104%" y="725" width="0.3891%" height="15" fill="rgb(206,112,54)" fg:x="31" fg:w="6"/><text x="2.2604%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="2.0104%" y="709" width="0.3891%" height="15" fill="rgb(216,84,49)" fg:x="31" fg:w="6"/><text x="2.2604%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.3346%" y="693" width="0.0649%" height="15" fill="rgb(214,194,35)" fg:x="36" fg:w="1"/><text x="2.5846%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.3346%" y="677" width="0.0649%" height="15" fill="rgb(249,28,3)" fg:x="36" fg:w="1"/><text x="2.5846%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.3346%" y="661" width="0.0649%" height="15" fill="rgb(222,56,52)" fg:x="36" fg:w="1"/><text x="2.5846%" y="671.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (12 samples, 0.78%)</title><rect x="1.6861%" y="917" width="0.7782%" height="15" fill="rgb(245,217,50)" fg:x="26" fg:w="12"/><text x="1.9361%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (11 samples, 0.71%)</title><rect x="1.7510%" y="901" width="0.7134%" height="15" fill="rgb(213,201,24)" fg:x="27" fg:w="11"/><text x="2.0010%" y="911.50"></text></g><g><title>bincode::internal::deserialize (11 samples, 0.71%)</title><rect x="1.7510%" y="885" width="0.7134%" height="15" fill="rgb(248,116,28)" fg:x="27" fg:w="11"/><text x="2.0010%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (11 samples, 0.71%)</title><rect x="1.7510%" y="869" width="0.7134%" height="15" fill="rgb(219,72,43)" fg:x="27" fg:w="11"/><text x="2.0010%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="1.7510%" y="853" width="0.7134%" height="15" fill="rgb(209,138,14)" fg:x="27" fg:w="11"/><text x="2.0010%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (11 samples, 0.71%)</title><rect x="1.7510%" y="837" width="0.7134%" height="15" fill="rgb(222,18,33)" fg:x="27" fg:w="11"/><text x="2.0010%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 0.71%)</title><rect x="1.7510%" y="821" width="0.7134%" height="15" fill="rgb(213,199,7)" fg:x="27" fg:w="11"/><text x="2.0010%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11 samples, 0.71%)</title><rect x="1.7510%" y="805" width="0.7134%" height="15" fill="rgb(250,110,10)" fg:x="27" fg:w="11"/><text x="2.0010%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (11 samples, 0.71%)</title><rect x="1.7510%" y="789" width="0.7134%" height="15" fill="rgb(248,123,6)" fg:x="27" fg:w="11"/><text x="2.0010%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="1.8807%" y="773" width="0.5837%" height="15" fill="rgb(206,91,31)" fg:x="29" fg:w="9"/><text x="2.1307%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="1.8807%" y="757" width="0.5837%" height="15" fill="rgb(211,154,13)" fg:x="29" fg:w="9"/><text x="2.1307%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.3995%" y="741" width="0.0649%" height="15" fill="rgb(225,148,7)" fg:x="37" fg:w="1"/><text x="2.6495%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.3995%" y="725" width="0.0649%" height="15" fill="rgb(220,160,43)" fg:x="37" fg:w="1"/><text x="2.6495%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.3995%" y="709" width="0.0649%" height="15" fill="rgb(213,52,39)" fg:x="37" fg:w="1"/><text x="2.6495%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (14 samples, 0.91%)</title><rect x="1.6213%" y="965" width="0.9079%" height="15" fill="rgb(243,137,7)" fg:x="25" fg:w="14"/><text x="1.8713%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (14 samples, 0.91%)</title><rect x="1.6213%" y="949" width="0.9079%" height="15" fill="rgb(230,79,13)" fg:x="25" fg:w="14"/><text x="1.8713%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (14 samples, 0.91%)</title><rect x="1.6213%" y="933" width="0.9079%" height="15" fill="rgb(247,105,23)" fg:x="25" fg:w="14"/><text x="1.8713%" y="943.50"></text></g><g><title>&lt;utxo::AssetPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="2.4643%" y="917" width="0.0649%" height="15" fill="rgb(223,179,41)" fg:x="38" fg:w="1"/><text x="2.7143%" y="927.50"></text></g><g><title>&lt;utxo::UtxoPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="2.4643%" y="901" width="0.0649%" height="15" fill="rgb(218,9,34)" fg:x="38" fg:w="1"/><text x="2.7143%" y="911.50"></text></g><g><title>&lt;utxo::TxPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="2.4643%" y="885" width="0.0649%" height="15" fill="rgb(222,106,8)" fg:x="38" fg:w="1"/><text x="2.7143%" y="895.50"></text></g><g><title>&lt;utxo::BlockPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="2.4643%" y="869" width="0.0649%" height="15" fill="rgb(211,220,0)" fg:x="38" fg:w="1"/><text x="2.7143%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.4643%" y="853" width="0.0649%" height="15" fill="rgb(229,52,16)" fg:x="38" fg:w="1"/><text x="2.7143%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.4643%" y="837" width="0.0649%" height="15" fill="rgb(212,155,18)" fg:x="38" fg:w="1"/><text x="2.7143%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.4643%" y="821" width="0.0649%" height="15" fill="rgb(242,21,14)" fg:x="38" fg:w="1"/><text x="2.7143%" y="831.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (15 samples, 0.97%)</title><rect x="1.6213%" y="981" width="0.9728%" height="15" fill="rgb(222,19,48)" fg:x="25" fg:w="15"/><text x="1.8713%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="2.5292%" y="965" width="0.0649%" height="15" fill="rgb(232,45,27)" fg:x="39" fg:w="1"/><text x="2.7792%" y="975.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="2.5292%" y="949" width="0.0649%" height="15" fill="rgb(249,103,42)" fg:x="39" fg:w="1"/><text x="2.7792%" y="959.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="2.5292%" y="933" width="0.0649%" height="15" fill="rgb(246,81,33)" fg:x="39" fg:w="1"/><text x="2.7792%" y="943.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="2.5292%" y="917" width="0.0649%" height="15" fill="rgb(252,33,42)" fg:x="39" fg:w="1"/><text x="2.7792%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T (1 samples, 0.06%)</title><rect x="2.5292%" y="901" width="0.0649%" height="15" fill="rgb(209,212,41)" fg:x="39" fg:w="1"/><text x="2.7792%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="2.5292%" y="885" width="0.0649%" height="15" fill="rgb(207,154,6)" fg:x="39" fg:w="1"/><text x="2.7792%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_array (1 samples, 0.06%)</title><rect x="2.5292%" y="869" width="0.0649%" height="15" fill="rgb(223,64,47)" fg:x="39" fg:w="1"/><text x="2.7792%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.5292%" y="853" width="0.0649%" height="15" fill="rgb(211,161,38)" fg:x="39" fg:w="1"/><text x="2.7792%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.5292%" y="837" width="0.0649%" height="15" fill="rgb(219,138,40)" fg:x="39" fg:w="1"/><text x="2.7792%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.5292%" y="821" width="0.0649%" height="15" fill="rgb(241,228,46)" fg:x="39" fg:w="1"/><text x="2.7792%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="2.5940%" y="805" width="0.1297%" height="15" fill="rgb(223,209,38)" fg:x="40" fg:w="2"/><text x="2.8440%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="2.5940%" y="789" width="0.1297%" height="15" fill="rgb(236,164,45)" fg:x="40" fg:w="2"/><text x="2.8440%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="2.5940%" y="773" width="0.1297%" height="15" fill="rgb(231,15,5)" fg:x="40" fg:w="2"/><text x="2.8440%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.7237%" y="757" width="0.0649%" height="15" fill="rgb(252,35,15)" fg:x="42" fg:w="1"/><text x="2.9737%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.7237%" y="741" width="0.0649%" height="15" fill="rgb(248,181,18)" fg:x="42" fg:w="1"/><text x="2.9737%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.7237%" y="725" width="0.0649%" height="15" fill="rgb(233,39,42)" fg:x="42" fg:w="1"/><text x="2.9737%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="2.7886%" y="757" width="0.0649%" height="15" fill="rgb(238,110,33)" fg:x="43" fg:w="1"/><text x="3.0386%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="2.7886%" y="741" width="0.0649%" height="15" fill="rgb(233,195,10)" fg:x="43" fg:w="1"/><text x="3.0386%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="2.7886%" y="725" width="0.0649%" height="15" fill="rgb(254,105,3)" fg:x="43" fg:w="1"/><text x="3.0386%" y="735.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="2.7886%" y="709" width="0.0649%" height="15" fill="rgb(221,225,9)" fg:x="43" fg:w="1"/><text x="3.0386%" y="719.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="2.7886%" y="693" width="0.0649%" height="15" fill="rgb(224,227,45)" fg:x="43" fg:w="1"/><text x="3.0386%" y="703.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="2.7886%" y="677" width="0.0649%" height="15" fill="rgb(229,198,43)" fg:x="43" fg:w="1"/><text x="3.0386%" y="687.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="2.7886%" y="661" width="0.0649%" height="15" fill="rgb(206,209,35)" fg:x="43" fg:w="1"/><text x="3.0386%" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="2.7886%" y="645" width="0.0649%" height="15" fill="rgb(245,195,53)" fg:x="43" fg:w="1"/><text x="3.0386%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="2.7886%" y="629" width="0.0649%" height="15" fill="rgb(240,92,26)" fg:x="43" fg:w="1"/><text x="3.0386%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="2.7886%" y="613" width="0.0649%" height="15" fill="rgb(207,40,23)" fg:x="43" fg:w="1"/><text x="3.0386%" y="623.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="2.7886%" y="597" width="0.0649%" height="15" fill="rgb(223,111,35)" fg:x="43" fg:w="1"/><text x="3.0386%" y="607.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="2.7886%" y="581" width="0.0649%" height="15" fill="rgb(229,147,28)" fg:x="43" fg:w="1"/><text x="3.0386%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="2.7886%" y="565" width="0.0649%" height="15" fill="rgb(211,29,28)" fg:x="43" fg:w="1"/><text x="3.0386%" y="575.50"></text></g><g><title>core::fmt::Arguments::new_const (1 samples, 0.06%)</title><rect x="2.7886%" y="549" width="0.0649%" height="15" fill="rgb(228,72,33)" fg:x="43" fg:w="1"/><text x="3.0386%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.7886%" y="533" width="0.0649%" height="15" fill="rgb(205,214,31)" fg:x="43" fg:w="1"/><text x="3.0386%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.7886%" y="517" width="0.0649%" height="15" fill="rgb(224,111,15)" fg:x="43" fg:w="1"/><text x="3.0386%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.7886%" y="501" width="0.0649%" height="15" fill="rgb(253,21,26)" fg:x="43" fg:w="1"/><text x="3.0386%" y="511.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="2.8534%" y="613" width="0.0649%" height="15" fill="rgb(245,139,43)" fg:x="44" fg:w="1"/><text x="3.1034%" y="623.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="2.8534%" y="597" width="0.0649%" height="15" fill="rgb(252,170,7)" fg:x="44" fg:w="1"/><text x="3.1034%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="2.8534%" y="581" width="0.0649%" height="15" fill="rgb(231,118,14)" fg:x="44" fg:w="1"/><text x="3.1034%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.8534%" y="565" width="0.0649%" height="15" fill="rgb(238,83,0)" fg:x="44" fg:w="1"/><text x="3.1034%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.8534%" y="549" width="0.0649%" height="15" fill="rgb(221,39,39)" fg:x="44" fg:w="1"/><text x="3.1034%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.8534%" y="533" width="0.0649%" height="15" fill="rgb(222,119,46)" fg:x="44" fg:w="1"/><text x="3.1034%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="2.8534%" y="645" width="0.1297%" height="15" fill="rgb(222,165,49)" fg:x="44" fg:w="2"/><text x="3.1034%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="2.8534%" y="629" width="0.1297%" height="15" fill="rgb(219,113,52)" fg:x="44" fg:w="2"/><text x="3.1034%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="2.9183%" y="613" width="0.0649%" height="15" fill="rgb(214,7,15)" fg:x="45" fg:w="1"/><text x="3.1683%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.9183%" y="597" width="0.0649%" height="15" fill="rgb(235,32,4)" fg:x="45" fg:w="1"/><text x="3.1683%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.9183%" y="581" width="0.0649%" height="15" fill="rgb(238,90,54)" fg:x="45" fg:w="1"/><text x="3.1683%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.9183%" y="565" width="0.0649%" height="15" fill="rgb(213,208,19)" fg:x="45" fg:w="1"/><text x="3.1683%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="2.9831%" y="405" width="0.0649%" height="15" fill="rgb(233,156,4)" fg:x="46" fg:w="1"/><text x="3.2331%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="2.9831%" y="389" width="0.0649%" height="15" fill="rgb(207,194,5)" fg:x="46" fg:w="1"/><text x="3.2331%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="2.9831%" y="373" width="0.0649%" height="15" fill="rgb(206,111,30)" fg:x="46" fg:w="1"/><text x="3.2331%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="2.9831%" y="533" width="0.1297%" height="15" fill="rgb(243,70,54)" fg:x="46" fg:w="2"/><text x="3.2331%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="2.9831%" y="517" width="0.1297%" height="15" fill="rgb(242,28,8)" fg:x="46" fg:w="2"/><text x="3.2331%" y="527.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="2.9831%" y="501" width="0.1297%" height="15" fill="rgb(219,106,18)" fg:x="46" fg:w="2"/><text x="3.2331%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="2.9831%" y="485" width="0.1297%" height="15" fill="rgb(244,222,10)" fg:x="46" fg:w="2"/><text x="3.2331%" y="495.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="2.9831%" y="469" width="0.1297%" height="15" fill="rgb(236,179,52)" fg:x="46" fg:w="2"/><text x="3.2331%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="2.9831%" y="453" width="0.1297%" height="15" fill="rgb(213,23,39)" fg:x="46" fg:w="2"/><text x="3.2331%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="2.9831%" y="437" width="0.1297%" height="15" fill="rgb(238,48,10)" fg:x="46" fg:w="2"/><text x="3.2331%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="2.9831%" y="421" width="0.1297%" height="15" fill="rgb(251,196,23)" fg:x="46" fg:w="2"/><text x="3.2331%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="3.0480%" y="405" width="0.0649%" height="15" fill="rgb(250,152,24)" fg:x="47" fg:w="1"/><text x="3.2980%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="3.0480%" y="389" width="0.0649%" height="15" fill="rgb(209,150,17)" fg:x="47" fg:w="1"/><text x="3.2980%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="3.0480%" y="373" width="0.0649%" height="15" fill="rgb(234,202,34)" fg:x="47" fg:w="1"/><text x="3.2980%" y="383.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="3.0480%" y="357" width="0.0649%" height="15" fill="rgb(253,148,53)" fg:x="47" fg:w="1"/><text x="3.2980%" y="367.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="3.0480%" y="341" width="0.0649%" height="15" fill="rgb(218,129,16)" fg:x="47" fg:w="1"/><text x="3.2980%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.0480%" y="325" width="0.0649%" height="15" fill="rgb(216,85,19)" fg:x="47" fg:w="1"/><text x="3.2980%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.0480%" y="309" width="0.0649%" height="15" fill="rgb(235,228,7)" fg:x="47" fg:w="1"/><text x="3.2980%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.0480%" y="293" width="0.0649%" height="15" fill="rgb(245,175,0)" fg:x="47" fg:w="1"/><text x="3.2980%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.1128%" y="245" width="0.0649%" height="15" fill="rgb(208,168,36)" fg:x="48" fg:w="1"/><text x="3.3628%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.1128%" y="229" width="0.0649%" height="15" fill="rgb(246,171,24)" fg:x="48" fg:w="1"/><text x="3.3628%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.1128%" y="213" width="0.0649%" height="15" fill="rgb(215,142,24)" fg:x="48" fg:w="1"/><text x="3.3628%" y="223.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (2 samples, 0.13%)</title><rect x="3.1128%" y="341" width="0.1297%" height="15" fill="rgb(250,187,7)" fg:x="48" fg:w="2"/><text x="3.3628%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="3.1128%" y="325" width="0.1297%" height="15" fill="rgb(228,66,33)" fg:x="48" fg:w="2"/><text x="3.3628%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="3.1128%" y="309" width="0.1297%" height="15" fill="rgb(234,215,21)" fg:x="48" fg:w="2"/><text x="3.3628%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="3.1128%" y="293" width="0.1297%" height="15" fill="rgb(222,191,20)" fg:x="48" fg:w="2"/><text x="3.3628%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="3.1128%" y="277" width="0.1297%" height="15" fill="rgb(245,79,54)" fg:x="48" fg:w="2"/><text x="3.3628%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="3.1128%" y="261" width="0.1297%" height="15" fill="rgb(240,10,37)" fg:x="48" fg:w="2"/><text x="3.3628%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="3.1777%" y="245" width="0.0649%" height="15" fill="rgb(214,192,32)" fg:x="49" fg:w="1"/><text x="3.4277%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="3.1777%" y="229" width="0.0649%" height="15" fill="rgb(209,36,54)" fg:x="49" fg:w="1"/><text x="3.4277%" y="239.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.1777%" y="213" width="0.0649%" height="15" fill="rgb(220,10,11)" fg:x="49" fg:w="1"/><text x="3.4277%" y="223.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.1777%" y="197" width="0.0649%" height="15" fill="rgb(221,106,17)" fg:x="49" fg:w="1"/><text x="3.4277%" y="207.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.1777%" y="181" width="0.0649%" height="15" fill="rgb(251,142,44)" fg:x="49" fg:w="1"/><text x="3.4277%" y="191.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="2.9831%" y="629" width="0.3243%" height="15" fill="rgb(238,13,15)" fg:x="46" fg:w="5"/><text x="3.2331%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="2.9831%" y="613" width="0.3243%" height="15" fill="rgb(208,107,27)" fg:x="46" fg:w="5"/><text x="3.2331%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="2.9831%" y="597" width="0.3243%" height="15" fill="rgb(205,136,37)" fg:x="46" fg:w="5"/><text x="3.2331%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.32%)</title><rect x="2.9831%" y="581" width="0.3243%" height="15" fill="rgb(250,205,27)" fg:x="46" fg:w="5"/><text x="3.2331%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.32%)</title><rect x="2.9831%" y="565" width="0.3243%" height="15" fill="rgb(210,80,43)" fg:x="46" fg:w="5"/><text x="3.2331%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="2.9831%" y="549" width="0.3243%" height="15" fill="rgb(247,160,36)" fg:x="46" fg:w="5"/><text x="3.2331%" y="559.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="3.1128%" y="533" width="0.1946%" height="15" fill="rgb(234,13,49)" fg:x="48" fg:w="3"/><text x="3.3628%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="3.1128%" y="517" width="0.1946%" height="15" fill="rgb(234,122,0)" fg:x="48" fg:w="3"/><text x="3.3628%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="3.1128%" y="501" width="0.1946%" height="15" fill="rgb(207,146,38)" fg:x="48" fg:w="3"/><text x="3.3628%" y="511.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="3.1128%" y="485" width="0.1946%" height="15" fill="rgb(207,177,25)" fg:x="48" fg:w="3"/><text x="3.3628%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="3.1128%" y="469" width="0.1946%" height="15" fill="rgb(211,178,42)" fg:x="48" fg:w="3"/><text x="3.3628%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="3.1128%" y="453" width="0.1946%" height="15" fill="rgb(230,69,54)" fg:x="48" fg:w="3"/><text x="3.3628%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="3.1128%" y="437" width="0.1946%" height="15" fill="rgb(214,135,41)" fg:x="48" fg:w="3"/><text x="3.3628%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="3.1128%" y="421" width="0.1946%" height="15" fill="rgb(237,67,25)" fg:x="48" fg:w="3"/><text x="3.3628%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="3.1128%" y="405" width="0.1946%" height="15" fill="rgb(222,189,50)" fg:x="48" fg:w="3"/><text x="3.3628%" y="415.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="3.1128%" y="389" width="0.1946%" height="15" fill="rgb(245,148,34)" fg:x="48" fg:w="3"/><text x="3.3628%" y="399.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="3.1128%" y="373" width="0.1946%" height="15" fill="rgb(222,29,6)" fg:x="48" fg:w="3"/><text x="3.3628%" y="383.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="3.1128%" y="357" width="0.1946%" height="15" fill="rgb(221,189,43)" fg:x="48" fg:w="3"/><text x="3.3628%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="3.2425%" y="341" width="0.0649%" height="15" fill="rgb(207,36,27)" fg:x="50" fg:w="1"/><text x="3.4925%" y="351.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="3.2425%" y="325" width="0.0649%" height="15" fill="rgb(217,90,24)" fg:x="50" fg:w="1"/><text x="3.4925%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="3.2425%" y="309" width="0.0649%" height="15" fill="rgb(224,66,35)" fg:x="50" fg:w="1"/><text x="3.4925%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="3.2425%" y="293" width="0.0649%" height="15" fill="rgb(221,13,50)" fg:x="50" fg:w="1"/><text x="3.4925%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.2425%" y="277" width="0.0649%" height="15" fill="rgb(236,68,49)" fg:x="50" fg:w="1"/><text x="3.4925%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.2425%" y="261" width="0.0649%" height="15" fill="rgb(229,146,28)" fg:x="50" fg:w="1"/><text x="3.4925%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.2425%" y="245" width="0.0649%" height="15" fill="rgb(225,31,38)" fg:x="50" fg:w="1"/><text x="3.4925%" y="255.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="2.8534%" y="677" width="0.5837%" height="15" fill="rgb(250,208,3)" fg:x="44" fg:w="9"/><text x="3.1034%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="2.8534%" y="661" width="0.5837%" height="15" fill="rgb(246,54,23)" fg:x="44" fg:w="9"/><text x="3.1034%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (7 samples, 0.45%)</title><rect x="2.9831%" y="645" width="0.4540%" height="15" fill="rgb(243,76,11)" fg:x="46" fg:w="7"/><text x="3.2331%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="3.3074%" y="629" width="0.1297%" height="15" fill="rgb(245,21,50)" fg:x="51" fg:w="2"/><text x="3.5574%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="3.3074%" y="613" width="0.1297%" height="15" fill="rgb(228,9,43)" fg:x="51" fg:w="2"/><text x="3.5574%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="3.3074%" y="597" width="0.1297%" height="15" fill="rgb(208,100,47)" fg:x="51" fg:w="2"/><text x="3.5574%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (10 samples, 0.65%)</title><rect x="2.8534%" y="741" width="0.6485%" height="15" fill="rgb(232,26,8)" fg:x="44" fg:w="10"/><text x="3.1034%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="2.8534%" y="725" width="0.6485%" height="15" fill="rgb(216,166,38)" fg:x="44" fg:w="10"/><text x="3.1034%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.65%)</title><rect x="2.8534%" y="709" width="0.6485%" height="15" fill="rgb(251,202,51)" fg:x="44" fg:w="10"/><text x="3.1034%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (10 samples, 0.65%)</title><rect x="2.8534%" y="693" width="0.6485%" height="15" fill="rgb(254,216,34)" fg:x="44" fg:w="10"/><text x="3.1034%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.4371%" y="677" width="0.0649%" height="15" fill="rgb(251,32,27)" fg:x="53" fg:w="1"/><text x="3.6871%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.4371%" y="661" width="0.0649%" height="15" fill="rgb(208,127,28)" fg:x="53" fg:w="1"/><text x="3.6871%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.4371%" y="645" width="0.0649%" height="15" fill="rgb(224,137,22)" fg:x="53" fg:w="1"/><text x="3.6871%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13 samples, 0.84%)</title><rect x="2.7237%" y="773" width="0.8431%" height="15" fill="rgb(254,70,32)" fg:x="42" fg:w="13"/><text x="2.9737%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (11 samples, 0.71%)</title><rect x="2.8534%" y="757" width="0.7134%" height="15" fill="rgb(229,75,37)" fg:x="44" fg:w="11"/><text x="3.1034%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.5019%" y="741" width="0.0649%" height="15" fill="rgb(252,64,23)" fg:x="54" fg:w="1"/><text x="3.7519%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.5019%" y="725" width="0.0649%" height="15" fill="rgb(232,162,48)" fg:x="54" fg:w="1"/><text x="3.7519%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.5019%" y="709" width="0.0649%" height="15" fill="rgb(246,160,12)" fg:x="54" fg:w="1"/><text x="3.7519%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="3.5668%" y="773" width="0.0649%" height="15" fill="rgb(247,166,0)" fg:x="55" fg:w="1"/><text x="3.8168%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.5668%" y="757" width="0.0649%" height="15" fill="rgb(249,219,21)" fg:x="55" fg:w="1"/><text x="3.8168%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.5668%" y="741" width="0.0649%" height="15" fill="rgb(205,209,3)" fg:x="55" fg:w="1"/><text x="3.8168%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.5668%" y="725" width="0.0649%" height="15" fill="rgb(243,44,1)" fg:x="55" fg:w="1"/><text x="3.8168%" y="735.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (17 samples, 1.10%)</title><rect x="2.5940%" y="949" width="1.1025%" height="15" fill="rgb(206,159,16)" fg:x="40" fg:w="17"/><text x="2.8440%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (17 samples, 1.10%)</title><rect x="2.5940%" y="933" width="1.1025%" height="15" fill="rgb(244,77,30)" fg:x="40" fg:w="17"/><text x="2.8440%" y="943.50"></text></g><g><title>bincode::internal::deserialize (17 samples, 1.10%)</title><rect x="2.5940%" y="917" width="1.1025%" height="15" fill="rgb(218,69,12)" fg:x="40" fg:w="17"/><text x="2.8440%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (17 samples, 1.10%)</title><rect x="2.5940%" y="901" width="1.1025%" height="15" fill="rgb(212,87,7)" fg:x="40" fg:w="17"/><text x="2.8440%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 1.10%)</title><rect x="2.5940%" y="885" width="1.1025%" height="15" fill="rgb(245,114,25)" fg:x="40" fg:w="17"/><text x="2.8440%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (17 samples, 1.10%)</title><rect x="2.5940%" y="869" width="1.1025%" height="15" fill="rgb(210,61,42)" fg:x="40" fg:w="17"/><text x="2.8440%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (17 samples, 1.10%)</title><rect x="2.5940%" y="853" width="1.1025%" height="15" fill="rgb(211,52,33)" fg:x="40" fg:w="17"/><text x="2.8440%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (17 samples, 1.10%)</title><rect x="2.5940%" y="837" width="1.1025%" height="15" fill="rgb(234,58,33)" fg:x="40" fg:w="17"/><text x="2.8440%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (17 samples, 1.10%)</title><rect x="2.5940%" y="821" width="1.1025%" height="15" fill="rgb(220,115,36)" fg:x="40" fg:w="17"/><text x="2.8440%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (15 samples, 0.97%)</title><rect x="2.7237%" y="805" width="0.9728%" height="15" fill="rgb(243,153,54)" fg:x="42" fg:w="15"/><text x="2.9737%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (15 samples, 0.97%)</title><rect x="2.7237%" y="789" width="0.9728%" height="15" fill="rgb(251,47,18)" fg:x="42" fg:w="15"/><text x="2.9737%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.6316%" y="773" width="0.0649%" height="15" fill="rgb(242,102,42)" fg:x="56" fg:w="1"/><text x="3.8816%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.6316%" y="757" width="0.0649%" height="15" fill="rgb(234,31,38)" fg:x="56" fg:w="1"/><text x="3.8816%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.6316%" y="741" width="0.0649%" height="15" fill="rgb(221,117,51)" fg:x="56" fg:w="1"/><text x="3.8816%" y="751.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (18 samples, 1.17%)</title><rect x="2.5940%" y="981" width="1.1673%" height="15" fill="rgb(212,20,18)" fg:x="40" fg:w="18"/><text x="2.8440%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (18 samples, 1.17%)</title><rect x="2.5940%" y="965" width="1.1673%" height="15" fill="rgb(245,133,36)" fg:x="40" fg:w="18"/><text x="2.8440%" y="975.50"></text></g><g><title>&lt;utxo::AssetPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="3.6965%" y="949" width="0.0649%" height="15" fill="rgb(212,6,19)" fg:x="57" fg:w="1"/><text x="3.9465%" y="959.50"></text></g><g><title>&lt;utxo::UtxoPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="3.6965%" y="933" width="0.0649%" height="15" fill="rgb(218,1,36)" fg:x="57" fg:w="1"/><text x="3.9465%" y="943.50"></text></g><g><title>&lt;utxo::TxPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="3.6965%" y="917" width="0.0649%" height="15" fill="rgb(246,84,54)" fg:x="57" fg:w="1"/><text x="3.9465%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.6965%" y="901" width="0.0649%" height="15" fill="rgb(242,110,6)" fg:x="57" fg:w="1"/><text x="3.9465%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.6965%" y="885" width="0.0649%" height="15" fill="rgb(214,47,5)" fg:x="57" fg:w="1"/><text x="3.9465%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.6965%" y="869" width="0.0649%" height="15" fill="rgb(218,159,25)" fg:x="57" fg:w="1"/><text x="3.9465%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.7613%" y="949" width="0.0649%" height="15" fill="rgb(215,211,28)" fg:x="58" fg:w="1"/><text x="4.0113%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.7613%" y="933" width="0.0649%" height="15" fill="rgb(238,59,32)" fg:x="58" fg:w="1"/><text x="4.0113%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.7613%" y="917" width="0.0649%" height="15" fill="rgb(226,82,3)" fg:x="58" fg:w="1"/><text x="4.0113%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="3.7613%" y="981" width="0.1297%" height="15" fill="rgb(240,164,32)" fg:x="58" fg:w="2"/><text x="4.0113%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="3.7613%" y="965" width="0.1297%" height="15" fill="rgb(232,46,7)" fg:x="58" fg:w="2"/><text x="4.0113%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="3.8262%" y="949" width="0.0649%" height="15" fill="rgb(229,129,53)" fg:x="59" fg:w="1"/><text x="4.0762%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="3.8262%" y="933" width="0.0649%" height="15" fill="rgb(234,188,29)" fg:x="59" fg:w="1"/><text x="4.0762%" y="943.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="3.8262%" y="917" width="0.0649%" height="15" fill="rgb(246,141,4)" fg:x="59" fg:w="1"/><text x="4.0762%" y="927.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="3.8262%" y="901" width="0.0649%" height="15" fill="rgb(229,23,39)" fg:x="59" fg:w="1"/><text x="4.0762%" y="911.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="3.8262%" y="885" width="0.0649%" height="15" fill="rgb(206,12,3)" fg:x="59" fg:w="1"/><text x="4.0762%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="3.8262%" y="869" width="0.0649%" height="15" fill="rgb(252,226,20)" fg:x="59" fg:w="1"/><text x="4.0762%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="3.8262%" y="853" width="0.0649%" height="15" fill="rgb(216,123,35)" fg:x="59" fg:w="1"/><text x="4.0762%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="3.8262%" y="837" width="0.0649%" height="15" fill="rgb(212,68,40)" fg:x="59" fg:w="1"/><text x="4.0762%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="3.8262%" y="821" width="0.0649%" height="15" fill="rgb(254,125,32)" fg:x="59" fg:w="1"/><text x="4.0762%" y="831.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="3.8262%" y="805" width="0.0649%" height="15" fill="rgb(253,97,22)" fg:x="59" fg:w="1"/><text x="4.0762%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="3.8262%" y="789" width="0.0649%" height="15" fill="rgb(241,101,14)" fg:x="59" fg:w="1"/><text x="4.0762%" y="799.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="3.8262%" y="773" width="0.0649%" height="15" fill="rgb(238,103,29)" fg:x="59" fg:w="1"/><text x="4.0762%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="3.8262%" y="757" width="0.0649%" height="15" fill="rgb(233,195,47)" fg:x="59" fg:w="1"/><text x="4.0762%" y="767.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="3.8262%" y="741" width="0.0649%" height="15" fill="rgb(246,218,30)" fg:x="59" fg:w="1"/><text x="4.0762%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="3.8262%" y="725" width="0.0649%" height="15" fill="rgb(219,145,47)" fg:x="59" fg:w="1"/><text x="4.0762%" y="735.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="3.8262%" y="709" width="0.0649%" height="15" fill="rgb(243,12,26)" fg:x="59" fg:w="1"/><text x="4.0762%" y="719.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="3.8262%" y="693" width="0.0649%" height="15" fill="rgb(214,87,16)" fg:x="59" fg:w="1"/><text x="4.0762%" y="703.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="3.8262%" y="677" width="0.0649%" height="15" fill="rgb(208,99,42)" fg:x="59" fg:w="1"/><text x="4.0762%" y="687.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="3.8262%" y="661" width="0.0649%" height="15" fill="rgb(253,99,2)" fg:x="59" fg:w="1"/><text x="4.0762%" y="671.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="3.8262%" y="645" width="0.0649%" height="15" fill="rgb(220,168,23)" fg:x="59" fg:w="1"/><text x="4.0762%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="3.8262%" y="629" width="0.0649%" height="15" fill="rgb(242,38,24)" fg:x="59" fg:w="1"/><text x="4.0762%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="3.8262%" y="613" width="0.0649%" height="15" fill="rgb(225,182,9)" fg:x="59" fg:w="1"/><text x="4.0762%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="3.8262%" y="597" width="0.0649%" height="15" fill="rgb(243,178,37)" fg:x="59" fg:w="1"/><text x="4.0762%" y="607.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="3.8262%" y="581" width="0.0649%" height="15" fill="rgb(232,139,19)" fg:x="59" fg:w="1"/><text x="4.0762%" y="591.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="3.8262%" y="565" width="0.0649%" height="15" fill="rgb(225,201,24)" fg:x="59" fg:w="1"/><text x="4.0762%" y="575.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="3.8262%" y="549" width="0.0649%" height="15" fill="rgb(221,47,46)" fg:x="59" fg:w="1"/><text x="4.0762%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.8262%" y="533" width="0.0649%" height="15" fill="rgb(249,23,13)" fg:x="59" fg:w="1"/><text x="4.0762%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.8262%" y="517" width="0.0649%" height="15" fill="rgb(219,9,5)" fg:x="59" fg:w="1"/><text x="4.0762%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.8262%" y="501" width="0.0649%" height="15" fill="rgb(254,171,16)" fg:x="59" fg:w="1"/><text x="4.0762%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="3.8911%" y="965" width="0.0649%" height="15" fill="rgb(230,171,20)" fg:x="60" fg:w="1"/><text x="4.1411%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.8911%" y="949" width="0.0649%" height="15" fill="rgb(210,71,41)" fg:x="60" fg:w="1"/><text x="4.1411%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.8911%" y="933" width="0.0649%" height="15" fill="rgb(206,173,20)" fg:x="60" fg:w="1"/><text x="4.1411%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.8911%" y="917" width="0.0649%" height="15" fill="rgb(233,88,34)" fg:x="60" fg:w="1"/><text x="4.1411%" y="927.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="3.9559%" y="853" width="0.0649%" height="15" fill="rgb(223,209,46)" fg:x="61" fg:w="1"/><text x="4.2059%" y="863.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="3.9559%" y="837" width="0.0649%" height="15" fill="rgb(250,43,18)" fg:x="61" fg:w="1"/><text x="4.2059%" y="847.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="3.9559%" y="821" width="0.0649%" height="15" fill="rgb(208,13,10)" fg:x="61" fg:w="1"/><text x="4.2059%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="3.9559%" y="805" width="0.0649%" height="15" fill="rgb(212,200,36)" fg:x="61" fg:w="1"/><text x="4.2059%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="3.9559%" y="789" width="0.0649%" height="15" fill="rgb(225,90,30)" fg:x="61" fg:w="1"/><text x="4.2059%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="3.9559%" y="773" width="0.0649%" height="15" fill="rgb(236,182,39)" fg:x="61" fg:w="1"/><text x="4.2059%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="3.9559%" y="757" width="0.0649%" height="15" fill="rgb(212,144,35)" fg:x="61" fg:w="1"/><text x="4.2059%" y="767.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (42 samples, 2.72%)</title><rect x="1.3619%" y="1029" width="2.7237%" height="15" fill="rgb(228,63,44)" fg:x="21" fg:w="42"/><text x="1.6119%" y="1039.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (42 samples, 2.72%)</title><rect x="1.3619%" y="1013" width="2.7237%" height="15" fill="rgb(228,109,6)" fg:x="21" fg:w="42"/><text x="1.6119%" y="1023.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (40 samples, 2.59%)</title><rect x="1.4916%" y="997" width="2.5940%" height="15" fill="rgb(238,117,24)" fg:x="23" fg:w="40"/><text x="1.7416%" y="1007.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (3 samples, 0.19%)</title><rect x="3.8911%" y="981" width="0.1946%" height="15" fill="rgb(242,26,26)" fg:x="60" fg:w="3"/><text x="4.1411%" y="991.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (2 samples, 0.13%)</title><rect x="3.9559%" y="965" width="0.1297%" height="15" fill="rgb(221,92,48)" fg:x="61" fg:w="2"/><text x="4.2059%" y="975.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (2 samples, 0.13%)</title><rect x="3.9559%" y="949" width="0.1297%" height="15" fill="rgb(209,209,32)" fg:x="61" fg:w="2"/><text x="4.2059%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.13%)</title><rect x="3.9559%" y="933" width="0.1297%" height="15" fill="rgb(221,70,22)" fg:x="61" fg:w="2"/><text x="4.2059%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.13%)</title><rect x="3.9559%" y="917" width="0.1297%" height="15" fill="rgb(248,145,5)" fg:x="61" fg:w="2"/><text x="4.2059%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.13%)</title><rect x="3.9559%" y="901" width="0.1297%" height="15" fill="rgb(226,116,26)" fg:x="61" fg:w="2"/><text x="4.2059%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="3.9559%" y="885" width="0.1297%" height="15" fill="rgb(244,5,17)" fg:x="61" fg:w="2"/><text x="4.2059%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="3.9559%" y="869" width="0.1297%" height="15" fill="rgb(252,159,33)" fg:x="61" fg:w="2"/><text x="4.2059%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="4.0208%" y="853" width="0.0649%" height="15" fill="rgb(206,71,0)" fg:x="62" fg:w="1"/><text x="4.2708%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="4.0208%" y="837" width="0.0649%" height="15" fill="rgb(233,118,54)" fg:x="62" fg:w="1"/><text x="4.2708%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="4.0208%" y="821" width="0.0649%" height="15" fill="rgb(234,83,48)" fg:x="62" fg:w="1"/><text x="4.2708%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.0208%" y="805" width="0.0649%" height="15" fill="rgb(228,3,54)" fg:x="62" fg:w="1"/><text x="4.2708%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.0208%" y="789" width="0.0649%" height="15" fill="rgb(226,155,13)" fg:x="62" fg:w="1"/><text x="4.2708%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.0208%" y="773" width="0.0649%" height="15" fill="rgb(241,28,37)" fg:x="62" fg:w="1"/><text x="4.2708%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="4.0208%" y="757" width="0.0649%" height="15" fill="rgb(233,93,10)" fg:x="62" fg:w="1"/><text x="4.2708%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="4.0208%" y="741" width="0.0649%" height="15" fill="rgb(225,113,19)" fg:x="62" fg:w="1"/><text x="4.2708%" y="751.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="4.0208%" y="725" width="0.0649%" height="15" fill="rgb(241,2,18)" fg:x="62" fg:w="1"/><text x="4.2708%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.0208%" y="709" width="0.0649%" height="15" fill="rgb(228,207,21)" fg:x="62" fg:w="1"/><text x="4.2708%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.0208%" y="693" width="0.0649%" height="15" fill="rgb(213,211,35)" fg:x="62" fg:w="1"/><text x="4.2708%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.0208%" y="677" width="0.0649%" height="15" fill="rgb(209,83,10)" fg:x="62" fg:w="1"/><text x="4.2708%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.0856%" y="1013" width="0.0649%" height="15" fill="rgb(209,164,1)" fg:x="63" fg:w="1"/><text x="4.3356%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.0856%" y="997" width="0.0649%" height="15" fill="rgb(213,184,43)" fg:x="63" fg:w="1"/><text x="4.3356%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.0856%" y="981" width="0.0649%" height="15" fill="rgb(231,61,34)" fg:x="63" fg:w="1"/><text x="4.3356%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.1505%" y="997" width="0.0649%" height="15" fill="rgb(235,75,3)" fg:x="64" fg:w="1"/><text x="4.4005%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.1505%" y="981" width="0.0649%" height="15" fill="rgb(220,106,47)" fg:x="64" fg:w="1"/><text x="4.4005%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.1505%" y="965" width="0.0649%" height="15" fill="rgb(210,196,33)" fg:x="64" fg:w="1"/><text x="4.4005%" y="975.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="4.2153%" y="965" width="0.0649%" height="15" fill="rgb(229,154,42)" fg:x="65" fg:w="1"/><text x="4.4653%" y="975.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="4.2153%" y="949" width="0.0649%" height="15" fill="rgb(228,114,26)" fg:x="65" fg:w="1"/><text x="4.4653%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="4.2153%" y="933" width="0.0649%" height="15" fill="rgb(208,144,1)" fg:x="65" fg:w="1"/><text x="4.4653%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="4.2153%" y="917" width="0.0649%" height="15" fill="rgb(239,112,37)" fg:x="65" fg:w="1"/><text x="4.4653%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="4.2153%" y="901" width="0.0649%" height="15" fill="rgb(210,96,50)" fg:x="65" fg:w="1"/><text x="4.4653%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="4.2153%" y="885" width="0.0649%" height="15" fill="rgb(222,178,2)" fg:x="65" fg:w="1"/><text x="4.4653%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="4.2153%" y="869" width="0.0649%" height="15" fill="rgb(226,74,18)" fg:x="65" fg:w="1"/><text x="4.4653%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="4.2153%" y="853" width="0.0649%" height="15" fill="rgb(225,67,54)" fg:x="65" fg:w="1"/><text x="4.4653%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="4.2153%" y="837" width="0.0649%" height="15" fill="rgb(251,92,32)" fg:x="65" fg:w="1"/><text x="4.4653%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="4.2153%" y="821" width="0.0649%" height="15" fill="rgb(228,149,22)" fg:x="65" fg:w="1"/><text x="4.4653%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="4.2153%" y="805" width="0.0649%" height="15" fill="rgb(243,54,13)" fg:x="65" fg:w="1"/><text x="4.4653%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="4.2153%" y="789" width="0.0649%" height="15" fill="rgb(243,180,28)" fg:x="65" fg:w="1"/><text x="4.4653%" y="799.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="4.2153%" y="773" width="0.0649%" height="15" fill="rgb(208,167,24)" fg:x="65" fg:w="1"/><text x="4.4653%" y="783.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="4.2153%" y="757" width="0.0649%" height="15" fill="rgb(245,73,45)" fg:x="65" fg:w="1"/><text x="4.4653%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="4.2153%" y="741" width="0.0649%" height="15" fill="rgb(237,203,48)" fg:x="65" fg:w="1"/><text x="4.4653%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="4.2153%" y="725" width="0.0649%" height="15" fill="rgb(211,197,16)" fg:x="65" fg:w="1"/><text x="4.4653%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="4.2153%" y="709" width="0.0649%" height="15" fill="rgb(243,99,51)" fg:x="65" fg:w="1"/><text x="4.4653%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.2153%" y="693" width="0.0649%" height="15" fill="rgb(215,123,29)" fg:x="65" fg:w="1"/><text x="4.4653%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.2153%" y="677" width="0.0649%" height="15" fill="rgb(239,186,37)" fg:x="65" fg:w="1"/><text x="4.4653%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.2153%" y="661" width="0.0649%" height="15" fill="rgb(252,136,39)" fg:x="65" fg:w="1"/><text x="4.4653%" y="671.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="4.2802%" y="965" width="0.0649%" height="15" fill="rgb(223,213,32)" fg:x="66" fg:w="1"/><text x="4.5302%" y="975.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="4.2802%" y="949" width="0.0649%" height="15" fill="rgb(233,115,5)" fg:x="66" fg:w="1"/><text x="4.5302%" y="959.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="4.2802%" y="933" width="0.0649%" height="15" fill="rgb(207,226,44)" fg:x="66" fg:w="1"/><text x="4.5302%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (1 samples, 0.06%)</title><rect x="4.2802%" y="917" width="0.0649%" height="15" fill="rgb(208,126,0)" fg:x="66" fg:w="1"/><text x="4.5302%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.06%)</title><rect x="4.2802%" y="901" width="0.0649%" height="15" fill="rgb(244,66,21)" fg:x="66" fg:w="1"/><text x="4.5302%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.2802%" y="885" width="0.0649%" height="15" fill="rgb(222,97,12)" fg:x="66" fg:w="1"/><text x="4.5302%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.2802%" y="869" width="0.0649%" height="15" fill="rgb(219,213,19)" fg:x="66" fg:w="1"/><text x="4.5302%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.2802%" y="853" width="0.0649%" height="15" fill="rgb(252,169,30)" fg:x="66" fg:w="1"/><text x="4.5302%" y="863.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (4 samples, 0.26%)</title><rect x="4.1505%" y="1013" width="0.2594%" height="15" fill="rgb(206,32,51)" fg:x="64" fg:w="4"/><text x="4.4005%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (3 samples, 0.19%)</title><rect x="4.2153%" y="997" width="0.1946%" height="15" fill="rgb(250,172,42)" fg:x="65" fg:w="3"/><text x="4.4653%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (3 samples, 0.19%)</title><rect x="4.2153%" y="981" width="0.1946%" height="15" fill="rgb(209,34,43)" fg:x="65" fg:w="3"/><text x="4.4653%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="4.3450%" y="965" width="0.0649%" height="15" fill="rgb(223,11,35)" fg:x="67" fg:w="1"/><text x="4.5950%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="4.3450%" y="949" width="0.0649%" height="15" fill="rgb(251,219,26)" fg:x="67" fg:w="1"/><text x="4.5950%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="4.3450%" y="933" width="0.0649%" height="15" fill="rgb(231,119,3)" fg:x="67" fg:w="1"/><text x="4.5950%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="4.3450%" y="917" width="0.0649%" height="15" fill="rgb(216,97,11)" fg:x="67" fg:w="1"/><text x="4.5950%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.3450%" y="901" width="0.0649%" height="15" fill="rgb(223,59,9)" fg:x="67" fg:w="1"/><text x="4.5950%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.3450%" y="885" width="0.0649%" height="15" fill="rgb(233,93,31)" fg:x="67" fg:w="1"/><text x="4.5950%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.3450%" y="869" width="0.0649%" height="15" fill="rgb(239,81,33)" fg:x="67" fg:w="1"/><text x="4.5950%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="4.4099%" y="917" width="0.0649%" height="15" fill="rgb(213,120,34)" fg:x="68" fg:w="1"/><text x="4.6599%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="4.4099%" y="901" width="0.0649%" height="15" fill="rgb(243,49,53)" fg:x="68" fg:w="1"/><text x="4.6599%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="4.4099%" y="885" width="0.0649%" height="15" fill="rgb(247,216,33)" fg:x="68" fg:w="1"/><text x="4.6599%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="4.4099%" y="869" width="0.0649%" height="15" fill="rgb(226,26,14)" fg:x="68" fg:w="1"/><text x="4.6599%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="4.4099%" y="853" width="0.0649%" height="15" fill="rgb(215,49,53)" fg:x="68" fg:w="1"/><text x="4.6599%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="4.4099%" y="837" width="0.0649%" height="15" fill="rgb(245,162,40)" fg:x="68" fg:w="1"/><text x="4.6599%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="4.4099%" y="821" width="0.0649%" height="15" fill="rgb(229,68,17)" fg:x="68" fg:w="1"/><text x="4.6599%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="4.4099%" y="805" width="0.0649%" height="15" fill="rgb(213,182,10)" fg:x="68" fg:w="1"/><text x="4.6599%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="4.4099%" y="789" width="0.0649%" height="15" fill="rgb(245,125,30)" fg:x="68" fg:w="1"/><text x="4.6599%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.4099%" y="773" width="0.0649%" height="15" fill="rgb(232,202,2)" fg:x="68" fg:w="1"/><text x="4.6599%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.4099%" y="757" width="0.0649%" height="15" fill="rgb(237,140,51)" fg:x="68" fg:w="1"/><text x="4.6599%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.4099%" y="741" width="0.0649%" height="15" fill="rgb(236,157,25)" fg:x="68" fg:w="1"/><text x="4.6599%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (2 samples, 0.13%)</title><rect x="4.4099%" y="981" width="0.1297%" height="15" fill="rgb(219,209,0)" fg:x="68" fg:w="2"/><text x="4.6599%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="4.4099%" y="965" width="0.1297%" height="15" fill="rgb(240,116,54)" fg:x="68" fg:w="2"/><text x="4.6599%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="4.4099%" y="949" width="0.1297%" height="15" fill="rgb(216,10,36)" fg:x="68" fg:w="2"/><text x="4.6599%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="4.4099%" y="933" width="0.1297%" height="15" fill="rgb(222,72,44)" fg:x="68" fg:w="2"/><text x="4.6599%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="4.4747%" y="917" width="0.0649%" height="15" fill="rgb(232,159,9)" fg:x="69" fg:w="1"/><text x="4.7247%" y="927.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="4.4747%" y="901" width="0.0649%" height="15" fill="rgb(210,39,32)" fg:x="69" fg:w="1"/><text x="4.7247%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="4.4747%" y="885" width="0.0649%" height="15" fill="rgb(216,194,45)" fg:x="69" fg:w="1"/><text x="4.7247%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="4.4747%" y="869" width="0.0649%" height="15" fill="rgb(218,18,35)" fg:x="69" fg:w="1"/><text x="4.7247%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.4747%" y="853" width="0.0649%" height="15" fill="rgb(207,83,51)" fg:x="69" fg:w="1"/><text x="4.7247%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.4747%" y="837" width="0.0649%" height="15" fill="rgb(225,63,43)" fg:x="69" fg:w="1"/><text x="4.7247%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.4747%" y="821" width="0.0649%" height="15" fill="rgb(207,57,36)" fg:x="69" fg:w="1"/><text x="4.7247%" y="831.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="4.5396%" y="869" width="0.0649%" height="15" fill="rgb(216,99,33)" fg:x="70" fg:w="1"/><text x="4.7896%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="4.5396%" y="853" width="0.0649%" height="15" fill="rgb(225,42,16)" fg:x="70" fg:w="1"/><text x="4.7896%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.5396%" y="837" width="0.0649%" height="15" fill="rgb(220,201,45)" fg:x="70" fg:w="1"/><text x="4.7896%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.5396%" y="821" width="0.0649%" height="15" fill="rgb(225,33,4)" fg:x="70" fg:w="1"/><text x="4.7896%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.5396%" y="805" width="0.0649%" height="15" fill="rgb(224,33,50)" fg:x="70" fg:w="1"/><text x="4.7896%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="4.5396%" y="965" width="0.1297%" height="15" fill="rgb(246,198,51)" fg:x="70" fg:w="2"/><text x="4.7896%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="4.5396%" y="949" width="0.1297%" height="15" fill="rgb(205,22,4)" fg:x="70" fg:w="2"/><text x="4.7896%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="4.5396%" y="933" width="0.1297%" height="15" fill="rgb(206,3,8)" fg:x="70" fg:w="2"/><text x="4.7896%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="4.5396%" y="917" width="0.1297%" height="15" fill="rgb(251,23,15)" fg:x="70" fg:w="2"/><text x="4.7896%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="4.5396%" y="901" width="0.1297%" height="15" fill="rgb(252,88,28)" fg:x="70" fg:w="2"/><text x="4.7896%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="4.5396%" y="885" width="0.1297%" height="15" fill="rgb(212,127,14)" fg:x="70" fg:w="2"/><text x="4.7896%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="4.6044%" y="869" width="0.0649%" height="15" fill="rgb(247,145,37)" fg:x="71" fg:w="1"/><text x="4.8544%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="4.6044%" y="853" width="0.0649%" height="15" fill="rgb(209,117,53)" fg:x="71" fg:w="1"/><text x="4.8544%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="4.6044%" y="837" width="0.0649%" height="15" fill="rgb(212,90,42)" fg:x="71" fg:w="1"/><text x="4.8544%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="4.6044%" y="821" width="0.0649%" height="15" fill="rgb(218,164,37)" fg:x="71" fg:w="1"/><text x="4.8544%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.6044%" y="805" width="0.0649%" height="15" fill="rgb(246,65,34)" fg:x="71" fg:w="1"/><text x="4.8544%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.6044%" y="789" width="0.0649%" height="15" fill="rgb(231,100,33)" fg:x="71" fg:w="1"/><text x="4.8544%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.6044%" y="773" width="0.0649%" height="15" fill="rgb(228,126,14)" fg:x="71" fg:w="1"/><text x="4.8544%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="4.6044%" y="757" width="0.0649%" height="15" fill="rgb(215,173,21)" fg:x="71" fg:w="1"/><text x="4.8544%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="4.6044%" y="741" width="0.0649%" height="15" fill="rgb(210,6,40)" fg:x="71" fg:w="1"/><text x="4.8544%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="4.6044%" y="725" width="0.0649%" height="15" fill="rgb(212,48,18)" fg:x="71" fg:w="1"/><text x="4.8544%" y="735.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="4.6044%" y="709" width="0.0649%" height="15" fill="rgb(230,214,11)" fg:x="71" fg:w="1"/><text x="4.8544%" y="719.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="4.6044%" y="693" width="0.0649%" height="15" fill="rgb(254,105,39)" fg:x="71" fg:w="1"/><text x="4.8544%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="4.6044%" y="677" width="0.0649%" height="15" fill="rgb(245,158,5)" fg:x="71" fg:w="1"/><text x="4.8544%" y="687.50"></text></g><g><title>core::fmt::Arguments::new_const (1 samples, 0.06%)</title><rect x="4.6044%" y="661" width="0.0649%" height="15" fill="rgb(249,208,11)" fg:x="71" fg:w="1"/><text x="4.8544%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.6044%" y="645" width="0.0649%" height="15" fill="rgb(210,39,28)" fg:x="71" fg:w="1"/><text x="4.8544%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.6044%" y="629" width="0.0649%" height="15" fill="rgb(211,56,53)" fg:x="71" fg:w="1"/><text x="4.8544%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.6044%" y="613" width="0.0649%" height="15" fill="rgb(226,201,30)" fg:x="71" fg:w="1"/><text x="4.8544%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="4.6693%" y="949" width="0.0649%" height="15" fill="rgb(239,101,34)" fg:x="72" fg:w="1"/><text x="4.9193%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="4.6693%" y="933" width="0.0649%" height="15" fill="rgb(226,209,5)" fg:x="72" fg:w="1"/><text x="4.9193%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="4.6693%" y="917" width="0.0649%" height="15" fill="rgb(250,105,47)" fg:x="72" fg:w="1"/><text x="4.9193%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="4.6693%" y="901" width="0.0649%" height="15" fill="rgb(230,72,3)" fg:x="72" fg:w="1"/><text x="4.9193%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="4.6693%" y="885" width="0.0649%" height="15" fill="rgb(232,218,39)" fg:x="72" fg:w="1"/><text x="4.9193%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="4.6693%" y="869" width="0.0649%" height="15" fill="rgb(248,166,6)" fg:x="72" fg:w="1"/><text x="4.9193%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.6693%" y="853" width="0.0649%" height="15" fill="rgb(247,89,20)" fg:x="72" fg:w="1"/><text x="4.9193%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.6693%" y="837" width="0.0649%" height="15" fill="rgb(248,130,54)" fg:x="72" fg:w="1"/><text x="4.9193%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.6693%" y="821" width="0.0649%" height="15" fill="rgb(234,196,4)" fg:x="72" fg:w="1"/><text x="4.9193%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="4.7341%" y="949" width="0.0649%" height="15" fill="rgb(250,143,31)" fg:x="73" fg:w="1"/><text x="4.9841%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_page (1 samples, 0.06%)</title><rect x="4.7341%" y="933" width="0.0649%" height="15" fill="rgb(211,110,34)" fg:x="73" fg:w="1"/><text x="4.9841%" y="943.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="4.7341%" y="917" width="0.0649%" height="15" fill="rgb(215,124,48)" fg:x="73" fg:w="1"/><text x="4.9841%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="4.7341%" y="901" width="0.0649%" height="15" fill="rgb(216,46,13)" fg:x="73" fg:w="1"/><text x="4.9841%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="4.7341%" y="885" width="0.0649%" height="15" fill="rgb(205,184,25)" fg:x="73" fg:w="1"/><text x="4.9841%" y="895.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T (1 samples, 0.06%)</title><rect x="4.7341%" y="869" width="0.0649%" height="15" fill="rgb(228,1,10)" fg:x="73" fg:w="1"/><text x="4.9841%" y="879.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="4.7341%" y="853" width="0.0649%" height="15" fill="rgb(213,116,27)" fg:x="73" fg:w="1"/><text x="4.9841%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.06%)</title><rect x="4.7341%" y="837" width="0.0649%" height="15" fill="rgb(241,95,50)" fg:x="73" fg:w="1"/><text x="4.9841%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.7341%" y="821" width="0.0649%" height="15" fill="rgb(238,48,32)" fg:x="73" fg:w="1"/><text x="4.9841%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.7341%" y="805" width="0.0649%" height="15" fill="rgb(235,113,49)" fg:x="73" fg:w="1"/><text x="4.9841%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.7341%" y="789" width="0.0649%" height="15" fill="rgb(205,127,43)" fg:x="73" fg:w="1"/><text x="4.9841%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="4.7990%" y="949" width="0.0649%" height="15" fill="rgb(250,162,2)" fg:x="74" fg:w="1"/><text x="5.0490%" y="959.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="4.7990%" y="933" width="0.0649%" height="15" fill="rgb(220,13,41)" fg:x="74" fg:w="1"/><text x="5.0490%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.7990%" y="917" width="0.0649%" height="15" fill="rgb(249,221,25)" fg:x="74" fg:w="1"/><text x="5.0490%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.7990%" y="901" width="0.0649%" height="15" fill="rgb(215,208,19)" fg:x="74" fg:w="1"/><text x="5.0490%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.7990%" y="885" width="0.0649%" height="15" fill="rgb(236,175,2)" fg:x="74" fg:w="1"/><text x="5.0490%" y="895.50"></text></g><g><title>redb::tree_store::page_store::base::PageNumber::address_range (1 samples, 0.06%)</title><rect x="4.8638%" y="933" width="0.0649%" height="15" fill="rgb(241,52,2)" fg:x="75" fg:w="1"/><text x="5.1138%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.8638%" y="917" width="0.0649%" height="15" fill="rgb(248,140,14)" fg:x="75" fg:w="1"/><text x="5.1138%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.8638%" y="901" width="0.0649%" height="15" fill="rgb(253,22,42)" fg:x="75" fg:w="1"/><text x="5.1138%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.8638%" y="885" width="0.0649%" height="15" fill="rgb(234,61,47)" fg:x="75" fg:w="1"/><text x="5.1138%" y="895.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="4.9287%" y="869" width="0.0649%" height="15" fill="rgb(208,226,15)" fg:x="76" fg:w="1"/><text x="5.1787%" y="879.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="4.9287%" y="853" width="0.0649%" height="15" fill="rgb(217,221,4)" fg:x="76" fg:w="1"/><text x="5.1787%" y="863.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="4.9287%" y="837" width="0.0649%" height="15" fill="rgb(212,174,34)" fg:x="76" fg:w="1"/><text x="5.1787%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="4.9287%" y="821" width="0.0649%" height="15" fill="rgb(253,83,4)" fg:x="76" fg:w="1"/><text x="5.1787%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.9287%" y="805" width="0.0649%" height="15" fill="rgb(250,195,49)" fg:x="76" fg:w="1"/><text x="5.1787%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.9287%" y="789" width="0.0649%" height="15" fill="rgb(241,192,25)" fg:x="76" fg:w="1"/><text x="5.1787%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.9287%" y="773" width="0.0649%" height="15" fill="rgb(208,124,10)" fg:x="76" fg:w="1"/><text x="5.1787%" y="783.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (10 samples, 0.65%)</title><rect x="4.4099%" y="997" width="0.6485%" height="15" fill="rgb(222,33,0)" fg:x="68" fg:w="10"/><text x="4.6599%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (8 samples, 0.52%)</title><rect x="4.5396%" y="981" width="0.5188%" height="15" fill="rgb(234,209,28)" fg:x="70" fg:w="8"/><text x="4.7896%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (6 samples, 0.39%)</title><rect x="4.6693%" y="965" width="0.3891%" height="15" fill="rgb(224,11,23)" fg:x="72" fg:w="6"/><text x="4.9193%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (3 samples, 0.19%)</title><rect x="4.8638%" y="949" width="0.1946%" height="15" fill="rgb(232,99,1)" fg:x="75" fg:w="3"/><text x="5.1138%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="4.9287%" y="933" width="0.1297%" height="15" fill="rgb(237,95,45)" fg:x="76" fg:w="2"/><text x="5.1787%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="4.9287%" y="917" width="0.1297%" height="15" fill="rgb(208,109,11)" fg:x="76" fg:w="2"/><text x="5.1787%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="4.9287%" y="901" width="0.1297%" height="15" fill="rgb(216,190,48)" fg:x="76" fg:w="2"/><text x="5.1787%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="4.9287%" y="885" width="0.1297%" height="15" fill="rgb(251,171,36)" fg:x="76" fg:w="2"/><text x="5.1787%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="4.9935%" y="869" width="0.0649%" height="15" fill="rgb(230,62,22)" fg:x="77" fg:w="1"/><text x="5.2435%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="4.9935%" y="853" width="0.0649%" height="15" fill="rgb(225,114,35)" fg:x="77" fg:w="1"/><text x="5.2435%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="4.9935%" y="837" width="0.0649%" height="15" fill="rgb(215,118,42)" fg:x="77" fg:w="1"/><text x="5.2435%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="4.9935%" y="821" width="0.0649%" height="15" fill="rgb(243,119,21)" fg:x="77" fg:w="1"/><text x="5.2435%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.9935%" y="805" width="0.0649%" height="15" fill="rgb(252,177,53)" fg:x="77" fg:w="1"/><text x="5.2435%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.9935%" y="789" width="0.0649%" height="15" fill="rgb(237,209,29)" fg:x="77" fg:w="1"/><text x="5.2435%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="4.9935%" y="773" width="0.0649%" height="15" fill="rgb(212,65,23)" fg:x="77" fg:w="1"/><text x="5.2435%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="4.9935%" y="757" width="0.0649%" height="15" fill="rgb(230,222,46)" fg:x="77" fg:w="1"/><text x="5.2435%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="4.9935%" y="741" width="0.0649%" height="15" fill="rgb(215,135,32)" fg:x="77" fg:w="1"/><text x="5.2435%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="4.9935%" y="725" width="0.0649%" height="15" fill="rgb(246,101,22)" fg:x="77" fg:w="1"/><text x="5.2435%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="4.9935%" y="709" width="0.0649%" height="15" fill="rgb(206,107,13)" fg:x="77" fg:w="1"/><text x="5.2435%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="4.9935%" y="693" width="0.0649%" height="15" fill="rgb(250,100,44)" fg:x="77" fg:w="1"/><text x="5.2435%" y="703.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (16 samples, 1.04%)</title><rect x="4.0856%" y="1029" width="1.0376%" height="15" fill="rgb(231,147,38)" fg:x="63" fg:w="16"/><text x="4.3356%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (11 samples, 0.71%)</title><rect x="4.4099%" y="1013" width="0.7134%" height="15" fill="rgb(229,8,40)" fg:x="68" fg:w="11"/><text x="4.6599%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (1 samples, 0.06%)</title><rect x="5.0584%" y="997" width="0.0649%" height="15" fill="rgb(221,135,30)" fg:x="78" fg:w="1"/><text x="5.3084%" y="1007.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (1 samples, 0.06%)</title><rect x="5.0584%" y="981" width="0.0649%" height="15" fill="rgb(249,193,18)" fg:x="78" fg:w="1"/><text x="5.3084%" y="991.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="5.0584%" y="965" width="0.0649%" height="15" fill="rgb(209,133,39)" fg:x="78" fg:w="1"/><text x="5.3084%" y="975.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.06%)</title><rect x="5.0584%" y="949" width="0.0649%" height="15" fill="rgb(232,100,14)" fg:x="78" fg:w="1"/><text x="5.3084%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.0584%" y="933" width="0.0649%" height="15" fill="rgb(224,185,1)" fg:x="78" fg:w="1"/><text x="5.3084%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.0584%" y="917" width="0.0649%" height="15" fill="rgb(223,139,8)" fg:x="78" fg:w="1"/><text x="5.3084%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.0584%" y="901" width="0.0649%" height="15" fill="rgb(232,213,38)" fg:x="78" fg:w="1"/><text x="5.3084%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.1232%" y="885" width="0.0649%" height="15" fill="rgb(207,94,22)" fg:x="79" fg:w="1"/><text x="5.3732%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.1232%" y="869" width="0.0649%" height="15" fill="rgb(219,183,54)" fg:x="79" fg:w="1"/><text x="5.3732%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.1232%" y="853" width="0.0649%" height="15" fill="rgb(216,185,54)" fg:x="79" fg:w="1"/><text x="5.3732%" y="863.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.13%)</title><rect x="5.1232%" y="933" width="0.1297%" height="15" fill="rgb(254,217,39)" fg:x="79" fg:w="2"/><text x="5.3732%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.13%)</title><rect x="5.1232%" y="917" width="0.1297%" height="15" fill="rgb(240,178,23)" fg:x="79" fg:w="2"/><text x="5.3732%" y="927.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_string (2 samples, 0.13%)</title><rect x="5.1232%" y="901" width="0.1297%" height="15" fill="rgb(218,11,47)" fg:x="79" fg:w="2"/><text x="5.3732%" y="911.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_vec (1 samples, 0.06%)</title><rect x="5.1881%" y="885" width="0.0649%" height="15" fill="rgb(218,51,51)" fg:x="80" fg:w="1"/><text x="5.4381%" y="895.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as bincode::de::read::BincodeRead&gt;::get_byte_buffer (1 samples, 0.06%)</title><rect x="5.1881%" y="869" width="0.0649%" height="15" fill="rgb(238,126,27)" fg:x="80" fg:w="1"/><text x="5.4381%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="5.1881%" y="853" width="0.0649%" height="15" fill="rgb(249,202,22)" fg:x="80" fg:w="1"/><text x="5.4381%" y="863.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as bincode::de::read::BincodeRead&gt;::get_byte_buffer::{{closure}} (1 samples, 0.06%)</title><rect x="5.1881%" y="837" width="0.0649%" height="15" fill="rgb(254,195,49)" fg:x="80" fg:w="1"/><text x="5.4381%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="5.1881%" y="821" width="0.0649%" height="15" fill="rgb(208,123,14)" fg:x="80" fg:w="1"/><text x="5.4381%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="5.1881%" y="805" width="0.0649%" height="15" fill="rgb(224,200,8)" fg:x="80" fg:w="1"/><text x="5.4381%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="5.1881%" y="789" width="0.0649%" height="15" fill="rgb(217,61,36)" fg:x="80" fg:w="1"/><text x="5.4381%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="5.1881%" y="773" width="0.0649%" height="15" fill="rgb(206,35,45)" fg:x="80" fg:w="1"/><text x="5.4381%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.06%)</title><rect x="5.1881%" y="757" width="0.0649%" height="15" fill="rgb(217,65,33)" fg:x="80" fg:w="1"/><text x="5.4381%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="5.1881%" y="741" width="0.0649%" height="15" fill="rgb(222,158,48)" fg:x="80" fg:w="1"/><text x="5.4381%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="5.1881%" y="725" width="0.0649%" height="15" fill="rgb(254,2,54)" fg:x="80" fg:w="1"/><text x="5.4381%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.1881%" y="709" width="0.0649%" height="15" fill="rgb(250,143,38)" fg:x="80" fg:w="1"/><text x="5.4381%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.1881%" y="693" width="0.0649%" height="15" fill="rgb(248,25,0)" fg:x="80" fg:w="1"/><text x="5.4381%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.1881%" y="677" width="0.0649%" height="15" fill="rgb(206,152,27)" fg:x="80" fg:w="1"/><text x="5.4381%" y="687.50"></text></g><g><title>utxo::Asset::all (69 samples, 4.47%)</title><rect x="0.8431%" y="1061" width="4.4747%" height="15" fill="rgb(240,77,30)" fg:x="13" fg:w="69"/><text x="1.0931%" y="1071.50">utxo:..</text></g><g><title>utxo::Asset::compose (67 samples, 4.35%)</title><rect x="0.9728%" y="1045" width="4.3450%" height="15" fill="rgb(231,5,3)" fg:x="15" fg:w="67"/><text x="1.2228%" y="1055.50">utxo:..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (3 samples, 0.19%)</title><rect x="5.1232%" y="1029" width="0.1946%" height="15" fill="rgb(207,226,32)" fg:x="79" fg:w="3"/><text x="5.3732%" y="1039.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="5.1232%" y="1013" width="0.1946%" height="15" fill="rgb(222,207,47)" fg:x="79" fg:w="3"/><text x="5.3732%" y="1023.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="5.1232%" y="997" width="0.1946%" height="15" fill="rgb(229,115,45)" fg:x="79" fg:w="3"/><text x="5.3732%" y="1007.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="5.1232%" y="981" width="0.1946%" height="15" fill="rgb(224,191,6)" fg:x="79" fg:w="3"/><text x="5.3732%" y="991.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="5.1232%" y="965" width="0.1946%" height="15" fill="rgb(230,227,24)" fg:x="79" fg:w="3"/><text x="5.3732%" y="975.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="5.1232%" y="949" width="0.1946%" height="15" fill="rgb(228,80,19)" fg:x="79" fg:w="3"/><text x="5.3732%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="933" width="0.0649%" height="15" fill="rgb(247,229,0)" fg:x="81" fg:w="1"/><text x="5.5029%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="5.2529%" y="917" width="0.0649%" height="15" fill="rgb(237,194,15)" fg:x="81" fg:w="1"/><text x="5.5029%" y="927.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="5.2529%" y="901" width="0.0649%" height="15" fill="rgb(219,203,20)" fg:x="81" fg:w="1"/><text x="5.5029%" y="911.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="5.2529%" y="885" width="0.0649%" height="15" fill="rgb(234,128,8)" fg:x="81" fg:w="1"/><text x="5.5029%" y="895.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="5.2529%" y="869" width="0.0649%" height="15" fill="rgb(248,202,8)" fg:x="81" fg:w="1"/><text x="5.5029%" y="879.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="5.2529%" y="853" width="0.0649%" height="15" fill="rgb(206,104,37)" fg:x="81" fg:w="1"/><text x="5.5029%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="837" width="0.0649%" height="15" fill="rgb(223,8,27)" fg:x="81" fg:w="1"/><text x="5.5029%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="821" width="0.0649%" height="15" fill="rgb(216,217,28)" fg:x="81" fg:w="1"/><text x="5.5029%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="5.2529%" y="805" width="0.0649%" height="15" fill="rgb(249,199,1)" fg:x="81" fg:w="1"/><text x="5.5029%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="5.2529%" y="789" width="0.0649%" height="15" fill="rgb(240,85,17)" fg:x="81" fg:w="1"/><text x="5.5029%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="5.2529%" y="773" width="0.0649%" height="15" fill="rgb(206,108,45)" fg:x="81" fg:w="1"/><text x="5.5029%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="5.2529%" y="757" width="0.0649%" height="15" fill="rgb(245,210,41)" fg:x="81" fg:w="1"/><text x="5.5029%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="5.2529%" y="741" width="0.0649%" height="15" fill="rgb(206,13,37)" fg:x="81" fg:w="1"/><text x="5.5029%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="725" width="0.0649%" height="15" fill="rgb(250,61,18)" fg:x="81" fg:w="1"/><text x="5.5029%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="709" width="0.0649%" height="15" fill="rgb(235,172,48)" fg:x="81" fg:w="1"/><text x="5.5029%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="5.2529%" y="693" width="0.0649%" height="15" fill="rgb(249,201,17)" fg:x="81" fg:w="1"/><text x="5.5029%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="5.2529%" y="677" width="0.0649%" height="15" fill="rgb(219,208,6)" fg:x="81" fg:w="1"/><text x="5.5029%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="5.2529%" y="661" width="0.0649%" height="15" fill="rgb(248,31,23)" fg:x="81" fg:w="1"/><text x="5.5029%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="5.2529%" y="645" width="0.0649%" height="15" fill="rgb(245,15,42)" fg:x="81" fg:w="1"/><text x="5.5029%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="5.2529%" y="629" width="0.0649%" height="15" fill="rgb(222,217,39)" fg:x="81" fg:w="1"/><text x="5.5029%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="613" width="0.0649%" height="15" fill="rgb(210,219,27)" fg:x="81" fg:w="1"/><text x="5.5029%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="5.2529%" y="597" width="0.0649%" height="15" fill="rgb(252,166,36)" fg:x="81" fg:w="1"/><text x="5.5029%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="5.2529%" y="581" width="0.0649%" height="15" fill="rgb(245,132,34)" fg:x="81" fg:w="1"/><text x="5.5029%" y="591.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="5.2529%" y="565" width="0.0649%" height="15" fill="rgb(236,54,3)" fg:x="81" fg:w="1"/><text x="5.5029%" y="575.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="5.2529%" y="549" width="0.0649%" height="15" fill="rgb(241,173,43)" fg:x="81" fg:w="1"/><text x="5.5029%" y="559.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="5.2529%" y="533" width="0.0649%" height="15" fill="rgb(215,190,9)" fg:x="81" fg:w="1"/><text x="5.5029%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="5.2529%" y="517" width="0.0649%" height="15" fill="rgb(242,101,16)" fg:x="81" fg:w="1"/><text x="5.5029%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="5.2529%" y="501" width="0.0649%" height="15" fill="rgb(223,190,21)" fg:x="81" fg:w="1"/><text x="5.5029%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="5.2529%" y="485" width="0.0649%" height="15" fill="rgb(215,228,25)" fg:x="81" fg:w="1"/><text x="5.5029%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="5.2529%" y="469" width="0.0649%" height="15" fill="rgb(225,36,22)" fg:x="81" fg:w="1"/><text x="5.5029%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="5.2529%" y="453" width="0.0649%" height="15" fill="rgb(251,106,46)" fg:x="81" fg:w="1"/><text x="5.5029%" y="463.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="5.2529%" y="437" width="0.0649%" height="15" fill="rgb(208,90,1)" fg:x="81" fg:w="1"/><text x="5.5029%" y="447.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="5.2529%" y="421" width="0.0649%" height="15" fill="rgb(243,10,4)" fg:x="81" fg:w="1"/><text x="5.5029%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.2529%" y="405" width="0.0649%" height="15" fill="rgb(212,137,27)" fg:x="81" fg:w="1"/><text x="5.5029%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.2529%" y="389" width="0.0649%" height="15" fill="rgb(231,220,49)" fg:x="81" fg:w="1"/><text x="5.5029%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.2529%" y="373" width="0.0649%" height="15" fill="rgb(237,96,20)" fg:x="81" fg:w="1"/><text x="5.5029%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="5.3178%" y="1029" width="0.0649%" height="15" fill="rgb(239,229,30)" fg:x="82" fg:w="1"/><text x="5.5678%" y="1039.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="5.3178%" y="1013" width="0.0649%" height="15" fill="rgb(219,65,33)" fg:x="82" fg:w="1"/><text x="5.5678%" y="1023.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.3178%" y="997" width="0.0649%" height="15" fill="rgb(243,134,7)" fg:x="82" fg:w="1"/><text x="5.5678%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.3178%" y="981" width="0.0649%" height="15" fill="rgb(216,177,54)" fg:x="82" fg:w="1"/><text x="5.5678%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.3178%" y="965" width="0.0649%" height="15" fill="rgb(211,160,20)" fg:x="82" fg:w="1"/><text x="5.5678%" y="975.50"></text></g><g><title>&lt;redb::multimap_table::MultimapValue&lt;V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="5.3178%" y="1045" width="0.1297%" height="15" fill="rgb(239,85,39)" fg:x="82" fg:w="2"/><text x="5.5678%" y="1055.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::with_owned_value (1 samples, 0.06%)</title><rect x="5.3826%" y="1029" width="0.0649%" height="15" fill="rgb(232,125,22)" fg:x="83" fg:w="1"/><text x="5.6326%" y="1039.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.3826%" y="1013" width="0.0649%" height="15" fill="rgb(244,57,34)" fg:x="83" fg:w="1"/><text x="5.6326%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.3826%" y="997" width="0.0649%" height="15" fill="rgb(214,203,32)" fg:x="83" fg:w="1"/><text x="5.6326%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.3826%" y="981" width="0.0649%" height="15" fill="rgb(207,58,43)" fg:x="83" fg:w="1"/><text x="5.6326%" y="991.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="5.4475%" y="821" width="0.0649%" height="15" fill="rgb(215,193,15)" fg:x="84" fg:w="1"/><text x="5.6975%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.4475%" y="805" width="0.0649%" height="15" fill="rgb(232,15,44)" fg:x="84" fg:w="1"/><text x="5.6975%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.4475%" y="789" width="0.0649%" height="15" fill="rgb(212,3,48)" fg:x="84" fg:w="1"/><text x="5.6975%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.4475%" y="773" width="0.0649%" height="15" fill="rgb(218,128,7)" fg:x="84" fg:w="1"/><text x="5.6975%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="5.4475%" y="901" width="0.1297%" height="15" fill="rgb(226,216,39)" fg:x="84" fg:w="2"/><text x="5.6975%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="5.4475%" y="885" width="0.1297%" height="15" fill="rgb(243,47,51)" fg:x="84" fg:w="2"/><text x="5.6975%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="5.4475%" y="869" width="0.1297%" height="15" fill="rgb(241,183,40)" fg:x="84" fg:w="2"/><text x="5.6975%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="5.4475%" y="853" width="0.1297%" height="15" fill="rgb(231,217,32)" fg:x="84" fg:w="2"/><text x="5.6975%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="5.4475%" y="837" width="0.1297%" height="15" fill="rgb(229,61,38)" fg:x="84" fg:w="2"/><text x="5.6975%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.5123%" y="821" width="0.0649%" height="15" fill="rgb(225,210,5)" fg:x="85" fg:w="1"/><text x="5.7623%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.5123%" y="805" width="0.0649%" height="15" fill="rgb(231,79,45)" fg:x="85" fg:w="1"/><text x="5.7623%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.5123%" y="789" width="0.0649%" height="15" fill="rgb(224,100,7)" fg:x="85" fg:w="1"/><text x="5.7623%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="5.4475%" y="1029" width="0.1946%" height="15" fill="rgb(241,198,18)" fg:x="84" fg:w="3"/><text x="5.6975%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="5.4475%" y="1013" width="0.1946%" height="15" fill="rgb(252,97,53)" fg:x="84" fg:w="3"/><text x="5.6975%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (3 samples, 0.19%)</title><rect x="5.4475%" y="997" width="0.1946%" height="15" fill="rgb(220,88,7)" fg:x="84" fg:w="3"/><text x="5.6975%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (3 samples, 0.19%)</title><rect x="5.4475%" y="981" width="0.1946%" height="15" fill="rgb(213,176,14)" fg:x="84" fg:w="3"/><text x="5.6975%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="5.4475%" y="965" width="0.1946%" height="15" fill="rgb(246,73,7)" fg:x="84" fg:w="3"/><text x="5.6975%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.19%)</title><rect x="5.4475%" y="949" width="0.1946%" height="15" fill="rgb(245,64,36)" fg:x="84" fg:w="3"/><text x="5.6975%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3 samples, 0.19%)</title><rect x="5.4475%" y="933" width="0.1946%" height="15" fill="rgb(245,80,10)" fg:x="84" fg:w="3"/><text x="5.6975%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3 samples, 0.19%)</title><rect x="5.4475%" y="917" width="0.1946%" height="15" fill="rgb(232,107,50)" fg:x="84" fg:w="3"/><text x="5.6975%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="5.5772%" y="901" width="0.0649%" height="15" fill="rgb(253,3,0)" fg:x="86" fg:w="1"/><text x="5.8272%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="5.5772%" y="885" width="0.0649%" height="15" fill="rgb(212,99,53)" fg:x="86" fg:w="1"/><text x="5.8272%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="5.5772%" y="869" width="0.0649%" height="15" fill="rgb(249,111,54)" fg:x="86" fg:w="1"/><text x="5.8272%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="5.5772%" y="853" width="0.0649%" height="15" fill="rgb(249,55,30)" fg:x="86" fg:w="1"/><text x="5.8272%" y="863.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="5.5772%" y="837" width="0.0649%" height="15" fill="rgb(237,47,42)" fg:x="86" fg:w="1"/><text x="5.8272%" y="847.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.06%)</title><rect x="5.5772%" y="821" width="0.0649%" height="15" fill="rgb(211,20,18)" fg:x="86" fg:w="1"/><text x="5.8272%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.06%)</title><rect x="5.5772%" y="805" width="0.0649%" height="15" fill="rgb(231,203,46)" fg:x="86" fg:w="1"/><text x="5.8272%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="5.5772%" y="789" width="0.0649%" height="15" fill="rgb(237,142,3)" fg:x="86" fg:w="1"/><text x="5.8272%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.5772%" y="773" width="0.0649%" height="15" fill="rgb(241,107,1)" fg:x="86" fg:w="1"/><text x="5.8272%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.5772%" y="757" width="0.0649%" height="15" fill="rgb(229,83,13)" fg:x="86" fg:w="1"/><text x="5.8272%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.5772%" y="741" width="0.0649%" height="15" fill="rgb(241,91,40)" fg:x="86" fg:w="1"/><text x="5.8272%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="5.6420%" y="917" width="0.0649%" height="15" fill="rgb(225,3,45)" fg:x="87" fg:w="1"/><text x="5.8920%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="5.6420%" y="901" width="0.0649%" height="15" fill="rgb(244,223,14)" fg:x="87" fg:w="1"/><text x="5.8920%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="5.6420%" y="885" width="0.0649%" height="15" fill="rgb(224,124,37)" fg:x="87" fg:w="1"/><text x="5.8920%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="5.6420%" y="869" width="0.0649%" height="15" fill="rgb(251,171,30)" fg:x="87" fg:w="1"/><text x="5.8920%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="5.6420%" y="853" width="0.0649%" height="15" fill="rgb(236,46,54)" fg:x="87" fg:w="1"/><text x="5.8920%" y="863.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="5.6420%" y="837" width="0.0649%" height="15" fill="rgb(245,213,5)" fg:x="87" fg:w="1"/><text x="5.8920%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="5.6420%" y="821" width="0.0649%" height="15" fill="rgb(230,144,27)" fg:x="87" fg:w="1"/><text x="5.8920%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="5.6420%" y="805" width="0.0649%" height="15" fill="rgb(220,86,6)" fg:x="87" fg:w="1"/><text x="5.8920%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="5.6420%" y="789" width="0.0649%" height="15" fill="rgb(240,20,13)" fg:x="87" fg:w="1"/><text x="5.8920%" y="799.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="5.6420%" y="773" width="0.0649%" height="15" fill="rgb(217,89,34)" fg:x="87" fg:w="1"/><text x="5.8920%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="5.6420%" y="757" width="0.0649%" height="15" fill="rgb(229,13,5)" fg:x="87" fg:w="1"/><text x="5.8920%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="5.6420%" y="741" width="0.0649%" height="15" fill="rgb(244,67,35)" fg:x="87" fg:w="1"/><text x="5.8920%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.6420%" y="725" width="0.0649%" height="15" fill="rgb(221,40,2)" fg:x="87" fg:w="1"/><text x="5.8920%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.6420%" y="709" width="0.0649%" height="15" fill="rgb(237,157,21)" fg:x="87" fg:w="1"/><text x="5.8920%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.6420%" y="693" width="0.0649%" height="15" fill="rgb(222,94,11)" fg:x="87" fg:w="1"/><text x="5.8920%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="5.6420%" y="1029" width="0.1297%" height="15" fill="rgb(249,113,6)" fg:x="87" fg:w="2"/><text x="5.8920%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="5.6420%" y="1013" width="0.1297%" height="15" fill="rgb(238,137,36)" fg:x="87" fg:w="2"/><text x="5.8920%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="5.6420%" y="997" width="0.1297%" height="15" fill="rgb(210,102,26)" fg:x="87" fg:w="2"/><text x="5.8920%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="5.6420%" y="981" width="0.1297%" height="15" fill="rgb(218,30,30)" fg:x="87" fg:w="2"/><text x="5.8920%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="5.6420%" y="965" width="0.1297%" height="15" fill="rgb(214,67,26)" fg:x="87" fg:w="2"/><text x="5.8920%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="5.6420%" y="949" width="0.1297%" height="15" fill="rgb(251,9,53)" fg:x="87" fg:w="2"/><text x="5.8920%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="5.6420%" y="933" width="0.1297%" height="15" fill="rgb(228,204,25)" fg:x="87" fg:w="2"/><text x="5.8920%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="5.7069%" y="917" width="0.0649%" height="15" fill="rgb(207,153,8)" fg:x="88" fg:w="1"/><text x="5.9569%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="5.7069%" y="901" width="0.0649%" height="15" fill="rgb(242,9,16)" fg:x="88" fg:w="1"/><text x="5.9569%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="5.7069%" y="885" width="0.0649%" height="15" fill="rgb(217,211,10)" fg:x="88" fg:w="1"/><text x="5.9569%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="5.7069%" y="869" width="0.0649%" height="15" fill="rgb(219,228,52)" fg:x="88" fg:w="1"/><text x="5.9569%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="5.7069%" y="853" width="0.0649%" height="15" fill="rgb(231,92,29)" fg:x="88" fg:w="1"/><text x="5.9569%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="5.7069%" y="837" width="0.0649%" height="15" fill="rgb(232,8,23)" fg:x="88" fg:w="1"/><text x="5.9569%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="5.7069%" y="821" width="0.0649%" height="15" fill="rgb(216,211,34)" fg:x="88" fg:w="1"/><text x="5.9569%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.7069%" y="805" width="0.0649%" height="15" fill="rgb(236,151,0)" fg:x="88" fg:w="1"/><text x="5.9569%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.7069%" y="789" width="0.0649%" height="15" fill="rgb(209,168,3)" fg:x="88" fg:w="1"/><text x="5.9569%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.7069%" y="773" width="0.0649%" height="15" fill="rgb(208,129,28)" fg:x="88" fg:w="1"/><text x="5.9569%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (1 samples, 0.06%)</title><rect x="5.7717%" y="997" width="0.0649%" height="15" fill="rgb(229,78,22)" fg:x="89" fg:w="1"/><text x="6.0217%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="5.7717%" y="981" width="0.0649%" height="15" fill="rgb(228,187,13)" fg:x="89" fg:w="1"/><text x="6.0217%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.06%)</title><rect x="5.7717%" y="965" width="0.0649%" height="15" fill="rgb(240,119,24)" fg:x="89" fg:w="1"/><text x="6.0217%" y="975.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="5.7717%" y="949" width="0.0649%" height="15" fill="rgb(209,194,42)" fg:x="89" fg:w="1"/><text x="6.0217%" y="959.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="5.7717%" y="933" width="0.0649%" height="15" fill="rgb(247,200,46)" fg:x="89" fg:w="1"/><text x="6.0217%" y="943.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="5.7717%" y="917" width="0.0649%" height="15" fill="rgb(218,76,16)" fg:x="89" fg:w="1"/><text x="6.0217%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.7717%" y="901" width="0.0649%" height="15" fill="rgb(225,21,48)" fg:x="89" fg:w="1"/><text x="6.0217%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.7717%" y="885" width="0.0649%" height="15" fill="rgb(239,223,50)" fg:x="89" fg:w="1"/><text x="6.0217%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.7717%" y="869" width="0.0649%" height="15" fill="rgb(244,45,21)" fg:x="89" fg:w="1"/><text x="6.0217%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.8366%" y="933" width="0.0649%" height="15" fill="rgb(232,33,43)" fg:x="90" fg:w="1"/><text x="6.0866%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.8366%" y="917" width="0.0649%" height="15" fill="rgb(209,8,3)" fg:x="90" fg:w="1"/><text x="6.0866%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.8366%" y="901" width="0.0649%" height="15" fill="rgb(214,25,53)" fg:x="90" fg:w="1"/><text x="6.0866%" y="911.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="5.9014%" y="869" width="0.0649%" height="15" fill="rgb(254,186,54)" fg:x="91" fg:w="1"/><text x="6.1514%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="5.9014%" y="853" width="0.0649%" height="15" fill="rgb(208,174,49)" fg:x="91" fg:w="1"/><text x="6.1514%" y="863.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="5.9014%" y="837" width="0.0649%" height="15" fill="rgb(233,191,51)" fg:x="91" fg:w="1"/><text x="6.1514%" y="847.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="5.9014%" y="821" width="0.0649%" height="15" fill="rgb(222,134,10)" fg:x="91" fg:w="1"/><text x="6.1514%" y="831.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="5.9014%" y="805" width="0.0649%" height="15" fill="rgb(230,226,20)" fg:x="91" fg:w="1"/><text x="6.1514%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.9014%" y="789" width="0.0649%" height="15" fill="rgb(251,111,25)" fg:x="91" fg:w="1"/><text x="6.1514%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.9014%" y="773" width="0.0649%" height="15" fill="rgb(224,40,46)" fg:x="91" fg:w="1"/><text x="6.1514%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.9014%" y="757" width="0.0649%" height="15" fill="rgb(236,108,47)" fg:x="91" fg:w="1"/><text x="6.1514%" y="767.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="5.9663%" y="837" width="0.0649%" height="15" fill="rgb(234,93,0)" fg:x="92" fg:w="1"/><text x="6.2163%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="5.9663%" y="821" width="0.0649%" height="15" fill="rgb(224,213,32)" fg:x="92" fg:w="1"/><text x="6.2163%" y="831.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="5.9663%" y="805" width="0.0649%" height="15" fill="rgb(251,11,48)" fg:x="92" fg:w="1"/><text x="6.2163%" y="815.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="5.9663%" y="789" width="0.0649%" height="15" fill="rgb(236,173,5)" fg:x="92" fg:w="1"/><text x="6.2163%" y="799.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="5.9663%" y="773" width="0.0649%" height="15" fill="rgb(230,95,12)" fg:x="92" fg:w="1"/><text x="6.2163%" y="783.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u16 (1 samples, 0.06%)</title><rect x="5.9663%" y="757" width="0.0649%" height="15" fill="rgb(232,209,1)" fg:x="92" fg:w="1"/><text x="6.2163%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="5.9663%" y="741" width="0.0649%" height="15" fill="rgb(232,6,1)" fg:x="92" fg:w="1"/><text x="6.2163%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="5.9663%" y="725" width="0.0649%" height="15" fill="rgb(210,224,50)" fg:x="92" fg:w="1"/><text x="6.2163%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="5.9663%" y="709" width="0.0649%" height="15" fill="rgb(228,127,35)" fg:x="92" fg:w="1"/><text x="6.2163%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.0311%" y="741" width="0.0649%" height="15" fill="rgb(245,102,45)" fg:x="93" fg:w="1"/><text x="6.2811%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.0311%" y="725" width="0.0649%" height="15" fill="rgb(214,1,49)" fg:x="93" fg:w="1"/><text x="6.2811%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.0311%" y="709" width="0.0649%" height="15" fill="rgb(226,163,40)" fg:x="93" fg:w="1"/><text x="6.2811%" y="719.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u32 (1 samples, 0.06%)</title><rect x="6.0960%" y="725" width="0.0649%" height="15" fill="rgb(239,212,28)" fg:x="94" fg:w="1"/><text x="6.3460%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="6.0960%" y="709" width="0.0649%" height="15" fill="rgb(220,20,13)" fg:x="94" fg:w="1"/><text x="6.3460%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="6.0960%" y="693" width="0.0649%" height="15" fill="rgb(210,164,35)" fg:x="94" fg:w="1"/><text x="6.3460%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.0960%" y="677" width="0.0649%" height="15" fill="rgb(248,109,41)" fg:x="94" fg:w="1"/><text x="6.3460%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.0960%" y="661" width="0.0649%" height="15" fill="rgb(238,23,50)" fg:x="94" fg:w="1"/><text x="6.3460%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.0960%" y="645" width="0.0649%" height="15" fill="rgb(211,48,49)" fg:x="94" fg:w="1"/><text x="6.3460%" y="655.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (6 samples, 0.39%)</title><rect x="5.8366%" y="997" width="0.3891%" height="15" fill="rgb(223,36,21)" fg:x="90" fg:w="6"/><text x="6.0866%" y="1007.50"></text></g><g><title>bincode::config::Options::serialize (6 samples, 0.39%)</title><rect x="5.8366%" y="981" width="0.3891%" height="15" fill="rgb(207,123,46)" fg:x="90" fg:w="6"/><text x="6.0866%" y="991.50"></text></g><g><title>bincode::internal::serialize (6 samples, 0.39%)</title><rect x="5.8366%" y="965" width="0.3891%" height="15" fill="rgb(240,218,32)" fg:x="90" fg:w="6"/><text x="6.0866%" y="975.50"></text></g><g><title>bincode::internal::serialize_into (6 samples, 0.39%)</title><rect x="5.8366%" y="949" width="0.3891%" height="15" fill="rgb(252,5,43)" fg:x="90" fg:w="6"/><text x="6.0866%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (5 samples, 0.32%)</title><rect x="5.9014%" y="933" width="0.3243%" height="15" fill="rgb(252,84,19)" fg:x="91" fg:w="5"/><text x="6.1514%" y="943.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.32%)</title><rect x="5.9014%" y="917" width="0.3243%" height="15" fill="rgb(243,152,39)" fg:x="91" fg:w="5"/><text x="6.1514%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (5 samples, 0.32%)</title><rect x="5.9014%" y="901" width="0.3243%" height="15" fill="rgb(234,160,15)" fg:x="91" fg:w="5"/><text x="6.1514%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.32%)</title><rect x="5.9014%" y="885" width="0.3243%" height="15" fill="rgb(237,34,20)" fg:x="91" fg:w="5"/><text x="6.1514%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (4 samples, 0.26%)</title><rect x="5.9663%" y="869" width="0.2594%" height="15" fill="rgb(229,97,13)" fg:x="92" fg:w="4"/><text x="6.2163%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.26%)</title><rect x="5.9663%" y="853" width="0.2594%" height="15" fill="rgb(234,71,50)" fg:x="92" fg:w="4"/><text x="6.2163%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (3 samples, 0.19%)</title><rect x="6.0311%" y="837" width="0.1946%" height="15" fill="rgb(253,155,4)" fg:x="93" fg:w="3"/><text x="6.2811%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.19%)</title><rect x="6.0311%" y="821" width="0.1946%" height="15" fill="rgb(222,185,37)" fg:x="93" fg:w="3"/><text x="6.2811%" y="831.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (3 samples, 0.19%)</title><rect x="6.0311%" y="805" width="0.1946%" height="15" fill="rgb(251,177,13)" fg:x="93" fg:w="3"/><text x="6.2811%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (3 samples, 0.19%)</title><rect x="6.0311%" y="789" width="0.1946%" height="15" fill="rgb(250,179,40)" fg:x="93" fg:w="3"/><text x="6.2811%" y="799.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (3 samples, 0.19%)</title><rect x="6.0311%" y="773" width="0.1946%" height="15" fill="rgb(242,44,2)" fg:x="93" fg:w="3"/><text x="6.2811%" y="783.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (3 samples, 0.19%)</title><rect x="6.0311%" y="757" width="0.1946%" height="15" fill="rgb(216,177,13)" fg:x="93" fg:w="3"/><text x="6.2811%" y="767.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (2 samples, 0.13%)</title><rect x="6.0960%" y="741" width="0.1297%" height="15" fill="rgb(216,106,43)" fg:x="94" fg:w="2"/><text x="6.3460%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.1608%" y="725" width="0.0649%" height="15" fill="rgb(216,183,2)" fg:x="95" fg:w="1"/><text x="6.4108%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.1608%" y="709" width="0.0649%" height="15" fill="rgb(249,75,3)" fg:x="95" fg:w="1"/><text x="6.4108%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.1608%" y="693" width="0.0649%" height="15" fill="rgb(219,67,39)" fg:x="95" fg:w="1"/><text x="6.4108%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="6.2257%" y="981" width="0.1297%" height="15" fill="rgb(253,228,2)" fg:x="96" fg:w="2"/><text x="6.4757%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="6.2257%" y="965" width="0.1297%" height="15" fill="rgb(235,138,27)" fg:x="96" fg:w="2"/><text x="6.4757%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="6.2257%" y="949" width="0.1297%" height="15" fill="rgb(236,97,51)" fg:x="96" fg:w="2"/><text x="6.4757%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="6.2257%" y="933" width="0.1297%" height="15" fill="rgb(240,80,30)" fg:x="96" fg:w="2"/><text x="6.4757%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="6.2257%" y="917" width="0.1297%" height="15" fill="rgb(230,178,19)" fg:x="96" fg:w="2"/><text x="6.4757%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="6.2257%" y="901" width="0.1297%" height="15" fill="rgb(210,190,27)" fg:x="96" fg:w="2"/><text x="6.4757%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.13%)</title><rect x="6.2257%" y="885" width="0.1297%" height="15" fill="rgb(222,107,31)" fg:x="96" fg:w="2"/><text x="6.4757%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.13%)</title><rect x="6.2257%" y="869" width="0.1297%" height="15" fill="rgb(216,127,34)" fg:x="96" fg:w="2"/><text x="6.4757%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2 samples, 0.13%)</title><rect x="6.2257%" y="853" width="0.1297%" height="15" fill="rgb(234,116,52)" fg:x="96" fg:w="2"/><text x="6.4757%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.13%)</title><rect x="6.2257%" y="837" width="0.1297%" height="15" fill="rgb(222,124,15)" fg:x="96" fg:w="2"/><text x="6.4757%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.13%)</title><rect x="6.2257%" y="821" width="0.1297%" height="15" fill="rgb(231,179,28)" fg:x="96" fg:w="2"/><text x="6.4757%" y="831.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.13%)</title><rect x="6.2257%" y="805" width="0.1297%" height="15" fill="rgb(226,93,45)" fg:x="96" fg:w="2"/><text x="6.4757%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="6.2257%" y="789" width="0.1297%" height="15" fill="rgb(215,8,51)" fg:x="96" fg:w="2"/><text x="6.4757%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="6.2257%" y="773" width="0.1297%" height="15" fill="rgb(223,106,5)" fg:x="96" fg:w="2"/><text x="6.4757%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="6.2257%" y="757" width="0.1297%" height="15" fill="rgb(250,191,5)" fg:x="96" fg:w="2"/><text x="6.4757%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.3554%" y="933" width="0.0649%" height="15" fill="rgb(242,132,44)" fg:x="98" fg:w="1"/><text x="6.6054%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.3554%" y="917" width="0.0649%" height="15" fill="rgb(251,152,29)" fg:x="98" fg:w="1"/><text x="6.6054%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.3554%" y="901" width="0.0649%" height="15" fill="rgb(218,179,5)" fg:x="98" fg:w="1"/><text x="6.6054%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.4202%" y="885" width="0.0649%" height="15" fill="rgb(227,67,19)" fg:x="99" fg:w="1"/><text x="6.6702%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.4202%" y="869" width="0.0649%" height="15" fill="rgb(233,119,31)" fg:x="99" fg:w="1"/><text x="6.6702%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.4202%" y="853" width="0.0649%" height="15" fill="rgb(241,120,22)" fg:x="99" fg:w="1"/><text x="6.6702%" y="863.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="6.4851%" y="725" width="0.0649%" height="15" fill="rgb(224,102,30)" fg:x="100" fg:w="1"/><text x="6.7351%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="6.4851%" y="709" width="0.0649%" height="15" fill="rgb(210,164,37)" fg:x="100" fg:w="1"/><text x="6.7351%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="6.4851%" y="693" width="0.0649%" height="15" fill="rgb(226,191,16)" fg:x="100" fg:w="1"/><text x="6.7351%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="6.4851%" y="677" width="0.0649%" height="15" fill="rgb(214,40,45)" fg:x="100" fg:w="1"/><text x="6.7351%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="6.4851%" y="661" width="0.0649%" height="15" fill="rgb(244,29,26)" fg:x="100" fg:w="1"/><text x="6.7351%" y="671.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="6.4851%" y="645" width="0.0649%" height="15" fill="rgb(216,16,5)" fg:x="100" fg:w="1"/><text x="6.7351%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="6.4851%" y="629" width="0.0649%" height="15" fill="rgb(249,76,35)" fg:x="100" fg:w="1"/><text x="6.7351%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.4851%" y="613" width="0.0649%" height="15" fill="rgb(207,11,44)" fg:x="100" fg:w="1"/><text x="6.7351%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.4851%" y="597" width="0.0649%" height="15" fill="rgb(228,190,49)" fg:x="100" fg:w="1"/><text x="6.7351%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.4851%" y="581" width="0.0649%" height="15" fill="rgb(214,173,12)" fg:x="100" fg:w="1"/><text x="6.7351%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="6.5499%" y="613" width="0.0649%" height="15" fill="rgb(218,26,35)" fg:x="101" fg:w="1"/><text x="6.7999%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="6.5499%" y="597" width="0.0649%" height="15" fill="rgb(220,200,19)" fg:x="101" fg:w="1"/><text x="6.7999%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="6.5499%" y="581" width="0.0649%" height="15" fill="rgb(239,95,49)" fg:x="101" fg:w="1"/><text x="6.7999%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="6.5499%" y="565" width="0.0649%" height="15" fill="rgb(235,85,53)" fg:x="101" fg:w="1"/><text x="6.7999%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="6.5499%" y="549" width="0.0649%" height="15" fill="rgb(233,133,31)" fg:x="101" fg:w="1"/><text x="6.7999%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.5499%" y="533" width="0.0649%" height="15" fill="rgb(218,25,20)" fg:x="101" fg:w="1"/><text x="6.7999%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.5499%" y="517" width="0.0649%" height="15" fill="rgb(252,210,38)" fg:x="101" fg:w="1"/><text x="6.7999%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.5499%" y="501" width="0.0649%" height="15" fill="rgb(242,134,21)" fg:x="101" fg:w="1"/><text x="6.7999%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.6148%" y="437" width="0.0649%" height="15" fill="rgb(213,28,48)" fg:x="102" fg:w="1"/><text x="6.8648%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.6148%" y="421" width="0.0649%" height="15" fill="rgb(250,196,2)" fg:x="102" fg:w="1"/><text x="6.8648%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.6148%" y="405" width="0.0649%" height="15" fill="rgb(227,5,17)" fg:x="102" fg:w="1"/><text x="6.8648%" y="415.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="6.6796%" y="421" width="0.0649%" height="15" fill="rgb(221,226,24)" fg:x="103" fg:w="1"/><text x="6.9296%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="6.6796%" y="405" width="0.0649%" height="15" fill="rgb(211,5,48)" fg:x="103" fg:w="1"/><text x="6.9296%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="6.6796%" y="389" width="0.0649%" height="15" fill="rgb(219,150,6)" fg:x="103" fg:w="1"/><text x="6.9296%" y="399.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="6.6796%" y="373" width="0.0649%" height="15" fill="rgb(251,46,16)" fg:x="103" fg:w="1"/><text x="6.9296%" y="383.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="6.6796%" y="357" width="0.0649%" height="15" fill="rgb(220,204,40)" fg:x="103" fg:w="1"/><text x="6.9296%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.06%)</title><rect x="6.6796%" y="341" width="0.0649%" height="15" fill="rgb(211,85,2)" fg:x="103" fg:w="1"/><text x="6.9296%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime (1 samples, 0.06%)</title><rect x="6.6796%" y="325" width="0.0649%" height="15" fill="rgb(229,17,7)" fg:x="103" fg:w="1"/><text x="6.9296%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.6796%" y="309" width="0.0649%" height="15" fill="rgb(239,72,28)" fg:x="103" fg:w="1"/><text x="6.9296%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.6796%" y="293" width="0.0649%" height="15" fill="rgb(230,47,54)" fg:x="103" fg:w="1"/><text x="6.9296%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.6796%" y="277" width="0.0649%" height="15" fill="rgb(214,50,8)" fg:x="103" fg:w="1"/><text x="6.9296%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="6.5499%" y="629" width="0.2594%" height="15" fill="rgb(216,198,43)" fg:x="101" fg:w="4"/><text x="6.7999%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="6.6148%" y="613" width="0.1946%" height="15" fill="rgb(234,20,35)" fg:x="102" fg:w="3"/><text x="6.8648%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="6.6148%" y="597" width="0.1946%" height="15" fill="rgb(254,45,19)" fg:x="102" fg:w="3"/><text x="6.8648%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="6.6148%" y="581" width="0.1946%" height="15" fill="rgb(219,14,44)" fg:x="102" fg:w="3"/><text x="6.8648%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="6.6148%" y="565" width="0.1946%" height="15" fill="rgb(217,220,26)" fg:x="102" fg:w="3"/><text x="6.8648%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="6.6148%" y="549" width="0.1946%" height="15" fill="rgb(213,158,28)" fg:x="102" fg:w="3"/><text x="6.8648%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="6.6148%" y="533" width="0.1946%" height="15" fill="rgb(252,51,52)" fg:x="102" fg:w="3"/><text x="6.8648%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="6.6148%" y="517" width="0.1946%" height="15" fill="rgb(246,89,16)" fg:x="102" fg:w="3"/><text x="6.8648%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="6.6148%" y="501" width="0.1946%" height="15" fill="rgb(216,158,49)" fg:x="102" fg:w="3"/><text x="6.8648%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="6.6148%" y="485" width="0.1946%" height="15" fill="rgb(236,107,19)" fg:x="102" fg:w="3"/><text x="6.8648%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="6.6148%" y="469" width="0.1946%" height="15" fill="rgb(228,185,30)" fg:x="102" fg:w="3"/><text x="6.8648%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="6.6148%" y="453" width="0.1946%" height="15" fill="rgb(246,134,8)" fg:x="102" fg:w="3"/><text x="6.8648%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="6.6796%" y="437" width="0.1297%" height="15" fill="rgb(214,143,50)" fg:x="103" fg:w="2"/><text x="6.9296%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="6.7445%" y="421" width="0.0649%" height="15" fill="rgb(228,75,8)" fg:x="104" fg:w="1"/><text x="6.9945%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="6.7445%" y="405" width="0.0649%" height="15" fill="rgb(207,175,4)" fg:x="104" fg:w="1"/><text x="6.9945%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="6.7445%" y="389" width="0.0649%" height="15" fill="rgb(205,108,24)" fg:x="104" fg:w="1"/><text x="6.9945%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.7445%" y="373" width="0.0649%" height="15" fill="rgb(244,120,49)" fg:x="104" fg:w="1"/><text x="6.9945%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.7445%" y="357" width="0.0649%" height="15" fill="rgb(223,47,38)" fg:x="104" fg:w="1"/><text x="6.9945%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.7445%" y="341" width="0.0649%" height="15" fill="rgb(229,179,11)" fg:x="104" fg:w="1"/><text x="6.9945%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="6.4851%" y="741" width="0.3891%" height="15" fill="rgb(231,122,1)" fg:x="100" fg:w="6"/><text x="6.7351%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="6.5499%" y="725" width="0.3243%" height="15" fill="rgb(245,119,9)" fg:x="101" fg:w="5"/><text x="6.7999%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="6.5499%" y="709" width="0.3243%" height="15" fill="rgb(241,163,25)" fg:x="101" fg:w="5"/><text x="6.7999%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="6.5499%" y="693" width="0.3243%" height="15" fill="rgb(217,214,3)" fg:x="101" fg:w="5"/><text x="6.7999%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="6.5499%" y="677" width="0.3243%" height="15" fill="rgb(240,86,28)" fg:x="101" fg:w="5"/><text x="6.7999%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.32%)</title><rect x="6.5499%" y="661" width="0.3243%" height="15" fill="rgb(215,47,9)" fg:x="101" fg:w="5"/><text x="6.7999%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.32%)</title><rect x="6.5499%" y="645" width="0.3243%" height="15" fill="rgb(252,25,45)" fg:x="101" fg:w="5"/><text x="6.7999%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.8093%" y="629" width="0.0649%" height="15" fill="rgb(251,164,9)" fg:x="105" fg:w="1"/><text x="7.0593%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.8093%" y="613" width="0.0649%" height="15" fill="rgb(233,194,0)" fg:x="105" fg:w="1"/><text x="7.0593%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.8093%" y="597" width="0.0649%" height="15" fill="rgb(249,111,24)" fg:x="105" fg:w="1"/><text x="7.0593%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (7 samples, 0.45%)</title><rect x="6.4851%" y="805" width="0.4540%" height="15" fill="rgb(250,223,3)" fg:x="100" fg:w="7"/><text x="6.7351%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (7 samples, 0.45%)</title><rect x="6.4851%" y="789" width="0.4540%" height="15" fill="rgb(236,178,37)" fg:x="100" fg:w="7"/><text x="6.7351%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (7 samples, 0.45%)</title><rect x="6.4851%" y="773" width="0.4540%" height="15" fill="rgb(241,158,50)" fg:x="100" fg:w="7"/><text x="6.7351%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.45%)</title><rect x="6.4851%" y="757" width="0.4540%" height="15" fill="rgb(213,121,41)" fg:x="100" fg:w="7"/><text x="6.7351%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.8742%" y="741" width="0.0649%" height="15" fill="rgb(240,92,3)" fg:x="106" fg:w="1"/><text x="7.1242%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.8742%" y="725" width="0.0649%" height="15" fill="rgb(205,123,3)" fg:x="106" fg:w="1"/><text x="7.1242%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.8742%" y="709" width="0.0649%" height="15" fill="rgb(205,97,47)" fg:x="106" fg:w="1"/><text x="7.1242%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="6.4851%" y="853" width="0.5188%" height="15" fill="rgb(247,152,14)" fg:x="100" fg:w="8"/><text x="6.7351%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="6.4851%" y="837" width="0.5188%" height="15" fill="rgb(248,195,53)" fg:x="100" fg:w="8"/><text x="6.7351%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="6.4851%" y="821" width="0.5188%" height="15" fill="rgb(226,201,16)" fg:x="100" fg:w="8"/><text x="6.7351%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="6.9390%" y="805" width="0.0649%" height="15" fill="rgb(205,98,0)" fg:x="107" fg:w="1"/><text x="7.1890%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="6.9390%" y="789" width="0.0649%" height="15" fill="rgb(214,191,48)" fg:x="107" fg:w="1"/><text x="7.1890%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="6.9390%" y="773" width="0.0649%" height="15" fill="rgb(237,112,39)" fg:x="107" fg:w="1"/><text x="7.1890%" y="783.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (11 samples, 0.71%)</title><rect x="6.4202%" y="917" width="0.7134%" height="15" fill="rgb(247,203,27)" fg:x="99" fg:w="11"/><text x="6.6702%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (11 samples, 0.71%)</title><rect x="6.4202%" y="901" width="0.7134%" height="15" fill="rgb(235,124,28)" fg:x="99" fg:w="11"/><text x="6.6702%" y="911.50"></text></g><g><title>bincode::internal::deserialize (10 samples, 0.65%)</title><rect x="6.4851%" y="885" width="0.6485%" height="15" fill="rgb(208,207,46)" fg:x="100" fg:w="10"/><text x="6.7351%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (10 samples, 0.65%)</title><rect x="6.4851%" y="869" width="0.6485%" height="15" fill="rgb(234,176,4)" fg:x="100" fg:w="10"/><text x="6.7351%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="7.0039%" y="853" width="0.1297%" height="15" fill="rgb(230,133,28)" fg:x="108" fg:w="2"/><text x="7.2539%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="7.0039%" y="837" width="0.1297%" height="15" fill="rgb(211,137,40)" fg:x="108" fg:w="2"/><text x="7.2539%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="7.0039%" y="821" width="0.1297%" height="15" fill="rgb(254,35,13)" fg:x="108" fg:w="2"/><text x="7.2539%" y="831.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (12 samples, 0.78%)</title><rect x="6.4202%" y="933" width="0.7782%" height="15" fill="rgb(225,49,51)" fg:x="99" fg:w="12"/><text x="6.6702%" y="943.50"></text></g><g><title>&lt;utxo::AssetPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="7.1336%" y="917" width="0.0649%" height="15" fill="rgb(251,10,15)" fg:x="110" fg:w="1"/><text x="7.3836%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.1336%" y="901" width="0.0649%" height="15" fill="rgb(228,207,15)" fg:x="110" fg:w="1"/><text x="7.3836%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.1336%" y="885" width="0.0649%" height="15" fill="rgb(241,99,19)" fg:x="110" fg:w="1"/><text x="7.3836%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.1336%" y="869" width="0.0649%" height="15" fill="rgb(207,104,49)" fg:x="110" fg:w="1"/><text x="7.3836%" y="879.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (14 samples, 0.91%)</title><rect x="6.3554%" y="981" width="0.9079%" height="15" fill="rgb(234,99,18)" fg:x="98" fg:w="14"/><text x="6.6054%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (14 samples, 0.91%)</title><rect x="6.3554%" y="965" width="0.9079%" height="15" fill="rgb(213,191,49)" fg:x="98" fg:w="14"/><text x="6.6054%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (14 samples, 0.91%)</title><rect x="6.3554%" y="949" width="0.9079%" height="15" fill="rgb(210,226,19)" fg:x="98" fg:w="14"/><text x="6.6054%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="7.1984%" y="933" width="0.0649%" height="15" fill="rgb(229,97,18)" fg:x="111" fg:w="1"/><text x="7.4484%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="7.1984%" y="917" width="0.0649%" height="15" fill="rgb(211,167,15)" fg:x="111" fg:w="1"/><text x="7.4484%" y="927.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="7.1984%" y="901" width="0.0649%" height="15" fill="rgb(210,169,34)" fg:x="111" fg:w="1"/><text x="7.4484%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.1984%" y="885" width="0.0649%" height="15" fill="rgb(241,121,31)" fg:x="111" fg:w="1"/><text x="7.4484%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.1984%" y="869" width="0.0649%" height="15" fill="rgb(232,40,11)" fg:x="111" fg:w="1"/><text x="7.4484%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.1984%" y="853" width="0.0649%" height="15" fill="rgb(205,86,26)" fg:x="111" fg:w="1"/><text x="7.4484%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.2633%" y="757" width="0.0649%" height="15" fill="rgb(231,126,28)" fg:x="112" fg:w="1"/><text x="7.5133%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.2633%" y="741" width="0.0649%" height="15" fill="rgb(219,221,18)" fg:x="112" fg:w="1"/><text x="7.5133%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.2633%" y="725" width="0.0649%" height="15" fill="rgb(211,40,0)" fg:x="112" fg:w="1"/><text x="7.5133%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="7.3281%" y="757" width="0.0649%" height="15" fill="rgb(239,85,43)" fg:x="113" fg:w="1"/><text x="7.5781%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="7.3281%" y="741" width="0.0649%" height="15" fill="rgb(231,55,21)" fg:x="113" fg:w="1"/><text x="7.5781%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="7.3281%" y="725" width="0.0649%" height="15" fill="rgb(225,184,43)" fg:x="113" fg:w="1"/><text x="7.5781%" y="735.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="7.3281%" y="709" width="0.0649%" height="15" fill="rgb(251,158,41)" fg:x="113" fg:w="1"/><text x="7.5781%" y="719.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="7.3281%" y="693" width="0.0649%" height="15" fill="rgb(234,159,37)" fg:x="113" fg:w="1"/><text x="7.5781%" y="703.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="7.3281%" y="677" width="0.0649%" height="15" fill="rgb(216,204,22)" fg:x="113" fg:w="1"/><text x="7.5781%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="7.3281%" y="661" width="0.0649%" height="15" fill="rgb(214,17,3)" fg:x="113" fg:w="1"/><text x="7.5781%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.3281%" y="645" width="0.0649%" height="15" fill="rgb(212,111,17)" fg:x="113" fg:w="1"/><text x="7.5781%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.3281%" y="629" width="0.0649%" height="15" fill="rgb(221,157,24)" fg:x="113" fg:w="1"/><text x="7.5781%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.3281%" y="613" width="0.0649%" height="15" fill="rgb(252,16,13)" fg:x="113" fg:w="1"/><text x="7.5781%" y="623.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="7.3930%" y="581" width="0.0649%" height="15" fill="rgb(221,62,2)" fg:x="114" fg:w="1"/><text x="7.6430%" y="591.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="7.3930%" y="565" width="0.0649%" height="15" fill="rgb(247,87,22)" fg:x="114" fg:w="1"/><text x="7.6430%" y="575.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="7.3930%" y="549" width="0.0649%" height="15" fill="rgb(215,73,9)" fg:x="114" fg:w="1"/><text x="7.6430%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.3930%" y="533" width="0.0649%" height="15" fill="rgb(207,175,33)" fg:x="114" fg:w="1"/><text x="7.6430%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.3930%" y="517" width="0.0649%" height="15" fill="rgb(243,129,54)" fg:x="114" fg:w="1"/><text x="7.6430%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.3930%" y="501" width="0.0649%" height="15" fill="rgb(227,119,45)" fg:x="114" fg:w="1"/><text x="7.6430%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="7.3930%" y="645" width="0.1297%" height="15" fill="rgb(205,109,36)" fg:x="114" fg:w="2"/><text x="7.6430%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="7.3930%" y="629" width="0.1297%" height="15" fill="rgb(205,6,39)" fg:x="114" fg:w="2"/><text x="7.6430%" y="639.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="7.3930%" y="613" width="0.1297%" height="15" fill="rgb(221,32,16)" fg:x="114" fg:w="2"/><text x="7.6430%" y="623.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="7.3930%" y="597" width="0.1297%" height="15" fill="rgb(228,144,50)" fg:x="114" fg:w="2"/><text x="7.6430%" y="607.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="7.4578%" y="581" width="0.0649%" height="15" fill="rgb(229,201,53)" fg:x="115" fg:w="1"/><text x="7.7078%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="7.4578%" y="565" width="0.0649%" height="15" fill="rgb(249,153,27)" fg:x="115" fg:w="1"/><text x="7.7078%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.4578%" y="549" width="0.0649%" height="15" fill="rgb(227,106,25)" fg:x="115" fg:w="1"/><text x="7.7078%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.4578%" y="533" width="0.0649%" height="15" fill="rgb(230,65,29)" fg:x="115" fg:w="1"/><text x="7.7078%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.4578%" y="517" width="0.0649%" height="15" fill="rgb(221,57,46)" fg:x="115" fg:w="1"/><text x="7.7078%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="7.5227%" y="581" width="0.0649%" height="15" fill="rgb(229,161,17)" fg:x="116" fg:w="1"/><text x="7.7727%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.5227%" y="565" width="0.0649%" height="15" fill="rgb(222,213,11)" fg:x="116" fg:w="1"/><text x="7.7727%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.5227%" y="549" width="0.0649%" height="15" fill="rgb(235,35,13)" fg:x="116" fg:w="1"/><text x="7.7727%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.5227%" y="533" width="0.0649%" height="15" fill="rgb(233,158,34)" fg:x="116" fg:w="1"/><text x="7.7727%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="7.5875%" y="421" width="0.0649%" height="15" fill="rgb(215,151,48)" fg:x="117" fg:w="1"/><text x="7.8375%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.5875%" y="405" width="0.0649%" height="15" fill="rgb(229,84,14)" fg:x="117" fg:w="1"/><text x="7.8375%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.5875%" y="389" width="0.0649%" height="15" fill="rgb(229,68,14)" fg:x="117" fg:w="1"/><text x="7.8375%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.5875%" y="373" width="0.0649%" height="15" fill="rgb(243,106,26)" fg:x="117" fg:w="1"/><text x="7.8375%" y="383.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="7.5875%" y="501" width="0.1297%" height="15" fill="rgb(206,45,38)" fg:x="117" fg:w="2"/><text x="7.8375%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="7.5875%" y="485" width="0.1297%" height="15" fill="rgb(226,6,15)" fg:x="117" fg:w="2"/><text x="7.8375%" y="495.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="7.5875%" y="469" width="0.1297%" height="15" fill="rgb(232,22,54)" fg:x="117" fg:w="2"/><text x="7.8375%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="7.5875%" y="453" width="0.1297%" height="15" fill="rgb(229,222,32)" fg:x="117" fg:w="2"/><text x="7.8375%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="7.5875%" y="437" width="0.1297%" height="15" fill="rgb(228,62,29)" fg:x="117" fg:w="2"/><text x="7.8375%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="7.6524%" y="421" width="0.0649%" height="15" fill="rgb(251,103,34)" fg:x="118" fg:w="1"/><text x="7.9024%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="7.6524%" y="405" width="0.0649%" height="15" fill="rgb(233,12,30)" fg:x="118" fg:w="1"/><text x="7.9024%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="7.6524%" y="389" width="0.0649%" height="15" fill="rgb(238,52,0)" fg:x="118" fg:w="1"/><text x="7.9024%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="7.6524%" y="373" width="0.0649%" height="15" fill="rgb(223,98,5)" fg:x="118" fg:w="1"/><text x="7.9024%" y="383.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="7.6524%" y="357" width="0.0649%" height="15" fill="rgb(228,75,37)" fg:x="118" fg:w="1"/><text x="7.9024%" y="367.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="7.6524%" y="341" width="0.0649%" height="15" fill="rgb(205,115,49)" fg:x="118" fg:w="1"/><text x="7.9024%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="7.6524%" y="325" width="0.0649%" height="15" fill="rgb(250,154,43)" fg:x="118" fg:w="1"/><text x="7.9024%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="7.6524%" y="309" width="0.0649%" height="15" fill="rgb(226,43,29)" fg:x="118" fg:w="1"/><text x="7.9024%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="7.6524%" y="293" width="0.0649%" height="15" fill="rgb(249,228,39)" fg:x="118" fg:w="1"/><text x="7.9024%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="7.6524%" y="277" width="0.0649%" height="15" fill="rgb(216,79,43)" fg:x="118" fg:w="1"/><text x="7.9024%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.6524%" y="261" width="0.0649%" height="15" fill="rgb(228,95,12)" fg:x="118" fg:w="1"/><text x="7.9024%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.6524%" y="245" width="0.0649%" height="15" fill="rgb(249,221,15)" fg:x="118" fg:w="1"/><text x="7.9024%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.6524%" y="229" width="0.0649%" height="15" fill="rgb(233,34,13)" fg:x="118" fg:w="1"/><text x="7.9024%" y="239.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="7.5875%" y="533" width="0.1946%" height="15" fill="rgb(214,103,39)" fg:x="117" fg:w="3"/><text x="7.8375%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="7.5875%" y="517" width="0.1946%" height="15" fill="rgb(251,126,39)" fg:x="117" fg:w="3"/><text x="7.8375%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.7173%" y="501" width="0.0649%" height="15" fill="rgb(214,216,36)" fg:x="119" fg:w="1"/><text x="7.9673%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.7173%" y="485" width="0.0649%" height="15" fill="rgb(220,221,8)" fg:x="119" fg:w="1"/><text x="7.9673%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.7173%" y="469" width="0.0649%" height="15" fill="rgb(240,216,3)" fg:x="119" fg:w="1"/><text x="7.9673%" y="479.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="7.7821%" y="389" width="0.0649%" height="15" fill="rgb(232,218,17)" fg:x="120" fg:w="1"/><text x="8.0321%" y="399.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="7.7821%" y="373" width="0.0649%" height="15" fill="rgb(229,163,45)" fg:x="120" fg:w="1"/><text x="8.0321%" y="383.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="7.7821%" y="357" width="0.0649%" height="15" fill="rgb(231,110,42)" fg:x="120" fg:w="1"/><text x="8.0321%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="7.7821%" y="341" width="0.0649%" height="15" fill="rgb(208,170,48)" fg:x="120" fg:w="1"/><text x="8.0321%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.7821%" y="325" width="0.0649%" height="15" fill="rgb(239,116,25)" fg:x="120" fg:w="1"/><text x="8.0321%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.7821%" y="309" width="0.0649%" height="15" fill="rgb(219,200,50)" fg:x="120" fg:w="1"/><text x="8.0321%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.7821%" y="293" width="0.0649%" height="15" fill="rgb(245,200,0)" fg:x="120" fg:w="1"/><text x="8.0321%" y="303.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="7.7821%" y="437" width="0.1297%" height="15" fill="rgb(245,119,33)" fg:x="120" fg:w="2"/><text x="8.0321%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="7.7821%" y="421" width="0.1297%" height="15" fill="rgb(231,125,12)" fg:x="120" fg:w="2"/><text x="8.0321%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="7.7821%" y="405" width="0.1297%" height="15" fill="rgb(216,96,41)" fg:x="120" fg:w="2"/><text x="8.0321%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="7.8470%" y="389" width="0.0649%" height="15" fill="rgb(248,43,45)" fg:x="121" fg:w="1"/><text x="8.0970%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.8470%" y="373" width="0.0649%" height="15" fill="rgb(217,222,7)" fg:x="121" fg:w="1"/><text x="8.0970%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.8470%" y="357" width="0.0649%" height="15" fill="rgb(233,28,6)" fg:x="121" fg:w="1"/><text x="8.0970%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.8470%" y="341" width="0.0649%" height="15" fill="rgb(231,218,15)" fg:x="121" fg:w="1"/><text x="8.0970%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="7.3930%" y="661" width="0.5837%" height="15" fill="rgb(226,171,48)" fg:x="114" fg:w="9"/><text x="7.6430%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (7 samples, 0.45%)</title><rect x="7.5227%" y="645" width="0.4540%" height="15" fill="rgb(235,201,9)" fg:x="116" fg:w="7"/><text x="7.7727%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (7 samples, 0.45%)</title><rect x="7.5227%" y="629" width="0.4540%" height="15" fill="rgb(217,80,15)" fg:x="116" fg:w="7"/><text x="7.7727%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (7 samples, 0.45%)</title><rect x="7.5227%" y="613" width="0.4540%" height="15" fill="rgb(219,152,8)" fg:x="116" fg:w="7"/><text x="7.7727%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (7 samples, 0.45%)</title><rect x="7.5227%" y="597" width="0.4540%" height="15" fill="rgb(243,107,38)" fg:x="116" fg:w="7"/><text x="7.7727%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="7.5875%" y="581" width="0.3891%" height="15" fill="rgb(231,17,5)" fg:x="117" fg:w="6"/><text x="7.8375%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="7.5875%" y="565" width="0.3891%" height="15" fill="rgb(209,25,54)" fg:x="117" fg:w="6"/><text x="7.8375%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="7.5875%" y="549" width="0.3891%" height="15" fill="rgb(219,0,2)" fg:x="117" fg:w="6"/><text x="7.8375%" y="559.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="7.7821%" y="533" width="0.1946%" height="15" fill="rgb(246,9,5)" fg:x="120" fg:w="3"/><text x="8.0321%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="7.7821%" y="517" width="0.1946%" height="15" fill="rgb(226,159,4)" fg:x="120" fg:w="3"/><text x="8.0321%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="7.7821%" y="501" width="0.1946%" height="15" fill="rgb(219,175,34)" fg:x="120" fg:w="3"/><text x="8.0321%" y="511.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="7.7821%" y="485" width="0.1946%" height="15" fill="rgb(236,10,46)" fg:x="120" fg:w="3"/><text x="8.0321%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="7.7821%" y="469" width="0.1946%" height="15" fill="rgb(240,211,16)" fg:x="120" fg:w="3"/><text x="8.0321%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="7.7821%" y="453" width="0.1946%" height="15" fill="rgb(205,3,43)" fg:x="120" fg:w="3"/><text x="8.0321%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.9118%" y="437" width="0.0649%" height="15" fill="rgb(245,7,22)" fg:x="122" fg:w="1"/><text x="8.1618%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.9118%" y="421" width="0.0649%" height="15" fill="rgb(239,132,32)" fg:x="122" fg:w="1"/><text x="8.1618%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.9118%" y="405" width="0.0649%" height="15" fill="rgb(228,202,34)" fg:x="122" fg:w="1"/><text x="8.1618%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="7.2633%" y="773" width="0.7782%" height="15" fill="rgb(254,200,22)" fg:x="112" fg:w="12"/><text x="7.5133%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (10 samples, 0.65%)</title><rect x="7.3930%" y="757" width="0.6485%" height="15" fill="rgb(219,10,39)" fg:x="114" fg:w="10"/><text x="7.6430%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (10 samples, 0.65%)</title><rect x="7.3930%" y="741" width="0.6485%" height="15" fill="rgb(226,210,39)" fg:x="114" fg:w="10"/><text x="7.6430%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="7.3930%" y="725" width="0.6485%" height="15" fill="rgb(208,219,16)" fg:x="114" fg:w="10"/><text x="7.6430%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.65%)</title><rect x="7.3930%" y="709" width="0.6485%" height="15" fill="rgb(216,158,51)" fg:x="114" fg:w="10"/><text x="7.6430%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (10 samples, 0.65%)</title><rect x="7.3930%" y="693" width="0.6485%" height="15" fill="rgb(233,14,44)" fg:x="114" fg:w="10"/><text x="7.6430%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (10 samples, 0.65%)</title><rect x="7.3930%" y="677" width="0.6485%" height="15" fill="rgb(237,97,39)" fg:x="114" fg:w="10"/><text x="7.6430%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="7.9767%" y="661" width="0.0649%" height="15" fill="rgb(218,198,43)" fg:x="123" fg:w="1"/><text x="8.2267%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="7.9767%" y="645" width="0.0649%" height="15" fill="rgb(231,104,20)" fg:x="123" fg:w="1"/><text x="8.2267%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="7.9767%" y="629" width="0.0649%" height="15" fill="rgb(254,36,13)" fg:x="123" fg:w="1"/><text x="8.2267%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13 samples, 0.84%)</title><rect x="7.2633%" y="885" width="0.8431%" height="15" fill="rgb(248,14,50)" fg:x="112" fg:w="13"/><text x="7.5133%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (13 samples, 0.84%)</title><rect x="7.2633%" y="869" width="0.8431%" height="15" fill="rgb(217,107,29)" fg:x="112" fg:w="13"/><text x="7.5133%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (13 samples, 0.84%)</title><rect x="7.2633%" y="853" width="0.8431%" height="15" fill="rgb(251,169,33)" fg:x="112" fg:w="13"/><text x="7.5133%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (13 samples, 0.84%)</title><rect x="7.2633%" y="837" width="0.8431%" height="15" fill="rgb(217,108,32)" fg:x="112" fg:w="13"/><text x="7.5133%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (13 samples, 0.84%)</title><rect x="7.2633%" y="821" width="0.8431%" height="15" fill="rgb(219,66,42)" fg:x="112" fg:w="13"/><text x="7.5133%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (13 samples, 0.84%)</title><rect x="7.2633%" y="805" width="0.8431%" height="15" fill="rgb(206,180,7)" fg:x="112" fg:w="13"/><text x="7.5133%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (13 samples, 0.84%)</title><rect x="7.2633%" y="789" width="0.8431%" height="15" fill="rgb(208,226,31)" fg:x="112" fg:w="13"/><text x="7.5133%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.0415%" y="773" width="0.0649%" height="15" fill="rgb(218,26,49)" fg:x="124" fg:w="1"/><text x="8.2915%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.0415%" y="757" width="0.0649%" height="15" fill="rgb(233,197,48)" fg:x="124" fg:w="1"/><text x="8.2915%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.0415%" y="741" width="0.0649%" height="15" fill="rgb(252,181,51)" fg:x="124" fg:w="1"/><text x="8.2915%" y="751.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (14 samples, 0.91%)</title><rect x="7.2633%" y="965" width="0.9079%" height="15" fill="rgb(253,90,19)" fg:x="112" fg:w="14"/><text x="7.5133%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (14 samples, 0.91%)</title><rect x="7.2633%" y="949" width="0.9079%" height="15" fill="rgb(215,171,30)" fg:x="112" fg:w="14"/><text x="7.5133%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (14 samples, 0.91%)</title><rect x="7.2633%" y="933" width="0.9079%" height="15" fill="rgb(214,222,9)" fg:x="112" fg:w="14"/><text x="7.5133%" y="943.50"></text></g><g><title>bincode::internal::deserialize (14 samples, 0.91%)</title><rect x="7.2633%" y="917" width="0.9079%" height="15" fill="rgb(223,3,22)" fg:x="112" fg:w="14"/><text x="7.5133%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (14 samples, 0.91%)</title><rect x="7.2633%" y="901" width="0.9079%" height="15" fill="rgb(225,196,46)" fg:x="112" fg:w="14"/><text x="7.5133%" y="911.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="8.1064%" y="885" width="0.0649%" height="15" fill="rgb(209,110,37)" fg:x="125" fg:w="1"/><text x="8.3564%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.1064%" y="869" width="0.0649%" height="15" fill="rgb(249,89,12)" fg:x="125" fg:w="1"/><text x="8.3564%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.1064%" y="853" width="0.0649%" height="15" fill="rgb(226,27,33)" fg:x="125" fg:w="1"/><text x="8.3564%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.1064%" y="837" width="0.0649%" height="15" fill="rgb(213,82,22)" fg:x="125" fg:w="1"/><text x="8.3564%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (15 samples, 0.97%)</title><rect x="7.2633%" y="981" width="0.9728%" height="15" fill="rgb(248,140,0)" fg:x="112" fg:w="15"/><text x="7.5133%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="8.1712%" y="965" width="0.0649%" height="15" fill="rgb(228,106,3)" fg:x="126" fg:w="1"/><text x="8.4212%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="8.1712%" y="949" width="0.0649%" height="15" fill="rgb(209,23,37)" fg:x="126" fg:w="1"/><text x="8.4212%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="8.1712%" y="933" width="0.0649%" height="15" fill="rgb(241,93,50)" fg:x="126" fg:w="1"/><text x="8.4212%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.1712%" y="917" width="0.0649%" height="15" fill="rgb(253,46,43)" fg:x="126" fg:w="1"/><text x="8.4212%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.1712%" y="901" width="0.0649%" height="15" fill="rgb(226,206,43)" fg:x="126" fg:w="1"/><text x="8.4212%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.1712%" y="885" width="0.0649%" height="15" fill="rgb(217,54,7)" fg:x="126" fg:w="1"/><text x="8.4212%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="8.2361%" y="981" width="0.0649%" height="15" fill="rgb(223,5,52)" fg:x="127" fg:w="1"/><text x="8.4861%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.2361%" y="965" width="0.0649%" height="15" fill="rgb(206,52,46)" fg:x="127" fg:w="1"/><text x="8.4861%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.2361%" y="949" width="0.0649%" height="15" fill="rgb(253,136,11)" fg:x="127" fg:w="1"/><text x="8.4861%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.2361%" y="933" width="0.0649%" height="15" fill="rgb(208,106,33)" fg:x="127" fg:w="1"/><text x="8.4861%" y="943.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="8.3009%" y="533" width="0.0649%" height="15" fill="rgb(206,54,4)" fg:x="128" fg:w="1"/><text x="8.5509%" y="543.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="8.3009%" y="517" width="0.0649%" height="15" fill="rgb(213,3,15)" fg:x="128" fg:w="1"/><text x="8.5509%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="8.3009%" y="501" width="0.0649%" height="15" fill="rgb(252,211,39)" fg:x="128" fg:w="1"/><text x="8.5509%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="8.3009%" y="485" width="0.0649%" height="15" fill="rgb(223,6,36)" fg:x="128" fg:w="1"/><text x="8.5509%" y="495.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="8.3009%" y="469" width="0.0649%" height="15" fill="rgb(252,169,45)" fg:x="128" fg:w="1"/><text x="8.5509%" y="479.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="8.3009%" y="453" width="0.0649%" height="15" fill="rgb(212,48,26)" fg:x="128" fg:w="1"/><text x="8.5509%" y="463.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="8.3009%" y="437" width="0.0649%" height="15" fill="rgb(251,102,48)" fg:x="128" fg:w="1"/><text x="8.5509%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="8.3009%" y="421" width="0.0649%" height="15" fill="rgb(243,208,16)" fg:x="128" fg:w="1"/><text x="8.5509%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="8.3009%" y="405" width="0.0649%" height="15" fill="rgb(219,96,24)" fg:x="128" fg:w="1"/><text x="8.5509%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="8.3009%" y="389" width="0.0649%" height="15" fill="rgb(219,33,29)" fg:x="128" fg:w="1"/><text x="8.5509%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="8.3009%" y="373" width="0.0649%" height="15" fill="rgb(223,176,5)" fg:x="128" fg:w="1"/><text x="8.5509%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.3009%" y="357" width="0.0649%" height="15" fill="rgb(228,140,14)" fg:x="128" fg:w="1"/><text x="8.5509%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.3009%" y="341" width="0.0649%" height="15" fill="rgb(217,179,31)" fg:x="128" fg:w="1"/><text x="8.5509%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.3009%" y="325" width="0.0649%" height="15" fill="rgb(230,9,30)" fg:x="128" fg:w="1"/><text x="8.5509%" y="335.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="8.3009%" y="981" width="0.1297%" height="15" fill="rgb(230,136,20)" fg:x="128" fg:w="2"/><text x="8.5509%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="8.3009%" y="965" width="0.1297%" height="15" fill="rgb(215,210,22)" fg:x="128" fg:w="2"/><text x="8.5509%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="8.3009%" y="949" width="0.1297%" height="15" fill="rgb(218,43,5)" fg:x="128" fg:w="2"/><text x="8.5509%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="8.3009%" y="933" width="0.1297%" height="15" fill="rgb(216,11,5)" fg:x="128" fg:w="2"/><text x="8.5509%" y="943.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="917" width="0.1297%" height="15" fill="rgb(209,82,29)" fg:x="128" fg:w="2"/><text x="8.5509%" y="927.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="901" width="0.1297%" height="15" fill="rgb(244,115,12)" fg:x="128" fg:w="2"/><text x="8.5509%" y="911.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="8.3009%" y="885" width="0.1297%" height="15" fill="rgb(222,82,18)" fg:x="128" fg:w="2"/><text x="8.5509%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="869" width="0.1297%" height="15" fill="rgb(249,227,8)" fg:x="128" fg:w="2"/><text x="8.5509%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="853" width="0.1297%" height="15" fill="rgb(253,141,45)" fg:x="128" fg:w="2"/><text x="8.5509%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="8.3009%" y="837" width="0.1297%" height="15" fill="rgb(234,184,4)" fg:x="128" fg:w="2"/><text x="8.5509%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="8.3009%" y="821" width="0.1297%" height="15" fill="rgb(218,194,23)" fg:x="128" fg:w="2"/><text x="8.5509%" y="831.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="8.3009%" y="805" width="0.1297%" height="15" fill="rgb(235,66,41)" fg:x="128" fg:w="2"/><text x="8.5509%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="8.3009%" y="789" width="0.1297%" height="15" fill="rgb(245,217,1)" fg:x="128" fg:w="2"/><text x="8.5509%" y="799.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="8.3009%" y="773" width="0.1297%" height="15" fill="rgb(229,91,1)" fg:x="128" fg:w="2"/><text x="8.5509%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="757" width="0.1297%" height="15" fill="rgb(207,101,30)" fg:x="128" fg:w="2"/><text x="8.5509%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="741" width="0.1297%" height="15" fill="rgb(223,82,49)" fg:x="128" fg:w="2"/><text x="8.5509%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="8.3009%" y="725" width="0.1297%" height="15" fill="rgb(218,167,17)" fg:x="128" fg:w="2"/><text x="8.5509%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="8.3009%" y="709" width="0.1297%" height="15" fill="rgb(208,103,14)" fg:x="128" fg:w="2"/><text x="8.5509%" y="719.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="8.3009%" y="693" width="0.1297%" height="15" fill="rgb(238,20,8)" fg:x="128" fg:w="2"/><text x="8.5509%" y="703.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="8.3009%" y="677" width="0.1297%" height="15" fill="rgb(218,80,54)" fg:x="128" fg:w="2"/><text x="8.5509%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="8.3009%" y="661" width="0.1297%" height="15" fill="rgb(240,144,17)" fg:x="128" fg:w="2"/><text x="8.5509%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="645" width="0.1297%" height="15" fill="rgb(245,27,50)" fg:x="128" fg:w="2"/><text x="8.5509%" y="655.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="8.3009%" y="629" width="0.1297%" height="15" fill="rgb(251,51,7)" fg:x="128" fg:w="2"/><text x="8.5509%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="8.3009%" y="613" width="0.1297%" height="15" fill="rgb(245,217,29)" fg:x="128" fg:w="2"/><text x="8.5509%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="8.3009%" y="597" width="0.1297%" height="15" fill="rgb(221,176,29)" fg:x="128" fg:w="2"/><text x="8.5509%" y="607.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="8.3009%" y="581" width="0.1297%" height="15" fill="rgb(212,180,24)" fg:x="128" fg:w="2"/><text x="8.5509%" y="591.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="8.3009%" y="565" width="0.1297%" height="15" fill="rgb(254,24,2)" fg:x="128" fg:w="2"/><text x="8.5509%" y="575.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="8.3009%" y="549" width="0.1297%" height="15" fill="rgb(230,100,2)" fg:x="128" fg:w="2"/><text x="8.5509%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="8.3658%" y="533" width="0.0649%" height="15" fill="rgb(219,142,25)" fg:x="129" fg:w="1"/><text x="8.6158%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.3658%" y="517" width="0.0649%" height="15" fill="rgb(240,73,43)" fg:x="129" fg:w="1"/><text x="8.6158%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.3658%" y="501" width="0.0649%" height="15" fill="rgb(214,114,15)" fg:x="129" fg:w="1"/><text x="8.6158%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.3658%" y="485" width="0.0649%" height="15" fill="rgb(207,130,4)" fg:x="129" fg:w="1"/><text x="8.6158%" y="495.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (42 samples, 2.72%)</title><rect x="5.7717%" y="1029" width="2.7237%" height="15" fill="rgb(221,25,40)" fg:x="89" fg:w="42"/><text x="6.0217%" y="1039.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (42 samples, 2.72%)</title><rect x="5.7717%" y="1013" width="2.7237%" height="15" fill="rgb(241,184,7)" fg:x="89" fg:w="42"/><text x="6.0217%" y="1023.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (35 samples, 2.27%)</title><rect x="6.2257%" y="997" width="2.2698%" height="15" fill="rgb(235,159,4)" fg:x="96" fg:w="35"/><text x="6.4757%" y="1007.50">r..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="8.4306%" y="981" width="0.0649%" height="15" fill="rgb(214,87,48)" fg:x="130" fg:w="1"/><text x="8.6806%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="8.4306%" y="965" width="0.0649%" height="15" fill="rgb(246,198,24)" fg:x="130" fg:w="1"/><text x="8.6806%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="8.4306%" y="949" width="0.0649%" height="15" fill="rgb(209,66,40)" fg:x="130" fg:w="1"/><text x="8.6806%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="8.4306%" y="933" width="0.0649%" height="15" fill="rgb(233,147,39)" fg:x="130" fg:w="1"/><text x="8.6806%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="8.4306%" y="917" width="0.0649%" height="15" fill="rgb(231,145,52)" fg:x="130" fg:w="1"/><text x="8.6806%" y="927.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="8.4306%" y="901" width="0.0649%" height="15" fill="rgb(206,20,26)" fg:x="130" fg:w="1"/><text x="8.6806%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="8.4306%" y="885" width="0.0649%" height="15" fill="rgb(238,220,4)" fg:x="130" fg:w="1"/><text x="8.6806%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="8.4306%" y="869" width="0.0649%" height="15" fill="rgb(252,195,42)" fg:x="130" fg:w="1"/><text x="8.6806%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="8.4306%" y="853" width="0.0649%" height="15" fill="rgb(209,10,6)" fg:x="130" fg:w="1"/><text x="8.6806%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.4306%" y="837" width="0.0649%" height="15" fill="rgb(229,3,52)" fg:x="130" fg:w="1"/><text x="8.6806%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.4306%" y="821" width="0.0649%" height="15" fill="rgb(253,49,37)" fg:x="130" fg:w="1"/><text x="8.6806%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.4306%" y="805" width="0.0649%" height="15" fill="rgb(240,103,49)" fg:x="130" fg:w="1"/><text x="8.6806%" y="815.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.06%)</title><rect x="8.4955%" y="1013" width="0.0649%" height="15" fill="rgb(250,182,30)" fg:x="131" fg:w="1"/><text x="8.7455%" y="1023.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.06%)</title><rect x="8.4955%" y="997" width="0.0649%" height="15" fill="rgb(248,8,30)" fg:x="131" fg:w="1"/><text x="8.7455%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.06%)</title><rect x="8.4955%" y="981" width="0.0649%" height="15" fill="rgb(237,120,30)" fg:x="131" fg:w="1"/><text x="8.7455%" y="991.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.06%)</title><rect x="8.4955%" y="965" width="0.0649%" height="15" fill="rgb(221,146,34)" fg:x="131" fg:w="1"/><text x="8.7455%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.06%)</title><rect x="8.4955%" y="949" width="0.0649%" height="15" fill="rgb(242,55,13)" fg:x="131" fg:w="1"/><text x="8.7455%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="8.4955%" y="933" width="0.0649%" height="15" fill="rgb(242,112,31)" fg:x="131" fg:w="1"/><text x="8.7455%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="8.4955%" y="917" width="0.0649%" height="15" fill="rgb(249,192,27)" fg:x="131" fg:w="1"/><text x="8.7455%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="8.4955%" y="901" width="0.0649%" height="15" fill="rgb(208,204,44)" fg:x="131" fg:w="1"/><text x="8.7455%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="8.4955%" y="885" width="0.0649%" height="15" fill="rgb(208,93,54)" fg:x="131" fg:w="1"/><text x="8.7455%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="8.4955%" y="869" width="0.0649%" height="15" fill="rgb(242,1,31)" fg:x="131" fg:w="1"/><text x="8.7455%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="8.4955%" y="853" width="0.0649%" height="15" fill="rgb(241,83,25)" fg:x="131" fg:w="1"/><text x="8.7455%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="8.4955%" y="837" width="0.0649%" height="15" fill="rgb(205,169,50)" fg:x="131" fg:w="1"/><text x="8.7455%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="8.4955%" y="821" width="0.0649%" height="15" fill="rgb(239,186,37)" fg:x="131" fg:w="1"/><text x="8.7455%" y="831.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="8.4955%" y="805" width="0.0649%" height="15" fill="rgb(205,221,10)" fg:x="131" fg:w="1"/><text x="8.7455%" y="815.50"></text></g><g><title>tcache_get (1 samples, 0.06%)</title><rect x="8.4955%" y="789" width="0.0649%" height="15" fill="rgb(218,196,15)" fg:x="131" fg:w="1"/><text x="8.7455%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.4955%" y="773" width="0.0649%" height="15" fill="rgb(218,196,35)" fg:x="131" fg:w="1"/><text x="8.7455%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.4955%" y="757" width="0.0649%" height="15" fill="rgb(233,63,24)" fg:x="131" fg:w="1"/><text x="8.7455%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.4955%" y="741" width="0.0649%" height="15" fill="rgb(225,8,4)" fg:x="131" fg:w="1"/><text x="8.7455%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="8.5603%" y="1013" width="0.1297%" height="15" fill="rgb(234,105,35)" fg:x="132" fg:w="2"/><text x="8.8103%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="8.5603%" y="997" width="0.1297%" height="15" fill="rgb(236,21,32)" fg:x="132" fg:w="2"/><text x="8.8103%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="8.5603%" y="981" width="0.1297%" height="15" fill="rgb(228,109,6)" fg:x="132" fg:w="2"/><text x="8.8103%" y="991.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="8.6900%" y="949" width="0.0649%" height="15" fill="rgb(229,215,31)" fg:x="134" fg:w="1"/><text x="8.9400%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="8.6900%" y="933" width="0.0649%" height="15" fill="rgb(221,52,54)" fg:x="134" fg:w="1"/><text x="8.9400%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="8.6900%" y="917" width="0.0649%" height="15" fill="rgb(252,129,43)" fg:x="134" fg:w="1"/><text x="8.9400%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.6900%" y="901" width="0.0649%" height="15" fill="rgb(248,183,27)" fg:x="134" fg:w="1"/><text x="8.9400%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.6900%" y="885" width="0.0649%" height="15" fill="rgb(250,0,22)" fg:x="134" fg:w="1"/><text x="8.9400%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.6900%" y="869" width="0.0649%" height="15" fill="rgb(213,166,10)" fg:x="134" fg:w="1"/><text x="8.9400%" y="879.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (2 samples, 0.13%)</title><rect x="8.6900%" y="965" width="0.1297%" height="15" fill="rgb(207,163,36)" fg:x="134" fg:w="2"/><text x="8.9400%" y="975.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="8.7549%" y="949" width="0.0649%" height="15" fill="rgb(208,122,22)" fg:x="135" fg:w="1"/><text x="9.0049%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="8.7549%" y="933" width="0.0649%" height="15" fill="rgb(207,104,49)" fg:x="135" fg:w="1"/><text x="9.0049%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="8.7549%" y="917" width="0.0649%" height="15" fill="rgb(248,211,50)" fg:x="135" fg:w="1"/><text x="9.0049%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="8.7549%" y="901" width="0.0649%" height="15" fill="rgb(217,13,45)" fg:x="135" fg:w="1"/><text x="9.0049%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="8.7549%" y="885" width="0.0649%" height="15" fill="rgb(211,216,49)" fg:x="135" fg:w="1"/><text x="9.0049%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="8.7549%" y="869" width="0.0649%" height="15" fill="rgb(221,58,53)" fg:x="135" fg:w="1"/><text x="9.0049%" y="879.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="8.7549%" y="853" width="0.0649%" height="15" fill="rgb(220,112,41)" fg:x="135" fg:w="1"/><text x="9.0049%" y="863.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="8.7549%" y="837" width="0.0649%" height="15" fill="rgb(236,38,28)" fg:x="135" fg:w="1"/><text x="9.0049%" y="847.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="8.7549%" y="821" width="0.0649%" height="15" fill="rgb(227,195,22)" fg:x="135" fg:w="1"/><text x="9.0049%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="8.7549%" y="805" width="0.0649%" height="15" fill="rgb(214,55,33)" fg:x="135" fg:w="1"/><text x="9.0049%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.7549%" y="789" width="0.0649%" height="15" fill="rgb(248,80,13)" fg:x="135" fg:w="1"/><text x="9.0049%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.7549%" y="773" width="0.0649%" height="15" fill="rgb(238,52,6)" fg:x="135" fg:w="1"/><text x="9.0049%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.7549%" y="757" width="0.0649%" height="15" fill="rgb(224,198,47)" fg:x="135" fg:w="1"/><text x="9.0049%" y="767.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="8.8197%" y="965" width="0.0649%" height="15" fill="rgb(233,171,20)" fg:x="136" fg:w="1"/><text x="9.0697%" y="975.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="8.8197%" y="949" width="0.0649%" height="15" fill="rgb(241,30,25)" fg:x="136" fg:w="1"/><text x="9.0697%" y="959.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="8.8197%" y="933" width="0.0649%" height="15" fill="rgb(207,171,38)" fg:x="136" fg:w="1"/><text x="9.0697%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="8.8197%" y="917" width="0.0649%" height="15" fill="rgb(234,70,1)" fg:x="136" fg:w="1"/><text x="9.0697%" y="927.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.06%)</title><rect x="8.8197%" y="901" width="0.0649%" height="15" fill="rgb(232,178,18)" fg:x="136" fg:w="1"/><text x="9.0697%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.06%)</title><rect x="8.8197%" y="885" width="0.0649%" height="15" fill="rgb(241,78,40)" fg:x="136" fg:w="1"/><text x="9.0697%" y="895.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="8.8197%" y="869" width="0.0649%" height="15" fill="rgb(222,35,25)" fg:x="136" fg:w="1"/><text x="9.0697%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="8.8197%" y="853" width="0.0649%" height="15" fill="rgb(207,92,16)" fg:x="136" fg:w="1"/><text x="9.0697%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="8.8197%" y="837" width="0.0649%" height="15" fill="rgb(216,59,51)" fg:x="136" fg:w="1"/><text x="9.0697%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="8.8197%" y="821" width="0.0649%" height="15" fill="rgb(213,80,28)" fg:x="136" fg:w="1"/><text x="9.0697%" y="831.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="8.8197%" y="805" width="0.0649%" height="15" fill="rgb(220,93,7)" fg:x="136" fg:w="1"/><text x="9.0697%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="8.8197%" y="789" width="0.0649%" height="15" fill="rgb(225,24,44)" fg:x="136" fg:w="1"/><text x="9.0697%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (1 samples, 0.06%)</title><rect x="8.8197%" y="773" width="0.0649%" height="15" fill="rgb(243,74,40)" fg:x="136" fg:w="1"/><text x="9.0697%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="8.8197%" y="757" width="0.0649%" height="15" fill="rgb(228,39,7)" fg:x="136" fg:w="1"/><text x="9.0697%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="8.8197%" y="741" width="0.0649%" height="15" fill="rgb(227,79,8)" fg:x="136" fg:w="1"/><text x="9.0697%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="8.8197%" y="725" width="0.0649%" height="15" fill="rgb(236,58,11)" fg:x="136" fg:w="1"/><text x="9.0697%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="8.8846%" y="917" width="0.1297%" height="15" fill="rgb(249,63,35)" fg:x="137" fg:w="2"/><text x="9.1346%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="8.8846%" y="901" width="0.1297%" height="15" fill="rgb(252,114,16)" fg:x="137" fg:w="2"/><text x="9.1346%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="8.8846%" y="885" width="0.1297%" height="15" fill="rgb(254,151,24)" fg:x="137" fg:w="2"/><text x="9.1346%" y="895.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (6 samples, 0.39%)</title><rect x="8.6900%" y="1013" width="0.3891%" height="15" fill="rgb(253,54,39)" fg:x="134" fg:w="6"/><text x="8.9400%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (6 samples, 0.39%)</title><rect x="8.6900%" y="997" width="0.3891%" height="15" fill="rgb(243,25,45)" fg:x="134" fg:w="6"/><text x="8.9400%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (6 samples, 0.39%)</title><rect x="8.6900%" y="981" width="0.3891%" height="15" fill="rgb(234,134,9)" fg:x="134" fg:w="6"/><text x="8.9400%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.19%)</title><rect x="8.8846%" y="965" width="0.1946%" height="15" fill="rgb(227,166,31)" fg:x="137" fg:w="3"/><text x="9.1346%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.19%)</title><rect x="8.8846%" y="949" width="0.1946%" height="15" fill="rgb(245,143,41)" fg:x="137" fg:w="3"/><text x="9.1346%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.19%)</title><rect x="8.8846%" y="933" width="0.1946%" height="15" fill="rgb(238,181,32)" fg:x="137" fg:w="3"/><text x="9.1346%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="9.0143%" y="917" width="0.0649%" height="15" fill="rgb(224,113,18)" fg:x="139" fg:w="1"/><text x="9.2643%" y="927.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="9.0143%" y="901" width="0.0649%" height="15" fill="rgb(240,229,28)" fg:x="139" fg:w="1"/><text x="9.2643%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="9.0143%" y="885" width="0.0649%" height="15" fill="rgb(250,185,3)" fg:x="139" fg:w="1"/><text x="9.2643%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="9.0143%" y="869" width="0.0649%" height="15" fill="rgb(212,59,25)" fg:x="139" fg:w="1"/><text x="9.2643%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="9.0143%" y="853" width="0.0649%" height="15" fill="rgb(221,87,20)" fg:x="139" fg:w="1"/><text x="9.2643%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.0143%" y="837" width="0.0649%" height="15" fill="rgb(213,74,28)" fg:x="139" fg:w="1"/><text x="9.2643%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.0143%" y="821" width="0.0649%" height="15" fill="rgb(224,132,34)" fg:x="139" fg:w="1"/><text x="9.2643%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.0143%" y="805" width="0.0649%" height="15" fill="rgb(222,101,24)" fg:x="139" fg:w="1"/><text x="9.2643%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.0791%" y="981" width="0.0649%" height="15" fill="rgb(254,142,4)" fg:x="140" fg:w="1"/><text x="9.3291%" y="991.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.0791%" y="965" width="0.0649%" height="15" fill="rgb(230,229,49)" fg:x="140" fg:w="1"/><text x="9.3291%" y="975.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.0791%" y="949" width="0.0649%" height="15" fill="rgb(238,70,47)" fg:x="140" fg:w="1"/><text x="9.3291%" y="959.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="9.1440%" y="869" width="0.0649%" height="15" fill="rgb(231,160,17)" fg:x="141" fg:w="1"/><text x="9.3940%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="9.1440%" y="853" width="0.0649%" height="15" fill="rgb(218,68,53)" fg:x="141" fg:w="1"/><text x="9.3940%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="9.1440%" y="837" width="0.0649%" height="15" fill="rgb(236,111,10)" fg:x="141" fg:w="1"/><text x="9.3940%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="9.1440%" y="821" width="0.0649%" height="15" fill="rgb(224,34,41)" fg:x="141" fg:w="1"/><text x="9.3940%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="9.1440%" y="805" width="0.0649%" height="15" fill="rgb(241,118,19)" fg:x="141" fg:w="1"/><text x="9.3940%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.1440%" y="789" width="0.0649%" height="15" fill="rgb(238,129,25)" fg:x="141" fg:w="1"/><text x="9.3940%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.1440%" y="773" width="0.0649%" height="15" fill="rgb(238,22,31)" fg:x="141" fg:w="1"/><text x="9.3940%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.1440%" y="757" width="0.0649%" height="15" fill="rgb(222,174,48)" fg:x="141" fg:w="1"/><text x="9.3940%" y="767.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="9.1440%" y="965" width="0.1297%" height="15" fill="rgb(206,152,40)" fg:x="141" fg:w="2"/><text x="9.3940%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="9.1440%" y="949" width="0.1297%" height="15" fill="rgb(218,99,54)" fg:x="141" fg:w="2"/><text x="9.3940%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="9.1440%" y="933" width="0.1297%" height="15" fill="rgb(220,174,26)" fg:x="141" fg:w="2"/><text x="9.3940%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="9.1440%" y="917" width="0.1297%" height="15" fill="rgb(245,116,9)" fg:x="141" fg:w="2"/><text x="9.3940%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="9.1440%" y="901" width="0.1297%" height="15" fill="rgb(209,72,35)" fg:x="141" fg:w="2"/><text x="9.3940%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="9.1440%" y="885" width="0.1297%" height="15" fill="rgb(226,126,21)" fg:x="141" fg:w="2"/><text x="9.3940%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="9.2088%" y="869" width="0.0649%" height="15" fill="rgb(227,192,1)" fg:x="142" fg:w="1"/><text x="9.4588%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="9.2088%" y="853" width="0.0649%" height="15" fill="rgb(237,180,29)" fg:x="142" fg:w="1"/><text x="9.4588%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="9.2088%" y="837" width="0.0649%" height="15" fill="rgb(230,197,35)" fg:x="142" fg:w="1"/><text x="9.4588%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="9.2088%" y="821" width="0.0649%" height="15" fill="rgb(246,193,31)" fg:x="142" fg:w="1"/><text x="9.4588%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.2088%" y="805" width="0.0649%" height="15" fill="rgb(241,36,4)" fg:x="142" fg:w="1"/><text x="9.4588%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.2088%" y="789" width="0.0649%" height="15" fill="rgb(241,130,17)" fg:x="142" fg:w="1"/><text x="9.4588%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.2088%" y="773" width="0.0649%" height="15" fill="rgb(206,137,32)" fg:x="142" fg:w="1"/><text x="9.4588%" y="783.50"></text></g><g><title>&lt;&amp;str as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="9.2737%" y="901" width="0.1297%" height="15" fill="rgb(237,228,51)" fg:x="143" fg:w="2"/><text x="9.5237%" y="911.50"></text></g><g><title>&lt;&amp;str as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="9.2737%" y="885" width="0.1297%" height="15" fill="rgb(243,6,42)" fg:x="143" fg:w="2"/><text x="9.5237%" y="895.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.13%)</title><rect x="9.2737%" y="869" width="0.1297%" height="15" fill="rgb(251,74,28)" fg:x="143" fg:w="2"/><text x="9.5237%" y="879.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.13%)</title><rect x="9.2737%" y="853" width="0.1297%" height="15" fill="rgb(218,20,49)" fg:x="143" fg:w="2"/><text x="9.5237%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="9.2737%" y="837" width="0.1297%" height="15" fill="rgb(238,28,14)" fg:x="143" fg:w="2"/><text x="9.5237%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="9.2737%" y="821" width="0.1297%" height="15" fill="rgb(229,40,46)" fg:x="143" fg:w="2"/><text x="9.5237%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="9.2737%" y="805" width="0.1297%" height="15" fill="rgb(244,195,20)" fg:x="143" fg:w="2"/><text x="9.5237%" y="815.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="9.2737%" y="949" width="0.1946%" height="15" fill="rgb(253,56,35)" fg:x="143" fg:w="3"/><text x="9.5237%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (3 samples, 0.19%)</title><rect x="9.2737%" y="933" width="0.1946%" height="15" fill="rgb(210,149,44)" fg:x="143" fg:w="3"/><text x="9.5237%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="9.2737%" y="917" width="0.1946%" height="15" fill="rgb(240,135,12)" fg:x="143" fg:w="3"/><text x="9.5237%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="9.4034%" y="901" width="0.0649%" height="15" fill="rgb(251,24,50)" fg:x="145" fg:w="1"/><text x="9.6534%" y="911.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.06%)</title><rect x="9.4034%" y="885" width="0.0649%" height="15" fill="rgb(243,200,47)" fg:x="145" fg:w="1"/><text x="9.6534%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="9.4034%" y="869" width="0.0649%" height="15" fill="rgb(224,166,26)" fg:x="145" fg:w="1"/><text x="9.6534%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.4034%" y="853" width="0.0649%" height="15" fill="rgb(233,0,47)" fg:x="145" fg:w="1"/><text x="9.6534%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.4034%" y="837" width="0.0649%" height="15" fill="rgb(253,80,5)" fg:x="145" fg:w="1"/><text x="9.6534%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.4034%" y="821" width="0.0649%" height="15" fill="rgb(214,133,25)" fg:x="145" fg:w="1"/><text x="9.6534%" y="831.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="9.1440%" y="981" width="0.3891%" height="15" fill="rgb(209,27,14)" fg:x="141" fg:w="6"/><text x="9.3940%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="9.2737%" y="965" width="0.2594%" height="15" fill="rgb(219,102,51)" fg:x="143" fg:w="4"/><text x="9.5237%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="9.4682%" y="949" width="0.0649%" height="15" fill="rgb(237,18,16)" fg:x="146" fg:w="1"/><text x="9.7182%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.06%)</title><rect x="9.4682%" y="933" width="0.0649%" height="15" fill="rgb(241,85,17)" fg:x="146" fg:w="1"/><text x="9.7182%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.4682%" y="917" width="0.0649%" height="15" fill="rgb(236,90,42)" fg:x="146" fg:w="1"/><text x="9.7182%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.4682%" y="901" width="0.0649%" height="15" fill="rgb(249,57,21)" fg:x="146" fg:w="1"/><text x="9.7182%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.4682%" y="885" width="0.0649%" height="15" fill="rgb(243,12,36)" fg:x="146" fg:w="1"/><text x="9.7182%" y="895.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (8 samples, 0.52%)</title><rect x="9.0791%" y="997" width="0.5188%" height="15" fill="rgb(253,128,47)" fg:x="140" fg:w="8"/><text x="9.3291%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="9.5331%" y="981" width="0.0649%" height="15" fill="rgb(207,33,20)" fg:x="147" fg:w="1"/><text x="9.7831%" y="991.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="9.5331%" y="965" width="0.0649%" height="15" fill="rgb(233,215,35)" fg:x="147" fg:w="1"/><text x="9.7831%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.5331%" y="949" width="0.0649%" height="15" fill="rgb(249,188,52)" fg:x="147" fg:w="1"/><text x="9.7831%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.5331%" y="933" width="0.0649%" height="15" fill="rgb(225,12,32)" fg:x="147" fg:w="1"/><text x="9.7831%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.5331%" y="917" width="0.0649%" height="15" fill="rgb(247,98,14)" fg:x="147" fg:w="1"/><text x="9.7831%" y="927.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.06%)</title><rect x="9.5979%" y="965" width="0.0649%" height="15" fill="rgb(247,219,48)" fg:x="148" fg:w="1"/><text x="9.8479%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.06%)</title><rect x="9.5979%" y="949" width="0.0649%" height="15" fill="rgb(253,60,48)" fg:x="148" fg:w="1"/><text x="9.8479%" y="959.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.06%)</title><rect x="9.5979%" y="933" width="0.0649%" height="15" fill="rgb(245,15,52)" fg:x="148" fg:w="1"/><text x="9.8479%" y="943.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.06%)</title><rect x="9.5979%" y="917" width="0.0649%" height="15" fill="rgb(220,133,28)" fg:x="148" fg:w="1"/><text x="9.8479%" y="927.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.06%)</title><rect x="9.5979%" y="901" width="0.0649%" height="15" fill="rgb(217,180,4)" fg:x="148" fg:w="1"/><text x="9.8479%" y="911.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.06%)</title><rect x="9.5979%" y="885" width="0.0649%" height="15" fill="rgb(251,24,1)" fg:x="148" fg:w="1"/><text x="9.8479%" y="895.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="9.5979%" y="869" width="0.0649%" height="15" fill="rgb(212,185,49)" fg:x="148" fg:w="1"/><text x="9.8479%" y="879.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="9.5979%" y="853" width="0.0649%" height="15" fill="rgb(215,175,22)" fg:x="148" fg:w="1"/><text x="9.8479%" y="863.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="9.5979%" y="837" width="0.0649%" height="15" fill="rgb(250,205,14)" fg:x="148" fg:w="1"/><text x="9.8479%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="9.5979%" y="821" width="0.0649%" height="15" fill="rgb(225,211,22)" fg:x="148" fg:w="1"/><text x="9.8479%" y="831.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.06%)</title><rect x="9.5979%" y="805" width="0.0649%" height="15" fill="rgb(251,179,42)" fg:x="148" fg:w="1"/><text x="9.8479%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="9.5979%" y="789" width="0.0649%" height="15" fill="rgb(208,216,51)" fg:x="148" fg:w="1"/><text x="9.8479%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="9.5979%" y="773" width="0.0649%" height="15" fill="rgb(235,36,11)" fg:x="148" fg:w="1"/><text x="9.8479%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="9.5979%" y="757" width="0.0649%" height="15" fill="rgb(213,189,28)" fg:x="148" fg:w="1"/><text x="9.8479%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="9.5979%" y="741" width="0.0649%" height="15" fill="rgb(227,203,42)" fg:x="148" fg:w="1"/><text x="9.8479%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="9.5979%" y="725" width="0.0649%" height="15" fill="rgb(244,72,36)" fg:x="148" fg:w="1"/><text x="9.8479%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.06%)</title><rect x="9.5979%" y="709" width="0.0649%" height="15" fill="rgb(213,53,17)" fg:x="148" fg:w="1"/><text x="9.8479%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="9.5979%" y="693" width="0.0649%" height="15" fill="rgb(207,167,3)" fg:x="148" fg:w="1"/><text x="9.8479%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.06%)</title><rect x="9.5979%" y="677" width="0.0649%" height="15" fill="rgb(216,98,30)" fg:x="148" fg:w="1"/><text x="9.8479%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (1 samples, 0.06%)</title><rect x="9.5979%" y="661" width="0.0649%" height="15" fill="rgb(236,123,15)" fg:x="148" fg:w="1"/><text x="9.8479%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.5979%" y="645" width="0.0649%" height="15" fill="rgb(248,81,50)" fg:x="148" fg:w="1"/><text x="9.8479%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.5979%" y="629" width="0.0649%" height="15" fill="rgb(214,120,4)" fg:x="148" fg:w="1"/><text x="9.8479%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.5979%" y="613" width="0.0649%" height="15" fill="rgb(208,179,34)" fg:x="148" fg:w="1"/><text x="9.8479%" y="623.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (2 samples, 0.13%)</title><rect x="9.5979%" y="981" width="0.1297%" height="15" fill="rgb(227,140,7)" fg:x="148" fg:w="2"/><text x="9.8479%" y="991.50"></text></g><g><title>redb::types::TypeName::new (1 samples, 0.06%)</title><rect x="9.6628%" y="965" width="0.0649%" height="15" fill="rgb(214,22,6)" fg:x="149" fg:w="1"/><text x="9.9128%" y="975.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.06%)</title><rect x="9.6628%" y="949" width="0.0649%" height="15" fill="rgb(207,137,27)" fg:x="149" fg:w="1"/><text x="9.9128%" y="959.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.06%)</title><rect x="9.6628%" y="933" width="0.0649%" height="15" fill="rgb(210,8,46)" fg:x="149" fg:w="1"/><text x="9.9128%" y="943.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.06%)</title><rect x="9.6628%" y="917" width="0.0649%" height="15" fill="rgb(240,16,54)" fg:x="149" fg:w="1"/><text x="9.9128%" y="927.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.06%)</title><rect x="9.6628%" y="901" width="0.0649%" height="15" fill="rgb(211,209,29)" fg:x="149" fg:w="1"/><text x="9.9128%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.06%)</title><rect x="9.6628%" y="885" width="0.0649%" height="15" fill="rgb(226,228,24)" fg:x="149" fg:w="1"/><text x="9.9128%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="9.6628%" y="869" width="0.0649%" height="15" fill="rgb(222,84,9)" fg:x="149" fg:w="1"/><text x="9.9128%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="9.6628%" y="853" width="0.0649%" height="15" fill="rgb(234,203,30)" fg:x="149" fg:w="1"/><text x="9.9128%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="9.6628%" y="837" width="0.0649%" height="15" fill="rgb(238,109,14)" fg:x="149" fg:w="1"/><text x="9.9128%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="9.6628%" y="821" width="0.0649%" height="15" fill="rgb(233,206,34)" fg:x="149" fg:w="1"/><text x="9.9128%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="9.6628%" y="805" width="0.0649%" height="15" fill="rgb(220,167,47)" fg:x="149" fg:w="1"/><text x="9.9128%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="9.6628%" y="789" width="0.0649%" height="15" fill="rgb(238,105,10)" fg:x="149" fg:w="1"/><text x="9.9128%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="9.6628%" y="773" width="0.0649%" height="15" fill="rgb(213,227,17)" fg:x="149" fg:w="1"/><text x="9.9128%" y="783.50"></text></g><g><title>core::hint::assert_unchecked (1 samples, 0.06%)</title><rect x="9.6628%" y="757" width="0.0649%" height="15" fill="rgb(217,132,38)" fg:x="149" fg:w="1"/><text x="9.9128%" y="767.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="9.6628%" y="741" width="0.0649%" height="15" fill="rgb(242,146,4)" fg:x="149" fg:w="1"/><text x="9.9128%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.6628%" y="725" width="0.0649%" height="15" fill="rgb(212,61,9)" fg:x="149" fg:w="1"/><text x="9.9128%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.6628%" y="709" width="0.0649%" height="15" fill="rgb(247,126,22)" fg:x="149" fg:w="1"/><text x="9.9128%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.6628%" y="693" width="0.0649%" height="15" fill="rgb(220,196,2)" fg:x="149" fg:w="1"/><text x="9.9128%" y="703.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (20 samples, 1.30%)</title><rect x="8.4955%" y="1029" width="1.2970%" height="15" fill="rgb(208,46,4)" fg:x="131" fg:w="20"/><text x="8.7455%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (11 samples, 0.71%)</title><rect x="9.0791%" y="1013" width="0.7134%" height="15" fill="rgb(252,104,46)" fg:x="140" fg:w="11"/><text x="9.3291%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (3 samples, 0.19%)</title><rect x="9.5979%" y="997" width="0.1946%" height="15" fill="rgb(237,152,48)" fg:x="148" fg:w="3"/><text x="9.8479%" y="1007.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="9.7276%" y="981" width="0.0649%" height="15" fill="rgb(221,59,37)" fg:x="150" fg:w="1"/><text x="9.9776%" y="991.50"></text></g><g><title>&lt;redb::types::TypeName as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="9.7276%" y="965" width="0.0649%" height="15" fill="rgb(209,202,51)" fg:x="150" fg:w="1"/><text x="9.9776%" y="975.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="9.7276%" y="949" width="0.0649%" height="15" fill="rgb(228,81,30)" fg:x="150" fg:w="1"/><text x="9.9776%" y="959.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="9.7276%" y="933" width="0.0649%" height="15" fill="rgb(227,42,39)" fg:x="150" fg:w="1"/><text x="9.9776%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.06%)</title><rect x="9.7276%" y="917" width="0.0649%" height="15" fill="rgb(221,26,2)" fg:x="150" fg:w="1"/><text x="9.9776%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="9.7276%" y="901" width="0.0649%" height="15" fill="rgb(254,61,31)" fg:x="150" fg:w="1"/><text x="9.9776%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.06%)</title><rect x="9.7276%" y="885" width="0.0649%" height="15" fill="rgb(222,173,38)" fg:x="150" fg:w="1"/><text x="9.9776%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.7276%" y="869" width="0.0649%" height="15" fill="rgb(218,50,12)" fg:x="150" fg:w="1"/><text x="9.9776%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.7276%" y="853" width="0.0649%" height="15" fill="rgb(223,88,40)" fg:x="150" fg:w="1"/><text x="9.9776%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.7276%" y="837" width="0.0649%" height="15" fill="rgb(237,54,19)" fg:x="150" fg:w="1"/><text x="9.9776%" y="847.50"></text></g><g><title>utxo::Asset::get_by_name (70 samples, 4.54%)</title><rect x="5.3178%" y="1061" width="4.5396%" height="15" fill="rgb(251,129,25)" fg:x="82" fg:w="70"/><text x="5.5678%" y="1071.50">utxo:..</text></g><g><title>utxo::Asset::compose (68 samples, 4.41%)</title><rect x="5.4475%" y="1045" width="4.4099%" height="15" fill="rgb(238,97,19)" fg:x="84" fg:w="68"/><text x="5.6975%" y="1055.50">utxo:..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="9.7925%" y="1029" width="0.0649%" height="15" fill="rgb(240,169,18)" fg:x="151" fg:w="1"/><text x="10.0425%" y="1039.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="9.7925%" y="1013" width="0.0649%" height="15" fill="rgb(230,187,49)" fg:x="151" fg:w="1"/><text x="10.0425%" y="1023.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="9.7925%" y="997" width="0.0649%" height="15" fill="rgb(209,44,26)" fg:x="151" fg:w="1"/><text x="10.0425%" y="1007.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="9.7925%" y="981" width="0.0649%" height="15" fill="rgb(244,0,6)" fg:x="151" fg:w="1"/><text x="10.0425%" y="991.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="9.7925%" y="965" width="0.0649%" height="15" fill="rgb(248,18,21)" fg:x="151" fg:w="1"/><text x="10.0425%" y="975.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="9.7925%" y="949" width="0.0649%" height="15" fill="rgb(245,180,19)" fg:x="151" fg:w="1"/><text x="10.0425%" y="959.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.06%)</title><rect x="9.7925%" y="933" width="0.0649%" height="15" fill="rgb(252,118,36)" fg:x="151" fg:w="1"/><text x="10.0425%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.06%)</title><rect x="9.7925%" y="917" width="0.0649%" height="15" fill="rgb(210,224,19)" fg:x="151" fg:w="1"/><text x="10.0425%" y="927.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (1 samples, 0.06%)</title><rect x="9.7925%" y="901" width="0.0649%" height="15" fill="rgb(218,30,24)" fg:x="151" fg:w="1"/><text x="10.0425%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.7925%" y="885" width="0.0649%" height="15" fill="rgb(219,75,50)" fg:x="151" fg:w="1"/><text x="10.0425%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.7925%" y="869" width="0.0649%" height="15" fill="rgb(234,72,50)" fg:x="151" fg:w="1"/><text x="10.0425%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.7925%" y="853" width="0.0649%" height="15" fill="rgb(219,100,48)" fg:x="151" fg:w="1"/><text x="10.0425%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="9.8573%" y="1029" width="0.0649%" height="15" fill="rgb(253,5,41)" fg:x="152" fg:w="1"/><text x="10.1073%" y="1039.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="9.8573%" y="1013" width="0.0649%" height="15" fill="rgb(247,181,11)" fg:x="152" fg:w="1"/><text x="10.1073%" y="1023.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.8573%" y="997" width="0.0649%" height="15" fill="rgb(222,223,25)" fg:x="152" fg:w="1"/><text x="10.1073%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.8573%" y="981" width="0.0649%" height="15" fill="rgb(214,198,28)" fg:x="152" fg:w="1"/><text x="10.1073%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.8573%" y="965" width="0.0649%" height="15" fill="rgb(230,46,43)" fg:x="152" fg:w="1"/><text x="10.1073%" y="975.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="9.9222%" y="1013" width="0.0649%" height="15" fill="rgb(233,65,53)" fg:x="153" fg:w="1"/><text x="10.1722%" y="1023.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.9222%" y="997" width="0.0649%" height="15" fill="rgb(221,121,27)" fg:x="153" fg:w="1"/><text x="10.1722%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.9222%" y="981" width="0.0649%" height="15" fill="rgb(247,70,47)" fg:x="153" fg:w="1"/><text x="10.1722%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.9222%" y="965" width="0.0649%" height="15" fill="rgb(228,85,35)" fg:x="153" fg:w="1"/><text x="10.1722%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_iters::EntryGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,()&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="9.9870%" y="1013" width="0.0649%" height="15" fill="rgb(209,50,18)" fg:x="154" fg:w="1"/><text x="10.2370%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::EntryGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,()&gt;&gt; (1 samples, 0.06%)</title><rect x="9.9870%" y="997" width="0.0649%" height="15" fill="rgb(250,19,35)" fg:x="154" fg:w="1"/><text x="10.2370%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="9.9870%" y="981" width="0.0649%" height="15" fill="rgb(253,107,29)" fg:x="154" fg:w="1"/><text x="10.2370%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="9.9870%" y="965" width="0.0649%" height="15" fill="rgb(252,179,29)" fg:x="154" fg:w="1"/><text x="10.2370%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="9.9870%" y="949" width="0.0649%" height="15" fill="rgb(238,194,6)" fg:x="154" fg:w="1"/><text x="10.2370%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="9.9870%" y="933" width="0.0649%" height="15" fill="rgb(238,164,29)" fg:x="154" fg:w="1"/><text x="10.2370%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="9.9870%" y="917" width="0.0649%" height="15" fill="rgb(224,25,9)" fg:x="154" fg:w="1"/><text x="10.2370%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="9.9870%" y="901" width="0.0649%" height="15" fill="rgb(244,153,23)" fg:x="154" fg:w="1"/><text x="10.2370%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="9.9870%" y="885" width="0.0649%" height="15" fill="rgb(212,203,14)" fg:x="154" fg:w="1"/><text x="10.2370%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="9.9870%" y="869" width="0.0649%" height="15" fill="rgb(220,164,20)" fg:x="154" fg:w="1"/><text x="10.2370%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="9.9870%" y="853" width="0.0649%" height="15" fill="rgb(222,203,48)" fg:x="154" fg:w="1"/><text x="10.2370%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="9.9870%" y="837" width="0.0649%" height="15" fill="rgb(215,159,22)" fg:x="154" fg:w="1"/><text x="10.2370%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="9.9870%" y="821" width="0.0649%" height="15" fill="rgb(216,183,47)" fg:x="154" fg:w="1"/><text x="10.2370%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="9.9870%" y="805" width="0.0649%" height="15" fill="rgb(229,195,25)" fg:x="154" fg:w="1"/><text x="10.2370%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="9.9870%" y="789" width="0.0649%" height="15" fill="rgb(224,132,51)" fg:x="154" fg:w="1"/><text x="10.2370%" y="799.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.19%)</title><rect x="9.9222%" y="1029" width="0.1946%" height="15" fill="rgb(240,63,7)" fg:x="153" fg:w="3"/><text x="10.1722%" y="1039.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="10.0519%" y="1013" width="0.0649%" height="15" fill="rgb(249,182,41)" fg:x="155" fg:w="1"/><text x="10.3019%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="10.0519%" y="997" width="0.0649%" height="15" fill="rgb(243,47,26)" fg:x="155" fg:w="1"/><text x="10.3019%" y="1007.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.0519%" y="981" width="0.0649%" height="15" fill="rgb(233,48,2)" fg:x="155" fg:w="1"/><text x="10.3019%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.0519%" y="965" width="0.0649%" height="15" fill="rgb(244,165,34)" fg:x="155" fg:w="1"/><text x="10.3019%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="10.0519%" y="949" width="0.0649%" height="15" fill="rgb(207,89,7)" fg:x="155" fg:w="1"/><text x="10.3019%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.0519%" y="933" width="0.0649%" height="15" fill="rgb(244,117,36)" fg:x="155" fg:w="1"/><text x="10.3019%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.0519%" y="917" width="0.0649%" height="15" fill="rgb(226,144,34)" fg:x="155" fg:w="1"/><text x="10.3019%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.0519%" y="901" width="0.0649%" height="15" fill="rgb(213,23,19)" fg:x="155" fg:w="1"/><text x="10.3019%" y="911.50"></text></g><g><title>&lt;redb::multimap_table::MultimapValue&lt;V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.32%)</title><rect x="9.8573%" y="1045" width="0.3243%" height="15" fill="rgb(217,75,12)" fg:x="152" fg:w="5"/><text x="10.1073%" y="1055.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::with_owned_value (1 samples, 0.06%)</title><rect x="10.1167%" y="1029" width="0.0649%" height="15" fill="rgb(224,159,17)" fg:x="156" fg:w="1"/><text x="10.3667%" y="1039.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.1167%" y="1013" width="0.0649%" height="15" fill="rgb(217,118,1)" fg:x="156" fg:w="1"/><text x="10.3667%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.1167%" y="997" width="0.0649%" height="15" fill="rgb(232,180,48)" fg:x="156" fg:w="1"/><text x="10.3667%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.1167%" y="981" width="0.0649%" height="15" fill="rgb(230,27,33)" fg:x="156" fg:w="1"/><text x="10.3667%" y="991.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="10.1816%" y="1029" width="0.0649%" height="15" fill="rgb(205,31,21)" fg:x="157" fg:w="1"/><text x="10.4316%" y="1039.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="10.1816%" y="1013" width="0.0649%" height="15" fill="rgb(253,59,4)" fg:x="157" fg:w="1"/><text x="10.4316%" y="1023.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.1816%" y="997" width="0.0649%" height="15" fill="rgb(224,201,9)" fg:x="157" fg:w="1"/><text x="10.4316%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.1816%" y="981" width="0.0649%" height="15" fill="rgb(229,206,30)" fg:x="157" fg:w="1"/><text x="10.4316%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.1816%" y="965" width="0.0649%" height="15" fill="rgb(212,67,47)" fg:x="157" fg:w="1"/><text x="10.4316%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="10.2464%" y="1029" width="0.0649%" height="15" fill="rgb(211,96,50)" fg:x="158" fg:w="1"/><text x="10.4964%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="10.2464%" y="1013" width="0.0649%" height="15" fill="rgb(252,114,18)" fg:x="158" fg:w="1"/><text x="10.4964%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="10.2464%" y="997" width="0.0649%" height="15" fill="rgb(223,58,37)" fg:x="158" fg:w="1"/><text x="10.4964%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="10.2464%" y="981" width="0.0649%" height="15" fill="rgb(237,70,4)" fg:x="158" fg:w="1"/><text x="10.4964%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="10.2464%" y="965" width="0.0649%" height="15" fill="rgb(244,85,46)" fg:x="158" fg:w="1"/><text x="10.4964%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.2464%" y="949" width="0.0649%" height="15" fill="rgb(223,39,52)" fg:x="158" fg:w="1"/><text x="10.4964%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.2464%" y="933" width="0.0649%" height="15" fill="rgb(218,200,14)" fg:x="158" fg:w="1"/><text x="10.4964%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="10.2464%" y="917" width="0.0649%" height="15" fill="rgb(208,171,16)" fg:x="158" fg:w="1"/><text x="10.4964%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="10.2464%" y="901" width="0.0649%" height="15" fill="rgb(234,200,18)" fg:x="158" fg:w="1"/><text x="10.4964%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="10.2464%" y="885" width="0.0649%" height="15" fill="rgb(228,45,11)" fg:x="158" fg:w="1"/><text x="10.4964%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="10.2464%" y="869" width="0.0649%" height="15" fill="rgb(237,182,11)" fg:x="158" fg:w="1"/><text x="10.4964%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="10.2464%" y="853" width="0.0649%" height="15" fill="rgb(241,175,49)" fg:x="158" fg:w="1"/><text x="10.4964%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="10.2464%" y="837" width="0.0649%" height="15" fill="rgb(247,38,35)" fg:x="158" fg:w="1"/><text x="10.4964%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.2464%" y="821" width="0.0649%" height="15" fill="rgb(228,39,49)" fg:x="158" fg:w="1"/><text x="10.4964%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.2464%" y="805" width="0.0649%" height="15" fill="rgb(226,101,26)" fg:x="158" fg:w="1"/><text x="10.4964%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.2464%" y="789" width="0.0649%" height="15" fill="rgb(206,141,19)" fg:x="158" fg:w="1"/><text x="10.4964%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="10.3113%" y="853" width="0.0649%" height="15" fill="rgb(211,200,13)" fg:x="159" fg:w="1"/><text x="10.5613%" y="863.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="10.3113%" y="837" width="0.0649%" height="15" fill="rgb(241,121,6)" fg:x="159" fg:w="1"/><text x="10.5613%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="10.3113%" y="821" width="0.0649%" height="15" fill="rgb(234,221,29)" fg:x="159" fg:w="1"/><text x="10.5613%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="10.3113%" y="805" width="0.0649%" height="15" fill="rgb(229,136,5)" fg:x="159" fg:w="1"/><text x="10.5613%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="10.3113%" y="789" width="0.0649%" height="15" fill="rgb(238,36,11)" fg:x="159" fg:w="1"/><text x="10.5613%" y="799.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="10.3113%" y="773" width="0.0649%" height="15" fill="rgb(251,55,41)" fg:x="159" fg:w="1"/><text x="10.5613%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="10.3113%" y="757" width="0.0649%" height="15" fill="rgb(242,34,40)" fg:x="159" fg:w="1"/><text x="10.5613%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="10.3113%" y="741" width="0.0649%" height="15" fill="rgb(215,42,17)" fg:x="159" fg:w="1"/><text x="10.5613%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.3113%" y="725" width="0.0649%" height="15" fill="rgb(207,44,46)" fg:x="159" fg:w="1"/><text x="10.5613%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.3113%" y="709" width="0.0649%" height="15" fill="rgb(211,206,28)" fg:x="159" fg:w="1"/><text x="10.5613%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.3113%" y="693" width="0.0649%" height="15" fill="rgb(237,167,16)" fg:x="159" fg:w="1"/><text x="10.5613%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="10.3113%" y="965" width="0.1297%" height="15" fill="rgb(233,66,6)" fg:x="159" fg:w="2"/><text x="10.5613%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="10.3113%" y="949" width="0.1297%" height="15" fill="rgb(246,123,29)" fg:x="159" fg:w="2"/><text x="10.5613%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="10.3113%" y="933" width="0.1297%" height="15" fill="rgb(209,62,40)" fg:x="159" fg:w="2"/><text x="10.5613%" y="943.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="10.3113%" y="917" width="0.1297%" height="15" fill="rgb(218,4,25)" fg:x="159" fg:w="2"/><text x="10.5613%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="10.3113%" y="901" width="0.1297%" height="15" fill="rgb(253,91,49)" fg:x="159" fg:w="2"/><text x="10.5613%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.13%)</title><rect x="10.3113%" y="885" width="0.1297%" height="15" fill="rgb(228,155,29)" fg:x="159" fg:w="2"/><text x="10.5613%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (2 samples, 0.13%)</title><rect x="10.3113%" y="869" width="0.1297%" height="15" fill="rgb(243,57,37)" fg:x="159" fg:w="2"/><text x="10.5613%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="10.3761%" y="853" width="0.0649%" height="15" fill="rgb(244,167,17)" fg:x="160" fg:w="1"/><text x="10.6261%" y="863.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="10.3761%" y="837" width="0.0649%" height="15" fill="rgb(207,181,38)" fg:x="160" fg:w="1"/><text x="10.6261%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="10.3761%" y="821" width="0.0649%" height="15" fill="rgb(211,8,23)" fg:x="160" fg:w="1"/><text x="10.6261%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="10.3761%" y="805" width="0.0649%" height="15" fill="rgb(235,11,44)" fg:x="160" fg:w="1"/><text x="10.6261%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="10.3761%" y="789" width="0.0649%" height="15" fill="rgb(248,18,52)" fg:x="160" fg:w="1"/><text x="10.6261%" y="799.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="10.3761%" y="773" width="0.0649%" height="15" fill="rgb(208,4,7)" fg:x="160" fg:w="1"/><text x="10.6261%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="10.3761%" y="757" width="0.0649%" height="15" fill="rgb(240,17,39)" fg:x="160" fg:w="1"/><text x="10.6261%" y="767.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="10.3761%" y="741" width="0.0649%" height="15" fill="rgb(207,170,3)" fg:x="160" fg:w="1"/><text x="10.6261%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.3761%" y="725" width="0.0649%" height="15" fill="rgb(236,100,52)" fg:x="160" fg:w="1"/><text x="10.6261%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.3761%" y="709" width="0.0649%" height="15" fill="rgb(246,78,51)" fg:x="160" fg:w="1"/><text x="10.6261%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.3761%" y="693" width="0.0649%" height="15" fill="rgb(211,17,15)" fg:x="160" fg:w="1"/><text x="10.6261%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="10.3113%" y="1029" width="0.1946%" height="15" fill="rgb(209,59,46)" fg:x="159" fg:w="3"/><text x="10.5613%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (3 samples, 0.19%)</title><rect x="10.3113%" y="1013" width="0.1946%" height="15" fill="rgb(210,92,25)" fg:x="159" fg:w="3"/><text x="10.5613%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (3 samples, 0.19%)</title><rect x="10.3113%" y="997" width="0.1946%" height="15" fill="rgb(238,174,52)" fg:x="159" fg:w="3"/><text x="10.5613%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="10.3113%" y="981" width="0.1946%" height="15" fill="rgb(230,73,7)" fg:x="159" fg:w="3"/><text x="10.5613%" y="991.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="10.4410%" y="965" width="0.0649%" height="15" fill="rgb(243,124,40)" fg:x="161" fg:w="1"/><text x="10.6910%" y="975.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="10.4410%" y="949" width="0.0649%" height="15" fill="rgb(244,170,11)" fg:x="161" fg:w="1"/><text x="10.6910%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="10.4410%" y="933" width="0.0649%" height="15" fill="rgb(207,114,54)" fg:x="161" fg:w="1"/><text x="10.6910%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="10.4410%" y="917" width="0.0649%" height="15" fill="rgb(205,42,20)" fg:x="161" fg:w="1"/><text x="10.6910%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.4410%" y="901" width="0.0649%" height="15" fill="rgb(230,30,28)" fg:x="161" fg:w="1"/><text x="10.6910%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.4410%" y="885" width="0.0649%" height="15" fill="rgb(205,73,54)" fg:x="161" fg:w="1"/><text x="10.6910%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.4410%" y="869" width="0.0649%" height="15" fill="rgb(254,227,23)" fg:x="161" fg:w="1"/><text x="10.6910%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="10.5058%" y="997" width="0.0649%" height="15" fill="rgb(228,202,34)" fg:x="162" fg:w="1"/><text x="10.7558%" y="1007.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.5058%" y="981" width="0.0649%" height="15" fill="rgb(222,225,37)" fg:x="162" fg:w="1"/><text x="10.7558%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.5058%" y="965" width="0.0649%" height="15" fill="rgb(221,14,54)" fg:x="162" fg:w="1"/><text x="10.7558%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="10.5058%" y="949" width="0.0649%" height="15" fill="rgb(254,102,2)" fg:x="162" fg:w="1"/><text x="10.7558%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="10.5058%" y="933" width="0.0649%" height="15" fill="rgb(232,104,17)" fg:x="162" fg:w="1"/><text x="10.7558%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="10.5058%" y="917" width="0.0649%" height="15" fill="rgb(250,220,14)" fg:x="162" fg:w="1"/><text x="10.7558%" y="927.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="10.5058%" y="901" width="0.0649%" height="15" fill="rgb(241,158,9)" fg:x="162" fg:w="1"/><text x="10.7558%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="10.5058%" y="885" width="0.0649%" height="15" fill="rgb(246,9,43)" fg:x="162" fg:w="1"/><text x="10.7558%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="10.5058%" y="869" width="0.0649%" height="15" fill="rgb(206,73,33)" fg:x="162" fg:w="1"/><text x="10.7558%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="10.5058%" y="853" width="0.0649%" height="15" fill="rgb(222,79,8)" fg:x="162" fg:w="1"/><text x="10.7558%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.5058%" y="837" width="0.0649%" height="15" fill="rgb(234,8,54)" fg:x="162" fg:w="1"/><text x="10.7558%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.5058%" y="821" width="0.0649%" height="15" fill="rgb(209,134,38)" fg:x="162" fg:w="1"/><text x="10.7558%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.5058%" y="805" width="0.0649%" height="15" fill="rgb(230,127,29)" fg:x="162" fg:w="1"/><text x="10.7558%" y="815.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="10.5707%" y="901" width="0.0649%" height="15" fill="rgb(242,44,41)" fg:x="163" fg:w="1"/><text x="10.8207%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="10.5707%" y="885" width="0.0649%" height="15" fill="rgb(222,56,43)" fg:x="163" fg:w="1"/><text x="10.8207%" y="895.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="10.5707%" y="869" width="0.0649%" height="15" fill="rgb(238,39,47)" fg:x="163" fg:w="1"/><text x="10.8207%" y="879.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="10.5707%" y="853" width="0.0649%" height="15" fill="rgb(226,79,43)" fg:x="163" fg:w="1"/><text x="10.8207%" y="863.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="10.5707%" y="837" width="0.0649%" height="15" fill="rgb(242,105,53)" fg:x="163" fg:w="1"/><text x="10.8207%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="10.5707%" y="821" width="0.0649%" height="15" fill="rgb(251,132,46)" fg:x="163" fg:w="1"/><text x="10.8207%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="10.5707%" y="805" width="0.0649%" height="15" fill="rgb(231,77,14)" fg:x="163" fg:w="1"/><text x="10.8207%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="10.5707%" y="789" width="0.0649%" height="15" fill="rgb(240,135,9)" fg:x="163" fg:w="1"/><text x="10.8207%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="10.5707%" y="773" width="0.0649%" height="15" fill="rgb(248,109,14)" fg:x="163" fg:w="1"/><text x="10.8207%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="10.5707%" y="757" width="0.0649%" height="15" fill="rgb(227,146,52)" fg:x="163" fg:w="1"/><text x="10.8207%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="10.5707%" y="741" width="0.0649%" height="15" fill="rgb(232,54,3)" fg:x="163" fg:w="1"/><text x="10.8207%" y="751.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="10.5707%" y="725" width="0.0649%" height="15" fill="rgb(229,201,43)" fg:x="163" fg:w="1"/><text x="10.8207%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.5707%" y="709" width="0.0649%" height="15" fill="rgb(252,161,33)" fg:x="163" fg:w="1"/><text x="10.8207%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.5707%" y="693" width="0.0649%" height="15" fill="rgb(226,146,40)" fg:x="163" fg:w="1"/><text x="10.8207%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.5707%" y="677" width="0.0649%" height="15" fill="rgb(219,47,25)" fg:x="163" fg:w="1"/><text x="10.8207%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="10.6355%" y="869" width="0.0649%" height="15" fill="rgb(250,135,13)" fg:x="164" fg:w="1"/><text x="10.8855%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="10.6355%" y="853" width="0.0649%" height="15" fill="rgb(219,229,18)" fg:x="164" fg:w="1"/><text x="10.8855%" y="863.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="10.6355%" y="837" width="0.0649%" height="15" fill="rgb(217,152,27)" fg:x="164" fg:w="1"/><text x="10.8855%" y="847.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="10.6355%" y="821" width="0.0649%" height="15" fill="rgb(225,71,47)" fg:x="164" fg:w="1"/><text x="10.8855%" y="831.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="10.6355%" y="805" width="0.0649%" height="15" fill="rgb(220,139,14)" fg:x="164" fg:w="1"/><text x="10.8855%" y="815.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u16 (1 samples, 0.06%)</title><rect x="10.6355%" y="789" width="0.0649%" height="15" fill="rgb(247,54,32)" fg:x="164" fg:w="1"/><text x="10.8855%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="10.6355%" y="773" width="0.0649%" height="15" fill="rgb(252,131,39)" fg:x="164" fg:w="1"/><text x="10.8855%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="10.6355%" y="757" width="0.0649%" height="15" fill="rgb(210,108,39)" fg:x="164" fg:w="1"/><text x="10.8855%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.6355%" y="741" width="0.0649%" height="15" fill="rgb(205,23,29)" fg:x="164" fg:w="1"/><text x="10.8855%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.6355%" y="725" width="0.0649%" height="15" fill="rgb(246,139,46)" fg:x="164" fg:w="1"/><text x="10.8855%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.6355%" y="709" width="0.0649%" height="15" fill="rgb(250,81,26)" fg:x="164" fg:w="1"/><text x="10.8855%" y="719.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (3 samples, 0.19%)</title><rect x="10.5707%" y="997" width="0.1946%" height="15" fill="rgb(214,104,7)" fg:x="163" fg:w="3"/><text x="10.8207%" y="1007.50"></text></g><g><title>bincode::config::Options::serialize (3 samples, 0.19%)</title><rect x="10.5707%" y="981" width="0.1946%" height="15" fill="rgb(233,189,8)" fg:x="163" fg:w="3"/><text x="10.8207%" y="991.50"></text></g><g><title>bincode::internal::serialize (3 samples, 0.19%)</title><rect x="10.5707%" y="965" width="0.1946%" height="15" fill="rgb(228,141,17)" fg:x="163" fg:w="3"/><text x="10.8207%" y="975.50"></text></g><g><title>bincode::internal::serialize_into (3 samples, 0.19%)</title><rect x="10.5707%" y="949" width="0.1946%" height="15" fill="rgb(247,157,1)" fg:x="163" fg:w="3"/><text x="10.8207%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (3 samples, 0.19%)</title><rect x="10.5707%" y="933" width="0.1946%" height="15" fill="rgb(249,225,5)" fg:x="163" fg:w="3"/><text x="10.8207%" y="943.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.19%)</title><rect x="10.5707%" y="917" width="0.1946%" height="15" fill="rgb(242,55,13)" fg:x="163" fg:w="3"/><text x="10.8207%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="10.6355%" y="901" width="0.1297%" height="15" fill="rgb(230,49,50)" fg:x="164" fg:w="2"/><text x="10.8855%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="10.6355%" y="885" width="0.1297%" height="15" fill="rgb(241,111,38)" fg:x="164" fg:w="2"/><text x="10.8855%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="10.7004%" y="869" width="0.0649%" height="15" fill="rgb(252,155,4)" fg:x="165" fg:w="1"/><text x="10.9504%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="10.7004%" y="853" width="0.0649%" height="15" fill="rgb(212,69,32)" fg:x="165" fg:w="1"/><text x="10.9504%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.7004%" y="837" width="0.0649%" height="15" fill="rgb(243,107,47)" fg:x="165" fg:w="1"/><text x="10.9504%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.7004%" y="821" width="0.0649%" height="15" fill="rgb(247,130,12)" fg:x="165" fg:w="1"/><text x="10.9504%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.7004%" y="805" width="0.0649%" height="15" fill="rgb(233,74,16)" fg:x="165" fg:w="1"/><text x="10.9504%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="10.7652%" y="901" width="0.0649%" height="15" fill="rgb(208,58,18)" fg:x="166" fg:w="1"/><text x="11.0152%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="10.7652%" y="885" width="0.0649%" height="15" fill="rgb(242,225,1)" fg:x="166" fg:w="1"/><text x="11.0152%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="10.7652%" y="869" width="0.0649%" height="15" fill="rgb(249,39,40)" fg:x="166" fg:w="1"/><text x="11.0152%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="10.7652%" y="853" width="0.0649%" height="15" fill="rgb(207,72,44)" fg:x="166" fg:w="1"/><text x="11.0152%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="10.7652%" y="837" width="0.0649%" height="15" fill="rgb(215,193,12)" fg:x="166" fg:w="1"/><text x="11.0152%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="10.7652%" y="821" width="0.0649%" height="15" fill="rgb(248,41,39)" fg:x="166" fg:w="1"/><text x="11.0152%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.7652%" y="805" width="0.0649%" height="15" fill="rgb(253,85,4)" fg:x="166" fg:w="1"/><text x="11.0152%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.7652%" y="789" width="0.0649%" height="15" fill="rgb(243,70,31)" fg:x="166" fg:w="1"/><text x="11.0152%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.7652%" y="773" width="0.0649%" height="15" fill="rgb(253,195,26)" fg:x="166" fg:w="1"/><text x="11.0152%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="10.7652%" y="981" width="0.1297%" height="15" fill="rgb(243,42,11)" fg:x="166" fg:w="2"/><text x="11.0152%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="10.7652%" y="965" width="0.1297%" height="15" fill="rgb(239,66,17)" fg:x="166" fg:w="2"/><text x="11.0152%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="10.7652%" y="949" width="0.1297%" height="15" fill="rgb(217,132,21)" fg:x="166" fg:w="2"/><text x="11.0152%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="10.7652%" y="933" width="0.1297%" height="15" fill="rgb(252,202,21)" fg:x="166" fg:w="2"/><text x="11.0152%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="10.7652%" y="917" width="0.1297%" height="15" fill="rgb(233,98,36)" fg:x="166" fg:w="2"/><text x="11.0152%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="10.8301%" y="901" width="0.0649%" height="15" fill="rgb(216,153,54)" fg:x="167" fg:w="1"/><text x="11.0801%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="10.8301%" y="885" width="0.0649%" height="15" fill="rgb(250,99,7)" fg:x="167" fg:w="1"/><text x="11.0801%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="10.8301%" y="869" width="0.0649%" height="15" fill="rgb(207,56,50)" fg:x="167" fg:w="1"/><text x="11.0801%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="10.8301%" y="853" width="0.0649%" height="15" fill="rgb(244,61,34)" fg:x="167" fg:w="1"/><text x="11.0801%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="10.8301%" y="837" width="0.0649%" height="15" fill="rgb(241,50,38)" fg:x="167" fg:w="1"/><text x="11.0801%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.8301%" y="821" width="0.0649%" height="15" fill="rgb(212,166,30)" fg:x="167" fg:w="1"/><text x="11.0801%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.8301%" y="805" width="0.0649%" height="15" fill="rgb(249,127,32)" fg:x="167" fg:w="1"/><text x="11.0801%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.8301%" y="789" width="0.0649%" height="15" fill="rgb(209,103,0)" fg:x="167" fg:w="1"/><text x="11.0801%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.8949%" y="901" width="0.0649%" height="15" fill="rgb(238,209,51)" fg:x="168" fg:w="1"/><text x="11.1449%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.8949%" y="885" width="0.0649%" height="15" fill="rgb(237,56,23)" fg:x="168" fg:w="1"/><text x="11.1449%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.8949%" y="869" width="0.0649%" height="15" fill="rgb(215,153,46)" fg:x="168" fg:w="1"/><text x="11.1449%" y="879.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="10.9598%" y="661" width="0.0649%" height="15" fill="rgb(224,49,31)" fg:x="169" fg:w="1"/><text x="11.2098%" y="671.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="10.9598%" y="645" width="0.0649%" height="15" fill="rgb(250,18,42)" fg:x="169" fg:w="1"/><text x="11.2098%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="10.9598%" y="629" width="0.0649%" height="15" fill="rgb(215,176,39)" fg:x="169" fg:w="1"/><text x="11.2098%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="10.9598%" y="613" width="0.0649%" height="15" fill="rgb(223,77,29)" fg:x="169" fg:w="1"/><text x="11.2098%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="10.9598%" y="597" width="0.0649%" height="15" fill="rgb(234,94,52)" fg:x="169" fg:w="1"/><text x="11.2098%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="10.9598%" y="581" width="0.0649%" height="15" fill="rgb(220,154,50)" fg:x="169" fg:w="1"/><text x="11.2098%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="10.9598%" y="725" width="0.1297%" height="15" fill="rgb(212,11,10)" fg:x="169" fg:w="2"/><text x="11.2098%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="10.9598%" y="709" width="0.1297%" height="15" fill="rgb(205,166,19)" fg:x="169" fg:w="2"/><text x="11.2098%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="10.9598%" y="693" width="0.1297%" height="15" fill="rgb(244,198,16)" fg:x="169" fg:w="2"/><text x="11.2098%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="10.9598%" y="677" width="0.1297%" height="15" fill="rgb(219,69,12)" fg:x="169" fg:w="2"/><text x="11.2098%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="11.0246%" y="661" width="0.0649%" height="15" fill="rgb(245,30,7)" fg:x="170" fg:w="1"/><text x="11.2746%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.0246%" y="645" width="0.0649%" height="15" fill="rgb(218,221,48)" fg:x="170" fg:w="1"/><text x="11.2746%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.0246%" y="629" width="0.0649%" height="15" fill="rgb(216,66,15)" fg:x="170" fg:w="1"/><text x="11.2746%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.0246%" y="613" width="0.0649%" height="15" fill="rgb(226,122,50)" fg:x="170" fg:w="1"/><text x="11.2746%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="11.0895%" y="661" width="0.0649%" height="15" fill="rgb(239,156,16)" fg:x="171" fg:w="1"/><text x="11.3395%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.0895%" y="645" width="0.0649%" height="15" fill="rgb(224,27,38)" fg:x="171" fg:w="1"/><text x="11.3395%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.0895%" y="629" width="0.0649%" height="15" fill="rgb(224,39,27)" fg:x="171" fg:w="1"/><text x="11.3395%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.0895%" y="613" width="0.0649%" height="15" fill="rgb(215,92,29)" fg:x="171" fg:w="1"/><text x="11.3395%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.1543%" y="661" width="0.0649%" height="15" fill="rgb(207,159,16)" fg:x="172" fg:w="1"/><text x="11.4043%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.1543%" y="645" width="0.0649%" height="15" fill="rgb(238,163,47)" fg:x="172" fg:w="1"/><text x="11.4043%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.1543%" y="629" width="0.0649%" height="15" fill="rgb(219,91,49)" fg:x="172" fg:w="1"/><text x="11.4043%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="11.2192%" y="501" width="0.0649%" height="15" fill="rgb(227,167,31)" fg:x="173" fg:w="1"/><text x="11.4692%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="11.2192%" y="485" width="0.0649%" height="15" fill="rgb(234,80,54)" fg:x="173" fg:w="1"/><text x="11.4692%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="11.2192%" y="469" width="0.0649%" height="15" fill="rgb(212,114,2)" fg:x="173" fg:w="1"/><text x="11.4692%" y="479.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="11.2192%" y="453" width="0.0649%" height="15" fill="rgb(234,50,24)" fg:x="173" fg:w="1"/><text x="11.4692%" y="463.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="11.2192%" y="437" width="0.0649%" height="15" fill="rgb(221,68,8)" fg:x="173" fg:w="1"/><text x="11.4692%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (1 samples, 0.06%)</title><rect x="11.2192%" y="421" width="0.0649%" height="15" fill="rgb(254,180,31)" fg:x="173" fg:w="1"/><text x="11.4692%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.2192%" y="405" width="0.0649%" height="15" fill="rgb(247,130,50)" fg:x="173" fg:w="1"/><text x="11.4692%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.2192%" y="389" width="0.0649%" height="15" fill="rgb(211,109,4)" fg:x="173" fg:w="1"/><text x="11.4692%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.2192%" y="373" width="0.0649%" height="15" fill="rgb(238,50,21)" fg:x="173" fg:w="1"/><text x="11.4692%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="11.2192%" y="613" width="0.1297%" height="15" fill="rgb(225,57,45)" fg:x="173" fg:w="2"/><text x="11.4692%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="11.2192%" y="597" width="0.1297%" height="15" fill="rgb(209,196,50)" fg:x="173" fg:w="2"/><text x="11.4692%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="11.2192%" y="581" width="0.1297%" height="15" fill="rgb(242,140,13)" fg:x="173" fg:w="2"/><text x="11.4692%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="11.2192%" y="565" width="0.1297%" height="15" fill="rgb(217,111,7)" fg:x="173" fg:w="2"/><text x="11.4692%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="11.2192%" y="549" width="0.1297%" height="15" fill="rgb(253,193,51)" fg:x="173" fg:w="2"/><text x="11.4692%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="11.2192%" y="533" width="0.1297%" height="15" fill="rgb(252,70,29)" fg:x="173" fg:w="2"/><text x="11.4692%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="11.2192%" y="517" width="0.1297%" height="15" fill="rgb(232,127,12)" fg:x="173" fg:w="2"/><text x="11.4692%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="11.2840%" y="501" width="0.0649%" height="15" fill="rgb(211,180,21)" fg:x="174" fg:w="1"/><text x="11.5340%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="11.2840%" y="485" width="0.0649%" height="15" fill="rgb(229,72,13)" fg:x="174" fg:w="1"/><text x="11.5340%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="11.2840%" y="469" width="0.0649%" height="15" fill="rgb(240,211,49)" fg:x="174" fg:w="1"/><text x="11.5340%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="11.2840%" y="453" width="0.0649%" height="15" fill="rgb(219,149,40)" fg:x="174" fg:w="1"/><text x="11.5340%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="11.2840%" y="437" width="0.0649%" height="15" fill="rgb(210,127,46)" fg:x="174" fg:w="1"/><text x="11.5340%" y="447.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="11.2840%" y="421" width="0.0649%" height="15" fill="rgb(220,106,7)" fg:x="174" fg:w="1"/><text x="11.5340%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.2840%" y="405" width="0.0649%" height="15" fill="rgb(249,31,22)" fg:x="174" fg:w="1"/><text x="11.5340%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.2840%" y="389" width="0.0649%" height="15" fill="rgb(253,1,49)" fg:x="174" fg:w="1"/><text x="11.5340%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.2840%" y="373" width="0.0649%" height="15" fill="rgb(227,144,33)" fg:x="174" fg:w="1"/><text x="11.5340%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="11.3489%" y="549" width="0.0649%" height="15" fill="rgb(249,163,44)" fg:x="175" fg:w="1"/><text x="11.5989%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.3489%" y="533" width="0.0649%" height="15" fill="rgb(234,15,39)" fg:x="175" fg:w="1"/><text x="11.5989%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.3489%" y="517" width="0.0649%" height="15" fill="rgb(207,66,16)" fg:x="175" fg:w="1"/><text x="11.5989%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.3489%" y="501" width="0.0649%" height="15" fill="rgb(233,112,24)" fg:x="175" fg:w="1"/><text x="11.5989%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.4137%" y="549" width="0.0649%" height="15" fill="rgb(230,90,22)" fg:x="176" fg:w="1"/><text x="11.6637%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.4137%" y="533" width="0.0649%" height="15" fill="rgb(229,61,13)" fg:x="176" fg:w="1"/><text x="11.6637%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.4137%" y="517" width="0.0649%" height="15" fill="rgb(225,57,24)" fg:x="176" fg:w="1"/><text x="11.6637%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.4786%" y="373" width="0.0649%" height="15" fill="rgb(208,169,48)" fg:x="177" fg:w="1"/><text x="11.7286%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.4786%" y="357" width="0.0649%" height="15" fill="rgb(244,218,51)" fg:x="177" fg:w="1"/><text x="11.7286%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.4786%" y="341" width="0.0649%" height="15" fill="rgb(214,148,10)" fg:x="177" fg:w="1"/><text x="11.7286%" y="351.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="11.4786%" y="421" width="0.1297%" height="15" fill="rgb(225,174,27)" fg:x="177" fg:w="2"/><text x="11.7286%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="11.4786%" y="405" width="0.1297%" height="15" fill="rgb(230,96,26)" fg:x="177" fg:w="2"/><text x="11.7286%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="11.4786%" y="389" width="0.1297%" height="15" fill="rgb(232,10,30)" fg:x="177" fg:w="2"/><text x="11.7286%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="11.5435%" y="373" width="0.0649%" height="15" fill="rgb(222,8,50)" fg:x="178" fg:w="1"/><text x="11.7935%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="11.5435%" y="357" width="0.0649%" height="15" fill="rgb(213,81,27)" fg:x="178" fg:w="1"/><text x="11.7935%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.5435%" y="341" width="0.0649%" height="15" fill="rgb(245,50,10)" fg:x="178" fg:w="1"/><text x="11.7935%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.5435%" y="325" width="0.0649%" height="15" fill="rgb(216,100,18)" fg:x="178" fg:w="1"/><text x="11.7935%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.5435%" y="309" width="0.0649%" height="15" fill="rgb(236,147,54)" fg:x="178" fg:w="1"/><text x="11.7935%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="11.4786%" y="501" width="0.1946%" height="15" fill="rgb(205,143,26)" fg:x="177" fg:w="3"/><text x="11.7286%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="11.4786%" y="485" width="0.1946%" height="15" fill="rgb(236,26,9)" fg:x="177" fg:w="3"/><text x="11.7286%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="11.4786%" y="469" width="0.1946%" height="15" fill="rgb(221,165,53)" fg:x="177" fg:w="3"/><text x="11.7286%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="11.4786%" y="453" width="0.1946%" height="15" fill="rgb(214,110,17)" fg:x="177" fg:w="3"/><text x="11.7286%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="11.4786%" y="437" width="0.1946%" height="15" fill="rgb(237,197,12)" fg:x="177" fg:w="3"/><text x="11.7286%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.6083%" y="421" width="0.0649%" height="15" fill="rgb(205,84,17)" fg:x="179" fg:w="1"/><text x="11.8583%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.6083%" y="405" width="0.0649%" height="15" fill="rgb(237,18,45)" fg:x="179" fg:w="1"/><text x="11.8583%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.6083%" y="389" width="0.0649%" height="15" fill="rgb(221,87,14)" fg:x="179" fg:w="1"/><text x="11.8583%" y="399.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="11.6732%" y="357" width="0.0649%" height="15" fill="rgb(238,186,15)" fg:x="180" fg:w="1"/><text x="11.9232%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="11.6732%" y="341" width="0.0649%" height="15" fill="rgb(208,115,11)" fg:x="180" fg:w="1"/><text x="11.9232%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="11.6732%" y="325" width="0.0649%" height="15" fill="rgb(254,175,0)" fg:x="180" fg:w="1"/><text x="11.9232%" y="335.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="11.6732%" y="309" width="0.0649%" height="15" fill="rgb(227,24,42)" fg:x="180" fg:w="1"/><text x="11.9232%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="11.6732%" y="293" width="0.0649%" height="15" fill="rgb(223,211,37)" fg:x="180" fg:w="1"/><text x="11.9232%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="11.6732%" y="277" width="0.0649%" height="15" fill="rgb(235,49,27)" fg:x="180" fg:w="1"/><text x="11.9232%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="11.6732%" y="261" width="0.0649%" height="15" fill="rgb(254,97,51)" fg:x="180" fg:w="1"/><text x="11.9232%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="11.6732%" y="245" width="0.0649%" height="15" fill="rgb(249,51,40)" fg:x="180" fg:w="1"/><text x="11.9232%" y="255.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="11.6732%" y="229" width="0.0649%" height="15" fill="rgb(210,128,45)" fg:x="180" fg:w="1"/><text x="11.9232%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="11.6732%" y="213" width="0.0649%" height="15" fill="rgb(224,137,50)" fg:x="180" fg:w="1"/><text x="11.9232%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="11.6732%" y="197" width="0.0649%" height="15" fill="rgb(242,15,9)" fg:x="180" fg:w="1"/><text x="11.9232%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="11.6732%" y="181" width="0.0649%" height="15" fill="rgb(233,187,41)" fg:x="180" fg:w="1"/><text x="11.9232%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="11.6732%" y="165" width="0.0649%" height="15" fill="rgb(227,2,29)" fg:x="180" fg:w="1"/><text x="11.9232%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.6732%" y="149" width="0.0649%" height="15" fill="rgb(222,70,3)" fg:x="180" fg:w="1"/><text x="11.9232%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.6732%" y="133" width="0.0649%" height="15" fill="rgb(213,11,42)" fg:x="180" fg:w="1"/><text x="11.9232%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.6732%" y="117" width="0.0649%" height="15" fill="rgb(225,150,9)" fg:x="180" fg:w="1"/><text x="11.9232%" y="127.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="11.6732%" y="469" width="0.1297%" height="15" fill="rgb(230,162,45)" fg:x="180" fg:w="2"/><text x="11.9232%" y="479.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="11.6732%" y="453" width="0.1297%" height="15" fill="rgb(222,14,52)" fg:x="180" fg:w="2"/><text x="11.9232%" y="463.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="11.6732%" y="437" width="0.1297%" height="15" fill="rgb(254,198,14)" fg:x="180" fg:w="2"/><text x="11.9232%" y="447.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="11.6732%" y="421" width="0.1297%" height="15" fill="rgb(220,217,30)" fg:x="180" fg:w="2"/><text x="11.9232%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="11.6732%" y="405" width="0.1297%" height="15" fill="rgb(215,146,41)" fg:x="180" fg:w="2"/><text x="11.9232%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="11.6732%" y="389" width="0.1297%" height="15" fill="rgb(217,27,36)" fg:x="180" fg:w="2"/><text x="11.9232%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="11.6732%" y="373" width="0.1297%" height="15" fill="rgb(219,218,39)" fg:x="180" fg:w="2"/><text x="11.9232%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.7380%" y="357" width="0.0649%" height="15" fill="rgb(219,4,42)" fg:x="181" fg:w="1"/><text x="11.9880%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.7380%" y="341" width="0.0649%" height="15" fill="rgb(249,119,36)" fg:x="181" fg:w="1"/><text x="11.9880%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.7380%" y="325" width="0.0649%" height="15" fill="rgb(209,23,33)" fg:x="181" fg:w="1"/><text x="11.9880%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.65%)</title><rect x="11.2192%" y="629" width="0.6485%" height="15" fill="rgb(211,10,0)" fg:x="173" fg:w="10"/><text x="11.4692%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="11.3489%" y="613" width="0.5188%" height="15" fill="rgb(208,99,37)" fg:x="175" fg:w="8"/><text x="11.5989%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="11.3489%" y="597" width="0.5188%" height="15" fill="rgb(213,132,31)" fg:x="175" fg:w="8"/><text x="11.5989%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="11.3489%" y="581" width="0.5188%" height="15" fill="rgb(243,129,40)" fg:x="175" fg:w="8"/><text x="11.5989%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="11.3489%" y="565" width="0.5188%" height="15" fill="rgb(210,66,33)" fg:x="175" fg:w="8"/><text x="11.5989%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="11.4786%" y="549" width="0.3891%" height="15" fill="rgb(209,189,4)" fg:x="177" fg:w="6"/><text x="11.7286%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="11.4786%" y="533" width="0.3891%" height="15" fill="rgb(214,107,37)" fg:x="177" fg:w="6"/><text x="11.7286%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="11.4786%" y="517" width="0.3891%" height="15" fill="rgb(245,88,54)" fg:x="177" fg:w="6"/><text x="11.7286%" y="527.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="11.6732%" y="501" width="0.1946%" height="15" fill="rgb(205,146,20)" fg:x="180" fg:w="3"/><text x="11.9232%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="11.6732%" y="485" width="0.1946%" height="15" fill="rgb(220,161,25)" fg:x="180" fg:w="3"/><text x="11.9232%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.8029%" y="469" width="0.0649%" height="15" fill="rgb(215,152,15)" fg:x="182" fg:w="1"/><text x="12.0529%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.8029%" y="453" width="0.0649%" height="15" fill="rgb(233,192,44)" fg:x="182" fg:w="1"/><text x="12.0529%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.8029%" y="437" width="0.0649%" height="15" fill="rgb(240,170,46)" fg:x="182" fg:w="1"/><text x="12.0529%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (13 samples, 0.84%)</title><rect x="11.0895%" y="693" width="0.8431%" height="15" fill="rgb(207,104,33)" fg:x="171" fg:w="13"/><text x="11.3395%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (13 samples, 0.84%)</title><rect x="11.0895%" y="677" width="0.8431%" height="15" fill="rgb(219,21,39)" fg:x="171" fg:w="13"/><text x="11.3395%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (11 samples, 0.71%)</title><rect x="11.2192%" y="661" width="0.7134%" height="15" fill="rgb(214,133,29)" fg:x="173" fg:w="11"/><text x="11.4692%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11 samples, 0.71%)</title><rect x="11.2192%" y="645" width="0.7134%" height="15" fill="rgb(226,93,6)" fg:x="173" fg:w="11"/><text x="11.4692%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="11.8677%" y="629" width="0.0649%" height="15" fill="rgb(252,222,34)" fg:x="183" fg:w="1"/><text x="12.1177%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.8677%" y="613" width="0.0649%" height="15" fill="rgb(252,92,48)" fg:x="183" fg:w="1"/><text x="12.1177%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.8677%" y="597" width="0.0649%" height="15" fill="rgb(245,223,24)" fg:x="183" fg:w="1"/><text x="12.1177%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.8677%" y="581" width="0.0649%" height="15" fill="rgb(205,176,3)" fg:x="183" fg:w="1"/><text x="12.1177%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 1.04%)</title><rect x="10.9598%" y="741" width="1.0376%" height="15" fill="rgb(235,151,15)" fg:x="169" fg:w="16"/><text x="11.2098%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (14 samples, 0.91%)</title><rect x="11.0895%" y="725" width="0.9079%" height="15" fill="rgb(237,209,11)" fg:x="171" fg:w="14"/><text x="11.3395%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (14 samples, 0.91%)</title><rect x="11.0895%" y="709" width="0.9079%" height="15" fill="rgb(243,227,24)" fg:x="171" fg:w="14"/><text x="11.3395%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.9326%" y="693" width="0.0649%" height="15" fill="rgb(239,193,16)" fg:x="184" fg:w="1"/><text x="12.1826%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.9326%" y="677" width="0.0649%" height="15" fill="rgb(231,27,9)" fg:x="184" fg:w="1"/><text x="12.1826%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.9326%" y="661" width="0.0649%" height="15" fill="rgb(219,169,10)" fg:x="184" fg:w="1"/><text x="12.1826%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="11.9974%" y="741" width="0.0649%" height="15" fill="rgb(244,229,43)" fg:x="185" fg:w="1"/><text x="12.2474%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="11.9974%" y="725" width="0.0649%" height="15" fill="rgb(254,38,20)" fg:x="185" fg:w="1"/><text x="12.2474%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="11.9974%" y="709" width="0.0649%" height="15" fill="rgb(250,47,30)" fg:x="185" fg:w="1"/><text x="12.2474%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="11.9974%" y="693" width="0.0649%" height="15" fill="rgb(224,124,36)" fg:x="185" fg:w="1"/><text x="12.2474%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 1.17%)</title><rect x="10.9598%" y="853" width="1.1673%" height="15" fill="rgb(246,68,51)" fg:x="169" fg:w="18"/><text x="11.2098%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (18 samples, 1.17%)</title><rect x="10.9598%" y="837" width="1.1673%" height="15" fill="rgb(253,43,49)" fg:x="169" fg:w="18"/><text x="11.2098%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (18 samples, 1.17%)</title><rect x="10.9598%" y="821" width="1.1673%" height="15" fill="rgb(219,54,36)" fg:x="169" fg:w="18"/><text x="11.2098%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 1.17%)</title><rect x="10.9598%" y="805" width="1.1673%" height="15" fill="rgb(227,133,34)" fg:x="169" fg:w="18"/><text x="11.2098%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (18 samples, 1.17%)</title><rect x="10.9598%" y="789" width="1.1673%" height="15" fill="rgb(247,227,15)" fg:x="169" fg:w="18"/><text x="11.2098%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 1.17%)</title><rect x="10.9598%" y="773" width="1.1673%" height="15" fill="rgb(229,96,14)" fg:x="169" fg:w="18"/><text x="11.2098%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 1.17%)</title><rect x="10.9598%" y="757" width="1.1673%" height="15" fill="rgb(220,79,17)" fg:x="169" fg:w="18"/><text x="11.2098%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.0623%" y="741" width="0.0649%" height="15" fill="rgb(205,131,53)" fg:x="186" fg:w="1"/><text x="12.3123%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.0623%" y="725" width="0.0649%" height="15" fill="rgb(209,50,29)" fg:x="186" fg:w="1"/><text x="12.3123%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.0623%" y="709" width="0.0649%" height="15" fill="rgb(245,86,46)" fg:x="186" fg:w="1"/><text x="12.3123%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (21 samples, 1.36%)</title><rect x="10.8949%" y="965" width="1.3619%" height="15" fill="rgb(235,66,46)" fg:x="168" fg:w="21"/><text x="11.1449%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (21 samples, 1.36%)</title><rect x="10.8949%" y="949" width="1.3619%" height="15" fill="rgb(232,148,31)" fg:x="168" fg:w="21"/><text x="11.1449%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (21 samples, 1.36%)</title><rect x="10.8949%" y="933" width="1.3619%" height="15" fill="rgb(217,149,8)" fg:x="168" fg:w="21"/><text x="11.1449%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (21 samples, 1.36%)</title><rect x="10.8949%" y="917" width="1.3619%" height="15" fill="rgb(209,183,11)" fg:x="168" fg:w="21"/><text x="11.1449%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (20 samples, 1.30%)</title><rect x="10.9598%" y="901" width="1.2970%" height="15" fill="rgb(208,55,20)" fg:x="169" fg:w="20"/><text x="11.2098%" y="911.50"></text></g><g><title>bincode::internal::deserialize (20 samples, 1.30%)</title><rect x="10.9598%" y="885" width="1.2970%" height="15" fill="rgb(218,39,14)" fg:x="169" fg:w="20"/><text x="11.2098%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (20 samples, 1.30%)</title><rect x="10.9598%" y="869" width="1.2970%" height="15" fill="rgb(216,169,33)" fg:x="169" fg:w="20"/><text x="11.2098%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="12.1271%" y="853" width="0.1297%" height="15" fill="rgb(233,80,24)" fg:x="187" fg:w="2"/><text x="12.3771%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="12.1271%" y="837" width="0.1297%" height="15" fill="rgb(213,179,31)" fg:x="187" fg:w="2"/><text x="12.3771%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="12.1271%" y="821" width="0.1297%" height="15" fill="rgb(209,19,5)" fg:x="187" fg:w="2"/><text x="12.3771%" y="831.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (22 samples, 1.43%)</title><rect x="10.8949%" y="981" width="1.4267%" height="15" fill="rgb(219,18,35)" fg:x="168" fg:w="22"/><text x="11.1449%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="12.2568%" y="965" width="0.0649%" height="15" fill="rgb(209,169,16)" fg:x="189" fg:w="1"/><text x="12.5068%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="12.2568%" y="949" width="0.0649%" height="15" fill="rgb(245,90,51)" fg:x="189" fg:w="1"/><text x="12.5068%" y="959.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="12.2568%" y="933" width="0.0649%" height="15" fill="rgb(220,99,45)" fg:x="189" fg:w="1"/><text x="12.5068%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.2568%" y="917" width="0.0649%" height="15" fill="rgb(249,89,25)" fg:x="189" fg:w="1"/><text x="12.5068%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.2568%" y="901" width="0.0649%" height="15" fill="rgb(239,193,0)" fg:x="189" fg:w="1"/><text x="12.5068%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.2568%" y="885" width="0.0649%" height="15" fill="rgb(231,126,1)" fg:x="189" fg:w="1"/><text x="12.5068%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.3217%" y="901" width="0.0649%" height="15" fill="rgb(243,166,3)" fg:x="190" fg:w="1"/><text x="12.5717%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.3217%" y="885" width="0.0649%" height="15" fill="rgb(223,22,34)" fg:x="190" fg:w="1"/><text x="12.5717%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.3217%" y="869" width="0.0649%" height="15" fill="rgb(251,52,51)" fg:x="190" fg:w="1"/><text x="12.5717%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.3865%" y="693" width="0.0649%" height="15" fill="rgb(221,165,28)" fg:x="191" fg:w="1"/><text x="12.6365%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.3865%" y="677" width="0.0649%" height="15" fill="rgb(218,121,47)" fg:x="191" fg:w="1"/><text x="12.6365%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.3865%" y="661" width="0.0649%" height="15" fill="rgb(209,120,9)" fg:x="191" fg:w="1"/><text x="12.6365%" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="12.4514%" y="645" width="0.0649%" height="15" fill="rgb(236,68,12)" fg:x="192" fg:w="1"/><text x="12.7014%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="12.4514%" y="629" width="0.0649%" height="15" fill="rgb(225,194,26)" fg:x="192" fg:w="1"/><text x="12.7014%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="12.4514%" y="613" width="0.0649%" height="15" fill="rgb(231,84,39)" fg:x="192" fg:w="1"/><text x="12.7014%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.4514%" y="597" width="0.0649%" height="15" fill="rgb(210,11,45)" fg:x="192" fg:w="1"/><text x="12.7014%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.4514%" y="581" width="0.0649%" height="15" fill="rgb(224,54,52)" fg:x="192" fg:w="1"/><text x="12.7014%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.4514%" y="565" width="0.0649%" height="15" fill="rgb(238,102,14)" fg:x="192" fg:w="1"/><text x="12.7014%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="12.3865%" y="757" width="0.1946%" height="15" fill="rgb(243,160,52)" fg:x="191" fg:w="3"/><text x="12.6365%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="12.3865%" y="741" width="0.1946%" height="15" fill="rgb(216,114,19)" fg:x="191" fg:w="3"/><text x="12.6365%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="12.3865%" y="725" width="0.1946%" height="15" fill="rgb(244,166,37)" fg:x="191" fg:w="3"/><text x="12.6365%" y="735.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="12.3865%" y="709" width="0.1946%" height="15" fill="rgb(246,29,44)" fg:x="191" fg:w="3"/><text x="12.6365%" y="719.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="12.4514%" y="693" width="0.1297%" height="15" fill="rgb(215,56,53)" fg:x="192" fg:w="2"/><text x="12.7014%" y="703.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="12.4514%" y="677" width="0.1297%" height="15" fill="rgb(217,60,2)" fg:x="192" fg:w="2"/><text x="12.7014%" y="687.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="12.4514%" y="661" width="0.1297%" height="15" fill="rgb(207,26,24)" fg:x="192" fg:w="2"/><text x="12.7014%" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="12.5162%" y="645" width="0.0649%" height="15" fill="rgb(252,210,15)" fg:x="193" fg:w="1"/><text x="12.7662%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="12.5162%" y="629" width="0.0649%" height="15" fill="rgb(253,209,26)" fg:x="193" fg:w="1"/><text x="12.7662%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="12.5162%" y="613" width="0.0649%" height="15" fill="rgb(238,170,14)" fg:x="193" fg:w="1"/><text x="12.7662%" y="623.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="12.5162%" y="597" width="0.0649%" height="15" fill="rgb(216,178,15)" fg:x="193" fg:w="1"/><text x="12.7662%" y="607.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="12.5162%" y="581" width="0.0649%" height="15" fill="rgb(250,197,2)" fg:x="193" fg:w="1"/><text x="12.7662%" y="591.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="12.5162%" y="565" width="0.0649%" height="15" fill="rgb(212,70,42)" fg:x="193" fg:w="1"/><text x="12.7662%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.5162%" y="549" width="0.0649%" height="15" fill="rgb(227,213,9)" fg:x="193" fg:w="1"/><text x="12.7662%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.5162%" y="533" width="0.0649%" height="15" fill="rgb(245,99,25)" fg:x="193" fg:w="1"/><text x="12.7662%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.5162%" y="517" width="0.0649%" height="15" fill="rgb(250,82,29)" fg:x="193" fg:w="1"/><text x="12.7662%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="12.5811%" y="693" width="0.0649%" height="15" fill="rgb(241,226,54)" fg:x="194" fg:w="1"/><text x="12.8311%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.5811%" y="677" width="0.0649%" height="15" fill="rgb(221,99,41)" fg:x="194" fg:w="1"/><text x="12.8311%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.5811%" y="661" width="0.0649%" height="15" fill="rgb(213,90,21)" fg:x="194" fg:w="1"/><text x="12.8311%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.5811%" y="645" width="0.0649%" height="15" fill="rgb(205,208,24)" fg:x="194" fg:w="1"/><text x="12.8311%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.6459%" y="693" width="0.0649%" height="15" fill="rgb(246,31,12)" fg:x="195" fg:w="1"/><text x="12.8959%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.6459%" y="677" width="0.0649%" height="15" fill="rgb(213,154,6)" fg:x="195" fg:w="1"/><text x="12.8959%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.6459%" y="661" width="0.0649%" height="15" fill="rgb(222,163,29)" fg:x="195" fg:w="1"/><text x="12.8959%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="12.7108%" y="469" width="0.0649%" height="15" fill="rgb(227,201,8)" fg:x="196" fg:w="1"/><text x="12.9608%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="12.7108%" y="453" width="0.0649%" height="15" fill="rgb(233,9,32)" fg:x="196" fg:w="1"/><text x="12.9608%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="12.7108%" y="437" width="0.0649%" height="15" fill="rgb(217,54,24)" fg:x="196" fg:w="1"/><text x="12.9608%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="12.7108%" y="421" width="0.0649%" height="15" fill="rgb(235,192,0)" fg:x="196" fg:w="1"/><text x="12.9608%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="12.7108%" y="405" width="0.0649%" height="15" fill="rgb(235,45,9)" fg:x="196" fg:w="1"/><text x="12.9608%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="12.7108%" y="389" width="0.0649%" height="15" fill="rgb(246,42,40)" fg:x="196" fg:w="1"/><text x="12.9608%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="12.7108%" y="373" width="0.0649%" height="15" fill="rgb(248,111,24)" fg:x="196" fg:w="1"/><text x="12.9608%" y="383.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="12.7108%" y="357" width="0.0649%" height="15" fill="rgb(249,65,22)" fg:x="196" fg:w="1"/><text x="12.9608%" y="367.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="12.7108%" y="341" width="0.0649%" height="15" fill="rgb(238,111,51)" fg:x="196" fg:w="1"/><text x="12.9608%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.7108%" y="325" width="0.0649%" height="15" fill="rgb(250,118,22)" fg:x="196" fg:w="1"/><text x="12.9608%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.7108%" y="309" width="0.0649%" height="15" fill="rgb(234,84,26)" fg:x="196" fg:w="1"/><text x="12.9608%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.7108%" y="293" width="0.0649%" height="15" fill="rgb(243,172,12)" fg:x="196" fg:w="1"/><text x="12.9608%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="12.7108%" y="533" width="0.1297%" height="15" fill="rgb(236,150,49)" fg:x="196" fg:w="2"/><text x="12.9608%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="12.7108%" y="517" width="0.1297%" height="15" fill="rgb(225,197,26)" fg:x="196" fg:w="2"/><text x="12.9608%" y="527.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="12.7108%" y="501" width="0.1297%" height="15" fill="rgb(214,17,42)" fg:x="196" fg:w="2"/><text x="12.9608%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="12.7108%" y="485" width="0.1297%" height="15" fill="rgb(224,165,40)" fg:x="196" fg:w="2"/><text x="12.9608%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="12.7756%" y="469" width="0.0649%" height="15" fill="rgb(246,100,4)" fg:x="197" fg:w="1"/><text x="13.0256%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.7756%" y="453" width="0.0649%" height="15" fill="rgb(222,103,0)" fg:x="197" fg:w="1"/><text x="13.0256%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.7756%" y="437" width="0.0649%" height="15" fill="rgb(227,189,26)" fg:x="197" fg:w="1"/><text x="13.0256%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.7756%" y="421" width="0.0649%" height="15" fill="rgb(214,202,17)" fg:x="197" fg:w="1"/><text x="13.0256%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.8405%" y="357" width="0.0649%" height="15" fill="rgb(229,111,3)" fg:x="198" fg:w="1"/><text x="13.0905%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.8405%" y="341" width="0.0649%" height="15" fill="rgb(229,172,15)" fg:x="198" fg:w="1"/><text x="13.0905%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.8405%" y="325" width="0.0649%" height="15" fill="rgb(230,224,35)" fg:x="198" fg:w="1"/><text x="13.0905%" y="335.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="12.7108%" y="613" width="0.2594%" height="15" fill="rgb(251,141,6)" fg:x="196" fg:w="4"/><text x="12.9608%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="12.7108%" y="597" width="0.2594%" height="15" fill="rgb(225,208,6)" fg:x="196" fg:w="4"/><text x="12.9608%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="12.7108%" y="581" width="0.2594%" height="15" fill="rgb(246,181,16)" fg:x="196" fg:w="4"/><text x="12.9608%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="12.7108%" y="565" width="0.2594%" height="15" fill="rgb(227,129,36)" fg:x="196" fg:w="4"/><text x="12.9608%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="12.7108%" y="549" width="0.2594%" height="15" fill="rgb(248,117,24)" fg:x="196" fg:w="4"/><text x="12.9608%" y="559.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="12.8405%" y="533" width="0.1297%" height="15" fill="rgb(214,185,35)" fg:x="198" fg:w="2"/><text x="13.0905%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="12.8405%" y="517" width="0.1297%" height="15" fill="rgb(236,150,34)" fg:x="198" fg:w="2"/><text x="13.0905%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="12.8405%" y="501" width="0.1297%" height="15" fill="rgb(243,228,27)" fg:x="198" fg:w="2"/><text x="13.0905%" y="511.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="12.8405%" y="485" width="0.1297%" height="15" fill="rgb(245,77,44)" fg:x="198" fg:w="2"/><text x="13.0905%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="12.8405%" y="469" width="0.1297%" height="15" fill="rgb(235,214,42)" fg:x="198" fg:w="2"/><text x="13.0905%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="12.8405%" y="453" width="0.1297%" height="15" fill="rgb(221,74,3)" fg:x="198" fg:w="2"/><text x="13.0905%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="12.8405%" y="437" width="0.1297%" height="15" fill="rgb(206,121,29)" fg:x="198" fg:w="2"/><text x="13.0905%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="12.8405%" y="421" width="0.1297%" height="15" fill="rgb(249,131,53)" fg:x="198" fg:w="2"/><text x="13.0905%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="12.8405%" y="405" width="0.1297%" height="15" fill="rgb(236,170,29)" fg:x="198" fg:w="2"/><text x="13.0905%" y="415.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="12.8405%" y="389" width="0.1297%" height="15" fill="rgb(247,96,15)" fg:x="198" fg:w="2"/><text x="13.0905%" y="399.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="12.8405%" y="373" width="0.1297%" height="15" fill="rgb(211,210,7)" fg:x="198" fg:w="2"/><text x="13.0905%" y="383.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="12.9053%" y="357" width="0.0649%" height="15" fill="rgb(240,88,50)" fg:x="199" fg:w="1"/><text x="13.1553%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="12.9053%" y="341" width="0.0649%" height="15" fill="rgb(209,229,26)" fg:x="199" fg:w="1"/><text x="13.1553%" y="351.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="12.9053%" y="325" width="0.0649%" height="15" fill="rgb(210,68,23)" fg:x="199" fg:w="1"/><text x="13.1553%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="12.9053%" y="309" width="0.0649%" height="15" fill="rgb(229,180,13)" fg:x="199" fg:w="1"/><text x="13.1553%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="12.9053%" y="293" width="0.0649%" height="15" fill="rgb(236,53,44)" fg:x="199" fg:w="1"/><text x="13.1553%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="12.9053%" y="277" width="0.0649%" height="15" fill="rgb(244,214,29)" fg:x="199" fg:w="1"/><text x="13.1553%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="12.9053%" y="261" width="0.0649%" height="15" fill="rgb(220,75,29)" fg:x="199" fg:w="1"/><text x="13.1553%" y="271.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="12.9053%" y="245" width="0.0649%" height="15" fill="rgb(214,183,37)" fg:x="199" fg:w="1"/><text x="13.1553%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.9053%" y="229" width="0.0649%" height="15" fill="rgb(239,117,29)" fg:x="199" fg:w="1"/><text x="13.1553%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.9053%" y="213" width="0.0649%" height="15" fill="rgb(237,171,35)" fg:x="199" fg:w="1"/><text x="13.1553%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.9053%" y="197" width="0.0649%" height="15" fill="rgb(229,178,53)" fg:x="199" fg:w="1"/><text x="13.1553%" y="207.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="12.7108%" y="661" width="0.3243%" height="15" fill="rgb(210,102,19)" fg:x="196" fg:w="5"/><text x="12.9608%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="12.7108%" y="645" width="0.3243%" height="15" fill="rgb(235,127,22)" fg:x="196" fg:w="5"/><text x="12.9608%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="12.7108%" y="629" width="0.3243%" height="15" fill="rgb(244,31,31)" fg:x="196" fg:w="5"/><text x="12.9608%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="12.9702%" y="613" width="0.0649%" height="15" fill="rgb(231,43,21)" fg:x="200" fg:w="1"/><text x="13.2202%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="12.9702%" y="597" width="0.0649%" height="15" fill="rgb(217,131,35)" fg:x="200" fg:w="1"/><text x="13.2202%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="12.9702%" y="581" width="0.0649%" height="15" fill="rgb(221,149,4)" fg:x="200" fg:w="1"/><text x="13.2202%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="12.3865%" y="773" width="0.7134%" height="15" fill="rgb(232,170,28)" fg:x="191" fg:w="11"/><text x="12.6365%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="12.5811%" y="757" width="0.5188%" height="15" fill="rgb(238,56,10)" fg:x="194" fg:w="8"/><text x="12.8311%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="12.5811%" y="741" width="0.5188%" height="15" fill="rgb(235,196,14)" fg:x="194" fg:w="8"/><text x="12.8311%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="12.5811%" y="725" width="0.5188%" height="15" fill="rgb(216,45,48)" fg:x="194" fg:w="8"/><text x="12.8311%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="12.5811%" y="709" width="0.5188%" height="15" fill="rgb(238,213,17)" fg:x="194" fg:w="8"/><text x="12.8311%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="12.7108%" y="693" width="0.3891%" height="15" fill="rgb(212,13,2)" fg:x="196" fg:w="6"/><text x="12.9608%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="12.7108%" y="677" width="0.3891%" height="15" fill="rgb(240,114,20)" fg:x="196" fg:w="6"/><text x="12.9608%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.0350%" y="661" width="0.0649%" height="15" fill="rgb(228,41,40)" fg:x="201" fg:w="1"/><text x="13.2850%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.0350%" y="645" width="0.0649%" height="15" fill="rgb(244,132,35)" fg:x="201" fg:w="1"/><text x="13.2850%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.0350%" y="629" width="0.0649%" height="15" fill="rgb(253,189,4)" fg:x="201" fg:w="1"/><text x="13.2850%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.78%)</title><rect x="12.3865%" y="789" width="0.7782%" height="15" fill="rgb(224,37,19)" fg:x="191" fg:w="12"/><text x="12.6365%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.0999%" y="773" width="0.0649%" height="15" fill="rgb(235,223,18)" fg:x="202" fg:w="1"/><text x="13.3499%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.0999%" y="757" width="0.0649%" height="15" fill="rgb(235,163,25)" fg:x="202" fg:w="1"/><text x="13.3499%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.0999%" y="741" width="0.0649%" height="15" fill="rgb(217,145,28)" fg:x="202" fg:w="1"/><text x="13.3499%" y="751.50"></text></g><g><title>bincode::config::Options::deserialize (14 samples, 0.91%)</title><rect x="12.3217%" y="933" width="0.9079%" height="15" fill="rgb(223,223,32)" fg:x="190" fg:w="14"/><text x="12.5717%" y="943.50"></text></g><g><title>bincode::internal::deserialize (14 samples, 0.91%)</title><rect x="12.3217%" y="917" width="0.9079%" height="15" fill="rgb(227,189,39)" fg:x="190" fg:w="14"/><text x="12.5717%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (13 samples, 0.84%)</title><rect x="12.3865%" y="901" width="0.8431%" height="15" fill="rgb(248,10,22)" fg:x="191" fg:w="13"/><text x="12.6365%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13 samples, 0.84%)</title><rect x="12.3865%" y="885" width="0.8431%" height="15" fill="rgb(248,46,39)" fg:x="191" fg:w="13"/><text x="12.6365%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (13 samples, 0.84%)</title><rect x="12.3865%" y="869" width="0.8431%" height="15" fill="rgb(248,113,48)" fg:x="191" fg:w="13"/><text x="12.6365%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (13 samples, 0.84%)</title><rect x="12.3865%" y="853" width="0.8431%" height="15" fill="rgb(245,16,25)" fg:x="191" fg:w="13"/><text x="12.6365%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (13 samples, 0.84%)</title><rect x="12.3865%" y="837" width="0.8431%" height="15" fill="rgb(249,152,16)" fg:x="191" fg:w="13"/><text x="12.6365%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (13 samples, 0.84%)</title><rect x="12.3865%" y="821" width="0.8431%" height="15" fill="rgb(250,16,1)" fg:x="191" fg:w="13"/><text x="12.6365%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (13 samples, 0.84%)</title><rect x="12.3865%" y="805" width="0.8431%" height="15" fill="rgb(249,138,3)" fg:x="191" fg:w="13"/><text x="12.6365%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.1647%" y="789" width="0.0649%" height="15" fill="rgb(227,71,41)" fg:x="203" fg:w="1"/><text x="13.4147%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.1647%" y="773" width="0.0649%" height="15" fill="rgb(209,184,23)" fg:x="203" fg:w="1"/><text x="13.4147%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.1647%" y="757" width="0.0649%" height="15" fill="rgb(223,215,31)" fg:x="203" fg:w="1"/><text x="13.4147%" y="767.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (15 samples, 0.97%)</title><rect x="12.3217%" y="981" width="0.9728%" height="15" fill="rgb(210,146,28)" fg:x="190" fg:w="15"/><text x="12.5717%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (15 samples, 0.97%)</title><rect x="12.3217%" y="965" width="0.9728%" height="15" fill="rgb(209,183,41)" fg:x="190" fg:w="15"/><text x="12.5717%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (15 samples, 0.97%)</title><rect x="12.3217%" y="949" width="0.9728%" height="15" fill="rgb(209,224,45)" fg:x="190" fg:w="15"/><text x="12.5717%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="13.2296%" y="933" width="0.0649%" height="15" fill="rgb(224,209,51)" fg:x="204" fg:w="1"/><text x="13.4796%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.2296%" y="917" width="0.0649%" height="15" fill="rgb(223,17,39)" fg:x="204" fg:w="1"/><text x="13.4796%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.2296%" y="901" width="0.0649%" height="15" fill="rgb(234,204,37)" fg:x="204" fg:w="1"/><text x="13.4796%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.2296%" y="885" width="0.0649%" height="15" fill="rgb(236,120,5)" fg:x="204" fg:w="1"/><text x="13.4796%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.2944%" y="901" width="0.0649%" height="15" fill="rgb(248,97,27)" fg:x="205" fg:w="1"/><text x="13.5444%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.2944%" y="885" width="0.0649%" height="15" fill="rgb(240,66,17)" fg:x="205" fg:w="1"/><text x="13.5444%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.2944%" y="869" width="0.0649%" height="15" fill="rgb(210,79,3)" fg:x="205" fg:w="1"/><text x="13.5444%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (3 samples, 0.19%)</title><rect x="13.2944%" y="981" width="0.1946%" height="15" fill="rgb(214,176,27)" fg:x="205" fg:w="3"/><text x="13.5444%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="13.2944%" y="965" width="0.1946%" height="15" fill="rgb(235,185,3)" fg:x="205" fg:w="3"/><text x="13.5444%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="13.2944%" y="949" width="0.1946%" height="15" fill="rgb(227,24,12)" fg:x="205" fg:w="3"/><text x="13.5444%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="13.2944%" y="933" width="0.1946%" height="15" fill="rgb(252,169,48)" fg:x="205" fg:w="3"/><text x="13.5444%" y="943.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="13.2944%" y="917" width="0.1946%" height="15" fill="rgb(212,65,1)" fg:x="205" fg:w="3"/><text x="13.5444%" y="927.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="13.3593%" y="901" width="0.1297%" height="15" fill="rgb(242,39,24)" fg:x="206" fg:w="2"/><text x="13.6093%" y="911.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="13.3593%" y="885" width="0.1297%" height="15" fill="rgb(249,32,23)" fg:x="206" fg:w="2"/><text x="13.6093%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="13.3593%" y="869" width="0.1297%" height="15" fill="rgb(251,195,23)" fg:x="206" fg:w="2"/><text x="13.6093%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="13.3593%" y="853" width="0.1297%" height="15" fill="rgb(236,174,8)" fg:x="206" fg:w="2"/><text x="13.6093%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="13.3593%" y="837" width="0.1297%" height="15" fill="rgb(220,197,8)" fg:x="206" fg:w="2"/><text x="13.6093%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="13.3593%" y="821" width="0.1297%" height="15" fill="rgb(240,108,37)" fg:x="206" fg:w="2"/><text x="13.6093%" y="831.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="13.3593%" y="805" width="0.1297%" height="15" fill="rgb(232,176,24)" fg:x="206" fg:w="2"/><text x="13.6093%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="13.3593%" y="789" width="0.1297%" height="15" fill="rgb(243,35,29)" fg:x="206" fg:w="2"/><text x="13.6093%" y="799.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="13.3593%" y="773" width="0.1297%" height="15" fill="rgb(210,37,18)" fg:x="206" fg:w="2"/><text x="13.6093%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="13.3593%" y="757" width="0.1297%" height="15" fill="rgb(224,184,40)" fg:x="206" fg:w="2"/><text x="13.6093%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="13.3593%" y="741" width="0.1297%" height="15" fill="rgb(236,39,29)" fg:x="206" fg:w="2"/><text x="13.6093%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="13.3593%" y="725" width="0.1297%" height="15" fill="rgb(232,48,39)" fg:x="206" fg:w="2"/><text x="13.6093%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.4890%" y="965" width="0.0649%" height="15" fill="rgb(236,34,42)" fg:x="208" fg:w="1"/><text x="13.7390%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.4890%" y="949" width="0.0649%" height="15" fill="rgb(243,106,37)" fg:x="208" fg:w="1"/><text x="13.7390%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.4890%" y="933" width="0.0649%" height="15" fill="rgb(218,96,6)" fg:x="208" fg:w="1"/><text x="13.7390%" y="943.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (48 samples, 3.11%)</title><rect x="10.5058%" y="1029" width="3.1128%" height="15" fill="rgb(235,130,12)" fg:x="162" fg:w="48"/><text x="10.7558%" y="1039.50">red..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (48 samples, 3.11%)</title><rect x="10.5058%" y="1013" width="3.1128%" height="15" fill="rgb(231,95,0)" fg:x="162" fg:w="48"/><text x="10.7558%" y="1023.50">red..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (44 samples, 2.85%)</title><rect x="10.7652%" y="997" width="2.8534%" height="15" fill="rgb(228,12,23)" fg:x="166" fg:w="44"/><text x="11.0152%" y="1007.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="13.4890%" y="981" width="0.1297%" height="15" fill="rgb(216,12,1)" fg:x="208" fg:w="2"/><text x="13.7390%" y="991.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="13.5538%" y="965" width="0.0649%" height="15" fill="rgb(219,59,3)" fg:x="209" fg:w="1"/><text x="13.8038%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="13.5538%" y="949" width="0.0649%" height="15" fill="rgb(215,208,46)" fg:x="209" fg:w="1"/><text x="13.8038%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="13.5538%" y="933" width="0.0649%" height="15" fill="rgb(254,224,29)" fg:x="209" fg:w="1"/><text x="13.8038%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="13.5538%" y="917" width="0.0649%" height="15" fill="rgb(232,14,29)" fg:x="209" fg:w="1"/><text x="13.8038%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.5538%" y="901" width="0.0649%" height="15" fill="rgb(208,45,52)" fg:x="209" fg:w="1"/><text x="13.8038%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.5538%" y="885" width="0.0649%" height="15" fill="rgb(234,191,28)" fg:x="209" fg:w="1"/><text x="13.8038%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.5538%" y="869" width="0.0649%" height="15" fill="rgb(244,67,43)" fg:x="209" fg:w="1"/><text x="13.8038%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.13%)</title><rect x="13.6187%" y="997" width="0.1297%" height="15" fill="rgb(236,189,24)" fg:x="210" fg:w="2"/><text x="13.8687%" y="1007.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="13.6187%" y="981" width="0.1297%" height="15" fill="rgb(239,214,33)" fg:x="210" fg:w="2"/><text x="13.8687%" y="991.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="13.6187%" y="965" width="0.1297%" height="15" fill="rgb(226,176,41)" fg:x="210" fg:w="2"/><text x="13.8687%" y="975.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="13.6187%" y="949" width="0.1297%" height="15" fill="rgb(248,47,8)" fg:x="210" fg:w="2"/><text x="13.8687%" y="959.50"></text></g><g><title>core::cmp::min (1 samples, 0.06%)</title><rect x="13.7484%" y="757" width="0.0649%" height="15" fill="rgb(218,81,44)" fg:x="212" fg:w="1"/><text x="13.9984%" y="767.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.06%)</title><rect x="13.7484%" y="741" width="0.0649%" height="15" fill="rgb(213,98,6)" fg:x="212" fg:w="1"/><text x="13.9984%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.7484%" y="725" width="0.0649%" height="15" fill="rgb(222,85,22)" fg:x="212" fg:w="1"/><text x="13.9984%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.7484%" y="709" width="0.0649%" height="15" fill="rgb(239,46,39)" fg:x="212" fg:w="1"/><text x="13.9984%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.7484%" y="693" width="0.0649%" height="15" fill="rgb(237,12,29)" fg:x="212" fg:w="1"/><text x="13.9984%" y="703.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="13.7484%" y="965" width="0.1297%" height="15" fill="rgb(214,77,8)" fg:x="212" fg:w="2"/><text x="13.9984%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="13.7484%" y="949" width="0.1297%" height="15" fill="rgb(217,168,37)" fg:x="212" fg:w="2"/><text x="13.9984%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="13.7484%" y="933" width="0.1297%" height="15" fill="rgb(221,217,23)" fg:x="212" fg:w="2"/><text x="13.9984%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="13.7484%" y="917" width="0.1297%" height="15" fill="rgb(243,229,36)" fg:x="212" fg:w="2"/><text x="13.9984%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="13.7484%" y="901" width="0.1297%" height="15" fill="rgb(251,163,40)" fg:x="212" fg:w="2"/><text x="13.9984%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="13.7484%" y="885" width="0.1297%" height="15" fill="rgb(237,222,12)" fg:x="212" fg:w="2"/><text x="13.9984%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.13%)</title><rect x="13.7484%" y="869" width="0.1297%" height="15" fill="rgb(248,132,6)" fg:x="212" fg:w="2"/><text x="13.9984%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (2 samples, 0.13%)</title><rect x="13.7484%" y="853" width="0.1297%" height="15" fill="rgb(227,167,50)" fg:x="212" fg:w="2"/><text x="13.9984%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.13%)</title><rect x="13.7484%" y="837" width="0.1297%" height="15" fill="rgb(242,84,37)" fg:x="212" fg:w="2"/><text x="13.9984%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (2 samples, 0.13%)</title><rect x="13.7484%" y="821" width="0.1297%" height="15" fill="rgb(212,4,50)" fg:x="212" fg:w="2"/><text x="13.9984%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.13%)</title><rect x="13.7484%" y="805" width="0.1297%" height="15" fill="rgb(230,228,32)" fg:x="212" fg:w="2"/><text x="13.9984%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.13%)</title><rect x="13.7484%" y="789" width="0.1297%" height="15" fill="rgb(248,217,23)" fg:x="212" fg:w="2"/><text x="13.9984%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.13%)</title><rect x="13.7484%" y="773" width="0.1297%" height="15" fill="rgb(238,197,32)" fg:x="212" fg:w="2"/><text x="13.9984%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="13.8132%" y="757" width="0.0649%" height="15" fill="rgb(236,106,1)" fg:x="213" fg:w="1"/><text x="14.0632%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="13.8132%" y="741" width="0.0649%" height="15" fill="rgb(219,228,13)" fg:x="213" fg:w="1"/><text x="14.0632%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.8132%" y="725" width="0.0649%" height="15" fill="rgb(238,30,35)" fg:x="213" fg:w="1"/><text x="14.0632%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.8132%" y="709" width="0.0649%" height="15" fill="rgb(236,70,23)" fg:x="213" fg:w="1"/><text x="14.0632%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.8132%" y="693" width="0.0649%" height="15" fill="rgb(249,104,48)" fg:x="213" fg:w="1"/><text x="14.0632%" y="703.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="13.8781%" y="949" width="0.0649%" height="15" fill="rgb(254,117,50)" fg:x="214" fg:w="1"/><text x="14.1281%" y="959.50"></text></g><g><title>&lt;&amp;str as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="13.8781%" y="933" width="0.0649%" height="15" fill="rgb(223,152,4)" fg:x="214" fg:w="1"/><text x="14.1281%" y="943.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.06%)</title><rect x="13.8781%" y="917" width="0.0649%" height="15" fill="rgb(245,6,2)" fg:x="214" fg:w="1"/><text x="14.1281%" y="927.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.06%)</title><rect x="13.8781%" y="901" width="0.0649%" height="15" fill="rgb(249,150,24)" fg:x="214" fg:w="1"/><text x="14.1281%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="13.8781%" y="885" width="0.0649%" height="15" fill="rgb(228,185,42)" fg:x="214" fg:w="1"/><text x="14.1281%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="13.8781%" y="869" width="0.0649%" height="15" fill="rgb(226,39,33)" fg:x="214" fg:w="1"/><text x="14.1281%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="13.8781%" y="853" width="0.0649%" height="15" fill="rgb(221,166,19)" fg:x="214" fg:w="1"/><text x="14.1281%" y="863.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (5 samples, 0.32%)</title><rect x="13.7484%" y="981" width="0.3243%" height="15" fill="rgb(209,109,2)" fg:x="212" fg:w="5"/><text x="13.9984%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="13.8781%" y="965" width="0.1946%" height="15" fill="rgb(252,216,26)" fg:x="214" fg:w="3"/><text x="14.1281%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="13.9429%" y="949" width="0.1297%" height="15" fill="rgb(227,173,36)" fg:x="215" fg:w="2"/><text x="14.1929%" y="959.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (2 samples, 0.13%)</title><rect x="13.9429%" y="933" width="0.1297%" height="15" fill="rgb(209,90,7)" fg:x="215" fg:w="2"/><text x="14.1929%" y="943.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (2 samples, 0.13%)</title><rect x="13.9429%" y="917" width="0.1297%" height="15" fill="rgb(250,194,11)" fg:x="215" fg:w="2"/><text x="14.1929%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.13%)</title><rect x="13.9429%" y="901" width="0.1297%" height="15" fill="rgb(220,72,50)" fg:x="215" fg:w="2"/><text x="14.1929%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.13%)</title><rect x="13.9429%" y="885" width="0.1297%" height="15" fill="rgb(222,106,48)" fg:x="215" fg:w="2"/><text x="14.1929%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.13%)</title><rect x="13.9429%" y="869" width="0.1297%" height="15" fill="rgb(216,220,45)" fg:x="215" fg:w="2"/><text x="14.1929%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="13.9429%" y="853" width="0.1297%" height="15" fill="rgb(234,112,18)" fg:x="215" fg:w="2"/><text x="14.1929%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="13.9429%" y="837" width="0.1297%" height="15" fill="rgb(206,179,9)" fg:x="215" fg:w="2"/><text x="14.1929%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.13%)</title><rect x="13.9429%" y="821" width="0.1297%" height="15" fill="rgb(215,115,40)" fg:x="215" fg:w="2"/><text x="14.1929%" y="831.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.13%)</title><rect x="13.9429%" y="805" width="0.1297%" height="15" fill="rgb(222,69,34)" fg:x="215" fg:w="2"/><text x="14.1929%" y="815.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.13%)</title><rect x="13.9429%" y="789" width="0.1297%" height="15" fill="rgb(209,161,10)" fg:x="215" fg:w="2"/><text x="14.1929%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.13%)</title><rect x="13.9429%" y="773" width="0.1297%" height="15" fill="rgb(217,6,38)" fg:x="215" fg:w="2"/><text x="14.1929%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="13.9429%" y="757" width="0.1297%" height="15" fill="rgb(229,229,48)" fg:x="215" fg:w="2"/><text x="14.1929%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="13.9429%" y="741" width="0.1297%" height="15" fill="rgb(225,21,28)" fg:x="215" fg:w="2"/><text x="14.1929%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="13.9429%" y="725" width="0.1297%" height="15" fill="rgb(206,33,13)" fg:x="215" fg:w="2"/><text x="14.1929%" y="735.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (6 samples, 0.39%)</title><rect x="13.7484%" y="997" width="0.3891%" height="15" fill="rgb(242,178,17)" fg:x="212" fg:w="6"/><text x="13.9984%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="14.0726%" y="981" width="0.0649%" height="15" fill="rgb(220,162,5)" fg:x="217" fg:w="1"/><text x="14.3226%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::EitherPage::memory (1 samples, 0.06%)</title><rect x="14.0726%" y="965" width="0.0649%" height="15" fill="rgb(210,33,43)" fg:x="217" fg:w="1"/><text x="14.3226%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.0726%" y="949" width="0.0649%" height="15" fill="rgb(216,116,54)" fg:x="217" fg:w="1"/><text x="14.3226%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.0726%" y="933" width="0.0649%" height="15" fill="rgb(249,92,24)" fg:x="217" fg:w="1"/><text x="14.3226%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.0726%" y="917" width="0.0649%" height="15" fill="rgb(231,189,14)" fg:x="217" fg:w="1"/><text x="14.3226%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="14.1375%" y="965" width="0.0649%" height="15" fill="rgb(230,8,41)" fg:x="218" fg:w="1"/><text x="14.3875%" y="975.50"></text></g><g><title>alloc::string::String::as_str (1 samples, 0.06%)</title><rect x="14.1375%" y="949" width="0.0649%" height="15" fill="rgb(249,7,27)" fg:x="218" fg:w="1"/><text x="14.3875%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.06%)</title><rect x="14.1375%" y="933" width="0.0649%" height="15" fill="rgb(232,86,5)" fg:x="218" fg:w="1"/><text x="14.3875%" y="943.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="14.1375%" y="917" width="0.0649%" height="15" fill="rgb(224,175,18)" fg:x="218" fg:w="1"/><text x="14.3875%" y="927.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="14.1375%" y="901" width="0.0649%" height="15" fill="rgb(220,129,12)" fg:x="218" fg:w="1"/><text x="14.3875%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.1375%" y="885" width="0.0649%" height="15" fill="rgb(210,19,36)" fg:x="218" fg:w="1"/><text x="14.3875%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.1375%" y="869" width="0.0649%" height="15" fill="rgb(219,96,14)" fg:x="218" fg:w="1"/><text x="14.3875%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.1375%" y="853" width="0.0649%" height="15" fill="rgb(249,106,1)" fg:x="218" fg:w="1"/><text x="14.3875%" y="863.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (10 samples, 0.65%)</title><rect x="13.6187%" y="1029" width="0.6485%" height="15" fill="rgb(249,155,20)" fg:x="210" fg:w="10"/><text x="13.8687%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (10 samples, 0.65%)</title><rect x="13.6187%" y="1013" width="0.6485%" height="15" fill="rgb(244,168,9)" fg:x="210" fg:w="10"/><text x="13.8687%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (2 samples, 0.13%)</title><rect x="14.1375%" y="997" width="0.1297%" height="15" fill="rgb(216,23,50)" fg:x="218" fg:w="2"/><text x="14.3875%" y="1007.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (2 samples, 0.13%)</title><rect x="14.1375%" y="981" width="0.1297%" height="15" fill="rgb(224,219,20)" fg:x="218" fg:w="2"/><text x="14.3875%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.2023%" y="965" width="0.0649%" height="15" fill="rgb(222,156,15)" fg:x="219" fg:w="1"/><text x="14.4523%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.2023%" y="949" width="0.0649%" height="15" fill="rgb(231,97,17)" fg:x="219" fg:w="1"/><text x="14.4523%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.2023%" y="933" width="0.0649%" height="15" fill="rgb(218,70,48)" fg:x="219" fg:w="1"/><text x="14.4523%" y="943.50"></text></g><g><title>utxo::Asset::get_by_policy_id (69 samples, 4.47%)</title><rect x="9.8573%" y="1061" width="4.4747%" height="15" fill="rgb(212,196,52)" fg:x="152" fg:w="69"/><text x="10.1073%" y="1071.50">utxo:..</text></g><g><title>utxo::Asset::compose (64 samples, 4.15%)</title><rect x="10.1816%" y="1045" width="4.1505%" height="15" fill="rgb(243,203,18)" fg:x="157" fg:w="64"/><text x="10.4316%" y="1055.50">utxo:..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="14.2672%" y="1029" width="0.0649%" height="15" fill="rgb(252,125,41)" fg:x="220" fg:w="1"/><text x="14.5172%" y="1039.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="14.2672%" y="1013" width="0.0649%" height="15" fill="rgb(223,180,33)" fg:x="220" fg:w="1"/><text x="14.5172%" y="1023.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="14.2672%" y="997" width="0.0649%" height="15" fill="rgb(254,159,46)" fg:x="220" fg:w="1"/><text x="14.5172%" y="1007.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="14.2672%" y="981" width="0.0649%" height="15" fill="rgb(254,38,10)" fg:x="220" fg:w="1"/><text x="14.5172%" y="991.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="14.2672%" y="965" width="0.0649%" height="15" fill="rgb(208,217,32)" fg:x="220" fg:w="1"/><text x="14.5172%" y="975.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.2672%" y="949" width="0.0649%" height="15" fill="rgb(221,120,13)" fg:x="220" fg:w="1"/><text x="14.5172%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.2672%" y="933" width="0.0649%" height="15" fill="rgb(246,54,52)" fg:x="220" fg:w="1"/><text x="14.5172%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="14.2672%" y="917" width="0.0649%" height="15" fill="rgb(242,34,25)" fg:x="220" fg:w="1"/><text x="14.5172%" y="927.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="14.2672%" y="901" width="0.0649%" height="15" fill="rgb(247,209,9)" fg:x="220" fg:w="1"/><text x="14.5172%" y="911.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="14.2672%" y="885" width="0.0649%" height="15" fill="rgb(228,71,26)" fg:x="220" fg:w="1"/><text x="14.5172%" y="895.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="14.2672%" y="869" width="0.0649%" height="15" fill="rgb(222,145,49)" fg:x="220" fg:w="1"/><text x="14.5172%" y="879.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="14.2672%" y="853" width="0.0649%" height="15" fill="rgb(218,121,17)" fg:x="220" fg:w="1"/><text x="14.5172%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.2672%" y="837" width="0.0649%" height="15" fill="rgb(244,50,7)" fg:x="220" fg:w="1"/><text x="14.5172%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.2672%" y="821" width="0.0649%" height="15" fill="rgb(246,229,37)" fg:x="220" fg:w="1"/><text x="14.5172%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="14.2672%" y="805" width="0.0649%" height="15" fill="rgb(225,18,5)" fg:x="220" fg:w="1"/><text x="14.5172%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="14.2672%" y="789" width="0.0649%" height="15" fill="rgb(213,204,8)" fg:x="220" fg:w="1"/><text x="14.5172%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="14.2672%" y="773" width="0.0649%" height="15" fill="rgb(238,103,6)" fg:x="220" fg:w="1"/><text x="14.5172%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="14.2672%" y="757" width="0.0649%" height="15" fill="rgb(222,25,35)" fg:x="220" fg:w="1"/><text x="14.5172%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="14.2672%" y="741" width="0.0649%" height="15" fill="rgb(213,203,35)" fg:x="220" fg:w="1"/><text x="14.5172%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.2672%" y="725" width="0.0649%" height="15" fill="rgb(221,79,53)" fg:x="220" fg:w="1"/><text x="14.5172%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.2672%" y="709" width="0.0649%" height="15" fill="rgb(243,200,35)" fg:x="220" fg:w="1"/><text x="14.5172%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.2672%" y="693" width="0.0649%" height="15" fill="rgb(248,60,25)" fg:x="220" fg:w="1"/><text x="14.5172%" y="703.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="14.3320%" y="981" width="0.0649%" height="15" fill="rgb(227,53,46)" fg:x="221" fg:w="1"/><text x="14.5820%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="14.3320%" y="965" width="0.0649%" height="15" fill="rgb(216,120,32)" fg:x="221" fg:w="1"/><text x="14.5820%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="14.3320%" y="949" width="0.0649%" height="15" fill="rgb(220,134,1)" fg:x="221" fg:w="1"/><text x="14.5820%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="14.3320%" y="933" width="0.0649%" height="15" fill="rgb(237,168,5)" fg:x="221" fg:w="1"/><text x="14.5820%" y="943.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="14.3320%" y="917" width="0.0649%" height="15" fill="rgb(231,100,33)" fg:x="221" fg:w="1"/><text x="14.5820%" y="927.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="14.3320%" y="901" width="0.0649%" height="15" fill="rgb(236,177,47)" fg:x="221" fg:w="1"/><text x="14.5820%" y="911.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="14.3320%" y="885" width="0.0649%" height="15" fill="rgb(235,7,49)" fg:x="221" fg:w="1"/><text x="14.5820%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="14.3320%" y="869" width="0.0649%" height="15" fill="rgb(232,119,22)" fg:x="221" fg:w="1"/><text x="14.5820%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="14.3320%" y="853" width="0.0649%" height="15" fill="rgb(254,73,53)" fg:x="221" fg:w="1"/><text x="14.5820%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="14.3320%" y="837" width="0.0649%" height="15" fill="rgb(251,35,20)" fg:x="221" fg:w="1"/><text x="14.5820%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="14.3320%" y="821" width="0.0649%" height="15" fill="rgb(241,119,20)" fg:x="221" fg:w="1"/><text x="14.5820%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="14.3320%" y="805" width="0.0649%" height="15" fill="rgb(207,102,14)" fg:x="221" fg:w="1"/><text x="14.5820%" y="815.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="14.3320%" y="789" width="0.0649%" height="15" fill="rgb(248,201,50)" fg:x="221" fg:w="1"/><text x="14.5820%" y="799.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="14.3320%" y="773" width="0.0649%" height="15" fill="rgb(222,185,44)" fg:x="221" fg:w="1"/><text x="14.5820%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="14.3320%" y="757" width="0.0649%" height="15" fill="rgb(218,107,18)" fg:x="221" fg:w="1"/><text x="14.5820%" y="767.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="14.3320%" y="741" width="0.0649%" height="15" fill="rgb(237,177,39)" fg:x="221" fg:w="1"/><text x="14.5820%" y="751.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="14.3320%" y="725" width="0.0649%" height="15" fill="rgb(246,69,6)" fg:x="221" fg:w="1"/><text x="14.5820%" y="735.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="14.3320%" y="709" width="0.0649%" height="15" fill="rgb(234,208,37)" fg:x="221" fg:w="1"/><text x="14.5820%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="14.3320%" y="693" width="0.0649%" height="15" fill="rgb(225,4,6)" fg:x="221" fg:w="1"/><text x="14.5820%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="14.3320%" y="677" width="0.0649%" height="15" fill="rgb(233,45,0)" fg:x="221" fg:w="1"/><text x="14.5820%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="14.3320%" y="661" width="0.0649%" height="15" fill="rgb(226,136,5)" fg:x="221" fg:w="1"/><text x="14.5820%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.3320%" y="645" width="0.0649%" height="15" fill="rgb(211,91,47)" fg:x="221" fg:w="1"/><text x="14.5820%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.3320%" y="629" width="0.0649%" height="15" fill="rgb(242,88,51)" fg:x="221" fg:w="1"/><text x="14.5820%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.3320%" y="613" width="0.0649%" height="15" fill="rgb(230,91,28)" fg:x="221" fg:w="1"/><text x="14.5820%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="14.3969%" y="965" width="0.0649%" height="15" fill="rgb(254,186,29)" fg:x="222" fg:w="1"/><text x="14.6469%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="14.3969%" y="949" width="0.0649%" height="15" fill="rgb(238,6,4)" fg:x="222" fg:w="1"/><text x="14.6469%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="14.3969%" y="933" width="0.0649%" height="15" fill="rgb(221,151,16)" fg:x="222" fg:w="1"/><text x="14.6469%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="14.3969%" y="917" width="0.0649%" height="15" fill="rgb(251,143,52)" fg:x="222" fg:w="1"/><text x="14.6469%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="14.3969%" y="901" width="0.0649%" height="15" fill="rgb(206,90,15)" fg:x="222" fg:w="1"/><text x="14.6469%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.3969%" y="885" width="0.0649%" height="15" fill="rgb(218,35,8)" fg:x="222" fg:w="1"/><text x="14.6469%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.3969%" y="869" width="0.0649%" height="15" fill="rgb(239,215,6)" fg:x="222" fg:w="1"/><text x="14.6469%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="14.3969%" y="853" width="0.0649%" height="15" fill="rgb(245,116,39)" fg:x="222" fg:w="1"/><text x="14.6469%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="14.3969%" y="837" width="0.0649%" height="15" fill="rgb(242,65,28)" fg:x="222" fg:w="1"/><text x="14.6469%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="14.3969%" y="821" width="0.0649%" height="15" fill="rgb(252,132,53)" fg:x="222" fg:w="1"/><text x="14.6469%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="14.3969%" y="805" width="0.0649%" height="15" fill="rgb(224,159,50)" fg:x="222" fg:w="1"/><text x="14.6469%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="14.3969%" y="789" width="0.0649%" height="15" fill="rgb(224,93,4)" fg:x="222" fg:w="1"/><text x="14.6469%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="14.3969%" y="773" width="0.0649%" height="15" fill="rgb(208,81,34)" fg:x="222" fg:w="1"/><text x="14.6469%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="14.3969%" y="757" width="0.0649%" height="15" fill="rgb(233,92,54)" fg:x="222" fg:w="1"/><text x="14.6469%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="14.3969%" y="741" width="0.0649%" height="15" fill="rgb(237,21,14)" fg:x="222" fg:w="1"/><text x="14.6469%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="14.3969%" y="725" width="0.0649%" height="15" fill="rgb(249,128,51)" fg:x="222" fg:w="1"/><text x="14.6469%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="14.3969%" y="709" width="0.0649%" height="15" fill="rgb(223,129,24)" fg:x="222" fg:w="1"/><text x="14.6469%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.3969%" y="693" width="0.0649%" height="15" fill="rgb(231,168,25)" fg:x="222" fg:w="1"/><text x="14.6469%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.3969%" y="677" width="0.0649%" height="15" fill="rgb(224,39,20)" fg:x="222" fg:w="1"/><text x="14.6469%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.3969%" y="661" width="0.0649%" height="15" fill="rgb(225,152,53)" fg:x="222" fg:w="1"/><text x="14.6469%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="14.4617%" y="965" width="0.0649%" height="15" fill="rgb(252,17,24)" fg:x="223" fg:w="1"/><text x="14.7117%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="14.4617%" y="949" width="0.0649%" height="15" fill="rgb(250,114,30)" fg:x="223" fg:w="1"/><text x="14.7117%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="14.4617%" y="933" width="0.0649%" height="15" fill="rgb(229,5,4)" fg:x="223" fg:w="1"/><text x="14.7117%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="14.4617%" y="917" width="0.0649%" height="15" fill="rgb(225,176,49)" fg:x="223" fg:w="1"/><text x="14.7117%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.4617%" y="901" width="0.0649%" height="15" fill="rgb(224,221,49)" fg:x="223" fg:w="1"/><text x="14.7117%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.4617%" y="885" width="0.0649%" height="15" fill="rgb(253,169,27)" fg:x="223" fg:w="1"/><text x="14.7117%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="14.4617%" y="869" width="0.0649%" height="15" fill="rgb(211,206,16)" fg:x="223" fg:w="1"/><text x="14.7117%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="14.4617%" y="853" width="0.0649%" height="15" fill="rgb(244,87,35)" fg:x="223" fg:w="1"/><text x="14.7117%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="14.4617%" y="837" width="0.0649%" height="15" fill="rgb(246,28,10)" fg:x="223" fg:w="1"/><text x="14.7117%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="14.4617%" y="821" width="0.0649%" height="15" fill="rgb(229,12,44)" fg:x="223" fg:w="1"/><text x="14.7117%" y="831.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="14.4617%" y="805" width="0.0649%" height="15" fill="rgb(210,145,37)" fg:x="223" fg:w="1"/><text x="14.7117%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="14.4617%" y="789" width="0.0649%" height="15" fill="rgb(227,112,52)" fg:x="223" fg:w="1"/><text x="14.7117%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="14.4617%" y="773" width="0.0649%" height="15" fill="rgb(238,155,34)" fg:x="223" fg:w="1"/><text x="14.7117%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="14.4617%" y="757" width="0.0649%" height="15" fill="rgb(239,226,36)" fg:x="223" fg:w="1"/><text x="14.7117%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="14.4617%" y="741" width="0.0649%" height="15" fill="rgb(230,16,23)" fg:x="223" fg:w="1"/><text x="14.7117%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="14.4617%" y="725" width="0.0649%" height="15" fill="rgb(236,171,36)" fg:x="223" fg:w="1"/><text x="14.7117%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="14.4617%" y="709" width="0.0649%" height="15" fill="rgb(221,22,14)" fg:x="223" fg:w="1"/><text x="14.7117%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.06%)</title><rect x="14.4617%" y="693" width="0.0649%" height="15" fill="rgb(242,43,11)" fg:x="223" fg:w="1"/><text x="14.7117%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.4617%" y="677" width="0.0649%" height="15" fill="rgb(232,69,23)" fg:x="223" fg:w="1"/><text x="14.7117%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.4617%" y="661" width="0.0649%" height="15" fill="rgb(216,180,54)" fg:x="223" fg:w="1"/><text x="14.7117%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.4617%" y="645" width="0.0649%" height="15" fill="rgb(216,5,24)" fg:x="223" fg:w="1"/><text x="14.7117%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="14.5266%" y="965" width="0.0649%" height="15" fill="rgb(225,89,9)" fg:x="224" fg:w="1"/><text x="14.7766%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="14.5266%" y="949" width="0.0649%" height="15" fill="rgb(243,75,33)" fg:x="224" fg:w="1"/><text x="14.7766%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="14.5266%" y="933" width="0.0649%" height="15" fill="rgb(247,141,45)" fg:x="224" fg:w="1"/><text x="14.7766%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="14.5266%" y="917" width="0.0649%" height="15" fill="rgb(232,177,36)" fg:x="224" fg:w="1"/><text x="14.7766%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.5266%" y="901" width="0.0649%" height="15" fill="rgb(219,125,36)" fg:x="224" fg:w="1"/><text x="14.7766%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.5266%" y="885" width="0.0649%" height="15" fill="rgb(227,94,9)" fg:x="224" fg:w="1"/><text x="14.7766%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="14.5266%" y="869" width="0.0649%" height="15" fill="rgb(240,34,52)" fg:x="224" fg:w="1"/><text x="14.7766%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="14.5266%" y="853" width="0.0649%" height="15" fill="rgb(216,45,12)" fg:x="224" fg:w="1"/><text x="14.7766%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="14.5266%" y="837" width="0.0649%" height="15" fill="rgb(246,21,19)" fg:x="224" fg:w="1"/><text x="14.7766%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="14.5266%" y="821" width="0.0649%" height="15" fill="rgb(213,98,42)" fg:x="224" fg:w="1"/><text x="14.7766%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="14.5266%" y="805" width="0.0649%" height="15" fill="rgb(250,136,47)" fg:x="224" fg:w="1"/><text x="14.7766%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="14.5266%" y="789" width="0.0649%" height="15" fill="rgb(251,124,27)" fg:x="224" fg:w="1"/><text x="14.7766%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="14.5266%" y="773" width="0.0649%" height="15" fill="rgb(229,180,14)" fg:x="224" fg:w="1"/><text x="14.7766%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.5266%" y="757" width="0.0649%" height="15" fill="rgb(245,216,25)" fg:x="224" fg:w="1"/><text x="14.7766%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.5266%" y="741" width="0.0649%" height="15" fill="rgb(251,43,5)" fg:x="224" fg:w="1"/><text x="14.7766%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.5266%" y="725" width="0.0649%" height="15" fill="rgb(250,128,24)" fg:x="224" fg:w="1"/><text x="14.7766%" y="735.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="14.5914%" y="933" width="0.0649%" height="15" fill="rgb(217,117,27)" fg:x="225" fg:w="1"/><text x="14.8414%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.5914%" y="917" width="0.0649%" height="15" fill="rgb(245,147,4)" fg:x="225" fg:w="1"/><text x="14.8414%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.5914%" y="901" width="0.0649%" height="15" fill="rgb(242,201,35)" fg:x="225" fg:w="1"/><text x="14.8414%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="14.5914%" y="885" width="0.0649%" height="15" fill="rgb(218,181,1)" fg:x="225" fg:w="1"/><text x="14.8414%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="14.5914%" y="869" width="0.0649%" height="15" fill="rgb(222,6,29)" fg:x="225" fg:w="1"/><text x="14.8414%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="14.5914%" y="853" width="0.0649%" height="15" fill="rgb(208,186,3)" fg:x="225" fg:w="1"/><text x="14.8414%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="14.5914%" y="837" width="0.0649%" height="15" fill="rgb(216,36,26)" fg:x="225" fg:w="1"/><text x="14.8414%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="14.5914%" y="821" width="0.0649%" height="15" fill="rgb(248,201,23)" fg:x="225" fg:w="1"/><text x="14.8414%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="14.5914%" y="805" width="0.0649%" height="15" fill="rgb(251,170,31)" fg:x="225" fg:w="1"/><text x="14.8414%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="14.5914%" y="789" width="0.0649%" height="15" fill="rgb(207,110,25)" fg:x="225" fg:w="1"/><text x="14.8414%" y="799.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="14.5914%" y="773" width="0.0649%" height="15" fill="rgb(250,54,15)" fg:x="225" fg:w="1"/><text x="14.8414%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.5914%" y="757" width="0.0649%" height="15" fill="rgb(227,68,33)" fg:x="225" fg:w="1"/><text x="14.8414%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.5914%" y="741" width="0.0649%" height="15" fill="rgb(238,34,41)" fg:x="225" fg:w="1"/><text x="14.8414%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.5914%" y="725" width="0.0649%" height="15" fill="rgb(220,11,15)" fg:x="225" fg:w="1"/><text x="14.8414%" y="735.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="837" width="0.0649%" height="15" fill="rgb(246,111,35)" fg:x="226" fg:w="1"/><text x="14.9063%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="821" width="0.0649%" height="15" fill="rgb(209,88,53)" fg:x="226" fg:w="1"/><text x="14.9063%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="14.6563%" y="805" width="0.0649%" height="15" fill="rgb(231,185,47)" fg:x="226" fg:w="1"/><text x="14.9063%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="789" width="0.0649%" height="15" fill="rgb(233,154,1)" fg:x="226" fg:w="1"/><text x="14.9063%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="773" width="0.0649%" height="15" fill="rgb(225,15,46)" fg:x="226" fg:w="1"/><text x="14.9063%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="14.6563%" y="757" width="0.0649%" height="15" fill="rgb(211,135,41)" fg:x="226" fg:w="1"/><text x="14.9063%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="14.6563%" y="741" width="0.0649%" height="15" fill="rgb(208,54,0)" fg:x="226" fg:w="1"/><text x="14.9063%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="14.6563%" y="725" width="0.0649%" height="15" fill="rgb(244,136,14)" fg:x="226" fg:w="1"/><text x="14.9063%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="14.6563%" y="709" width="0.0649%" height="15" fill="rgb(241,56,14)" fg:x="226" fg:w="1"/><text x="14.9063%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="14.6563%" y="693" width="0.0649%" height="15" fill="rgb(205,80,24)" fg:x="226" fg:w="1"/><text x="14.9063%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="677" width="0.0649%" height="15" fill="rgb(220,57,4)" fg:x="226" fg:w="1"/><text x="14.9063%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="661" width="0.0649%" height="15" fill="rgb(226,193,50)" fg:x="226" fg:w="1"/><text x="14.9063%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="14.6563%" y="645" width="0.0649%" height="15" fill="rgb(231,168,22)" fg:x="226" fg:w="1"/><text x="14.9063%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="14.6563%" y="629" width="0.0649%" height="15" fill="rgb(254,215,14)" fg:x="226" fg:w="1"/><text x="14.9063%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="14.6563%" y="613" width="0.0649%" height="15" fill="rgb(211,115,16)" fg:x="226" fg:w="1"/><text x="14.9063%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="14.6563%" y="597" width="0.0649%" height="15" fill="rgb(236,210,16)" fg:x="226" fg:w="1"/><text x="14.9063%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="14.6563%" y="581" width="0.0649%" height="15" fill="rgb(221,94,12)" fg:x="226" fg:w="1"/><text x="14.9063%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="565" width="0.0649%" height="15" fill="rgb(235,218,49)" fg:x="226" fg:w="1"/><text x="14.9063%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="14.6563%" y="549" width="0.0649%" height="15" fill="rgb(217,114,14)" fg:x="226" fg:w="1"/><text x="14.9063%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="14.6563%" y="533" width="0.0649%" height="15" fill="rgb(216,145,22)" fg:x="226" fg:w="1"/><text x="14.9063%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="14.6563%" y="517" width="0.0649%" height="15" fill="rgb(217,112,39)" fg:x="226" fg:w="1"/><text x="14.9063%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="14.6563%" y="501" width="0.0649%" height="15" fill="rgb(225,85,32)" fg:x="226" fg:w="1"/><text x="14.9063%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="14.6563%" y="485" width="0.0649%" height="15" fill="rgb(245,209,47)" fg:x="226" fg:w="1"/><text x="14.9063%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.6563%" y="469" width="0.0649%" height="15" fill="rgb(218,220,15)" fg:x="226" fg:w="1"/><text x="14.9063%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.6563%" y="453" width="0.0649%" height="15" fill="rgb(222,202,31)" fg:x="226" fg:w="1"/><text x="14.9063%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.6563%" y="437" width="0.0649%" height="15" fill="rgb(243,203,4)" fg:x="226" fg:w="1"/><text x="14.9063%" y="447.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="14.6563%" y="869" width="0.1297%" height="15" fill="rgb(237,92,17)" fg:x="226" fg:w="2"/><text x="14.9063%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="14.6563%" y="853" width="0.1297%" height="15" fill="rgb(231,119,7)" fg:x="226" fg:w="2"/><text x="14.9063%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="14.7211%" y="837" width="0.0649%" height="15" fill="rgb(237,82,41)" fg:x="227" fg:w="1"/><text x="14.9711%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.7211%" y="821" width="0.0649%" height="15" fill="rgb(226,81,48)" fg:x="227" fg:w="1"/><text x="14.9711%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.7211%" y="805" width="0.0649%" height="15" fill="rgb(234,70,51)" fg:x="227" fg:w="1"/><text x="14.9711%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.7211%" y="789" width="0.0649%" height="15" fill="rgb(251,86,4)" fg:x="227" fg:w="1"/><text x="14.9711%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="14.7860%" y="853" width="0.0649%" height="15" fill="rgb(244,144,28)" fg:x="228" fg:w="1"/><text x="15.0360%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.7860%" y="837" width="0.0649%" height="15" fill="rgb(232,161,39)" fg:x="228" fg:w="1"/><text x="15.0360%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.7860%" y="821" width="0.0649%" height="15" fill="rgb(247,34,51)" fg:x="228" fg:w="1"/><text x="15.0360%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.7860%" y="805" width="0.0649%" height="15" fill="rgb(225,132,2)" fg:x="228" fg:w="1"/><text x="15.0360%" y="815.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="14.6563%" y="917" width="0.2594%" height="15" fill="rgb(209,159,44)" fg:x="226" fg:w="4"/><text x="14.9063%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (4 samples, 0.26%)</title><rect x="14.6563%" y="901" width="0.2594%" height="15" fill="rgb(251,214,1)" fg:x="226" fg:w="4"/><text x="14.9063%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="14.6563%" y="885" width="0.2594%" height="15" fill="rgb(247,84,47)" fg:x="226" fg:w="4"/><text x="14.9063%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (2 samples, 0.13%)</title><rect x="14.7860%" y="869" width="0.1297%" height="15" fill="rgb(240,111,43)" fg:x="228" fg:w="2"/><text x="15.0360%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="14.8508%" y="853" width="0.0649%" height="15" fill="rgb(215,214,35)" fg:x="229" fg:w="1"/><text x="15.1008%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="14.8508%" y="837" width="0.0649%" height="15" fill="rgb(248,207,23)" fg:x="229" fg:w="1"/><text x="15.1008%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="14.8508%" y="821" width="0.0649%" height="15" fill="rgb(214,186,4)" fg:x="229" fg:w="1"/><text x="15.1008%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.8508%" y="805" width="0.0649%" height="15" fill="rgb(220,133,22)" fg:x="229" fg:w="1"/><text x="15.1008%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.8508%" y="789" width="0.0649%" height="15" fill="rgb(239,134,19)" fg:x="229" fg:w="1"/><text x="15.1008%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.8508%" y="773" width="0.0649%" height="15" fill="rgb(250,140,9)" fg:x="229" fg:w="1"/><text x="15.1008%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="14.9157%" y="741" width="0.0649%" height="15" fill="rgb(225,59,14)" fg:x="230" fg:w="1"/><text x="15.1657%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="14.9157%" y="725" width="0.0649%" height="15" fill="rgb(214,152,51)" fg:x="230" fg:w="1"/><text x="15.1657%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="14.9157%" y="709" width="0.0649%" height="15" fill="rgb(251,227,43)" fg:x="230" fg:w="1"/><text x="15.1657%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="14.9157%" y="693" width="0.0649%" height="15" fill="rgb(241,96,17)" fg:x="230" fg:w="1"/><text x="15.1657%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="14.9805%" y="741" width="0.1297%" height="15" fill="rgb(234,198,43)" fg:x="231" fg:w="2"/><text x="15.2305%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="14.9805%" y="725" width="0.1297%" height="15" fill="rgb(220,108,29)" fg:x="231" fg:w="2"/><text x="15.2305%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="14.9805%" y="709" width="0.1297%" height="15" fill="rgb(226,163,33)" fg:x="231" fg:w="2"/><text x="15.2305%" y="719.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="15.1102%" y="373" width="0.0649%" height="15" fill="rgb(205,194,45)" fg:x="233" fg:w="1"/><text x="15.3602%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="15.1102%" y="357" width="0.0649%" height="15" fill="rgb(206,143,44)" fg:x="233" fg:w="1"/><text x="15.3602%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="15.1102%" y="341" width="0.0649%" height="15" fill="rgb(236,136,36)" fg:x="233" fg:w="1"/><text x="15.3602%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="15.1102%" y="325" width="0.0649%" height="15" fill="rgb(249,172,42)" fg:x="233" fg:w="1"/><text x="15.3602%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="15.1102%" y="309" width="0.0649%" height="15" fill="rgb(216,139,23)" fg:x="233" fg:w="1"/><text x="15.3602%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="15.1102%" y="293" width="0.0649%" height="15" fill="rgb(207,166,20)" fg:x="233" fg:w="1"/><text x="15.3602%" y="303.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="15.1102%" y="277" width="0.0649%" height="15" fill="rgb(210,209,22)" fg:x="233" fg:w="1"/><text x="15.3602%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.1102%" y="261" width="0.0649%" height="15" fill="rgb(232,118,20)" fg:x="233" fg:w="1"/><text x="15.3602%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.1102%" y="245" width="0.0649%" height="15" fill="rgb(238,113,42)" fg:x="233" fg:w="1"/><text x="15.3602%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.1102%" y="229" width="0.0649%" height="15" fill="rgb(231,42,5)" fg:x="233" fg:w="1"/><text x="15.3602%" y="239.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="15.1102%" y="437" width="0.1297%" height="15" fill="rgb(243,166,24)" fg:x="233" fg:w="2"/><text x="15.3602%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="15.1102%" y="421" width="0.1297%" height="15" fill="rgb(237,226,12)" fg:x="233" fg:w="2"/><text x="15.3602%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="15.1102%" y="405" width="0.1297%" height="15" fill="rgb(229,133,24)" fg:x="233" fg:w="2"/><text x="15.3602%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="15.1102%" y="389" width="0.1297%" height="15" fill="rgb(238,33,43)" fg:x="233" fg:w="2"/><text x="15.3602%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="15.1751%" y="373" width="0.0649%" height="15" fill="rgb(227,59,38)" fg:x="234" fg:w="1"/><text x="15.4251%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact::{{closure}} (1 samples, 0.06%)</title><rect x="15.1751%" y="357" width="0.0649%" height="15" fill="rgb(230,97,0)" fg:x="234" fg:w="1"/><text x="15.4251%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.1751%" y="341" width="0.0649%" height="15" fill="rgb(250,173,50)" fg:x="234" fg:w="1"/><text x="15.4251%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.1751%" y="325" width="0.0649%" height="15" fill="rgb(240,15,50)" fg:x="234" fg:w="1"/><text x="15.4251%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.1751%" y="309" width="0.0649%" height="15" fill="rgb(221,93,22)" fg:x="234" fg:w="1"/><text x="15.4251%" y="319.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (6 samples, 0.39%)</title><rect x="14.9157%" y="917" width="0.3891%" height="15" fill="rgb(245,180,53)" fg:x="230" fg:w="6"/><text x="15.1657%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (6 samples, 0.39%)</title><rect x="14.9157%" y="901" width="0.3891%" height="15" fill="rgb(231,88,51)" fg:x="230" fg:w="6"/><text x="15.1657%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (6 samples, 0.39%)</title><rect x="14.9157%" y="885" width="0.3891%" height="15" fill="rgb(240,58,21)" fg:x="230" fg:w="6"/><text x="15.1657%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (6 samples, 0.39%)</title><rect x="14.9157%" y="869" width="0.3891%" height="15" fill="rgb(237,21,10)" fg:x="230" fg:w="6"/><text x="15.1657%" y="879.50"></text></g><g><title>bincode::internal::deserialize (6 samples, 0.39%)</title><rect x="14.9157%" y="853" width="0.3891%" height="15" fill="rgb(218,43,11)" fg:x="230" fg:w="6"/><text x="15.1657%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (6 samples, 0.39%)</title><rect x="14.9157%" y="837" width="0.3891%" height="15" fill="rgb(218,221,29)" fg:x="230" fg:w="6"/><text x="15.1657%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="14.9157%" y="821" width="0.3891%" height="15" fill="rgb(214,118,42)" fg:x="230" fg:w="6"/><text x="15.1657%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="14.9157%" y="805" width="0.3891%" height="15" fill="rgb(251,200,26)" fg:x="230" fg:w="6"/><text x="15.1657%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="14.9157%" y="789" width="0.3891%" height="15" fill="rgb(237,101,39)" fg:x="230" fg:w="6"/><text x="15.1657%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="14.9157%" y="773" width="0.3891%" height="15" fill="rgb(251,117,11)" fg:x="230" fg:w="6"/><text x="15.1657%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.39%)</title><rect x="14.9157%" y="757" width="0.3891%" height="15" fill="rgb(216,223,23)" fg:x="230" fg:w="6"/><text x="15.1657%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="15.1102%" y="741" width="0.1946%" height="15" fill="rgb(251,54,12)" fg:x="233" fg:w="3"/><text x="15.3602%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="15.1102%" y="725" width="0.1946%" height="15" fill="rgb(254,176,54)" fg:x="233" fg:w="3"/><text x="15.3602%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="15.1102%" y="709" width="0.1946%" height="15" fill="rgb(210,32,8)" fg:x="233" fg:w="3"/><text x="15.3602%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="15.1102%" y="693" width="0.1946%" height="15" fill="rgb(235,52,38)" fg:x="233" fg:w="3"/><text x="15.3602%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="15.1102%" y="677" width="0.1946%" height="15" fill="rgb(231,4,44)" fg:x="233" fg:w="3"/><text x="15.3602%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="15.1102%" y="661" width="0.1946%" height="15" fill="rgb(249,2,32)" fg:x="233" fg:w="3"/><text x="15.3602%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="15.1102%" y="645" width="0.1946%" height="15" fill="rgb(224,65,26)" fg:x="233" fg:w="3"/><text x="15.3602%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="15.1102%" y="629" width="0.1946%" height="15" fill="rgb(250,73,40)" fg:x="233" fg:w="3"/><text x="15.3602%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="15.1102%" y="613" width="0.1946%" height="15" fill="rgb(253,177,16)" fg:x="233" fg:w="3"/><text x="15.3602%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="15.1102%" y="597" width="0.1946%" height="15" fill="rgb(217,32,34)" fg:x="233" fg:w="3"/><text x="15.3602%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="15.1102%" y="581" width="0.1946%" height="15" fill="rgb(212,7,10)" fg:x="233" fg:w="3"/><text x="15.3602%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="15.1102%" y="565" width="0.1946%" height="15" fill="rgb(245,89,8)" fg:x="233" fg:w="3"/><text x="15.3602%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="15.1102%" y="549" width="0.1946%" height="15" fill="rgb(237,16,53)" fg:x="233" fg:w="3"/><text x="15.3602%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="15.1102%" y="533" width="0.1946%" height="15" fill="rgb(250,204,30)" fg:x="233" fg:w="3"/><text x="15.3602%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="15.1102%" y="517" width="0.1946%" height="15" fill="rgb(208,77,27)" fg:x="233" fg:w="3"/><text x="15.3602%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="15.1102%" y="501" width="0.1946%" height="15" fill="rgb(250,204,28)" fg:x="233" fg:w="3"/><text x="15.3602%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="15.1102%" y="485" width="0.1946%" height="15" fill="rgb(244,63,21)" fg:x="233" fg:w="3"/><text x="15.3602%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="15.1102%" y="469" width="0.1946%" height="15" fill="rgb(236,85,44)" fg:x="233" fg:w="3"/><text x="15.3602%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="15.1102%" y="453" width="0.1946%" height="15" fill="rgb(215,98,4)" fg:x="233" fg:w="3"/><text x="15.3602%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u32 (1 samples, 0.06%)</title><rect x="15.2399%" y="437" width="0.0649%" height="15" fill="rgb(235,38,11)" fg:x="235" fg:w="1"/><text x="15.4899%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.2399%" y="421" width="0.0649%" height="15" fill="rgb(254,186,25)" fg:x="235" fg:w="1"/><text x="15.4899%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.2399%" y="405" width="0.0649%" height="15" fill="rgb(225,55,31)" fg:x="235" fg:w="1"/><text x="15.4899%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.2399%" y="389" width="0.0649%" height="15" fill="rgb(211,15,21)" fg:x="235" fg:w="1"/><text x="15.4899%" y="399.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (12 samples, 0.78%)</title><rect x="14.5914%" y="965" width="0.7782%" height="15" fill="rgb(215,187,41)" fg:x="225" fg:w="12"/><text x="14.8414%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (12 samples, 0.78%)</title><rect x="14.5914%" y="949" width="0.7782%" height="15" fill="rgb(248,69,32)" fg:x="225" fg:w="12"/><text x="14.8414%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (11 samples, 0.71%)</title><rect x="14.6563%" y="933" width="0.7134%" height="15" fill="rgb(252,102,52)" fg:x="226" fg:w="11"/><text x="14.9063%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="15.3048%" y="917" width="0.0649%" height="15" fill="rgb(253,140,32)" fg:x="236" fg:w="1"/><text x="15.5548%" y="927.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="15.3048%" y="901" width="0.0649%" height="15" fill="rgb(216,56,42)" fg:x="236" fg:w="1"/><text x="15.5548%" y="911.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="15.3048%" y="885" width="0.0649%" height="15" fill="rgb(216,184,14)" fg:x="236" fg:w="1"/><text x="15.5548%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="15.3048%" y="869" width="0.0649%" height="15" fill="rgb(237,187,27)" fg:x="236" fg:w="1"/><text x="15.5548%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="15.3048%" y="853" width="0.0649%" height="15" fill="rgb(219,65,3)" fg:x="236" fg:w="1"/><text x="15.5548%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.3048%" y="837" width="0.0649%" height="15" fill="rgb(245,83,25)" fg:x="236" fg:w="1"/><text x="15.5548%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.3048%" y="821" width="0.0649%" height="15" fill="rgb(214,205,45)" fg:x="236" fg:w="1"/><text x="15.5548%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.3048%" y="805" width="0.0649%" height="15" fill="rgb(241,20,18)" fg:x="236" fg:w="1"/><text x="15.5548%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="15.3696%" y="853" width="0.0649%" height="15" fill="rgb(232,163,23)" fg:x="237" fg:w="1"/><text x="15.6196%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="15.3696%" y="837" width="0.0649%" height="15" fill="rgb(214,5,46)" fg:x="237" fg:w="1"/><text x="15.6196%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="15.3696%" y="821" width="0.0649%" height="15" fill="rgb(229,78,17)" fg:x="237" fg:w="1"/><text x="15.6196%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="15.3696%" y="805" width="0.0649%" height="15" fill="rgb(248,89,10)" fg:x="237" fg:w="1"/><text x="15.6196%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="15.3696%" y="789" width="0.0649%" height="15" fill="rgb(248,54,15)" fg:x="237" fg:w="1"/><text x="15.6196%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="15.3696%" y="773" width="0.0649%" height="15" fill="rgb(223,116,6)" fg:x="237" fg:w="1"/><text x="15.6196%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.3696%" y="757" width="0.0649%" height="15" fill="rgb(205,125,38)" fg:x="237" fg:w="1"/><text x="15.6196%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.3696%" y="741" width="0.0649%" height="15" fill="rgb(251,78,38)" fg:x="237" fg:w="1"/><text x="15.6196%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.3696%" y="725" width="0.0649%" height="15" fill="rgb(253,78,28)" fg:x="237" fg:w="1"/><text x="15.6196%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="15.4345%" y="805" width="0.0649%" height="15" fill="rgb(209,120,3)" fg:x="238" fg:w="1"/><text x="15.6845%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="15.4345%" y="789" width="0.0649%" height="15" fill="rgb(238,229,9)" fg:x="238" fg:w="1"/><text x="15.6845%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="15.4345%" y="773" width="0.0649%" height="15" fill="rgb(253,159,18)" fg:x="238" fg:w="1"/><text x="15.6845%" y="783.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="15.4345%" y="757" width="0.0649%" height="15" fill="rgb(244,42,34)" fg:x="238" fg:w="1"/><text x="15.6845%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="15.4345%" y="741" width="0.0649%" height="15" fill="rgb(224,8,7)" fg:x="238" fg:w="1"/><text x="15.6845%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="15.4345%" y="725" width="0.0649%" height="15" fill="rgb(210,201,45)" fg:x="238" fg:w="1"/><text x="15.6845%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="15.4345%" y="709" width="0.0649%" height="15" fill="rgb(252,185,21)" fg:x="238" fg:w="1"/><text x="15.6845%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="15.4345%" y="693" width="0.0649%" height="15" fill="rgb(223,131,1)" fg:x="238" fg:w="1"/><text x="15.6845%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="15.4345%" y="677" width="0.0649%" height="15" fill="rgb(245,141,16)" fg:x="238" fg:w="1"/><text x="15.6845%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="15.4345%" y="661" width="0.0649%" height="15" fill="rgb(229,55,45)" fg:x="238" fg:w="1"/><text x="15.6845%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.4345%" y="645" width="0.0649%" height="15" fill="rgb(208,92,15)" fg:x="238" fg:w="1"/><text x="15.6845%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.4345%" y="629" width="0.0649%" height="15" fill="rgb(234,185,47)" fg:x="238" fg:w="1"/><text x="15.6845%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.4345%" y="613" width="0.0649%" height="15" fill="rgb(253,104,50)" fg:x="238" fg:w="1"/><text x="15.6845%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (3 samples, 0.19%)</title><rect x="15.3696%" y="917" width="0.1946%" height="15" fill="rgb(205,70,7)" fg:x="237" fg:w="3"/><text x="15.6196%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (3 samples, 0.19%)</title><rect x="15.3696%" y="901" width="0.1946%" height="15" fill="rgb(240,178,43)" fg:x="237" fg:w="3"/><text x="15.6196%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (3 samples, 0.19%)</title><rect x="15.3696%" y="885" width="0.1946%" height="15" fill="rgb(214,112,2)" fg:x="237" fg:w="3"/><text x="15.6196%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="15.3696%" y="869" width="0.1946%" height="15" fill="rgb(206,46,17)" fg:x="237" fg:w="3"/><text x="15.6196%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="15.4345%" y="853" width="0.1297%" height="15" fill="rgb(225,220,16)" fg:x="238" fg:w="2"/><text x="15.6845%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="15.4345%" y="837" width="0.1297%" height="15" fill="rgb(238,65,40)" fg:x="238" fg:w="2"/><text x="15.6845%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="15.4345%" y="821" width="0.1297%" height="15" fill="rgb(230,151,21)" fg:x="238" fg:w="2"/><text x="15.6845%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="15.4994%" y="805" width="0.0649%" height="15" fill="rgb(218,58,49)" fg:x="239" fg:w="1"/><text x="15.7494%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="15.4994%" y="789" width="0.0649%" height="15" fill="rgb(219,179,14)" fg:x="239" fg:w="1"/><text x="15.7494%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="15.4994%" y="773" width="0.0649%" height="15" fill="rgb(223,72,1)" fg:x="239" fg:w="1"/><text x="15.7494%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="15.4994%" y="757" width="0.0649%" height="15" fill="rgb(238,126,10)" fg:x="239" fg:w="1"/><text x="15.7494%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="15.4994%" y="741" width="0.0649%" height="15" fill="rgb(224,206,38)" fg:x="239" fg:w="1"/><text x="15.7494%" y="751.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="15.4994%" y="725" width="0.0649%" height="15" fill="rgb(212,201,54)" fg:x="239" fg:w="1"/><text x="15.7494%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="15.4994%" y="709" width="0.0649%" height="15" fill="rgb(218,154,48)" fg:x="239" fg:w="1"/><text x="15.7494%" y="719.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="15.4994%" y="693" width="0.0649%" height="15" fill="rgb(232,93,24)" fg:x="239" fg:w="1"/><text x="15.7494%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.4994%" y="677" width="0.0649%" height="15" fill="rgb(245,30,21)" fg:x="239" fg:w="1"/><text x="15.7494%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.4994%" y="661" width="0.0649%" height="15" fill="rgb(242,148,29)" fg:x="239" fg:w="1"/><text x="15.7494%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.4994%" y="645" width="0.0649%" height="15" fill="rgb(244,153,54)" fg:x="239" fg:w="1"/><text x="15.7494%" y="655.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (4 samples, 0.26%)</title><rect x="15.3696%" y="933" width="0.2594%" height="15" fill="rgb(252,87,22)" fg:x="237" fg:w="4"/><text x="15.6196%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="15.5642%" y="917" width="0.0649%" height="15" fill="rgb(210,51,29)" fg:x="240" fg:w="1"/><text x="15.8142%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="15.5642%" y="901" width="0.0649%" height="15" fill="rgb(242,136,47)" fg:x="240" fg:w="1"/><text x="15.8142%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="15.5642%" y="885" width="0.0649%" height="15" fill="rgb(238,68,4)" fg:x="240" fg:w="1"/><text x="15.8142%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="15.5642%" y="869" width="0.0649%" height="15" fill="rgb(242,161,30)" fg:x="240" fg:w="1"/><text x="15.8142%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="15.5642%" y="853" width="0.0649%" height="15" fill="rgb(218,58,44)" fg:x="240" fg:w="1"/><text x="15.8142%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="15.5642%" y="837" width="0.0649%" height="15" fill="rgb(252,125,32)" fg:x="240" fg:w="1"/><text x="15.8142%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="15.5642%" y="821" width="0.0649%" height="15" fill="rgb(219,178,0)" fg:x="240" fg:w="1"/><text x="15.8142%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="15.5642%" y="805" width="0.0649%" height="15" fill="rgb(213,152,7)" fg:x="240" fg:w="1"/><text x="15.8142%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="15.5642%" y="789" width="0.0649%" height="15" fill="rgb(249,109,34)" fg:x="240" fg:w="1"/><text x="15.8142%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="15.5642%" y="773" width="0.0649%" height="15" fill="rgb(232,96,21)" fg:x="240" fg:w="1"/><text x="15.8142%" y="783.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="15.5642%" y="757" width="0.0649%" height="15" fill="rgb(228,27,39)" fg:x="240" fg:w="1"/><text x="15.8142%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.5642%" y="741" width="0.0649%" height="15" fill="rgb(211,182,52)" fg:x="240" fg:w="1"/><text x="15.8142%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.5642%" y="725" width="0.0649%" height="15" fill="rgb(234,178,38)" fg:x="240" fg:w="1"/><text x="15.8142%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.5642%" y="709" width="0.0649%" height="15" fill="rgb(221,111,3)" fg:x="240" fg:w="1"/><text x="15.8142%" y="719.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (5 samples, 0.32%)</title><rect x="15.3696%" y="965" width="0.3243%" height="15" fill="rgb(228,175,21)" fg:x="237" fg:w="5"/><text x="15.6196%" y="975.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (5 samples, 0.32%)</title><rect x="15.3696%" y="949" width="0.3243%" height="15" fill="rgb(228,174,43)" fg:x="237" fg:w="5"/><text x="15.6196%" y="959.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (1 samples, 0.06%)</title><rect x="15.6291%" y="933" width="0.0649%" height="15" fill="rgb(211,191,0)" fg:x="241" fg:w="1"/><text x="15.8791%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (1 samples, 0.06%)</title><rect x="15.6291%" y="917" width="0.0649%" height="15" fill="rgb(253,117,3)" fg:x="241" fg:w="1"/><text x="15.8791%" y="927.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.06%)</title><rect x="15.6291%" y="901" width="0.0649%" height="15" fill="rgb(241,127,19)" fg:x="241" fg:w="1"/><text x="15.8791%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.06%)</title><rect x="15.6291%" y="885" width="0.0649%" height="15" fill="rgb(218,103,12)" fg:x="241" fg:w="1"/><text x="15.8791%" y="895.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.06%)</title><rect x="15.6291%" y="869" width="0.0649%" height="15" fill="rgb(236,214,43)" fg:x="241" fg:w="1"/><text x="15.8791%" y="879.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.06%)</title><rect x="15.6291%" y="853" width="0.0649%" height="15" fill="rgb(244,144,19)" fg:x="241" fg:w="1"/><text x="15.8791%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.6291%" y="837" width="0.0649%" height="15" fill="rgb(246,188,10)" fg:x="241" fg:w="1"/><text x="15.8791%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.6291%" y="821" width="0.0649%" height="15" fill="rgb(212,193,33)" fg:x="241" fg:w="1"/><text x="15.8791%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.6291%" y="805" width="0.0649%" height="15" fill="rgb(241,51,29)" fg:x="241" fg:w="1"/><text x="15.8791%" y="815.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="15.6939%" y="373" width="0.0649%" height="15" fill="rgb(211,58,19)" fg:x="242" fg:w="1"/><text x="15.9439%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.6939%" y="357" width="0.0649%" height="15" fill="rgb(229,111,26)" fg:x="242" fg:w="1"/><text x="15.9439%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.6939%" y="341" width="0.0649%" height="15" fill="rgb(213,115,40)" fg:x="242" fg:w="1"/><text x="15.9439%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.6939%" y="325" width="0.0649%" height="15" fill="rgb(209,56,44)" fg:x="242" fg:w="1"/><text x="15.9439%" y="335.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (2 samples, 0.13%)</title><rect x="15.6939%" y="901" width="0.1297%" height="15" fill="rgb(230,108,32)" fg:x="242" fg:w="2"/><text x="15.9439%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="15.6939%" y="885" width="0.1297%" height="15" fill="rgb(216,165,31)" fg:x="242" fg:w="2"/><text x="15.9439%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="15.6939%" y="869" width="0.1297%" height="15" fill="rgb(218,122,21)" fg:x="242" fg:w="2"/><text x="15.9439%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="15.6939%" y="853" width="0.1297%" height="15" fill="rgb(223,224,47)" fg:x="242" fg:w="2"/><text x="15.9439%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="837" width="0.1297%" height="15" fill="rgb(238,102,44)" fg:x="242" fg:w="2"/><text x="15.9439%" y="847.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="821" width="0.1297%" height="15" fill="rgb(236,46,40)" fg:x="242" fg:w="2"/><text x="15.9439%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="15.6939%" y="805" width="0.1297%" height="15" fill="rgb(247,202,50)" fg:x="242" fg:w="2"/><text x="15.9439%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="789" width="0.1297%" height="15" fill="rgb(209,99,20)" fg:x="242" fg:w="2"/><text x="15.9439%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="773" width="0.1297%" height="15" fill="rgb(252,27,34)" fg:x="242" fg:w="2"/><text x="15.9439%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="15.6939%" y="757" width="0.1297%" height="15" fill="rgb(215,206,23)" fg:x="242" fg:w="2"/><text x="15.9439%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="15.6939%" y="741" width="0.1297%" height="15" fill="rgb(212,135,36)" fg:x="242" fg:w="2"/><text x="15.9439%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="15.6939%" y="725" width="0.1297%" height="15" fill="rgb(240,189,1)" fg:x="242" fg:w="2"/><text x="15.9439%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="15.6939%" y="709" width="0.1297%" height="15" fill="rgb(242,56,20)" fg:x="242" fg:w="2"/><text x="15.9439%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="15.6939%" y="693" width="0.1297%" height="15" fill="rgb(247,132,33)" fg:x="242" fg:w="2"/><text x="15.9439%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="677" width="0.1297%" height="15" fill="rgb(208,149,11)" fg:x="242" fg:w="2"/><text x="15.9439%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="661" width="0.1297%" height="15" fill="rgb(211,33,11)" fg:x="242" fg:w="2"/><text x="15.9439%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="15.6939%" y="645" width="0.1297%" height="15" fill="rgb(221,29,38)" fg:x="242" fg:w="2"/><text x="15.9439%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="15.6939%" y="629" width="0.1297%" height="15" fill="rgb(206,182,49)" fg:x="242" fg:w="2"/><text x="15.9439%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="15.6939%" y="613" width="0.1297%" height="15" fill="rgb(216,140,1)" fg:x="242" fg:w="2"/><text x="15.9439%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="15.6939%" y="597" width="0.1297%" height="15" fill="rgb(232,57,40)" fg:x="242" fg:w="2"/><text x="15.9439%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="15.6939%" y="581" width="0.1297%" height="15" fill="rgb(224,186,18)" fg:x="242" fg:w="2"/><text x="15.9439%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="565" width="0.1297%" height="15" fill="rgb(215,121,11)" fg:x="242" fg:w="2"/><text x="15.9439%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="549" width="0.1297%" height="15" fill="rgb(245,147,10)" fg:x="242" fg:w="2"/><text x="15.9439%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="15.6939%" y="533" width="0.1297%" height="15" fill="rgb(238,153,13)" fg:x="242" fg:w="2"/><text x="15.9439%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="15.6939%" y="517" width="0.1297%" height="15" fill="rgb(233,108,0)" fg:x="242" fg:w="2"/><text x="15.9439%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="15.6939%" y="501" width="0.1297%" height="15" fill="rgb(212,157,17)" fg:x="242" fg:w="2"/><text x="15.9439%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="15.6939%" y="485" width="0.1297%" height="15" fill="rgb(225,213,38)" fg:x="242" fg:w="2"/><text x="15.9439%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="15.6939%" y="469" width="0.1297%" height="15" fill="rgb(248,16,11)" fg:x="242" fg:w="2"/><text x="15.9439%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="453" width="0.1297%" height="15" fill="rgb(241,33,4)" fg:x="242" fg:w="2"/><text x="15.9439%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="15.6939%" y="437" width="0.1297%" height="15" fill="rgb(222,26,43)" fg:x="242" fg:w="2"/><text x="15.9439%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="15.6939%" y="421" width="0.1297%" height="15" fill="rgb(243,29,36)" fg:x="242" fg:w="2"/><text x="15.9439%" y="431.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="15.6939%" y="405" width="0.1297%" height="15" fill="rgb(241,9,27)" fg:x="242" fg:w="2"/><text x="15.9439%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="15.6939%" y="389" width="0.1297%" height="15" fill="rgb(205,117,26)" fg:x="242" fg:w="2"/><text x="15.9439%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="15.7588%" y="373" width="0.0649%" height="15" fill="rgb(209,80,39)" fg:x="243" fg:w="1"/><text x="16.0088%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="15.7588%" y="357" width="0.0649%" height="15" fill="rgb(239,155,6)" fg:x="243" fg:w="1"/><text x="16.0088%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="15.7588%" y="341" width="0.0649%" height="15" fill="rgb(212,104,12)" fg:x="243" fg:w="1"/><text x="16.0088%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="15.7588%" y="325" width="0.0649%" height="15" fill="rgb(234,204,3)" fg:x="243" fg:w="1"/><text x="16.0088%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="15.7588%" y="309" width="0.0649%" height="15" fill="rgb(251,218,7)" fg:x="243" fg:w="1"/><text x="16.0088%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="15.7588%" y="293" width="0.0649%" height="15" fill="rgb(221,81,32)" fg:x="243" fg:w="1"/><text x="16.0088%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="15.7588%" y="277" width="0.0649%" height="15" fill="rgb(214,152,26)" fg:x="243" fg:w="1"/><text x="16.0088%" y="287.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="15.7588%" y="261" width="0.0649%" height="15" fill="rgb(223,22,3)" fg:x="243" fg:w="1"/><text x="16.0088%" y="271.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="15.7588%" y="245" width="0.0649%" height="15" fill="rgb(207,174,7)" fg:x="243" fg:w="1"/><text x="16.0088%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.7588%" y="229" width="0.0649%" height="15" fill="rgb(224,19,52)" fg:x="243" fg:w="1"/><text x="16.0088%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.7588%" y="213" width="0.0649%" height="15" fill="rgb(228,24,14)" fg:x="243" fg:w="1"/><text x="16.0088%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.7588%" y="197" width="0.0649%" height="15" fill="rgb(230,153,43)" fg:x="243" fg:w="1"/><text x="16.0088%" y="207.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (1 samples, 0.06%)</title><rect x="15.8236%" y="901" width="0.0649%" height="15" fill="rgb(231,106,12)" fg:x="244" fg:w="1"/><text x="16.0736%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="15.8236%" y="885" width="0.0649%" height="15" fill="rgb(215,92,2)" fg:x="244" fg:w="1"/><text x="16.0736%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="15.8236%" y="869" width="0.0649%" height="15" fill="rgb(249,143,25)" fg:x="244" fg:w="1"/><text x="16.0736%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="15.8236%" y="853" width="0.0649%" height="15" fill="rgb(252,7,35)" fg:x="244" fg:w="1"/><text x="16.0736%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="837" width="0.0649%" height="15" fill="rgb(216,69,40)" fg:x="244" fg:w="1"/><text x="16.0736%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="821" width="0.0649%" height="15" fill="rgb(240,36,33)" fg:x="244" fg:w="1"/><text x="16.0736%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="15.8236%" y="805" width="0.0649%" height="15" fill="rgb(231,128,14)" fg:x="244" fg:w="1"/><text x="16.0736%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="789" width="0.0649%" height="15" fill="rgb(245,143,14)" fg:x="244" fg:w="1"/><text x="16.0736%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="773" width="0.0649%" height="15" fill="rgb(222,130,28)" fg:x="244" fg:w="1"/><text x="16.0736%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="15.8236%" y="757" width="0.0649%" height="15" fill="rgb(212,10,48)" fg:x="244" fg:w="1"/><text x="16.0736%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="15.8236%" y="741" width="0.0649%" height="15" fill="rgb(254,118,45)" fg:x="244" fg:w="1"/><text x="16.0736%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="15.8236%" y="725" width="0.0649%" height="15" fill="rgb(228,6,45)" fg:x="244" fg:w="1"/><text x="16.0736%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="15.8236%" y="709" width="0.0649%" height="15" fill="rgb(241,18,35)" fg:x="244" fg:w="1"/><text x="16.0736%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="15.8236%" y="693" width="0.0649%" height="15" fill="rgb(227,214,53)" fg:x="244" fg:w="1"/><text x="16.0736%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="677" width="0.0649%" height="15" fill="rgb(224,107,51)" fg:x="244" fg:w="1"/><text x="16.0736%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="661" width="0.0649%" height="15" fill="rgb(248,60,28)" fg:x="244" fg:w="1"/><text x="16.0736%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="15.8236%" y="645" width="0.0649%" height="15" fill="rgb(249,101,23)" fg:x="244" fg:w="1"/><text x="16.0736%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="15.8236%" y="629" width="0.0649%" height="15" fill="rgb(228,51,19)" fg:x="244" fg:w="1"/><text x="16.0736%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="15.8236%" y="613" width="0.0649%" height="15" fill="rgb(213,20,6)" fg:x="244" fg:w="1"/><text x="16.0736%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="15.8236%" y="597" width="0.0649%" height="15" fill="rgb(212,124,10)" fg:x="244" fg:w="1"/><text x="16.0736%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="15.8236%" y="581" width="0.0649%" height="15" fill="rgb(248,3,40)" fg:x="244" fg:w="1"/><text x="16.0736%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="565" width="0.0649%" height="15" fill="rgb(223,178,23)" fg:x="244" fg:w="1"/><text x="16.0736%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="549" width="0.0649%" height="15" fill="rgb(240,132,45)" fg:x="244" fg:w="1"/><text x="16.0736%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="15.8236%" y="533" width="0.0649%" height="15" fill="rgb(245,164,36)" fg:x="244" fg:w="1"/><text x="16.0736%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="15.8236%" y="517" width="0.0649%" height="15" fill="rgb(231,188,53)" fg:x="244" fg:w="1"/><text x="16.0736%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="15.8236%" y="501" width="0.0649%" height="15" fill="rgb(237,198,39)" fg:x="244" fg:w="1"/><text x="16.0736%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="15.8236%" y="485" width="0.0649%" height="15" fill="rgb(223,120,35)" fg:x="244" fg:w="1"/><text x="16.0736%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="15.8236%" y="469" width="0.0649%" height="15" fill="rgb(253,107,49)" fg:x="244" fg:w="1"/><text x="16.0736%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="453" width="0.0649%" height="15" fill="rgb(216,44,31)" fg:x="244" fg:w="1"/><text x="16.0736%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="15.8236%" y="437" width="0.0649%" height="15" fill="rgb(253,87,21)" fg:x="244" fg:w="1"/><text x="16.0736%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="15.8236%" y="421" width="0.0649%" height="15" fill="rgb(226,18,2)" fg:x="244" fg:w="1"/><text x="16.0736%" y="431.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="15.8236%" y="405" width="0.0649%" height="15" fill="rgb(216,8,46)" fg:x="244" fg:w="1"/><text x="16.0736%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="15.8236%" y="389" width="0.0649%" height="15" fill="rgb(226,140,39)" fg:x="244" fg:w="1"/><text x="16.0736%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="15.8236%" y="373" width="0.0649%" height="15" fill="rgb(221,194,54)" fg:x="244" fg:w="1"/><text x="16.0736%" y="383.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="15.8236%" y="357" width="0.0649%" height="15" fill="rgb(213,92,11)" fg:x="244" fg:w="1"/><text x="16.0736%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="15.8236%" y="341" width="0.0649%" height="15" fill="rgb(229,162,46)" fg:x="244" fg:w="1"/><text x="16.0736%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="15.8236%" y="325" width="0.0649%" height="15" fill="rgb(214,111,36)" fg:x="244" fg:w="1"/><text x="16.0736%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="15.8236%" y="309" width="0.0649%" height="15" fill="rgb(207,6,21)" fg:x="244" fg:w="1"/><text x="16.0736%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="15.8236%" y="293" width="0.0649%" height="15" fill="rgb(213,127,38)" fg:x="244" fg:w="1"/><text x="16.0736%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="15.8236%" y="277" width="0.0649%" height="15" fill="rgb(238,118,32)" fg:x="244" fg:w="1"/><text x="16.0736%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.06%)</title><rect x="15.8236%" y="261" width="0.0649%" height="15" fill="rgb(240,139,39)" fg:x="244" fg:w="1"/><text x="16.0736%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.8236%" y="245" width="0.0649%" height="15" fill="rgb(235,10,37)" fg:x="244" fg:w="1"/><text x="16.0736%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.8236%" y="229" width="0.0649%" height="15" fill="rgb(249,171,38)" fg:x="244" fg:w="1"/><text x="16.0736%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.8236%" y="213" width="0.0649%" height="15" fill="rgb(242,144,32)" fg:x="244" fg:w="1"/><text x="16.0736%" y="223.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (4 samples, 0.26%)</title><rect x="15.6939%" y="949" width="0.2594%" height="15" fill="rgb(217,117,21)" fg:x="242" fg:w="4"/><text x="15.9439%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (4 samples, 0.26%)</title><rect x="15.6939%" y="933" width="0.2594%" height="15" fill="rgb(249,87,1)" fg:x="242" fg:w="4"/><text x="15.9439%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (4 samples, 0.26%)</title><rect x="15.6939%" y="917" width="0.2594%" height="15" fill="rgb(248,196,48)" fg:x="242" fg:w="4"/><text x="15.9439%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="15.8885%" y="901" width="0.0649%" height="15" fill="rgb(251,206,33)" fg:x="245" fg:w="1"/><text x="16.1385%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="15.8885%" y="885" width="0.0649%" height="15" fill="rgb(232,141,28)" fg:x="245" fg:w="1"/><text x="16.1385%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="15.8885%" y="869" width="0.0649%" height="15" fill="rgb(209,167,14)" fg:x="245" fg:w="1"/><text x="16.1385%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="15.8885%" y="853" width="0.0649%" height="15" fill="rgb(225,11,50)" fg:x="245" fg:w="1"/><text x="16.1385%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="15.8885%" y="837" width="0.0649%" height="15" fill="rgb(209,50,20)" fg:x="245" fg:w="1"/><text x="16.1385%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="15.8885%" y="821" width="0.0649%" height="15" fill="rgb(212,17,46)" fg:x="245" fg:w="1"/><text x="16.1385%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="15.8885%" y="805" width="0.0649%" height="15" fill="rgb(216,101,39)" fg:x="245" fg:w="1"/><text x="16.1385%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="15.8885%" y="789" width="0.0649%" height="15" fill="rgb(212,228,48)" fg:x="245" fg:w="1"/><text x="16.1385%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="15.8885%" y="773" width="0.0649%" height="15" fill="rgb(250,6,50)" fg:x="245" fg:w="1"/><text x="16.1385%" y="783.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="15.8885%" y="757" width="0.0649%" height="15" fill="rgb(250,160,48)" fg:x="245" fg:w="1"/><text x="16.1385%" y="767.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="15.8885%" y="741" width="0.0649%" height="15" fill="rgb(244,216,33)" fg:x="245" fg:w="1"/><text x="16.1385%" y="751.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="15.8885%" y="725" width="0.0649%" height="15" fill="rgb(207,157,5)" fg:x="245" fg:w="1"/><text x="16.1385%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="15.8885%" y="709" width="0.0649%" height="15" fill="rgb(228,199,8)" fg:x="245" fg:w="1"/><text x="16.1385%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.8885%" y="693" width="0.0649%" height="15" fill="rgb(227,80,20)" fg:x="245" fg:w="1"/><text x="16.1385%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.8885%" y="677" width="0.0649%" height="15" fill="rgb(222,9,33)" fg:x="245" fg:w="1"/><text x="16.1385%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.8885%" y="661" width="0.0649%" height="15" fill="rgb(239,44,28)" fg:x="245" fg:w="1"/><text x="16.1385%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt; (1 samples, 0.06%)</title><rect x="15.9533%" y="933" width="0.0649%" height="15" fill="rgb(249,187,43)" fg:x="246" fg:w="1"/><text x="16.2033%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::types::TypeName&gt; (1 samples, 0.06%)</title><rect x="15.9533%" y="917" width="0.0649%" height="15" fill="rgb(216,141,28)" fg:x="246" fg:w="1"/><text x="16.2033%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.06%)</title><rect x="15.9533%" y="901" width="0.0649%" height="15" fill="rgb(230,154,53)" fg:x="246" fg:w="1"/><text x="16.2033%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="15.9533%" y="885" width="0.0649%" height="15" fill="rgb(227,82,4)" fg:x="246" fg:w="1"/><text x="16.2033%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="15.9533%" y="869" width="0.0649%" height="15" fill="rgb(220,107,16)" fg:x="246" fg:w="1"/><text x="16.2033%" y="879.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="15.9533%" y="853" width="0.0649%" height="15" fill="rgb(207,187,2)" fg:x="246" fg:w="1"/><text x="16.2033%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="15.9533%" y="837" width="0.0649%" height="15" fill="rgb(210,162,52)" fg:x="246" fg:w="1"/><text x="16.2033%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="15.9533%" y="821" width="0.0649%" height="15" fill="rgb(217,216,49)" fg:x="246" fg:w="1"/><text x="16.2033%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="15.9533%" y="805" width="0.0649%" height="15" fill="rgb(218,146,49)" fg:x="246" fg:w="1"/><text x="16.2033%" y="815.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="16.0182%" y="917" width="0.0649%" height="15" fill="rgb(216,55,40)" fg:x="247" fg:w="1"/><text x="16.2682%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.0182%" y="901" width="0.0649%" height="15" fill="rgb(208,196,21)" fg:x="247" fg:w="1"/><text x="16.2682%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.0182%" y="885" width="0.0649%" height="15" fill="rgb(242,117,42)" fg:x="247" fg:w="1"/><text x="16.2682%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.0182%" y="869" width="0.0649%" height="15" fill="rgb(210,11,23)" fg:x="247" fg:w="1"/><text x="16.2682%" y="879.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (2 samples, 0.13%)</title><rect x="16.0182%" y="933" width="0.1297%" height="15" fill="rgb(217,110,2)" fg:x="247" fg:w="2"/><text x="16.2682%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="16.0830%" y="917" width="0.0649%" height="15" fill="rgb(229,77,54)" fg:x="248" fg:w="1"/><text x="16.3330%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="16.0830%" y="901" width="0.0649%" height="15" fill="rgb(218,53,16)" fg:x="248" fg:w="1"/><text x="16.3330%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="16.0830%" y="885" width="0.0649%" height="15" fill="rgb(215,38,13)" fg:x="248" fg:w="1"/><text x="16.3330%" y="895.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="16.0830%" y="869" width="0.0649%" height="15" fill="rgb(235,42,18)" fg:x="248" fg:w="1"/><text x="16.3330%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="16.0830%" y="853" width="0.0649%" height="15" fill="rgb(219,66,54)" fg:x="248" fg:w="1"/><text x="16.3330%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="16.0830%" y="837" width="0.0649%" height="15" fill="rgb(222,205,4)" fg:x="248" fg:w="1"/><text x="16.3330%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="16.0830%" y="821" width="0.0649%" height="15" fill="rgb(227,213,46)" fg:x="248" fg:w="1"/><text x="16.3330%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="16.0830%" y="805" width="0.0649%" height="15" fill="rgb(250,145,42)" fg:x="248" fg:w="1"/><text x="16.3330%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="16.0830%" y="789" width="0.0649%" height="15" fill="rgb(219,15,2)" fg:x="248" fg:w="1"/><text x="16.3330%" y="799.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="16.0830%" y="773" width="0.0649%" height="15" fill="rgb(231,181,52)" fg:x="248" fg:w="1"/><text x="16.3330%" y="783.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="16.0830%" y="757" width="0.0649%" height="15" fill="rgb(235,1,42)" fg:x="248" fg:w="1"/><text x="16.3330%" y="767.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="16.0830%" y="741" width="0.0649%" height="15" fill="rgb(249,88,27)" fg:x="248" fg:w="1"/><text x="16.3330%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="16.0830%" y="725" width="0.0649%" height="15" fill="rgb(235,145,16)" fg:x="248" fg:w="1"/><text x="16.3330%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.0830%" y="709" width="0.0649%" height="15" fill="rgb(237,114,19)" fg:x="248" fg:w="1"/><text x="16.3330%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.0830%" y="693" width="0.0649%" height="15" fill="rgb(238,51,50)" fg:x="248" fg:w="1"/><text x="16.3330%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.0830%" y="677" width="0.0649%" height="15" fill="rgb(205,194,25)" fg:x="248" fg:w="1"/><text x="16.3330%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (1 samples, 0.06%)</title><rect x="16.1479%" y="901" width="0.0649%" height="15" fill="rgb(215,203,17)" fg:x="249" fg:w="1"/><text x="16.3979%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="16.1479%" y="885" width="0.0649%" height="15" fill="rgb(233,112,49)" fg:x="249" fg:w="1"/><text x="16.3979%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.1479%" y="869" width="0.0649%" height="15" fill="rgb(241,130,26)" fg:x="249" fg:w="1"/><text x="16.3979%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.1479%" y="853" width="0.0649%" height="15" fill="rgb(252,223,19)" fg:x="249" fg:w="1"/><text x="16.3979%" y="863.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="16.1479%" y="837" width="0.0649%" height="15" fill="rgb(211,95,25)" fg:x="249" fg:w="1"/><text x="16.3979%" y="847.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="16.1479%" y="821" width="0.0649%" height="15" fill="rgb(251,182,27)" fg:x="249" fg:w="1"/><text x="16.3979%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="16.1479%" y="805" width="0.0649%" height="15" fill="rgb(238,24,4)" fg:x="249" fg:w="1"/><text x="16.3979%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="16.1479%" y="789" width="0.0649%" height="15" fill="rgb(224,220,25)" fg:x="249" fg:w="1"/><text x="16.3979%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.1479%" y="773" width="0.0649%" height="15" fill="rgb(239,133,26)" fg:x="249" fg:w="1"/><text x="16.3979%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.1479%" y="757" width="0.0649%" height="15" fill="rgb(211,94,48)" fg:x="249" fg:w="1"/><text x="16.3979%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.1479%" y="741" width="0.0649%" height="15" fill="rgb(239,87,6)" fg:x="249" fg:w="1"/><text x="16.3979%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.2127%" y="869" width="0.0649%" height="15" fill="rgb(227,62,0)" fg:x="250" fg:w="1"/><text x="16.4627%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.2127%" y="853" width="0.0649%" height="15" fill="rgb(211,226,4)" fg:x="250" fg:w="1"/><text x="16.4627%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.2127%" y="837" width="0.0649%" height="15" fill="rgb(253,38,52)" fg:x="250" fg:w="1"/><text x="16.4627%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.2127%" y="821" width="0.0649%" height="15" fill="rgb(229,126,40)" fg:x="250" fg:w="1"/><text x="16.4627%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.2127%" y="805" width="0.0649%" height="15" fill="rgb(229,165,44)" fg:x="250" fg:w="1"/><text x="16.4627%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.2127%" y="789" width="0.0649%" height="15" fill="rgb(247,95,47)" fg:x="250" fg:w="1"/><text x="16.4627%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.2776%" y="853" width="0.0649%" height="15" fill="rgb(216,140,30)" fg:x="251" fg:w="1"/><text x="16.5276%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.2776%" y="837" width="0.0649%" height="15" fill="rgb(246,214,8)" fg:x="251" fg:w="1"/><text x="16.5276%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.2776%" y="821" width="0.0649%" height="15" fill="rgb(227,224,15)" fg:x="251" fg:w="1"/><text x="16.5276%" y="831.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (7 samples, 0.45%)</title><rect x="15.9533%" y="949" width="0.4540%" height="15" fill="rgb(233,175,4)" fg:x="246" fg:w="7"/><text x="16.2033%" y="959.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (4 samples, 0.26%)</title><rect x="16.1479%" y="933" width="0.2594%" height="15" fill="rgb(221,66,45)" fg:x="249" fg:w="4"/><text x="16.3979%" y="943.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (4 samples, 0.26%)</title><rect x="16.1479%" y="917" width="0.2594%" height="15" fill="rgb(221,178,18)" fg:x="249" fg:w="4"/><text x="16.3979%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (3 samples, 0.19%)</title><rect x="16.2127%" y="901" width="0.1946%" height="15" fill="rgb(213,81,29)" fg:x="250" fg:w="3"/><text x="16.4627%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="16.2127%" y="885" width="0.1946%" height="15" fill="rgb(220,89,49)" fg:x="250" fg:w="3"/><text x="16.4627%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="16.2776%" y="869" width="0.1297%" height="15" fill="rgb(227,60,33)" fg:x="251" fg:w="2"/><text x="16.5276%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="16.3424%" y="853" width="0.0649%" height="15" fill="rgb(205,113,12)" fg:x="252" fg:w="1"/><text x="16.5924%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="16.3424%" y="837" width="0.0649%" height="15" fill="rgb(211,32,1)" fg:x="252" fg:w="1"/><text x="16.5924%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="16.3424%" y="821" width="0.0649%" height="15" fill="rgb(246,2,12)" fg:x="252" fg:w="1"/><text x="16.5924%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="16.3424%" y="805" width="0.0649%" height="15" fill="rgb(243,37,27)" fg:x="252" fg:w="1"/><text x="16.5924%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="16.3424%" y="789" width="0.0649%" height="15" fill="rgb(248,211,31)" fg:x="252" fg:w="1"/><text x="16.5924%" y="799.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="16.3424%" y="773" width="0.0649%" height="15" fill="rgb(242,146,47)" fg:x="252" fg:w="1"/><text x="16.5924%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="16.3424%" y="757" width="0.0649%" height="15" fill="rgb(206,70,20)" fg:x="252" fg:w="1"/><text x="16.5924%" y="767.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="16.3424%" y="741" width="0.0649%" height="15" fill="rgb(215,10,51)" fg:x="252" fg:w="1"/><text x="16.5924%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.3424%" y="725" width="0.0649%" height="15" fill="rgb(243,178,53)" fg:x="252" fg:w="1"/><text x="16.5924%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.3424%" y="709" width="0.0649%" height="15" fill="rgb(233,221,20)" fg:x="252" fg:w="1"/><text x="16.5924%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.3424%" y="693" width="0.0649%" height="15" fill="rgb(218,95,35)" fg:x="252" fg:w="1"/><text x="16.5924%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="16.3424%" y="677" width="0.0649%" height="15" fill="rgb(229,13,5)" fg:x="252" fg:w="1"/><text x="16.5924%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="16.3424%" y="661" width="0.0649%" height="15" fill="rgb(252,164,30)" fg:x="252" fg:w="1"/><text x="16.5924%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="16.3424%" y="645" width="0.0649%" height="15" fill="rgb(232,68,36)" fg:x="252" fg:w="1"/><text x="16.5924%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.3424%" y="629" width="0.0649%" height="15" fill="rgb(219,59,54)" fg:x="252" fg:w="1"/><text x="16.5924%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.3424%" y="613" width="0.0649%" height="15" fill="rgb(250,92,33)" fg:x="252" fg:w="1"/><text x="16.5924%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.3424%" y="597" width="0.0649%" height="15" fill="rgb(229,162,54)" fg:x="252" fg:w="1"/><text x="16.5924%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.4073%" y="933" width="0.0649%" height="15" fill="rgb(244,114,52)" fg:x="253" fg:w="1"/><text x="16.6573%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.4073%" y="917" width="0.0649%" height="15" fill="rgb(212,211,43)" fg:x="253" fg:w="1"/><text x="16.6573%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.4073%" y="901" width="0.0649%" height="15" fill="rgb(226,147,8)" fg:x="253" fg:w="1"/><text x="16.6573%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.4721%" y="933" width="0.0649%" height="15" fill="rgb(226,23,13)" fg:x="254" fg:w="1"/><text x="16.7221%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.4721%" y="917" width="0.0649%" height="15" fill="rgb(240,63,4)" fg:x="254" fg:w="1"/><text x="16.7221%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="16.4721%" y="901" width="0.0649%" height="15" fill="rgb(221,1,32)" fg:x="254" fg:w="1"/><text x="16.7221%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.4721%" y="885" width="0.0649%" height="15" fill="rgb(242,117,10)" fg:x="254" fg:w="1"/><text x="16.7221%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.4721%" y="869" width="0.0649%" height="15" fill="rgb(249,172,44)" fg:x="254" fg:w="1"/><text x="16.7221%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="16.4721%" y="853" width="0.0649%" height="15" fill="rgb(244,46,45)" fg:x="254" fg:w="1"/><text x="16.7221%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="16.4721%" y="837" width="0.0649%" height="15" fill="rgb(206,43,17)" fg:x="254" fg:w="1"/><text x="16.7221%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="16.4721%" y="821" width="0.0649%" height="15" fill="rgb(239,218,39)" fg:x="254" fg:w="1"/><text x="16.7221%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="16.4721%" y="805" width="0.0649%" height="15" fill="rgb(208,169,54)" fg:x="254" fg:w="1"/><text x="16.7221%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="16.4721%" y="789" width="0.0649%" height="15" fill="rgb(247,25,42)" fg:x="254" fg:w="1"/><text x="16.7221%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="16.4721%" y="773" width="0.0649%" height="15" fill="rgb(226,23,31)" fg:x="254" fg:w="1"/><text x="16.7221%" y="783.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="16.4721%" y="757" width="0.0649%" height="15" fill="rgb(247,16,28)" fg:x="254" fg:w="1"/><text x="16.7221%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="16.4721%" y="741" width="0.0649%" height="15" fill="rgb(231,147,38)" fg:x="254" fg:w="1"/><text x="16.7221%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="16.4721%" y="725" width="0.0649%" height="15" fill="rgb(253,81,48)" fg:x="254" fg:w="1"/><text x="16.7221%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.4721%" y="709" width="0.0649%" height="15" fill="rgb(249,222,43)" fg:x="254" fg:w="1"/><text x="16.7221%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.4721%" y="693" width="0.0649%" height="15" fill="rgb(221,3,27)" fg:x="254" fg:w="1"/><text x="16.7221%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.4721%" y="677" width="0.0649%" height="15" fill="rgb(228,180,5)" fg:x="254" fg:w="1"/><text x="16.7221%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.4721%" y="661" width="0.0649%" height="15" fill="rgb(227,131,42)" fg:x="254" fg:w="1"/><text x="16.7221%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.4721%" y="645" width="0.0649%" height="15" fill="rgb(212,3,39)" fg:x="254" fg:w="1"/><text x="16.7221%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.4721%" y="629" width="0.0649%" height="15" fill="rgb(226,45,5)" fg:x="254" fg:w="1"/><text x="16.7221%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.5370%" y="933" width="0.0649%" height="15" fill="rgb(215,167,45)" fg:x="255" fg:w="1"/><text x="16.7870%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.5370%" y="917" width="0.0649%" height="15" fill="rgb(250,218,53)" fg:x="255" fg:w="1"/><text x="16.7870%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="16.5370%" y="901" width="0.0649%" height="15" fill="rgb(207,140,0)" fg:x="255" fg:w="1"/><text x="16.7870%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.5370%" y="885" width="0.0649%" height="15" fill="rgb(238,133,51)" fg:x="255" fg:w="1"/><text x="16.7870%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.5370%" y="869" width="0.0649%" height="15" fill="rgb(218,203,53)" fg:x="255" fg:w="1"/><text x="16.7870%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="16.5370%" y="853" width="0.0649%" height="15" fill="rgb(226,184,25)" fg:x="255" fg:w="1"/><text x="16.7870%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="16.5370%" y="837" width="0.0649%" height="15" fill="rgb(231,121,21)" fg:x="255" fg:w="1"/><text x="16.7870%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.5370%" y="821" width="0.0649%" height="15" fill="rgb(251,14,34)" fg:x="255" fg:w="1"/><text x="16.7870%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.5370%" y="805" width="0.0649%" height="15" fill="rgb(249,193,11)" fg:x="255" fg:w="1"/><text x="16.7870%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="16.5370%" y="789" width="0.0649%" height="15" fill="rgb(220,172,37)" fg:x="255" fg:w="1"/><text x="16.7870%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="16.5370%" y="773" width="0.0649%" height="15" fill="rgb(231,229,43)" fg:x="255" fg:w="1"/><text x="16.7870%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="16.5370%" y="757" width="0.0649%" height="15" fill="rgb(250,161,5)" fg:x="255" fg:w="1"/><text x="16.7870%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="16.5370%" y="741" width="0.0649%" height="15" fill="rgb(218,225,18)" fg:x="255" fg:w="1"/><text x="16.7870%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.5370%" y="725" width="0.0649%" height="15" fill="rgb(245,45,42)" fg:x="255" fg:w="1"/><text x="16.7870%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.5370%" y="709" width="0.0649%" height="15" fill="rgb(211,115,1)" fg:x="255" fg:w="1"/><text x="16.7870%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.5370%" y="693" width="0.0649%" height="15" fill="rgb(248,133,52)" fg:x="255" fg:w="1"/><text x="16.7870%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.6018%" y="933" width="0.0649%" height="15" fill="rgb(238,100,21)" fg:x="256" fg:w="1"/><text x="16.8518%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.6018%" y="917" width="0.0649%" height="15" fill="rgb(247,144,11)" fg:x="256" fg:w="1"/><text x="16.8518%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="16.6018%" y="901" width="0.0649%" height="15" fill="rgb(206,164,16)" fg:x="256" fg:w="1"/><text x="16.8518%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.6018%" y="885" width="0.0649%" height="15" fill="rgb(222,34,3)" fg:x="256" fg:w="1"/><text x="16.8518%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.6018%" y="869" width="0.0649%" height="15" fill="rgb(248,82,4)" fg:x="256" fg:w="1"/><text x="16.8518%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="16.6018%" y="853" width="0.0649%" height="15" fill="rgb(228,81,46)" fg:x="256" fg:w="1"/><text x="16.8518%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="16.6018%" y="837" width="0.0649%" height="15" fill="rgb(227,67,47)" fg:x="256" fg:w="1"/><text x="16.8518%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.6018%" y="821" width="0.0649%" height="15" fill="rgb(215,93,53)" fg:x="256" fg:w="1"/><text x="16.8518%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.6018%" y="805" width="0.0649%" height="15" fill="rgb(248,194,39)" fg:x="256" fg:w="1"/><text x="16.8518%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.6018%" y="789" width="0.0649%" height="15" fill="rgb(215,5,19)" fg:x="256" fg:w="1"/><text x="16.8518%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.6018%" y="773" width="0.0649%" height="15" fill="rgb(226,215,51)" fg:x="256" fg:w="1"/><text x="16.8518%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.6667%" y="933" width="0.0649%" height="15" fill="rgb(225,56,26)" fg:x="257" fg:w="1"/><text x="16.9167%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="16.6667%" y="917" width="0.0649%" height="15" fill="rgb(222,75,29)" fg:x="257" fg:w="1"/><text x="16.9167%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.6667%" y="901" width="0.0649%" height="15" fill="rgb(236,139,6)" fg:x="257" fg:w="1"/><text x="16.9167%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.6667%" y="885" width="0.0649%" height="15" fill="rgb(223,137,36)" fg:x="257" fg:w="1"/><text x="16.9167%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="16.6667%" y="869" width="0.0649%" height="15" fill="rgb(226,99,2)" fg:x="257" fg:w="1"/><text x="16.9167%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="16.6667%" y="853" width="0.0649%" height="15" fill="rgb(206,133,23)" fg:x="257" fg:w="1"/><text x="16.9167%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.6667%" y="837" width="0.0649%" height="15" fill="rgb(243,173,15)" fg:x="257" fg:w="1"/><text x="16.9167%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.6667%" y="821" width="0.0649%" height="15" fill="rgb(228,69,28)" fg:x="257" fg:w="1"/><text x="16.9167%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="16.6667%" y="805" width="0.0649%" height="15" fill="rgb(212,51,22)" fg:x="257" fg:w="1"/><text x="16.9167%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="16.6667%" y="789" width="0.0649%" height="15" fill="rgb(227,113,0)" fg:x="257" fg:w="1"/><text x="16.9167%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="16.6667%" y="773" width="0.0649%" height="15" fill="rgb(252,84,27)" fg:x="257" fg:w="1"/><text x="16.9167%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="16.6667%" y="757" width="0.0649%" height="15" fill="rgb(223,145,39)" fg:x="257" fg:w="1"/><text x="16.9167%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="16.6667%" y="741" width="0.0649%" height="15" fill="rgb(239,219,30)" fg:x="257" fg:w="1"/><text x="16.9167%" y="751.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="16.6667%" y="725" width="0.0649%" height="15" fill="rgb(224,196,39)" fg:x="257" fg:w="1"/><text x="16.9167%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.6667%" y="709" width="0.0649%" height="15" fill="rgb(205,35,43)" fg:x="257" fg:w="1"/><text x="16.9167%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.6667%" y="693" width="0.0649%" height="15" fill="rgb(228,201,21)" fg:x="257" fg:w="1"/><text x="16.9167%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.6667%" y="677" width="0.0649%" height="15" fill="rgb(237,118,16)" fg:x="257" fg:w="1"/><text x="16.9167%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="16.7315%" y="933" width="0.0649%" height="15" fill="rgb(241,17,19)" fg:x="258" fg:w="1"/><text x="16.9815%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="16.7315%" y="917" width="0.0649%" height="15" fill="rgb(214,10,25)" fg:x="258" fg:w="1"/><text x="16.9815%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="16.7315%" y="901" width="0.0649%" height="15" fill="rgb(238,37,29)" fg:x="258" fg:w="1"/><text x="16.9815%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="16.7315%" y="885" width="0.0649%" height="15" fill="rgb(253,83,25)" fg:x="258" fg:w="1"/><text x="16.9815%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="16.7315%" y="869" width="0.0649%" height="15" fill="rgb(234,192,12)" fg:x="258" fg:w="1"/><text x="16.9815%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="16.7315%" y="853" width="0.0649%" height="15" fill="rgb(241,216,45)" fg:x="258" fg:w="1"/><text x="16.9815%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.7315%" y="837" width="0.0649%" height="15" fill="rgb(242,22,33)" fg:x="258" fg:w="1"/><text x="16.9815%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="16.7315%" y="821" width="0.0649%" height="15" fill="rgb(231,105,49)" fg:x="258" fg:w="1"/><text x="16.9815%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="16.7315%" y="805" width="0.0649%" height="15" fill="rgb(218,204,15)" fg:x="258" fg:w="1"/><text x="16.9815%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="16.7315%" y="789" width="0.0649%" height="15" fill="rgb(235,138,41)" fg:x="258" fg:w="1"/><text x="16.9815%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="16.7315%" y="773" width="0.0649%" height="15" fill="rgb(246,0,9)" fg:x="258" fg:w="1"/><text x="16.9815%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="16.7315%" y="757" width="0.0649%" height="15" fill="rgb(210,74,4)" fg:x="258" fg:w="1"/><text x="16.9815%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="16.7315%" y="741" width="0.0649%" height="15" fill="rgb(250,60,41)" fg:x="258" fg:w="1"/><text x="16.9815%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="16.7315%" y="725" width="0.0649%" height="15" fill="rgb(220,115,12)" fg:x="258" fg:w="1"/><text x="16.9815%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.7315%" y="709" width="0.0649%" height="15" fill="rgb(237,100,13)" fg:x="258" fg:w="1"/><text x="16.9815%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.7315%" y="693" width="0.0649%" height="15" fill="rgb(213,55,26)" fg:x="258" fg:w="1"/><text x="16.9815%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.7315%" y="677" width="0.0649%" height="15" fill="rgb(216,17,4)" fg:x="258" fg:w="1"/><text x="16.9815%" y="687.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="16.7964%" y="901" width="0.0649%" height="15" fill="rgb(220,153,47)" fg:x="259" fg:w="1"/><text x="17.0464%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="16.7964%" y="885" width="0.0649%" height="15" fill="rgb(215,131,9)" fg:x="259" fg:w="1"/><text x="17.0464%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="16.7964%" y="869" width="0.0649%" height="15" fill="rgb(233,46,42)" fg:x="259" fg:w="1"/><text x="17.0464%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="16.7964%" y="853" width="0.0649%" height="15" fill="rgb(226,86,7)" fg:x="259" fg:w="1"/><text x="17.0464%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="16.7964%" y="837" width="0.0649%" height="15" fill="rgb(239,226,21)" fg:x="259" fg:w="1"/><text x="17.0464%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="16.7964%" y="821" width="0.0649%" height="15" fill="rgb(244,137,22)" fg:x="259" fg:w="1"/><text x="17.0464%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="16.7964%" y="805" width="0.0649%" height="15" fill="rgb(211,139,35)" fg:x="259" fg:w="1"/><text x="17.0464%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="16.7964%" y="789" width="0.0649%" height="15" fill="rgb(214,62,50)" fg:x="259" fg:w="1"/><text x="17.0464%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="16.7964%" y="773" width="0.0649%" height="15" fill="rgb(212,113,44)" fg:x="259" fg:w="1"/><text x="17.0464%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="16.7964%" y="757" width="0.0649%" height="15" fill="rgb(226,150,43)" fg:x="259" fg:w="1"/><text x="17.0464%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="16.7964%" y="741" width="0.0649%" height="15" fill="rgb(250,71,37)" fg:x="259" fg:w="1"/><text x="17.0464%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.7964%" y="725" width="0.0649%" height="15" fill="rgb(219,76,19)" fg:x="259" fg:w="1"/><text x="17.0464%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.7964%" y="709" width="0.0649%" height="15" fill="rgb(250,39,11)" fg:x="259" fg:w="1"/><text x="17.0464%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.7964%" y="693" width="0.0649%" height="15" fill="rgb(230,64,31)" fg:x="259" fg:w="1"/><text x="17.0464%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="16.8612%" y="741" width="0.0649%" height="15" fill="rgb(208,222,23)" fg:x="260" fg:w="1"/><text x="17.1112%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="16.8612%" y="725" width="0.0649%" height="15" fill="rgb(227,125,18)" fg:x="260" fg:w="1"/><text x="17.1112%" y="735.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="16.8612%" y="709" width="0.0649%" height="15" fill="rgb(234,210,9)" fg:x="260" fg:w="1"/><text x="17.1112%" y="719.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="16.8612%" y="693" width="0.0649%" height="15" fill="rgb(217,127,24)" fg:x="260" fg:w="1"/><text x="17.1112%" y="703.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="16.8612%" y="677" width="0.0649%" height="15" fill="rgb(239,141,48)" fg:x="260" fg:w="1"/><text x="17.1112%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="16.8612%" y="661" width="0.0649%" height="15" fill="rgb(227,109,8)" fg:x="260" fg:w="1"/><text x="17.1112%" y="671.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="16.8612%" y="645" width="0.0649%" height="15" fill="rgb(235,184,23)" fg:x="260" fg:w="1"/><text x="17.1112%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="16.8612%" y="629" width="0.0649%" height="15" fill="rgb(227,226,48)" fg:x="260" fg:w="1"/><text x="17.1112%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="16.8612%" y="613" width="0.0649%" height="15" fill="rgb(206,150,11)" fg:x="260" fg:w="1"/><text x="17.1112%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.06%)</title><rect x="16.8612%" y="597" width="0.0649%" height="15" fill="rgb(254,2,33)" fg:x="260" fg:w="1"/><text x="17.1112%" y="607.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.06%)</title><rect x="16.8612%" y="581" width="0.0649%" height="15" fill="rgb(243,160,20)" fg:x="260" fg:w="1"/><text x="17.1112%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.06%)</title><rect x="16.8612%" y="565" width="0.0649%" height="15" fill="rgb(218,208,30)" fg:x="260" fg:w="1"/><text x="17.1112%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.8612%" y="549" width="0.0649%" height="15" fill="rgb(224,120,49)" fg:x="260" fg:w="1"/><text x="17.1112%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.8612%" y="533" width="0.0649%" height="15" fill="rgb(246,12,2)" fg:x="260" fg:w="1"/><text x="17.1112%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.8612%" y="517" width="0.0649%" height="15" fill="rgb(236,117,3)" fg:x="260" fg:w="1"/><text x="17.1112%" y="527.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="16.8612%" y="901" width="0.1297%" height="15" fill="rgb(216,128,52)" fg:x="260" fg:w="2"/><text x="17.1112%" y="911.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="16.8612%" y="885" width="0.1297%" height="15" fill="rgb(246,145,19)" fg:x="260" fg:w="2"/><text x="17.1112%" y="895.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="16.8612%" y="869" width="0.1297%" height="15" fill="rgb(222,11,46)" fg:x="260" fg:w="2"/><text x="17.1112%" y="879.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="16.8612%" y="853" width="0.1297%" height="15" fill="rgb(245,82,36)" fg:x="260" fg:w="2"/><text x="17.1112%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="16.8612%" y="837" width="0.1297%" height="15" fill="rgb(250,73,51)" fg:x="260" fg:w="2"/><text x="17.1112%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="16.8612%" y="821" width="0.1297%" height="15" fill="rgb(221,189,23)" fg:x="260" fg:w="2"/><text x="17.1112%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="16.8612%" y="805" width="0.1297%" height="15" fill="rgb(210,33,7)" fg:x="260" fg:w="2"/><text x="17.1112%" y="815.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="16.8612%" y="789" width="0.1297%" height="15" fill="rgb(210,107,22)" fg:x="260" fg:w="2"/><text x="17.1112%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="16.8612%" y="773" width="0.1297%" height="15" fill="rgb(222,116,37)" fg:x="260" fg:w="2"/><text x="17.1112%" y="783.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="16.8612%" y="757" width="0.1297%" height="15" fill="rgb(254,17,48)" fg:x="260" fg:w="2"/><text x="17.1112%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="16.9261%" y="741" width="0.0649%" height="15" fill="rgb(224,36,32)" fg:x="261" fg:w="1"/><text x="17.1761%" y="751.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="16.9261%" y="725" width="0.0649%" height="15" fill="rgb(232,90,46)" fg:x="261" fg:w="1"/><text x="17.1761%" y="735.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="16.9261%" y="709" width="0.0649%" height="15" fill="rgb(241,66,40)" fg:x="261" fg:w="1"/><text x="17.1761%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="16.9261%" y="693" width="0.0649%" height="15" fill="rgb(249,184,29)" fg:x="261" fg:w="1"/><text x="17.1761%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="16.9261%" y="677" width="0.0649%" height="15" fill="rgb(231,181,1)" fg:x="261" fg:w="1"/><text x="17.1761%" y="687.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="16.9261%" y="661" width="0.0649%" height="15" fill="rgb(224,94,2)" fg:x="261" fg:w="1"/><text x="17.1761%" y="671.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="16.9261%" y="645" width="0.0649%" height="15" fill="rgb(229,170,15)" fg:x="261" fg:w="1"/><text x="17.1761%" y="655.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u32 (1 samples, 0.06%)</title><rect x="16.9261%" y="629" width="0.0649%" height="15" fill="rgb(240,127,35)" fg:x="261" fg:w="1"/><text x="17.1761%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="16.9261%" y="613" width="0.0649%" height="15" fill="rgb(248,196,34)" fg:x="261" fg:w="1"/><text x="17.1761%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.9261%" y="597" width="0.0649%" height="15" fill="rgb(236,137,7)" fg:x="261" fg:w="1"/><text x="17.1761%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.9261%" y="581" width="0.0649%" height="15" fill="rgb(235,127,16)" fg:x="261" fg:w="1"/><text x="17.1761%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.9261%" y="565" width="0.0649%" height="15" fill="rgb(250,192,54)" fg:x="261" fg:w="1"/><text x="17.1761%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="16.9909%" y="677" width="0.0649%" height="15" fill="rgb(218,98,20)" fg:x="262" fg:w="1"/><text x="17.2409%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="16.9909%" y="661" width="0.0649%" height="15" fill="rgb(230,176,47)" fg:x="262" fg:w="1"/><text x="17.2409%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="16.9909%" y="645" width="0.0649%" height="15" fill="rgb(244,2,33)" fg:x="262" fg:w="1"/><text x="17.2409%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="16.9909%" y="629" width="0.0649%" height="15" fill="rgb(231,100,17)" fg:x="262" fg:w="1"/><text x="17.2409%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="17.0558%" y="629" width="0.0649%" height="15" fill="rgb(245,23,12)" fg:x="263" fg:w="1"/><text x="17.3058%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="17.0558%" y="613" width="0.0649%" height="15" fill="rgb(249,55,22)" fg:x="263" fg:w="1"/><text x="17.3058%" y="623.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="17.0558%" y="597" width="0.0649%" height="15" fill="rgb(207,134,9)" fg:x="263" fg:w="1"/><text x="17.3058%" y="607.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="17.0558%" y="581" width="0.0649%" height="15" fill="rgb(218,134,0)" fg:x="263" fg:w="1"/><text x="17.3058%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.0558%" y="565" width="0.0649%" height="15" fill="rgb(213,212,33)" fg:x="263" fg:w="1"/><text x="17.3058%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.0558%" y="549" width="0.0649%" height="15" fill="rgb(252,106,18)" fg:x="263" fg:w="1"/><text x="17.3058%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.0558%" y="533" width="0.0649%" height="15" fill="rgb(208,126,42)" fg:x="263" fg:w="1"/><text x="17.3058%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.1206%" y="309" width="0.0649%" height="15" fill="rgb(246,175,29)" fg:x="264" fg:w="1"/><text x="17.3706%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.1206%" y="293" width="0.0649%" height="15" fill="rgb(215,13,50)" fg:x="264" fg:w="1"/><text x="17.3706%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.1206%" y="277" width="0.0649%" height="15" fill="rgb(216,172,15)" fg:x="264" fg:w="1"/><text x="17.3706%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="17.1206%" y="405" width="0.1297%" height="15" fill="rgb(212,103,13)" fg:x="264" fg:w="2"/><text x="17.3706%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="17.1206%" y="389" width="0.1297%" height="15" fill="rgb(231,171,36)" fg:x="264" fg:w="2"/><text x="17.3706%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="17.1206%" y="373" width="0.1297%" height="15" fill="rgb(250,123,20)" fg:x="264" fg:w="2"/><text x="17.3706%" y="383.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="17.1206%" y="357" width="0.1297%" height="15" fill="rgb(212,53,50)" fg:x="264" fg:w="2"/><text x="17.3706%" y="367.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="17.1206%" y="341" width="0.1297%" height="15" fill="rgb(243,54,12)" fg:x="264" fg:w="2"/><text x="17.3706%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="17.1206%" y="325" width="0.1297%" height="15" fill="rgb(234,101,34)" fg:x="264" fg:w="2"/><text x="17.3706%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="17.1855%" y="309" width="0.0649%" height="15" fill="rgb(254,67,22)" fg:x="265" fg:w="1"/><text x="17.4355%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="17.1855%" y="293" width="0.0649%" height="15" fill="rgb(250,35,47)" fg:x="265" fg:w="1"/><text x="17.4355%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.1855%" y="277" width="0.0649%" height="15" fill="rgb(226,126,38)" fg:x="265" fg:w="1"/><text x="17.4355%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.1855%" y="261" width="0.0649%" height="15" fill="rgb(216,138,53)" fg:x="265" fg:w="1"/><text x="17.4355%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.1855%" y="245" width="0.0649%" height="15" fill="rgb(246,199,43)" fg:x="265" fg:w="1"/><text x="17.4355%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="17.1206%" y="453" width="0.1946%" height="15" fill="rgb(232,125,11)" fg:x="264" fg:w="3"/><text x="17.3706%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3 samples, 0.19%)</title><rect x="17.1206%" y="437" width="0.1946%" height="15" fill="rgb(218,219,45)" fg:x="264" fg:w="3"/><text x="17.3706%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3 samples, 0.19%)</title><rect x="17.1206%" y="421" width="0.1946%" height="15" fill="rgb(216,102,54)" fg:x="264" fg:w="3"/><text x="17.3706%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="17.2503%" y="405" width="0.0649%" height="15" fill="rgb(250,228,7)" fg:x="266" fg:w="1"/><text x="17.5003%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="17.2503%" y="389" width="0.0649%" height="15" fill="rgb(226,125,25)" fg:x="266" fg:w="1"/><text x="17.5003%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="17.2503%" y="373" width="0.0649%" height="15" fill="rgb(224,165,27)" fg:x="266" fg:w="1"/><text x="17.5003%" y="383.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="17.2503%" y="357" width="0.0649%" height="15" fill="rgb(233,86,3)" fg:x="266" fg:w="1"/><text x="17.5003%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.2503%" y="341" width="0.0649%" height="15" fill="rgb(228,116,20)" fg:x="266" fg:w="1"/><text x="17.5003%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.2503%" y="325" width="0.0649%" height="15" fill="rgb(209,192,17)" fg:x="266" fg:w="1"/><text x="17.5003%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.2503%" y="309" width="0.0649%" height="15" fill="rgb(224,88,34)" fg:x="266" fg:w="1"/><text x="17.5003%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (4 samples, 0.26%)</title><rect x="17.1206%" y="517" width="0.2594%" height="15" fill="rgb(233,38,6)" fg:x="264" fg:w="4"/><text x="17.3706%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="17.1206%" y="501" width="0.2594%" height="15" fill="rgb(212,59,30)" fg:x="264" fg:w="4"/><text x="17.3706%" y="511.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="17.1206%" y="485" width="0.2594%" height="15" fill="rgb(213,80,3)" fg:x="264" fg:w="4"/><text x="17.3706%" y="495.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (4 samples, 0.26%)</title><rect x="17.1206%" y="469" width="0.2594%" height="15" fill="rgb(251,178,7)" fg:x="264" fg:w="4"/><text x="17.3706%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="17.3152%" y="453" width="0.0649%" height="15" fill="rgb(213,154,26)" fg:x="267" fg:w="1"/><text x="17.5652%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="17.3152%" y="437" width="0.0649%" height="15" fill="rgb(238,165,49)" fg:x="267" fg:w="1"/><text x="17.5652%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.3152%" y="421" width="0.0649%" height="15" fill="rgb(248,91,46)" fg:x="267" fg:w="1"/><text x="17.5652%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.3152%" y="405" width="0.0649%" height="15" fill="rgb(244,21,52)" fg:x="267" fg:w="1"/><text x="17.5652%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.3152%" y="389" width="0.0649%" height="15" fill="rgb(247,122,20)" fg:x="267" fg:w="1"/><text x="17.5652%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="17.3800%" y="405" width="0.0649%" height="15" fill="rgb(218,27,9)" fg:x="268" fg:w="1"/><text x="17.6300%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="17.3800%" y="389" width="0.0649%" height="15" fill="rgb(246,7,6)" fg:x="268" fg:w="1"/><text x="17.6300%" y="399.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="17.3800%" y="373" width="0.0649%" height="15" fill="rgb(227,135,54)" fg:x="268" fg:w="1"/><text x="17.6300%" y="383.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="17.3800%" y="357" width="0.0649%" height="15" fill="rgb(247,14,11)" fg:x="268" fg:w="1"/><text x="17.6300%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.3800%" y="341" width="0.0649%" height="15" fill="rgb(206,149,34)" fg:x="268" fg:w="1"/><text x="17.6300%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.3800%" y="325" width="0.0649%" height="15" fill="rgb(227,228,4)" fg:x="268" fg:w="1"/><text x="17.6300%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.3800%" y="309" width="0.0649%" height="15" fill="rgb(238,218,28)" fg:x="268" fg:w="1"/><text x="17.6300%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="17.3800%" y="421" width="0.1297%" height="15" fill="rgb(252,86,40)" fg:x="268" fg:w="2"/><text x="17.6300%" y="431.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="17.4449%" y="405" width="0.0649%" height="15" fill="rgb(251,225,11)" fg:x="269" fg:w="1"/><text x="17.6949%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="17.4449%" y="389" width="0.0649%" height="15" fill="rgb(206,46,49)" fg:x="269" fg:w="1"/><text x="17.6949%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="17.4449%" y="373" width="0.0649%" height="15" fill="rgb(245,128,24)" fg:x="269" fg:w="1"/><text x="17.6949%" y="383.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="17.4449%" y="357" width="0.0649%" height="15" fill="rgb(219,177,34)" fg:x="269" fg:w="1"/><text x="17.6949%" y="367.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="17.4449%" y="341" width="0.0649%" height="15" fill="rgb(218,60,48)" fg:x="269" fg:w="1"/><text x="17.6949%" y="351.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="17.4449%" y="325" width="0.0649%" height="15" fill="rgb(221,11,5)" fg:x="269" fg:w="1"/><text x="17.6949%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="17.4449%" y="309" width="0.0649%" height="15" fill="rgb(220,148,13)" fg:x="269" fg:w="1"/><text x="17.6949%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="17.4449%" y="293" width="0.0649%" height="15" fill="rgb(210,16,3)" fg:x="269" fg:w="1"/><text x="17.6949%" y="303.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="17.4449%" y="277" width="0.0649%" height="15" fill="rgb(236,80,2)" fg:x="269" fg:w="1"/><text x="17.6949%" y="287.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="17.4449%" y="261" width="0.0649%" height="15" fill="rgb(239,129,19)" fg:x="269" fg:w="1"/><text x="17.6949%" y="271.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="17.4449%" y="245" width="0.0649%" height="15" fill="rgb(220,106,35)" fg:x="269" fg:w="1"/><text x="17.6949%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="17.4449%" y="229" width="0.0649%" height="15" fill="rgb(252,139,45)" fg:x="269" fg:w="1"/><text x="17.6949%" y="239.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="17.4449%" y="213" width="0.0649%" height="15" fill="rgb(229,8,36)" fg:x="269" fg:w="1"/><text x="17.6949%" y="223.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="17.4449%" y="197" width="0.0649%" height="15" fill="rgb(230,126,33)" fg:x="269" fg:w="1"/><text x="17.6949%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="17.4449%" y="181" width="0.0649%" height="15" fill="rgb(239,140,21)" fg:x="269" fg:w="1"/><text x="17.6949%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="17.4449%" y="165" width="0.0649%" height="15" fill="rgb(254,104,9)" fg:x="269" fg:w="1"/><text x="17.6949%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="17.4449%" y="149" width="0.0649%" height="15" fill="rgb(239,52,14)" fg:x="269" fg:w="1"/><text x="17.6949%" y="159.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="17.4449%" y="133" width="0.0649%" height="15" fill="rgb(208,227,44)" fg:x="269" fg:w="1"/><text x="17.6949%" y="143.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="17.4449%" y="117" width="0.0649%" height="15" fill="rgb(246,18,19)" fg:x="269" fg:w="1"/><text x="17.6949%" y="127.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="17.4449%" y="101" width="0.0649%" height="15" fill="rgb(235,228,25)" fg:x="269" fg:w="1"/><text x="17.6949%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.4449%" y="85" width="0.0649%" height="15" fill="rgb(240,156,20)" fg:x="269" fg:w="1"/><text x="17.6949%" y="95.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.4449%" y="69" width="0.0649%" height="15" fill="rgb(224,8,20)" fg:x="269" fg:w="1"/><text x="17.6949%" y="79.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.4449%" y="53" width="0.0649%" height="15" fill="rgb(214,12,52)" fg:x="269" fg:w="1"/><text x="17.6949%" y="63.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="17.1206%" y="533" width="0.4540%" height="15" fill="rgb(211,220,47)" fg:x="264" fg:w="7"/><text x="17.3706%" y="543.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="17.3800%" y="517" width="0.1946%" height="15" fill="rgb(250,173,5)" fg:x="268" fg:w="3"/><text x="17.6300%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="17.3800%" y="501" width="0.1946%" height="15" fill="rgb(250,125,52)" fg:x="268" fg:w="3"/><text x="17.6300%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="17.3800%" y="485" width="0.1946%" height="15" fill="rgb(209,133,18)" fg:x="268" fg:w="3"/><text x="17.6300%" y="495.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="17.3800%" y="469" width="0.1946%" height="15" fill="rgb(216,173,22)" fg:x="268" fg:w="3"/><text x="17.6300%" y="479.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="17.3800%" y="453" width="0.1946%" height="15" fill="rgb(205,3,22)" fg:x="268" fg:w="3"/><text x="17.6300%" y="463.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="17.3800%" y="437" width="0.1946%" height="15" fill="rgb(248,22,20)" fg:x="268" fg:w="3"/><text x="17.6300%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="17.5097%" y="421" width="0.0649%" height="15" fill="rgb(233,6,29)" fg:x="270" fg:w="1"/><text x="17.7597%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.5097%" y="405" width="0.0649%" height="15" fill="rgb(240,22,54)" fg:x="270" fg:w="1"/><text x="17.7597%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.5097%" y="389" width="0.0649%" height="15" fill="rgb(231,133,32)" fg:x="270" fg:w="1"/><text x="17.7597%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.5097%" y="373" width="0.0649%" height="15" fill="rgb(248,193,4)" fg:x="270" fg:w="1"/><text x="17.7597%" y="383.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (10 samples, 0.65%)</title><rect x="16.9909%" y="837" width="0.6485%" height="15" fill="rgb(211,178,46)" fg:x="262" fg:w="10"/><text x="17.2409%" y="847.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (10 samples, 0.65%)</title><rect x="16.9909%" y="821" width="0.6485%" height="15" fill="rgb(224,5,42)" fg:x="262" fg:w="10"/><text x="17.2409%" y="831.50"></text></g><g><title>bincode::config::Options::deserialize (10 samples, 0.65%)</title><rect x="16.9909%" y="805" width="0.6485%" height="15" fill="rgb(239,176,25)" fg:x="262" fg:w="10"/><text x="17.2409%" y="815.50"></text></g><g><title>bincode::internal::deserialize (10 samples, 0.65%)</title><rect x="16.9909%" y="789" width="0.6485%" height="15" fill="rgb(245,187,50)" fg:x="262" fg:w="10"/><text x="17.2409%" y="799.50"></text></g><g><title>bincode::internal::deserialize_seed (10 samples, 0.65%)</title><rect x="16.9909%" y="773" width="0.6485%" height="15" fill="rgb(248,24,15)" fg:x="262" fg:w="10"/><text x="17.2409%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.65%)</title><rect x="16.9909%" y="757" width="0.6485%" height="15" fill="rgb(205,166,13)" fg:x="262" fg:w="10"/><text x="17.2409%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (10 samples, 0.65%)</title><rect x="16.9909%" y="741" width="0.6485%" height="15" fill="rgb(208,114,23)" fg:x="262" fg:w="10"/><text x="17.2409%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (10 samples, 0.65%)</title><rect x="16.9909%" y="725" width="0.6485%" height="15" fill="rgb(239,127,18)" fg:x="262" fg:w="10"/><text x="17.2409%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="16.9909%" y="709" width="0.6485%" height="15" fill="rgb(219,154,28)" fg:x="262" fg:w="10"/><text x="17.2409%" y="719.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.65%)</title><rect x="16.9909%" y="693" width="0.6485%" height="15" fill="rgb(225,157,23)" fg:x="262" fg:w="10"/><text x="17.2409%" y="703.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="17.0558%" y="677" width="0.5837%" height="15" fill="rgb(219,8,6)" fg:x="263" fg:w="9"/><text x="17.3058%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="17.0558%" y="661" width="0.5837%" height="15" fill="rgb(212,47,6)" fg:x="263" fg:w="9"/><text x="17.3058%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="17.0558%" y="645" width="0.5837%" height="15" fill="rgb(224,190,4)" fg:x="263" fg:w="9"/><text x="17.3058%" y="655.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="17.1206%" y="629" width="0.5188%" height="15" fill="rgb(239,183,29)" fg:x="264" fg:w="8"/><text x="17.3706%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="17.1206%" y="613" width="0.5188%" height="15" fill="rgb(213,57,7)" fg:x="264" fg:w="8"/><text x="17.3706%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="17.1206%" y="597" width="0.5188%" height="15" fill="rgb(216,148,1)" fg:x="264" fg:w="8"/><text x="17.3706%" y="607.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="17.1206%" y="581" width="0.5188%" height="15" fill="rgb(236,182,29)" fg:x="264" fg:w="8"/><text x="17.3706%" y="591.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="17.1206%" y="565" width="0.5188%" height="15" fill="rgb(244,120,48)" fg:x="264" fg:w="8"/><text x="17.3706%" y="575.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="17.1206%" y="549" width="0.5188%" height="15" fill="rgb(206,71,34)" fg:x="264" fg:w="8"/><text x="17.3706%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.5746%" y="533" width="0.0649%" height="15" fill="rgb(242,32,6)" fg:x="271" fg:w="1"/><text x="17.8246%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.5746%" y="517" width="0.0649%" height="15" fill="rgb(241,35,3)" fg:x="271" fg:w="1"/><text x="17.8246%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.5746%" y="501" width="0.0649%" height="15" fill="rgb(222,62,19)" fg:x="271" fg:w="1"/><text x="17.8246%" y="511.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (11 samples, 0.71%)</title><rect x="16.9909%" y="869" width="0.7134%" height="15" fill="rgb(223,110,41)" fg:x="262" fg:w="11"/><text x="17.2409%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (11 samples, 0.71%)</title><rect x="16.9909%" y="853" width="0.7134%" height="15" fill="rgb(208,224,4)" fg:x="262" fg:w="11"/><text x="17.2409%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="17.6394%" y="837" width="0.0649%" height="15" fill="rgb(241,137,19)" fg:x="272" fg:w="1"/><text x="17.8894%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="17.6394%" y="821" width="0.0649%" height="15" fill="rgb(244,24,17)" fg:x="272" fg:w="1"/><text x="17.8894%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="17.6394%" y="805" width="0.0649%" height="15" fill="rgb(245,178,49)" fg:x="272" fg:w="1"/><text x="17.8894%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.6394%" y="789" width="0.0649%" height="15" fill="rgb(219,160,38)" fg:x="272" fg:w="1"/><text x="17.8894%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.6394%" y="773" width="0.0649%" height="15" fill="rgb(228,137,14)" fg:x="272" fg:w="1"/><text x="17.8894%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.6394%" y="757" width="0.0649%" height="15" fill="rgb(237,134,11)" fg:x="272" fg:w="1"/><text x="17.8894%" y="767.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (12 samples, 0.78%)</title><rect x="16.9909%" y="885" width="0.7782%" height="15" fill="rgb(211,126,44)" fg:x="262" fg:w="12"/><text x="17.2409%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="17.7043%" y="869" width="0.0649%" height="15" fill="rgb(226,171,33)" fg:x="273" fg:w="1"/><text x="17.9543%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="17.7043%" y="853" width="0.0649%" height="15" fill="rgb(253,99,13)" fg:x="273" fg:w="1"/><text x="17.9543%" y="863.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="17.7043%" y="837" width="0.0649%" height="15" fill="rgb(244,48,7)" fg:x="273" fg:w="1"/><text x="17.9543%" y="847.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="17.7043%" y="821" width="0.0649%" height="15" fill="rgb(244,217,54)" fg:x="273" fg:w="1"/><text x="17.9543%" y="831.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="17.7043%" y="805" width="0.0649%" height="15" fill="rgb(224,15,18)" fg:x="273" fg:w="1"/><text x="17.9543%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.7043%" y="789" width="0.0649%" height="15" fill="rgb(244,99,12)" fg:x="273" fg:w="1"/><text x="17.9543%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.7043%" y="773" width="0.0649%" height="15" fill="rgb(233,226,8)" fg:x="273" fg:w="1"/><text x="17.9543%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.7043%" y="757" width="0.0649%" height="15" fill="rgb(229,211,3)" fg:x="273" fg:w="1"/><text x="17.9543%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="17.7691%" y="821" width="0.1297%" height="15" fill="rgb(216,140,21)" fg:x="274" fg:w="2"/><text x="18.0191%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="17.7691%" y="805" width="0.1297%" height="15" fill="rgb(234,122,30)" fg:x="274" fg:w="2"/><text x="18.0191%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="17.7691%" y="789" width="0.1297%" height="15" fill="rgb(236,25,46)" fg:x="274" fg:w="2"/><text x="18.0191%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.8988%" y="773" width="0.0649%" height="15" fill="rgb(217,52,54)" fg:x="276" fg:w="1"/><text x="18.1488%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.8988%" y="757" width="0.0649%" height="15" fill="rgb(222,29,26)" fg:x="276" fg:w="1"/><text x="18.1488%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.8988%" y="741" width="0.0649%" height="15" fill="rgb(216,177,29)" fg:x="276" fg:w="1"/><text x="18.1488%" y="751.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="17.9637%" y="661" width="0.0649%" height="15" fill="rgb(247,136,51)" fg:x="277" fg:w="1"/><text x="18.2137%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="17.9637%" y="645" width="0.0649%" height="15" fill="rgb(231,47,47)" fg:x="277" fg:w="1"/><text x="18.2137%" y="655.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="17.9637%" y="629" width="0.0649%" height="15" fill="rgb(211,192,36)" fg:x="277" fg:w="1"/><text x="18.2137%" y="639.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="17.9637%" y="613" width="0.0649%" height="15" fill="rgb(229,156,32)" fg:x="277" fg:w="1"/><text x="18.2137%" y="623.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="17.9637%" y="597" width="0.0649%" height="15" fill="rgb(248,213,20)" fg:x="277" fg:w="1"/><text x="18.2137%" y="607.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="17.9637%" y="581" width="0.0649%" height="15" fill="rgb(217,64,7)" fg:x="277" fg:w="1"/><text x="18.2137%" y="591.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="17.9637%" y="565" width="0.0649%" height="15" fill="rgb(232,142,8)" fg:x="277" fg:w="1"/><text x="18.2137%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="17.9637%" y="549" width="0.0649%" height="15" fill="rgb(224,92,44)" fg:x="277" fg:w="1"/><text x="18.2137%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="17.9637%" y="533" width="0.0649%" height="15" fill="rgb(214,169,17)" fg:x="277" fg:w="1"/><text x="18.2137%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="17.9637%" y="517" width="0.0649%" height="15" fill="rgb(210,59,37)" fg:x="277" fg:w="1"/><text x="18.2137%" y="527.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="17.9637%" y="501" width="0.0649%" height="15" fill="rgb(214,116,48)" fg:x="277" fg:w="1"/><text x="18.2137%" y="511.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="17.9637%" y="485" width="0.0649%" height="15" fill="rgb(244,191,6)" fg:x="277" fg:w="1"/><text x="18.2137%" y="495.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="17.9637%" y="469" width="0.0649%" height="15" fill="rgb(241,50,52)" fg:x="277" fg:w="1"/><text x="18.2137%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="17.9637%" y="453" width="0.0649%" height="15" fill="rgb(236,75,39)" fg:x="277" fg:w="1"/><text x="18.2137%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="17.9637%" y="437" width="0.0649%" height="15" fill="rgb(236,99,0)" fg:x="277" fg:w="1"/><text x="18.2137%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="17.9637%" y="421" width="0.0649%" height="15" fill="rgb(207,202,15)" fg:x="277" fg:w="1"/><text x="18.2137%" y="431.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="18.0285%" y="469" width="0.0649%" height="15" fill="rgb(233,207,14)" fg:x="278" fg:w="1"/><text x="18.2785%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="18.0285%" y="453" width="0.0649%" height="15" fill="rgb(226,27,51)" fg:x="278" fg:w="1"/><text x="18.2785%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="18.0285%" y="437" width="0.0649%" height="15" fill="rgb(206,104,42)" fg:x="278" fg:w="1"/><text x="18.2785%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.0285%" y="421" width="0.0649%" height="15" fill="rgb(212,225,4)" fg:x="278" fg:w="1"/><text x="18.2785%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.0285%" y="405" width="0.0649%" height="15" fill="rgb(233,96,42)" fg:x="278" fg:w="1"/><text x="18.2785%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.0285%" y="389" width="0.0649%" height="15" fill="rgb(229,21,32)" fg:x="278" fg:w="1"/><text x="18.2785%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="18.0934%" y="437" width="0.1297%" height="15" fill="rgb(226,216,24)" fg:x="279" fg:w="2"/><text x="18.3434%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="18.0934%" y="421" width="0.1297%" height="15" fill="rgb(221,163,17)" fg:x="279" fg:w="2"/><text x="18.3434%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="18.0934%" y="405" width="0.1297%" height="15" fill="rgb(216,216,42)" fg:x="279" fg:w="2"/><text x="18.3434%" y="415.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="18.0934%" y="389" width="0.1297%" height="15" fill="rgb(240,118,7)" fg:x="279" fg:w="2"/><text x="18.3434%" y="399.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="18.0934%" y="373" width="0.1297%" height="15" fill="rgb(221,67,37)" fg:x="279" fg:w="2"/><text x="18.3434%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="18.0934%" y="357" width="0.1297%" height="15" fill="rgb(241,32,44)" fg:x="279" fg:w="2"/><text x="18.3434%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.13%)</title><rect x="18.0934%" y="341" width="0.1297%" height="15" fill="rgb(235,204,43)" fg:x="279" fg:w="2"/><text x="18.3434%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (2 samples, 0.13%)</title><rect x="18.0934%" y="325" width="0.1297%" height="15" fill="rgb(213,116,10)" fg:x="279" fg:w="2"/><text x="18.3434%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="18.0934%" y="309" width="0.1297%" height="15" fill="rgb(239,15,48)" fg:x="279" fg:w="2"/><text x="18.3434%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="18.0934%" y="293" width="0.1297%" height="15" fill="rgb(207,123,36)" fg:x="279" fg:w="2"/><text x="18.3434%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="18.0934%" y="277" width="0.1297%" height="15" fill="rgb(209,103,30)" fg:x="279" fg:w="2"/><text x="18.3434%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (5 samples, 0.32%)</title><rect x="18.0285%" y="549" width="0.3243%" height="15" fill="rgb(238,100,19)" fg:x="278" fg:w="5"/><text x="18.2785%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="18.0285%" y="533" width="0.3243%" height="15" fill="rgb(244,30,14)" fg:x="278" fg:w="5"/><text x="18.2785%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="18.0285%" y="517" width="0.3243%" height="15" fill="rgb(249,174,6)" fg:x="278" fg:w="5"/><text x="18.2785%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (5 samples, 0.32%)</title><rect x="18.0285%" y="501" width="0.3243%" height="15" fill="rgb(235,213,41)" fg:x="278" fg:w="5"/><text x="18.2785%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (5 samples, 0.32%)</title><rect x="18.0285%" y="485" width="0.3243%" height="15" fill="rgb(213,118,6)" fg:x="278" fg:w="5"/><text x="18.2785%" y="495.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (4 samples, 0.26%)</title><rect x="18.0934%" y="469" width="0.2594%" height="15" fill="rgb(235,44,51)" fg:x="279" fg:w="4"/><text x="18.3434%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4 samples, 0.26%)</title><rect x="18.0934%" y="453" width="0.2594%" height="15" fill="rgb(217,9,53)" fg:x="279" fg:w="4"/><text x="18.3434%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="18.2231%" y="437" width="0.1297%" height="15" fill="rgb(237,172,34)" fg:x="281" fg:w="2"/><text x="18.4731%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="18.2231%" y="421" width="0.1297%" height="15" fill="rgb(206,206,11)" fg:x="281" fg:w="2"/><text x="18.4731%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="18.2231%" y="405" width="0.1297%" height="15" fill="rgb(214,149,29)" fg:x="281" fg:w="2"/><text x="18.4731%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="18.2231%" y="389" width="0.1297%" height="15" fill="rgb(208,123,3)" fg:x="281" fg:w="2"/><text x="18.4731%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="18.2231%" y="373" width="0.1297%" height="15" fill="rgb(229,126,4)" fg:x="281" fg:w="2"/><text x="18.4731%" y="383.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (2 samples, 0.13%)</title><rect x="18.2231%" y="357" width="0.1297%" height="15" fill="rgb(222,92,36)" fg:x="281" fg:w="2"/><text x="18.4731%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="18.2231%" y="341" width="0.1297%" height="15" fill="rgb(216,39,41)" fg:x="281" fg:w="2"/><text x="18.4731%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="18.2231%" y="325" width="0.1297%" height="15" fill="rgb(253,127,28)" fg:x="281" fg:w="2"/><text x="18.4731%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="18.2231%" y="309" width="0.1297%" height="15" fill="rgb(249,152,51)" fg:x="281" fg:w="2"/><text x="18.4731%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="18.3528%" y="485" width="0.0649%" height="15" fill="rgb(209,123,42)" fg:x="283" fg:w="1"/><text x="18.6028%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.3528%" y="469" width="0.0649%" height="15" fill="rgb(241,118,22)" fg:x="283" fg:w="1"/><text x="18.6028%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.3528%" y="453" width="0.0649%" height="15" fill="rgb(208,25,7)" fg:x="283" fg:w="1"/><text x="18.6028%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.3528%" y="437" width="0.0649%" height="15" fill="rgb(243,144,39)" fg:x="283" fg:w="1"/><text x="18.6028%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.4176%" y="325" width="0.0649%" height="15" fill="rgb(250,50,5)" fg:x="284" fg:w="1"/><text x="18.6676%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.4176%" y="309" width="0.0649%" height="15" fill="rgb(207,67,11)" fg:x="284" fg:w="1"/><text x="18.6676%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.4176%" y="293" width="0.0649%" height="15" fill="rgb(245,204,40)" fg:x="284" fg:w="1"/><text x="18.6676%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="18.4176%" y="357" width="0.1297%" height="15" fill="rgb(238,228,24)" fg:x="284" fg:w="2"/><text x="18.6676%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="18.4176%" y="341" width="0.1297%" height="15" fill="rgb(217,116,22)" fg:x="284" fg:w="2"/><text x="18.6676%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="18.4825%" y="325" width="0.0649%" height="15" fill="rgb(234,98,12)" fg:x="285" fg:w="1"/><text x="18.7325%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="18.4825%" y="309" width="0.0649%" height="15" fill="rgb(242,170,50)" fg:x="285" fg:w="1"/><text x="18.7325%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="18.4825%" y="293" width="0.0649%" height="15" fill="rgb(235,7,5)" fg:x="285" fg:w="1"/><text x="18.7325%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="18.4825%" y="277" width="0.0649%" height="15" fill="rgb(241,114,28)" fg:x="285" fg:w="1"/><text x="18.7325%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="18.4825%" y="261" width="0.0649%" height="15" fill="rgb(246,112,42)" fg:x="285" fg:w="1"/><text x="18.7325%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="18.4825%" y="245" width="0.0649%" height="15" fill="rgb(248,228,14)" fg:x="285" fg:w="1"/><text x="18.7325%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.4825%" y="229" width="0.0649%" height="15" fill="rgb(208,133,18)" fg:x="285" fg:w="1"/><text x="18.7325%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.4825%" y="213" width="0.0649%" height="15" fill="rgb(207,35,49)" fg:x="285" fg:w="1"/><text x="18.7325%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.4825%" y="197" width="0.0649%" height="15" fill="rgb(205,68,36)" fg:x="285" fg:w="1"/><text x="18.7325%" y="207.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="18.4176%" y="405" width="0.1946%" height="15" fill="rgb(245,62,40)" fg:x="284" fg:w="3"/><text x="18.6676%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="18.4176%" y="389" width="0.1946%" height="15" fill="rgb(228,27,24)" fg:x="284" fg:w="3"/><text x="18.6676%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="18.4176%" y="373" width="0.1946%" height="15" fill="rgb(253,19,12)" fg:x="284" fg:w="3"/><text x="18.6676%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.5473%" y="357" width="0.0649%" height="15" fill="rgb(232,28,20)" fg:x="286" fg:w="1"/><text x="18.7973%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.5473%" y="341" width="0.0649%" height="15" fill="rgb(218,35,51)" fg:x="286" fg:w="1"/><text x="18.7973%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.5473%" y="325" width="0.0649%" height="15" fill="rgb(212,90,40)" fg:x="286" fg:w="1"/><text x="18.7973%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (4 samples, 0.26%)</title><rect x="18.4176%" y="437" width="0.2594%" height="15" fill="rgb(220,172,12)" fg:x="284" fg:w="4"/><text x="18.6676%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="18.4176%" y="421" width="0.2594%" height="15" fill="rgb(226,159,20)" fg:x="284" fg:w="4"/><text x="18.6676%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.6122%" y="405" width="0.0649%" height="15" fill="rgb(234,205,16)" fg:x="287" fg:w="1"/><text x="18.8622%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.6122%" y="389" width="0.0649%" height="15" fill="rgb(207,9,39)" fg:x="287" fg:w="1"/><text x="18.8622%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.6122%" y="373" width="0.0649%" height="15" fill="rgb(249,143,15)" fg:x="287" fg:w="1"/><text x="18.8622%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="18.4176%" y="453" width="0.3243%" height="15" fill="rgb(253,133,29)" fg:x="284" fg:w="5"/><text x="18.6676%" y="463.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="18.6770%" y="437" width="0.0649%" height="15" fill="rgb(221,187,0)" fg:x="288" fg:w="1"/><text x="18.9270%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="18.6770%" y="421" width="0.0649%" height="15" fill="rgb(205,204,26)" fg:x="288" fg:w="1"/><text x="18.9270%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="18.6770%" y="405" width="0.0649%" height="15" fill="rgb(224,68,54)" fg:x="288" fg:w="1"/><text x="18.9270%" y="415.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="18.6770%" y="389" width="0.0649%" height="15" fill="rgb(209,67,4)" fg:x="288" fg:w="1"/><text x="18.9270%" y="399.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="18.6770%" y="373" width="0.0649%" height="15" fill="rgb(228,229,18)" fg:x="288" fg:w="1"/><text x="18.9270%" y="383.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="18.6770%" y="357" width="0.0649%" height="15" fill="rgb(231,89,13)" fg:x="288" fg:w="1"/><text x="18.9270%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="18.6770%" y="341" width="0.0649%" height="15" fill="rgb(210,182,18)" fg:x="288" fg:w="1"/><text x="18.9270%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="18.6770%" y="325" width="0.0649%" height="15" fill="rgb(240,105,2)" fg:x="288" fg:w="1"/><text x="18.9270%" y="335.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="18.6770%" y="309" width="0.0649%" height="15" fill="rgb(207,170,50)" fg:x="288" fg:w="1"/><text x="18.9270%" y="319.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="18.6770%" y="293" width="0.0649%" height="15" fill="rgb(232,133,24)" fg:x="288" fg:w="1"/><text x="18.9270%" y="303.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="18.6770%" y="277" width="0.0649%" height="15" fill="rgb(235,166,27)" fg:x="288" fg:w="1"/><text x="18.9270%" y="287.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="18.6770%" y="261" width="0.0649%" height="15" fill="rgb(209,19,13)" fg:x="288" fg:w="1"/><text x="18.9270%" y="271.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="18.6770%" y="245" width="0.0649%" height="15" fill="rgb(226,79,39)" fg:x="288" fg:w="1"/><text x="18.9270%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="18.6770%" y="229" width="0.0649%" height="15" fill="rgb(222,163,10)" fg:x="288" fg:w="1"/><text x="18.9270%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="18.6770%" y="213" width="0.0649%" height="15" fill="rgb(214,44,19)" fg:x="288" fg:w="1"/><text x="18.9270%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.6770%" y="197" width="0.0649%" height="15" fill="rgb(210,217,13)" fg:x="288" fg:w="1"/><text x="18.9270%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.6770%" y="181" width="0.0649%" height="15" fill="rgb(237,61,54)" fg:x="288" fg:w="1"/><text x="18.9270%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.6770%" y="165" width="0.0649%" height="15" fill="rgb(226,184,24)" fg:x="288" fg:w="1"/><text x="18.9270%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="18.0285%" y="565" width="0.7782%" height="15" fill="rgb(223,226,4)" fg:x="278" fg:w="12"/><text x="18.2785%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (7 samples, 0.45%)</title><rect x="18.3528%" y="549" width="0.4540%" height="15" fill="rgb(210,26,41)" fg:x="283" fg:w="7"/><text x="18.6028%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (7 samples, 0.45%)</title><rect x="18.3528%" y="533" width="0.4540%" height="15" fill="rgb(220,221,6)" fg:x="283" fg:w="7"/><text x="18.6028%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (7 samples, 0.45%)</title><rect x="18.3528%" y="517" width="0.4540%" height="15" fill="rgb(225,89,49)" fg:x="283" fg:w="7"/><text x="18.6028%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (7 samples, 0.45%)</title><rect x="18.3528%" y="501" width="0.4540%" height="15" fill="rgb(218,70,45)" fg:x="283" fg:w="7"/><text x="18.6028%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="18.4176%" y="485" width="0.3891%" height="15" fill="rgb(238,166,21)" fg:x="284" fg:w="6"/><text x="18.6676%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="18.4176%" y="469" width="0.3891%" height="15" fill="rgb(224,141,44)" fg:x="284" fg:w="6"/><text x="18.6676%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.7419%" y="453" width="0.0649%" height="15" fill="rgb(230,12,49)" fg:x="289" fg:w="1"/><text x="18.9919%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.7419%" y="437" width="0.0649%" height="15" fill="rgb(212,174,12)" fg:x="289" fg:w="1"/><text x="18.9919%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.7419%" y="421" width="0.0649%" height="15" fill="rgb(246,67,9)" fg:x="289" fg:w="1"/><text x="18.9919%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (13 samples, 0.84%)</title><rect x="18.0285%" y="629" width="0.8431%" height="15" fill="rgb(239,35,23)" fg:x="278" fg:w="13"/><text x="18.2785%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (13 samples, 0.84%)</title><rect x="18.0285%" y="613" width="0.8431%" height="15" fill="rgb(211,167,0)" fg:x="278" fg:w="13"/><text x="18.2785%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (13 samples, 0.84%)</title><rect x="18.0285%" y="597" width="0.8431%" height="15" fill="rgb(225,119,45)" fg:x="278" fg:w="13"/><text x="18.2785%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (13 samples, 0.84%)</title><rect x="18.0285%" y="581" width="0.8431%" height="15" fill="rgb(210,162,6)" fg:x="278" fg:w="13"/><text x="18.2785%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.8067%" y="565" width="0.0649%" height="15" fill="rgb(208,118,35)" fg:x="290" fg:w="1"/><text x="19.0567%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.8067%" y="549" width="0.0649%" height="15" fill="rgb(239,4,53)" fg:x="290" fg:w="1"/><text x="19.0567%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.8067%" y="533" width="0.0649%" height="15" fill="rgb(213,130,21)" fg:x="290" fg:w="1"/><text x="19.0567%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.97%)</title><rect x="17.9637%" y="677" width="0.9728%" height="15" fill="rgb(235,148,0)" fg:x="277" fg:w="15"/><text x="18.2137%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (14 samples, 0.91%)</title><rect x="18.0285%" y="661" width="0.9079%" height="15" fill="rgb(244,224,18)" fg:x="278" fg:w="14"/><text x="18.2785%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (14 samples, 0.91%)</title><rect x="18.0285%" y="645" width="0.9079%" height="15" fill="rgb(211,214,4)" fg:x="278" fg:w="14"/><text x="18.2785%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="18.8716%" y="629" width="0.0649%" height="15" fill="rgb(206,119,25)" fg:x="291" fg:w="1"/><text x="19.1216%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="18.8716%" y="613" width="0.0649%" height="15" fill="rgb(243,93,47)" fg:x="291" fg:w="1"/><text x="19.1216%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="18.8716%" y="597" width="0.0649%" height="15" fill="rgb(224,194,6)" fg:x="291" fg:w="1"/><text x="19.1216%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.13%)</title><rect x="18.9364%" y="677" width="0.1297%" height="15" fill="rgb(243,229,6)" fg:x="292" fg:w="2"/><text x="19.1864%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="18.9364%" y="661" width="0.1297%" height="15" fill="rgb(207,23,50)" fg:x="292" fg:w="2"/><text x="19.1864%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="18.9364%" y="645" width="0.1297%" height="15" fill="rgb(253,192,32)" fg:x="292" fg:w="2"/><text x="19.1864%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="18.9364%" y="629" width="0.1297%" height="15" fill="rgb(213,21,6)" fg:x="292" fg:w="2"/><text x="19.1864%" y="639.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (21 samples, 1.36%)</title><rect x="17.7691%" y="885" width="1.3619%" height="15" fill="rgb(243,151,13)" fg:x="274" fg:w="21"/><text x="18.0191%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (21 samples, 1.36%)</title><rect x="17.7691%" y="869" width="1.3619%" height="15" fill="rgb(233,165,41)" fg:x="274" fg:w="21"/><text x="18.0191%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (21 samples, 1.36%)</title><rect x="17.7691%" y="853" width="1.3619%" height="15" fill="rgb(246,176,45)" fg:x="274" fg:w="21"/><text x="18.0191%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (21 samples, 1.36%)</title><rect x="17.7691%" y="837" width="1.3619%" height="15" fill="rgb(217,170,52)" fg:x="274" fg:w="21"/><text x="18.0191%" y="847.50"></text></g><g><title>bincode::internal::deserialize (19 samples, 1.23%)</title><rect x="17.8988%" y="821" width="1.2322%" height="15" fill="rgb(214,203,54)" fg:x="276" fg:w="19"/><text x="18.1488%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (19 samples, 1.23%)</title><rect x="17.8988%" y="805" width="1.2322%" height="15" fill="rgb(248,215,49)" fg:x="276" fg:w="19"/><text x="18.1488%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19 samples, 1.23%)</title><rect x="17.8988%" y="789" width="1.2322%" height="15" fill="rgb(208,46,10)" fg:x="276" fg:w="19"/><text x="18.1488%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (18 samples, 1.17%)</title><rect x="17.9637%" y="773" width="1.1673%" height="15" fill="rgb(254,5,31)" fg:x="277" fg:w="18"/><text x="18.2137%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (18 samples, 1.17%)</title><rect x="17.9637%" y="757" width="1.1673%" height="15" fill="rgb(222,104,33)" fg:x="277" fg:w="18"/><text x="18.2137%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 1.17%)</title><rect x="17.9637%" y="741" width="1.1673%" height="15" fill="rgb(248,49,16)" fg:x="277" fg:w="18"/><text x="18.2137%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (18 samples, 1.17%)</title><rect x="17.9637%" y="725" width="1.1673%" height="15" fill="rgb(232,198,41)" fg:x="277" fg:w="18"/><text x="18.2137%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 1.17%)</title><rect x="17.9637%" y="709" width="1.1673%" height="15" fill="rgb(214,125,3)" fg:x="277" fg:w="18"/><text x="18.2137%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 1.17%)</title><rect x="17.9637%" y="693" width="1.1673%" height="15" fill="rgb(229,220,28)" fg:x="277" fg:w="18"/><text x="18.2137%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.0661%" y="677" width="0.0649%" height="15" fill="rgb(222,64,37)" fg:x="294" fg:w="1"/><text x="19.3161%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.0661%" y="661" width="0.0649%" height="15" fill="rgb(249,184,13)" fg:x="294" fg:w="1"/><text x="19.3161%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.0661%" y="645" width="0.0649%" height="15" fill="rgb(252,176,6)" fg:x="294" fg:w="1"/><text x="19.3161%" y="655.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (37 samples, 2.40%)</title><rect x="16.7964%" y="933" width="2.3995%" height="15" fill="rgb(228,153,7)" fg:x="259" fg:w="37"/><text x="17.0464%" y="943.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (37 samples, 2.40%)</title><rect x="16.7964%" y="917" width="2.3995%" height="15" fill="rgb(242,193,5)" fg:x="259" fg:w="37"/><text x="17.0464%" y="927.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (34 samples, 2.20%)</title><rect x="16.9909%" y="901" width="2.2049%" height="15" fill="rgb(232,140,9)" fg:x="262" fg:w="34"/><text x="17.2409%" y="911.50">r..</text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="19.1310%" y="885" width="0.0649%" height="15" fill="rgb(213,222,16)" fg:x="295" fg:w="1"/><text x="19.3810%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="19.1310%" y="869" width="0.0649%" height="15" fill="rgb(222,75,50)" fg:x="295" fg:w="1"/><text x="19.3810%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="19.1310%" y="853" width="0.0649%" height="15" fill="rgb(205,180,2)" fg:x="295" fg:w="1"/><text x="19.3810%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="19.1310%" y="837" width="0.0649%" height="15" fill="rgb(216,34,7)" fg:x="295" fg:w="1"/><text x="19.3810%" y="847.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="821" width="0.0649%" height="15" fill="rgb(253,16,32)" fg:x="295" fg:w="1"/><text x="19.3810%" y="831.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="805" width="0.0649%" height="15" fill="rgb(208,97,28)" fg:x="295" fg:w="1"/><text x="19.3810%" y="815.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="19.1310%" y="789" width="0.0649%" height="15" fill="rgb(225,92,11)" fg:x="295" fg:w="1"/><text x="19.3810%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="773" width="0.0649%" height="15" fill="rgb(243,38,12)" fg:x="295" fg:w="1"/><text x="19.3810%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="757" width="0.0649%" height="15" fill="rgb(208,139,16)" fg:x="295" fg:w="1"/><text x="19.3810%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="19.1310%" y="741" width="0.0649%" height="15" fill="rgb(227,24,9)" fg:x="295" fg:w="1"/><text x="19.3810%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="19.1310%" y="725" width="0.0649%" height="15" fill="rgb(206,62,11)" fg:x="295" fg:w="1"/><text x="19.3810%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="19.1310%" y="709" width="0.0649%" height="15" fill="rgb(228,134,27)" fg:x="295" fg:w="1"/><text x="19.3810%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="19.1310%" y="693" width="0.0649%" height="15" fill="rgb(205,55,33)" fg:x="295" fg:w="1"/><text x="19.3810%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="19.1310%" y="677" width="0.0649%" height="15" fill="rgb(243,75,43)" fg:x="295" fg:w="1"/><text x="19.3810%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="661" width="0.0649%" height="15" fill="rgb(223,27,42)" fg:x="295" fg:w="1"/><text x="19.3810%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="645" width="0.0649%" height="15" fill="rgb(232,189,33)" fg:x="295" fg:w="1"/><text x="19.3810%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="19.1310%" y="629" width="0.0649%" height="15" fill="rgb(210,9,39)" fg:x="295" fg:w="1"/><text x="19.3810%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="19.1310%" y="613" width="0.0649%" height="15" fill="rgb(242,85,26)" fg:x="295" fg:w="1"/><text x="19.3810%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="19.1310%" y="597" width="0.0649%" height="15" fill="rgb(248,44,4)" fg:x="295" fg:w="1"/><text x="19.3810%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="19.1310%" y="581" width="0.0649%" height="15" fill="rgb(250,96,46)" fg:x="295" fg:w="1"/><text x="19.3810%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="19.1310%" y="565" width="0.0649%" height="15" fill="rgb(229,116,26)" fg:x="295" fg:w="1"/><text x="19.3810%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="549" width="0.0649%" height="15" fill="rgb(246,94,34)" fg:x="295" fg:w="1"/><text x="19.3810%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="19.1310%" y="533" width="0.0649%" height="15" fill="rgb(251,73,21)" fg:x="295" fg:w="1"/><text x="19.3810%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="19.1310%" y="517" width="0.0649%" height="15" fill="rgb(254,121,25)" fg:x="295" fg:w="1"/><text x="19.3810%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="19.1310%" y="501" width="0.0649%" height="15" fill="rgb(215,161,49)" fg:x="295" fg:w="1"/><text x="19.3810%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.1310%" y="485" width="0.0649%" height="15" fill="rgb(221,43,13)" fg:x="295" fg:w="1"/><text x="19.3810%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.1310%" y="469" width="0.0649%" height="15" fill="rgb(249,5,37)" fg:x="295" fg:w="1"/><text x="19.3810%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.1310%" y="453" width="0.0649%" height="15" fill="rgb(226,25,44)" fg:x="295" fg:w="1"/><text x="19.3810%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="19.1958%" y="917" width="0.0649%" height="15" fill="rgb(238,189,16)" fg:x="296" fg:w="1"/><text x="19.4458%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="19.1958%" y="901" width="0.0649%" height="15" fill="rgb(251,186,8)" fg:x="296" fg:w="1"/><text x="19.4458%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.1958%" y="885" width="0.0649%" height="15" fill="rgb(254,34,31)" fg:x="296" fg:w="1"/><text x="19.4458%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.1958%" y="869" width="0.0649%" height="15" fill="rgb(225,215,27)" fg:x="296" fg:w="1"/><text x="19.4458%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.1958%" y="853" width="0.0649%" height="15" fill="rgb(221,192,48)" fg:x="296" fg:w="1"/><text x="19.4458%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt; (1 samples, 0.06%)</title><rect x="19.2607%" y="917" width="0.0649%" height="15" fill="rgb(219,137,20)" fg:x="297" fg:w="1"/><text x="19.5107%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::types::TypeName&gt; (1 samples, 0.06%)</title><rect x="19.2607%" y="901" width="0.0649%" height="15" fill="rgb(219,84,11)" fg:x="297" fg:w="1"/><text x="19.5107%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.06%)</title><rect x="19.2607%" y="885" width="0.0649%" height="15" fill="rgb(224,10,23)" fg:x="297" fg:w="1"/><text x="19.5107%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="19.2607%" y="869" width="0.0649%" height="15" fill="rgb(248,22,39)" fg:x="297" fg:w="1"/><text x="19.5107%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="19.2607%" y="853" width="0.0649%" height="15" fill="rgb(212,154,20)" fg:x="297" fg:w="1"/><text x="19.5107%" y="863.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="19.2607%" y="837" width="0.0649%" height="15" fill="rgb(236,199,50)" fg:x="297" fg:w="1"/><text x="19.5107%" y="847.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="19.2607%" y="821" width="0.0649%" height="15" fill="rgb(211,9,17)" fg:x="297" fg:w="1"/><text x="19.5107%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.2607%" y="805" width="0.0649%" height="15" fill="rgb(243,216,36)" fg:x="297" fg:w="1"/><text x="19.5107%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.2607%" y="789" width="0.0649%" height="15" fill="rgb(250,2,10)" fg:x="297" fg:w="1"/><text x="19.5107%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.2607%" y="773" width="0.0649%" height="15" fill="rgb(226,50,48)" fg:x="297" fg:w="1"/><text x="19.5107%" y="783.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="19.3256%" y="869" width="0.0649%" height="15" fill="rgb(243,81,16)" fg:x="298" fg:w="1"/><text x="19.5756%" y="879.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="19.3256%" y="853" width="0.0649%" height="15" fill="rgb(250,14,2)" fg:x="298" fg:w="1"/><text x="19.5756%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="19.3256%" y="837" width="0.0649%" height="15" fill="rgb(233,135,29)" fg:x="298" fg:w="1"/><text x="19.5756%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="19.3256%" y="821" width="0.0649%" height="15" fill="rgb(224,64,43)" fg:x="298" fg:w="1"/><text x="19.5756%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.06%)</title><rect x="19.3256%" y="805" width="0.0649%" height="15" fill="rgb(238,84,13)" fg:x="298" fg:w="1"/><text x="19.5756%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.06%)</title><rect x="19.3256%" y="789" width="0.0649%" height="15" fill="rgb(253,48,26)" fg:x="298" fg:w="1"/><text x="19.5756%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.06%)</title><rect x="19.3256%" y="773" width="0.0649%" height="15" fill="rgb(205,223,31)" fg:x="298" fg:w="1"/><text x="19.5756%" y="783.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="19.3256%" y="757" width="0.0649%" height="15" fill="rgb(221,41,32)" fg:x="298" fg:w="1"/><text x="19.5756%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.3256%" y="741" width="0.0649%" height="15" fill="rgb(213,158,31)" fg:x="298" fg:w="1"/><text x="19.5756%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.3256%" y="725" width="0.0649%" height="15" fill="rgb(245,126,43)" fg:x="298" fg:w="1"/><text x="19.5756%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.3256%" y="709" width="0.0649%" height="15" fill="rgb(227,7,22)" fg:x="298" fg:w="1"/><text x="19.5756%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.3904%" y="805" width="0.0649%" height="15" fill="rgb(252,90,44)" fg:x="299" fg:w="1"/><text x="19.6404%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.3904%" y="789" width="0.0649%" height="15" fill="rgb(253,91,0)" fg:x="299" fg:w="1"/><text x="19.6404%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.3904%" y="773" width="0.0649%" height="15" fill="rgb(252,175,49)" fg:x="299" fg:w="1"/><text x="19.6404%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="19.4553%" y="757" width="0.0649%" height="15" fill="rgb(246,150,1)" fg:x="300" fg:w="1"/><text x="19.7053%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.4553%" y="741" width="0.0649%" height="15" fill="rgb(241,192,25)" fg:x="300" fg:w="1"/><text x="19.7053%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.4553%" y="725" width="0.0649%" height="15" fill="rgb(239,187,11)" fg:x="300" fg:w="1"/><text x="19.7053%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.4553%" y="709" width="0.0649%" height="15" fill="rgb(218,202,51)" fg:x="300" fg:w="1"/><text x="19.7053%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="19.4553%" y="805" width="0.1297%" height="15" fill="rgb(225,176,8)" fg:x="300" fg:w="2"/><text x="19.7053%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="19.4553%" y="789" width="0.1297%" height="15" fill="rgb(219,122,41)" fg:x="300" fg:w="2"/><text x="19.7053%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="19.4553%" y="773" width="0.1297%" height="15" fill="rgb(248,140,20)" fg:x="300" fg:w="2"/><text x="19.7053%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="19.5201%" y="757" width="0.0649%" height="15" fill="rgb(245,41,37)" fg:x="301" fg:w="1"/><text x="19.7701%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.5201%" y="741" width="0.0649%" height="15" fill="rgb(235,82,39)" fg:x="301" fg:w="1"/><text x="19.7701%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.5201%" y="725" width="0.0649%" height="15" fill="rgb(230,108,42)" fg:x="301" fg:w="1"/><text x="19.7701%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.5201%" y="709" width="0.0649%" height="15" fill="rgb(215,150,50)" fg:x="301" fg:w="1"/><text x="19.7701%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.26%)</title><rect x="19.3904%" y="837" width="0.2594%" height="15" fill="rgb(233,212,5)" fg:x="299" fg:w="4"/><text x="19.6404%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.26%)</title><rect x="19.3904%" y="821" width="0.2594%" height="15" fill="rgb(245,80,22)" fg:x="299" fg:w="4"/><text x="19.6404%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="19.5850%" y="805" width="0.0649%" height="15" fill="rgb(238,129,16)" fg:x="302" fg:w="1"/><text x="19.8350%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="19.5850%" y="789" width="0.0649%" height="15" fill="rgb(240,19,0)" fg:x="302" fg:w="1"/><text x="19.8350%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="19.5850%" y="773" width="0.0649%" height="15" fill="rgb(232,42,35)" fg:x="302" fg:w="1"/><text x="19.8350%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="19.5850%" y="757" width="0.0649%" height="15" fill="rgb(223,130,24)" fg:x="302" fg:w="1"/><text x="19.8350%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="19.5850%" y="741" width="0.0649%" height="15" fill="rgb(237,16,22)" fg:x="302" fg:w="1"/><text x="19.8350%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="19.5850%" y="725" width="0.0649%" height="15" fill="rgb(248,192,20)" fg:x="302" fg:w="1"/><text x="19.8350%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="19.5850%" y="709" width="0.0649%" height="15" fill="rgb(233,167,2)" fg:x="302" fg:w="1"/><text x="19.8350%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="19.5850%" y="693" width="0.0649%" height="15" fill="rgb(252,71,44)" fg:x="302" fg:w="1"/><text x="19.8350%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.5850%" y="677" width="0.0649%" height="15" fill="rgb(238,37,47)" fg:x="302" fg:w="1"/><text x="19.8350%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.5850%" y="661" width="0.0649%" height="15" fill="rgb(214,202,54)" fg:x="302" fg:w="1"/><text x="19.8350%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.5850%" y="645" width="0.0649%" height="15" fill="rgb(254,165,40)" fg:x="302" fg:w="1"/><text x="19.8350%" y="655.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (6 samples, 0.39%)</title><rect x="19.3256%" y="917" width="0.3891%" height="15" fill="rgb(246,173,38)" fg:x="298" fg:w="6"/><text x="19.5756%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (6 samples, 0.39%)</title><rect x="19.3256%" y="901" width="0.3891%" height="15" fill="rgb(215,3,27)" fg:x="298" fg:w="6"/><text x="19.5756%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (6 samples, 0.39%)</title><rect x="19.3256%" y="885" width="0.3891%" height="15" fill="rgb(239,169,51)" fg:x="298" fg:w="6"/><text x="19.5756%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5 samples, 0.32%)</title><rect x="19.3904%" y="869" width="0.3243%" height="15" fill="rgb(212,5,25)" fg:x="299" fg:w="5"/><text x="19.6404%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.32%)</title><rect x="19.3904%" y="853" width="0.3243%" height="15" fill="rgb(243,45,17)" fg:x="299" fg:w="5"/><text x="19.6404%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="19.6498%" y="837" width="0.0649%" height="15" fill="rgb(242,97,9)" fg:x="303" fg:w="1"/><text x="19.8998%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="19.6498%" y="821" width="0.0649%" height="15" fill="rgb(228,71,31)" fg:x="303" fg:w="1"/><text x="19.8998%" y="831.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="19.6498%" y="805" width="0.0649%" height="15" fill="rgb(252,184,16)" fg:x="303" fg:w="1"/><text x="19.8998%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.6498%" y="789" width="0.0649%" height="15" fill="rgb(236,169,46)" fg:x="303" fg:w="1"/><text x="19.8998%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.6498%" y="773" width="0.0649%" height="15" fill="rgb(207,17,47)" fg:x="303" fg:w="1"/><text x="19.8998%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.6498%" y="757" width="0.0649%" height="15" fill="rgb(206,201,28)" fg:x="303" fg:w="1"/><text x="19.8998%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="19.7147%" y="901" width="0.0649%" height="15" fill="rgb(224,184,23)" fg:x="304" fg:w="1"/><text x="19.9647%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.7147%" y="885" width="0.0649%" height="15" fill="rgb(208,139,48)" fg:x="304" fg:w="1"/><text x="19.9647%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.7147%" y="869" width="0.0649%" height="15" fill="rgb(208,130,10)" fg:x="304" fg:w="1"/><text x="19.9647%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.7147%" y="853" width="0.0649%" height="15" fill="rgb(211,213,45)" fg:x="304" fg:w="1"/><text x="19.9647%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="19.7795%" y="821" width="0.0649%" height="15" fill="rgb(235,100,30)" fg:x="305" fg:w="1"/><text x="20.0295%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="19.7795%" y="805" width="0.0649%" height="15" fill="rgb(206,144,31)" fg:x="305" fg:w="1"/><text x="20.0295%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="19.7795%" y="789" width="0.0649%" height="15" fill="rgb(224,200,26)" fg:x="305" fg:w="1"/><text x="20.0295%" y="799.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="19.7795%" y="773" width="0.0649%" height="15" fill="rgb(247,104,53)" fg:x="305" fg:w="1"/><text x="20.0295%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="19.7795%" y="757" width="0.0649%" height="15" fill="rgb(220,14,17)" fg:x="305" fg:w="1"/><text x="20.0295%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="19.7795%" y="741" width="0.0649%" height="15" fill="rgb(230,140,40)" fg:x="305" fg:w="1"/><text x="20.0295%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="19.7795%" y="725" width="0.0649%" height="15" fill="rgb(229,2,41)" fg:x="305" fg:w="1"/><text x="20.0295%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="19.7795%" y="709" width="0.0649%" height="15" fill="rgb(232,89,16)" fg:x="305" fg:w="1"/><text x="20.0295%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="19.7795%" y="693" width="0.0649%" height="15" fill="rgb(247,59,52)" fg:x="305" fg:w="1"/><text x="20.0295%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.7795%" y="677" width="0.0649%" height="15" fill="rgb(226,110,21)" fg:x="305" fg:w="1"/><text x="20.0295%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.7795%" y="661" width="0.0649%" height="15" fill="rgb(224,176,43)" fg:x="305" fg:w="1"/><text x="20.0295%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.7795%" y="645" width="0.0649%" height="15" fill="rgb(221,73,6)" fg:x="305" fg:w="1"/><text x="20.0295%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (2 samples, 0.13%)</title><rect x="19.7795%" y="885" width="0.1297%" height="15" fill="rgb(232,78,19)" fg:x="305" fg:w="2"/><text x="20.0295%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="19.7795%" y="869" width="0.1297%" height="15" fill="rgb(233,112,48)" fg:x="305" fg:w="2"/><text x="20.0295%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="19.7795%" y="853" width="0.1297%" height="15" fill="rgb(243,131,47)" fg:x="305" fg:w="2"/><text x="20.0295%" y="863.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="19.7795%" y="837" width="0.1297%" height="15" fill="rgb(226,51,1)" fg:x="305" fg:w="2"/><text x="20.0295%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="19.8444%" y="821" width="0.0649%" height="15" fill="rgb(247,58,7)" fg:x="306" fg:w="1"/><text x="20.0944%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="19.8444%" y="805" width="0.0649%" height="15" fill="rgb(209,7,32)" fg:x="306" fg:w="1"/><text x="20.0944%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="19.8444%" y="789" width="0.0649%" height="15" fill="rgb(209,39,41)" fg:x="306" fg:w="1"/><text x="20.0944%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="19.8444%" y="773" width="0.0649%" height="15" fill="rgb(226,182,46)" fg:x="306" fg:w="1"/><text x="20.0944%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="19.8444%" y="757" width="0.0649%" height="15" fill="rgb(230,219,10)" fg:x="306" fg:w="1"/><text x="20.0944%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="19.8444%" y="741" width="0.0649%" height="15" fill="rgb(227,175,30)" fg:x="306" fg:w="1"/><text x="20.0944%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="19.8444%" y="725" width="0.0649%" height="15" fill="rgb(217,2,50)" fg:x="306" fg:w="1"/><text x="20.0944%" y="735.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="19.8444%" y="709" width="0.0649%" height="15" fill="rgb(229,160,0)" fg:x="306" fg:w="1"/><text x="20.0944%" y="719.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="19.8444%" y="693" width="0.0649%" height="15" fill="rgb(207,78,37)" fg:x="306" fg:w="1"/><text x="20.0944%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="19.8444%" y="677" width="0.0649%" height="15" fill="rgb(225,57,0)" fg:x="306" fg:w="1"/><text x="20.0944%" y="687.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="19.8444%" y="661" width="0.0649%" height="15" fill="rgb(232,154,2)" fg:x="306" fg:w="1"/><text x="20.0944%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.8444%" y="645" width="0.0649%" height="15" fill="rgb(241,212,25)" fg:x="306" fg:w="1"/><text x="20.0944%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.8444%" y="629" width="0.0649%" height="15" fill="rgb(226,69,20)" fg:x="306" fg:w="1"/><text x="20.0944%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.8444%" y="613" width="0.0649%" height="15" fill="rgb(247,184,54)" fg:x="306" fg:w="1"/><text x="20.0944%" y="623.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="19.9092%" y="837" width="0.0649%" height="15" fill="rgb(210,145,0)" fg:x="307" fg:w="1"/><text x="20.1592%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="19.9092%" y="821" width="0.0649%" height="15" fill="rgb(253,82,12)" fg:x="307" fg:w="1"/><text x="20.1592%" y="831.50"></text></g><g><title>&lt;&amp;str as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="19.9092%" y="805" width="0.0649%" height="15" fill="rgb(245,42,11)" fg:x="307" fg:w="1"/><text x="20.1592%" y="815.50"></text></g><g><title>&lt;&amp;str as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="19.9092%" y="789" width="0.0649%" height="15" fill="rgb(219,147,32)" fg:x="307" fg:w="1"/><text x="20.1592%" y="799.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="19.9092%" y="773" width="0.0649%" height="15" fill="rgb(246,12,7)" fg:x="307" fg:w="1"/><text x="20.1592%" y="783.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="19.9092%" y="757" width="0.0649%" height="15" fill="rgb(243,50,9)" fg:x="307" fg:w="1"/><text x="20.1592%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.9092%" y="741" width="0.0649%" height="15" fill="rgb(219,149,6)" fg:x="307" fg:w="1"/><text x="20.1592%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.9092%" y="725" width="0.0649%" height="15" fill="rgb(241,51,42)" fg:x="307" fg:w="1"/><text x="20.1592%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.9092%" y="709" width="0.0649%" height="15" fill="rgb(226,128,27)" fg:x="307" fg:w="1"/><text x="20.1592%" y="719.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="19.9092%" y="853" width="0.1297%" height="15" fill="rgb(244,144,4)" fg:x="307" fg:w="2"/><text x="20.1592%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="19.9741%" y="837" width="0.0649%" height="15" fill="rgb(221,4,13)" fg:x="308" fg:w="1"/><text x="20.2241%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="19.9741%" y="821" width="0.0649%" height="15" fill="rgb(208,170,28)" fg:x="308" fg:w="1"/><text x="20.2241%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="19.9741%" y="805" width="0.0649%" height="15" fill="rgb(226,131,13)" fg:x="308" fg:w="1"/><text x="20.2241%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="19.9741%" y="789" width="0.0649%" height="15" fill="rgb(215,72,41)" fg:x="308" fg:w="1"/><text x="20.2241%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="19.9741%" y="773" width="0.0649%" height="15" fill="rgb(243,108,20)" fg:x="308" fg:w="1"/><text x="20.2241%" y="783.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="20.0389%" y="837" width="0.0649%" height="15" fill="rgb(230,189,17)" fg:x="309" fg:w="1"/><text x="20.2889%" y="847.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="20.0389%" y="821" width="0.0649%" height="15" fill="rgb(220,50,17)" fg:x="309" fg:w="1"/><text x="20.2889%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="20.0389%" y="805" width="0.0649%" height="15" fill="rgb(248,152,48)" fg:x="309" fg:w="1"/><text x="20.2889%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="20.0389%" y="789" width="0.0649%" height="15" fill="rgb(244,91,11)" fg:x="309" fg:w="1"/><text x="20.2889%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="20.0389%" y="773" width="0.0649%" height="15" fill="rgb(220,157,5)" fg:x="309" fg:w="1"/><text x="20.2889%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="20.0389%" y="757" width="0.0649%" height="15" fill="rgb(253,137,8)" fg:x="309" fg:w="1"/><text x="20.2889%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="20.0389%" y="741" width="0.0649%" height="15" fill="rgb(217,137,51)" fg:x="309" fg:w="1"/><text x="20.2889%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="20.0389%" y="725" width="0.0649%" height="15" fill="rgb(218,209,53)" fg:x="309" fg:w="1"/><text x="20.2889%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="20.0389%" y="709" width="0.0649%" height="15" fill="rgb(249,137,25)" fg:x="309" fg:w="1"/><text x="20.2889%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="20.0389%" y="693" width="0.0649%" height="15" fill="rgb(239,155,26)" fg:x="309" fg:w="1"/><text x="20.2889%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="20.0389%" y="677" width="0.0649%" height="15" fill="rgb(227,85,46)" fg:x="309" fg:w="1"/><text x="20.2889%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.0389%" y="661" width="0.0649%" height="15" fill="rgb(251,107,43)" fg:x="309" fg:w="1"/><text x="20.2889%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.0389%" y="645" width="0.0649%" height="15" fill="rgb(234,170,33)" fg:x="309" fg:w="1"/><text x="20.2889%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.0389%" y="629" width="0.0649%" height="15" fill="rgb(206,29,35)" fg:x="309" fg:w="1"/><text x="20.2889%" y="639.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="20.1038%" y="837" width="0.0649%" height="15" fill="rgb(227,138,25)" fg:x="310" fg:w="1"/><text x="20.3538%" y="847.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="20.1038%" y="821" width="0.0649%" height="15" fill="rgb(249,131,35)" fg:x="310" fg:w="1"/><text x="20.3538%" y="831.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="20.1038%" y="805" width="0.0649%" height="15" fill="rgb(239,6,40)" fg:x="310" fg:w="1"/><text x="20.3538%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="20.1038%" y="789" width="0.0649%" height="15" fill="rgb(246,136,47)" fg:x="310" fg:w="1"/><text x="20.3538%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.06%)</title><rect x="20.1038%" y="773" width="0.0649%" height="15" fill="rgb(253,58,26)" fg:x="310" fg:w="1"/><text x="20.3538%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.06%)</title><rect x="20.1038%" y="757" width="0.0649%" height="15" fill="rgb(237,141,10)" fg:x="310" fg:w="1"/><text x="20.3538%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.06%)</title><rect x="20.1038%" y="741" width="0.0649%" height="15" fill="rgb(234,156,12)" fg:x="310" fg:w="1"/><text x="20.3538%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.1038%" y="725" width="0.0649%" height="15" fill="rgb(243,224,36)" fg:x="310" fg:w="1"/><text x="20.3538%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.1038%" y="709" width="0.0649%" height="15" fill="rgb(205,229,51)" fg:x="310" fg:w="1"/><text x="20.3538%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.1038%" y="693" width="0.0649%" height="15" fill="rgb(223,189,4)" fg:x="310" fg:w="1"/><text x="20.3538%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="20.1686%" y="837" width="0.0649%" height="15" fill="rgb(249,167,54)" fg:x="311" fg:w="1"/><text x="20.4186%" y="847.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="20.1686%" y="821" width="0.0649%" height="15" fill="rgb(218,34,28)" fg:x="311" fg:w="1"/><text x="20.4186%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="20.1686%" y="805" width="0.0649%" height="15" fill="rgb(232,109,42)" fg:x="311" fg:w="1"/><text x="20.4186%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="20.1686%" y="789" width="0.0649%" height="15" fill="rgb(248,214,46)" fg:x="311" fg:w="1"/><text x="20.4186%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="20.1686%" y="773" width="0.0649%" height="15" fill="rgb(244,216,40)" fg:x="311" fg:w="1"/><text x="20.4186%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="20.1686%" y="757" width="0.0649%" height="15" fill="rgb(231,226,31)" fg:x="311" fg:w="1"/><text x="20.4186%" y="767.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="20.1686%" y="741" width="0.0649%" height="15" fill="rgb(238,38,43)" fg:x="311" fg:w="1"/><text x="20.4186%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.1686%" y="725" width="0.0649%" height="15" fill="rgb(208,88,43)" fg:x="311" fg:w="1"/><text x="20.4186%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.1686%" y="709" width="0.0649%" height="15" fill="rgb(205,136,37)" fg:x="311" fg:w="1"/><text x="20.4186%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.1686%" y="693" width="0.0649%" height="15" fill="rgb(237,34,14)" fg:x="311" fg:w="1"/><text x="20.4186%" y="703.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (8 samples, 0.52%)</title><rect x="19.7795%" y="901" width="0.5188%" height="15" fill="rgb(236,193,44)" fg:x="305" fg:w="8"/><text x="20.0295%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="19.9092%" y="885" width="0.3891%" height="15" fill="rgb(231,48,10)" fg:x="307" fg:w="6"/><text x="20.1592%" y="895.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (6 samples, 0.39%)</title><rect x="19.9092%" y="869" width="0.3891%" height="15" fill="rgb(213,141,34)" fg:x="307" fg:w="6"/><text x="20.1592%" y="879.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (4 samples, 0.26%)</title><rect x="20.0389%" y="853" width="0.2594%" height="15" fill="rgb(249,130,34)" fg:x="309" fg:w="4"/><text x="20.2889%" y="863.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="20.2335%" y="837" width="0.0649%" height="15" fill="rgb(219,42,41)" fg:x="312" fg:w="1"/><text x="20.4835%" y="847.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.06%)</title><rect x="20.2335%" y="821" width="0.0649%" height="15" fill="rgb(224,100,54)" fg:x="312" fg:w="1"/><text x="20.4835%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="20.2335%" y="805" width="0.0649%" height="15" fill="rgb(229,200,27)" fg:x="312" fg:w="1"/><text x="20.4835%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="20.2335%" y="789" width="0.0649%" height="15" fill="rgb(217,118,10)" fg:x="312" fg:w="1"/><text x="20.4835%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.2335%" y="773" width="0.0649%" height="15" fill="rgb(206,22,3)" fg:x="312" fg:w="1"/><text x="20.4835%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.2335%" y="757" width="0.0649%" height="15" fill="rgb(232,163,46)" fg:x="312" fg:w="1"/><text x="20.4835%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.2335%" y="741" width="0.0649%" height="15" fill="rgb(206,95,13)" fg:x="312" fg:w="1"/><text x="20.4835%" y="751.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (1 samples, 0.06%)</title><rect x="20.2983%" y="885" width="0.0649%" height="15" fill="rgb(253,154,18)" fg:x="313" fg:w="1"/><text x="20.5483%" y="895.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.06%)</title><rect x="20.2983%" y="869" width="0.0649%" height="15" fill="rgb(219,32,23)" fg:x="313" fg:w="1"/><text x="20.5483%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.06%)</title><rect x="20.2983%" y="853" width="0.0649%" height="15" fill="rgb(230,191,45)" fg:x="313" fg:w="1"/><text x="20.5483%" y="863.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.06%)</title><rect x="20.2983%" y="837" width="0.0649%" height="15" fill="rgb(229,64,36)" fg:x="313" fg:w="1"/><text x="20.5483%" y="847.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.06%)</title><rect x="20.2983%" y="821" width="0.0649%" height="15" fill="rgb(205,129,25)" fg:x="313" fg:w="1"/><text x="20.5483%" y="831.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.06%)</title><rect x="20.2983%" y="805" width="0.0649%" height="15" fill="rgb(254,112,7)" fg:x="313" fg:w="1"/><text x="20.5483%" y="815.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.06%)</title><rect x="20.2983%" y="789" width="0.0649%" height="15" fill="rgb(226,53,48)" fg:x="313" fg:w="1"/><text x="20.5483%" y="799.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="20.2983%" y="773" width="0.0649%" height="15" fill="rgb(214,153,38)" fg:x="313" fg:w="1"/><text x="20.5483%" y="783.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="20.2983%" y="757" width="0.0649%" height="15" fill="rgb(243,101,7)" fg:x="313" fg:w="1"/><text x="20.5483%" y="767.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="20.2983%" y="741" width="0.0649%" height="15" fill="rgb(240,140,22)" fg:x="313" fg:w="1"/><text x="20.5483%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.2983%" y="725" width="0.0649%" height="15" fill="rgb(235,114,2)" fg:x="313" fg:w="1"/><text x="20.5483%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.2983%" y="709" width="0.0649%" height="15" fill="rgb(242,59,12)" fg:x="313" fg:w="1"/><text x="20.5483%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.2983%" y="693" width="0.0649%" height="15" fill="rgb(252,134,9)" fg:x="313" fg:w="1"/><text x="20.5483%" y="703.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (19 samples, 1.23%)</title><rect x="19.1958%" y="933" width="1.2322%" height="15" fill="rgb(236,4,44)" fg:x="296" fg:w="19"/><text x="19.4458%" y="943.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (11 samples, 0.71%)</title><rect x="19.7147%" y="917" width="0.7134%" height="15" fill="rgb(254,172,41)" fg:x="304" fg:w="11"/><text x="19.9647%" y="927.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (2 samples, 0.13%)</title><rect x="20.2983%" y="901" width="0.1297%" height="15" fill="rgb(244,63,20)" fg:x="313" fg:w="2"/><text x="20.5483%" y="911.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="20.3632%" y="885" width="0.0649%" height="15" fill="rgb(250,73,31)" fg:x="314" fg:w="1"/><text x="20.6132%" y="895.50"></text></g><g><title>&lt;redb::types::TypeName as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="20.3632%" y="869" width="0.0649%" height="15" fill="rgb(241,38,36)" fg:x="314" fg:w="1"/><text x="20.6132%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="20.3632%" y="853" width="0.0649%" height="15" fill="rgb(245,211,2)" fg:x="314" fg:w="1"/><text x="20.6132%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.3632%" y="837" width="0.0649%" height="15" fill="rgb(206,120,28)" fg:x="314" fg:w="1"/><text x="20.6132%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.3632%" y="821" width="0.0649%" height="15" fill="rgb(211,59,34)" fg:x="314" fg:w="1"/><text x="20.6132%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.3632%" y="805" width="0.0649%" height="15" fill="rgb(233,168,5)" fg:x="314" fg:w="1"/><text x="20.6132%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.4280%" y="885" width="0.0649%" height="15" fill="rgb(234,33,13)" fg:x="315" fg:w="1"/><text x="20.6780%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.4280%" y="869" width="0.0649%" height="15" fill="rgb(231,150,26)" fg:x="315" fg:w="1"/><text x="20.6780%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.4280%" y="853" width="0.0649%" height="15" fill="rgb(217,191,4)" fg:x="315" fg:w="1"/><text x="20.6780%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="20.4929%" y="517" width="0.0649%" height="15" fill="rgb(246,198,38)" fg:x="316" fg:w="1"/><text x="20.7429%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="20.4929%" y="501" width="0.0649%" height="15" fill="rgb(245,64,37)" fg:x="316" fg:w="1"/><text x="20.7429%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="20.4929%" y="485" width="0.0649%" height="15" fill="rgb(250,30,36)" fg:x="316" fg:w="1"/><text x="20.7429%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="20.4929%" y="469" width="0.0649%" height="15" fill="rgb(217,86,53)" fg:x="316" fg:w="1"/><text x="20.7429%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="20.4929%" y="453" width="0.0649%" height="15" fill="rgb(228,157,16)" fg:x="316" fg:w="1"/><text x="20.7429%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="20.4929%" y="437" width="0.0649%" height="15" fill="rgb(217,59,31)" fg:x="316" fg:w="1"/><text x="20.7429%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="20.4929%" y="421" width="0.0649%" height="15" fill="rgb(237,138,41)" fg:x="316" fg:w="1"/><text x="20.7429%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="20.4929%" y="405" width="0.0649%" height="15" fill="rgb(227,91,49)" fg:x="316" fg:w="1"/><text x="20.7429%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="20.4929%" y="389" width="0.0649%" height="15" fill="rgb(247,21,44)" fg:x="316" fg:w="1"/><text x="20.7429%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="20.4929%" y="373" width="0.0649%" height="15" fill="rgb(219,210,51)" fg:x="316" fg:w="1"/><text x="20.7429%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="20.4929%" y="357" width="0.0649%" height="15" fill="rgb(209,140,6)" fg:x="316" fg:w="1"/><text x="20.7429%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="20.4929%" y="341" width="0.0649%" height="15" fill="rgb(221,188,24)" fg:x="316" fg:w="1"/><text x="20.7429%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.4929%" y="325" width="0.0649%" height="15" fill="rgb(232,154,20)" fg:x="316" fg:w="1"/><text x="20.7429%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.4929%" y="309" width="0.0649%" height="15" fill="rgb(244,137,50)" fg:x="316" fg:w="1"/><text x="20.7429%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.4929%" y="293" width="0.0649%" height="15" fill="rgb(225,185,43)" fg:x="316" fg:w="1"/><text x="20.7429%" y="303.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="20.4929%" y="629" width="0.1297%" height="15" fill="rgb(213,205,38)" fg:x="316" fg:w="2"/><text x="20.7429%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="20.4929%" y="613" width="0.1297%" height="15" fill="rgb(236,73,12)" fg:x="316" fg:w="2"/><text x="20.7429%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="20.4929%" y="597" width="0.1297%" height="15" fill="rgb(235,219,13)" fg:x="316" fg:w="2"/><text x="20.7429%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="20.4929%" y="581" width="0.1297%" height="15" fill="rgb(218,59,36)" fg:x="316" fg:w="2"/><text x="20.7429%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="20.4929%" y="565" width="0.1297%" height="15" fill="rgb(205,110,39)" fg:x="316" fg:w="2"/><text x="20.7429%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="20.4929%" y="549" width="0.1297%" height="15" fill="rgb(218,206,42)" fg:x="316" fg:w="2"/><text x="20.7429%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="20.4929%" y="533" width="0.1297%" height="15" fill="rgb(248,125,24)" fg:x="316" fg:w="2"/><text x="20.7429%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="20.5577%" y="517" width="0.0649%" height="15" fill="rgb(242,28,27)" fg:x="317" fg:w="1"/><text x="20.8077%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.5577%" y="501" width="0.0649%" height="15" fill="rgb(216,228,15)" fg:x="317" fg:w="1"/><text x="20.8077%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.5577%" y="485" width="0.0649%" height="15" fill="rgb(235,116,46)" fg:x="317" fg:w="1"/><text x="20.8077%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.5577%" y="469" width="0.0649%" height="15" fill="rgb(224,18,32)" fg:x="317" fg:w="1"/><text x="20.8077%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="20.4929%" y="853" width="0.1946%" height="15" fill="rgb(252,5,12)" fg:x="316" fg:w="3"/><text x="20.7429%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="20.4929%" y="837" width="0.1946%" height="15" fill="rgb(251,36,5)" fg:x="316" fg:w="3"/><text x="20.7429%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="20.4929%" y="821" width="0.1946%" height="15" fill="rgb(217,53,14)" fg:x="316" fg:w="3"/><text x="20.7429%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="20.4929%" y="805" width="0.1946%" height="15" fill="rgb(215,86,45)" fg:x="316" fg:w="3"/><text x="20.7429%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="20.4929%" y="789" width="0.1946%" height="15" fill="rgb(242,169,11)" fg:x="316" fg:w="3"/><text x="20.7429%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="20.4929%" y="773" width="0.1946%" height="15" fill="rgb(211,213,45)" fg:x="316" fg:w="3"/><text x="20.7429%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="20.4929%" y="757" width="0.1946%" height="15" fill="rgb(205,88,11)" fg:x="316" fg:w="3"/><text x="20.7429%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="20.4929%" y="741" width="0.1946%" height="15" fill="rgb(252,69,26)" fg:x="316" fg:w="3"/><text x="20.7429%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="20.4929%" y="725" width="0.1946%" height="15" fill="rgb(246,123,37)" fg:x="316" fg:w="3"/><text x="20.7429%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="20.4929%" y="709" width="0.1946%" height="15" fill="rgb(212,205,5)" fg:x="316" fg:w="3"/><text x="20.7429%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="20.4929%" y="693" width="0.1946%" height="15" fill="rgb(253,148,0)" fg:x="316" fg:w="3"/><text x="20.7429%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="20.4929%" y="677" width="0.1946%" height="15" fill="rgb(239,22,4)" fg:x="316" fg:w="3"/><text x="20.7429%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="20.4929%" y="661" width="0.1946%" height="15" fill="rgb(226,26,53)" fg:x="316" fg:w="3"/><text x="20.7429%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="20.4929%" y="645" width="0.1946%" height="15" fill="rgb(225,229,45)" fg:x="316" fg:w="3"/><text x="20.7429%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.6226%" y="629" width="0.0649%" height="15" fill="rgb(220,60,37)" fg:x="318" fg:w="1"/><text x="20.8726%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.6226%" y="613" width="0.0649%" height="15" fill="rgb(217,180,35)" fg:x="318" fg:w="1"/><text x="20.8726%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.6226%" y="597" width="0.0649%" height="15" fill="rgb(229,7,53)" fg:x="318" fg:w="1"/><text x="20.8726%" y="607.50"></text></g><g><title>utxo::Block::all (99 samples, 6.42%)</title><rect x="14.3320%" y="1061" width="6.4202%" height="15" fill="rgb(254,137,3)" fg:x="221" fg:w="99"/><text x="14.5820%" y="1071.50">utxo::Bl..</text></g><g><title>utxo::Block::compose (99 samples, 6.42%)</title><rect x="14.3320%" y="1045" width="6.4202%" height="15" fill="rgb(215,140,41)" fg:x="221" fg:w="99"/><text x="14.5820%" y="1055.50">utxo::Bl..</text></g><g><title>utxo::Transaction::range (99 samples, 6.42%)</title><rect x="14.3320%" y="1029" width="6.4202%" height="15" fill="rgb(250,80,15)" fg:x="221" fg:w="99"/><text x="14.5820%" y="1039.50">utxo::Tr..</text></g><g><title>utxo::Transaction::compose (99 samples, 6.42%)</title><rect x="14.3320%" y="1013" width="6.4202%" height="15" fill="rgb(252,191,6)" fg:x="221" fg:w="99"/><text x="14.5820%" y="1023.50">utxo::Tr..</text></g><g><title>utxo::Utxo::range (99 samples, 6.42%)</title><rect x="14.3320%" y="997" width="6.4202%" height="15" fill="rgb(246,217,18)" fg:x="221" fg:w="99"/><text x="14.5820%" y="1007.50">utxo::Ut..</text></g><g><title>utxo::Utxo::compose (98 samples, 6.36%)</title><rect x="14.3969%" y="981" width="6.3554%" height="15" fill="rgb(223,93,7)" fg:x="222" fg:w="98"/><text x="14.6469%" y="991.50">utxo::Ut..</text></g><g><title>utxo::Asset::range (78 samples, 5.06%)</title><rect x="15.6939%" y="965" width="5.0584%" height="15" fill="rgb(225,55,52)" fg:x="242" fg:w="78"/><text x="15.9439%" y="975.50">utxo::..</text></g><g><title>utxo::Asset::compose (67 samples, 4.35%)</title><rect x="16.4073%" y="949" width="4.3450%" height="15" fill="rgb(240,31,24)" fg:x="253" fg:w="67"/><text x="16.6573%" y="959.50">utxo:..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (5 samples, 0.32%)</title><rect x="20.4280%" y="933" width="0.3243%" height="15" fill="rgb(205,56,52)" fg:x="315" fg:w="5"/><text x="20.6780%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (5 samples, 0.32%)</title><rect x="20.4280%" y="917" width="0.3243%" height="15" fill="rgb(246,146,12)" fg:x="315" fg:w="5"/><text x="20.6780%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (5 samples, 0.32%)</title><rect x="20.4280%" y="901" width="0.3243%" height="15" fill="rgb(239,84,36)" fg:x="315" fg:w="5"/><text x="20.6780%" y="911.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="20.4929%" y="885" width="0.2594%" height="15" fill="rgb(207,41,40)" fg:x="316" fg:w="4"/><text x="20.7429%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="20.4929%" y="869" width="0.2594%" height="15" fill="rgb(241,179,25)" fg:x="316" fg:w="4"/><text x="20.7429%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="20.6874%" y="853" width="0.0649%" height="15" fill="rgb(210,0,34)" fg:x="319" fg:w="1"/><text x="20.9374%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.6874%" y="837" width="0.0649%" height="15" fill="rgb(225,217,29)" fg:x="319" fg:w="1"/><text x="20.9374%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.6874%" y="821" width="0.0649%" height="15" fill="rgb(216,191,38)" fg:x="319" fg:w="1"/><text x="20.9374%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.6874%" y="805" width="0.0649%" height="15" fill="rgb(232,140,52)" fg:x="319" fg:w="1"/><text x="20.9374%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="20.7523%" y="1029" width="0.0649%" height="15" fill="rgb(223,158,51)" fg:x="320" fg:w="1"/><text x="21.0023%" y="1039.50"></text></g><g><title>utxo::BlockHeader::delete::{{closure}} (1 samples, 0.06%)</title><rect x="20.7523%" y="1013" width="0.0649%" height="15" fill="rgb(235,29,51)" fg:x="320" fg:w="1"/><text x="21.0023%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u32&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="20.7523%" y="997" width="0.0649%" height="15" fill="rgb(215,181,18)" fg:x="320" fg:w="1"/><text x="21.0023%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="20.7523%" y="981" width="0.0649%" height="15" fill="rgb(227,125,34)" fg:x="320" fg:w="1"/><text x="21.0023%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="20.7523%" y="965" width="0.0649%" height="15" fill="rgb(230,197,49)" fg:x="320" fg:w="1"/><text x="21.0023%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="20.7523%" y="949" width="0.0649%" height="15" fill="rgb(239,141,16)" fg:x="320" fg:w="1"/><text x="21.0023%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="20.7523%" y="933" width="0.0649%" height="15" fill="rgb(225,105,43)" fg:x="320" fg:w="1"/><text x="21.0023%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="20.7523%" y="917" width="0.0649%" height="15" fill="rgb(214,131,14)" fg:x="320" fg:w="1"/><text x="21.0023%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="20.7523%" y="901" width="0.0649%" height="15" fill="rgb(229,177,11)" fg:x="320" fg:w="1"/><text x="21.0023%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="20.7523%" y="885" width="0.0649%" height="15" fill="rgb(231,180,14)" fg:x="320" fg:w="1"/><text x="21.0023%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="20.7523%" y="869" width="0.0649%" height="15" fill="rgb(232,88,2)" fg:x="320" fg:w="1"/><text x="21.0023%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="20.7523%" y="853" width="0.0649%" height="15" fill="rgb(205,220,8)" fg:x="320" fg:w="1"/><text x="21.0023%" y="863.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="20.7523%" y="837" width="0.0649%" height="15" fill="rgb(225,23,53)" fg:x="320" fg:w="1"/><text x="21.0023%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="20.7523%" y="821" width="0.0649%" height="15" fill="rgb(213,62,29)" fg:x="320" fg:w="1"/><text x="21.0023%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.7523%" y="805" width="0.0649%" height="15" fill="rgb(227,75,7)" fg:x="320" fg:w="1"/><text x="21.0023%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.7523%" y="789" width="0.0649%" height="15" fill="rgb(207,105,14)" fg:x="320" fg:w="1"/><text x="21.0023%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.7523%" y="773" width="0.0649%" height="15" fill="rgb(245,62,29)" fg:x="320" fg:w="1"/><text x="21.0023%" y="783.50"></text></g><g><title>utxo::BlockHeader::delete (2 samples, 0.13%)</title><rect x="20.7523%" y="1045" width="0.1297%" height="15" fill="rgb(236,202,4)" fg:x="320" fg:w="2"/><text x="21.0023%" y="1055.50"></text></g><g><title>redb::multimap_table::MultimapTable&lt;K,V&gt;::remove (1 samples, 0.06%)</title><rect x="20.8171%" y="1029" width="0.0649%" height="15" fill="rgb(250,67,1)" fg:x="321" fg:w="1"/><text x="21.0671%" y="1039.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="20.8171%" y="1013" width="0.0649%" height="15" fill="rgb(253,115,44)" fg:x="321" fg:w="1"/><text x="21.0671%" y="1023.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="20.8171%" y="997" width="0.0649%" height="15" fill="rgb(251,139,18)" fg:x="321" fg:w="1"/><text x="21.0671%" y="1007.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (1 samples, 0.06%)</title><rect x="20.8171%" y="981" width="0.0649%" height="15" fill="rgb(218,22,32)" fg:x="321" fg:w="1"/><text x="21.0671%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (1 samples, 0.06%)</title><rect x="20.8171%" y="965" width="0.0649%" height="15" fill="rgb(243,53,5)" fg:x="321" fg:w="1"/><text x="21.0671%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (1 samples, 0.06%)</title><rect x="20.8171%" y="949" width="0.0649%" height="15" fill="rgb(227,56,16)" fg:x="321" fg:w="1"/><text x="21.0671%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (1 samples, 0.06%)</title><rect x="20.8171%" y="933" width="0.0649%" height="15" fill="rgb(245,53,0)" fg:x="321" fg:w="1"/><text x="21.0671%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="20.8171%" y="917" width="0.0649%" height="15" fill="rgb(216,170,35)" fg:x="321" fg:w="1"/><text x="21.0671%" y="927.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="20.8171%" y="901" width="0.0649%" height="15" fill="rgb(211,200,8)" fg:x="321" fg:w="1"/><text x="21.0671%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="20.8171%" y="885" width="0.0649%" height="15" fill="rgb(228,204,44)" fg:x="321" fg:w="1"/><text x="21.0671%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.8171%" y="869" width="0.0649%" height="15" fill="rgb(214,121,17)" fg:x="321" fg:w="1"/><text x="21.0671%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.8171%" y="853" width="0.0649%" height="15" fill="rgb(233,64,38)" fg:x="321" fg:w="1"/><text x="21.0671%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.8171%" y="837" width="0.0649%" height="15" fill="rgb(253,54,19)" fg:x="321" fg:w="1"/><text x="21.0671%" y="847.50"></text></g><g><title>&lt;redb::multimap_table::MultimapTable&lt;K,V&gt; as redb::multimap_table::ReadableMultimapTable&lt;K,V&gt;&gt;::get (1 samples, 0.06%)</title><rect x="20.8820%" y="1013" width="0.0649%" height="15" fill="rgb(253,94,18)" fg:x="322" fg:w="1"/><text x="21.1320%" y="1023.50"></text></g><g><title>redb::multimap_table::DynamicCollection&lt;V&gt;::iter (1 samples, 0.06%)</title><rect x="20.8820%" y="997" width="0.0649%" height="15" fill="rgb(227,57,52)" fg:x="322" fg:w="1"/><text x="21.1320%" y="1007.50"></text></g><g><title>redb::multimap_table::DynamicCollection&lt;V&gt;::get_num_values (1 samples, 0.06%)</title><rect x="20.8820%" y="981" width="0.0649%" height="15" fill="rgb(230,228,50)" fg:x="322" fg:w="1"/><text x="21.1320%" y="991.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="20.8820%" y="965" width="0.0649%" height="15" fill="rgb(217,205,27)" fg:x="322" fg:w="1"/><text x="21.1320%" y="975.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="20.8820%" y="949" width="0.0649%" height="15" fill="rgb(252,71,50)" fg:x="322" fg:w="1"/><text x="21.1320%" y="959.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="20.8820%" y="933" width="0.0649%" height="15" fill="rgb(209,86,4)" fg:x="322" fg:w="1"/><text x="21.1320%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.8820%" y="917" width="0.0649%" height="15" fill="rgb(229,94,0)" fg:x="322" fg:w="1"/><text x="21.1320%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.8820%" y="901" width="0.0649%" height="15" fill="rgb(252,223,21)" fg:x="322" fg:w="1"/><text x="21.1320%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.8820%" y="885" width="0.0649%" height="15" fill="rgb(230,210,4)" fg:x="322" fg:w="1"/><text x="21.1320%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="20.9468%" y="917" width="0.0649%" height="15" fill="rgb(240,149,38)" fg:x="323" fg:w="1"/><text x="21.1968%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="20.9468%" y="901" width="0.0649%" height="15" fill="rgb(254,105,20)" fg:x="323" fg:w="1"/><text x="21.1968%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="20.9468%" y="885" width="0.0649%" height="15" fill="rgb(253,87,46)" fg:x="323" fg:w="1"/><text x="21.1968%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (2 samples, 0.13%)</title><rect x="20.9468%" y="933" width="0.1297%" height="15" fill="rgb(253,116,33)" fg:x="323" fg:w="2"/><text x="21.1968%" y="943.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="21.0117%" y="917" width="0.0649%" height="15" fill="rgb(229,198,5)" fg:x="324" fg:w="1"/><text x="21.2617%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="21.0117%" y="901" width="0.0649%" height="15" fill="rgb(242,38,37)" fg:x="324" fg:w="1"/><text x="21.2617%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="21.0117%" y="885" width="0.0649%" height="15" fill="rgb(242,69,53)" fg:x="324" fg:w="1"/><text x="21.2617%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="21.0117%" y="869" width="0.0649%" height="15" fill="rgb(249,80,16)" fg:x="324" fg:w="1"/><text x="21.2617%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="21.0117%" y="853" width="0.0649%" height="15" fill="rgb(206,128,11)" fg:x="324" fg:w="1"/><text x="21.2617%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="21.0117%" y="837" width="0.0649%" height="15" fill="rgb(212,35,20)" fg:x="324" fg:w="1"/><text x="21.2617%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.0117%" y="821" width="0.0649%" height="15" fill="rgb(236,79,13)" fg:x="324" fg:w="1"/><text x="21.2617%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.0117%" y="805" width="0.0649%" height="15" fill="rgb(233,123,3)" fg:x="324" fg:w="1"/><text x="21.2617%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.0117%" y="789" width="0.0649%" height="15" fill="rgb(214,93,52)" fg:x="324" fg:w="1"/><text x="21.2617%" y="799.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="21.0765%" y="917" width="0.0649%" height="15" fill="rgb(251,37,40)" fg:x="325" fg:w="1"/><text x="21.3265%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="21.0765%" y="901" width="0.0649%" height="15" fill="rgb(227,80,54)" fg:x="325" fg:w="1"/><text x="21.3265%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.06%)</title><rect x="21.0765%" y="885" width="0.0649%" height="15" fill="rgb(254,48,11)" fg:x="325" fg:w="1"/><text x="21.3265%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.0765%" y="869" width="0.0649%" height="15" fill="rgb(235,193,26)" fg:x="325" fg:w="1"/><text x="21.3265%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.0765%" y="853" width="0.0649%" height="15" fill="rgb(229,99,21)" fg:x="325" fg:w="1"/><text x="21.3265%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.0765%" y="837" width="0.0649%" height="15" fill="rgb(211,140,41)" fg:x="325" fg:w="1"/><text x="21.3265%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.26%)</title><rect x="20.9468%" y="1013" width="0.2594%" height="15" fill="rgb(240,227,30)" fg:x="323" fg:w="4"/><text x="21.1968%" y="1023.50"></text></g><g><title>utxo::Utxo::delete_many::{{closure}} (4 samples, 0.26%)</title><rect x="20.9468%" y="997" width="0.2594%" height="15" fill="rgb(215,224,45)" fg:x="323" fg:w="4"/><text x="21.1968%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt; (4 samples, 0.26%)</title><rect x="20.9468%" y="981" width="0.2594%" height="15" fill="rgb(206,123,31)" fg:x="323" fg:w="4"/><text x="21.1968%" y="991.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.26%)</title><rect x="20.9468%" y="965" width="0.2594%" height="15" fill="rgb(210,138,16)" fg:x="323" fg:w="4"/><text x="21.1968%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (4 samples, 0.26%)</title><rect x="20.9468%" y="949" width="0.2594%" height="15" fill="rgb(228,57,28)" fg:x="323" fg:w="4"/><text x="21.1968%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (2 samples, 0.13%)</title><rect x="21.0765%" y="933" width="0.1297%" height="15" fill="rgb(242,170,10)" fg:x="325" fg:w="2"/><text x="21.3265%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="21.1414%" y="917" width="0.0649%" height="15" fill="rgb(228,214,39)" fg:x="326" fg:w="1"/><text x="21.3914%" y="927.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="21.1414%" y="901" width="0.0649%" height="15" fill="rgb(218,179,33)" fg:x="326" fg:w="1"/><text x="21.3914%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="21.1414%" y="885" width="0.0649%" height="15" fill="rgb(235,193,39)" fg:x="326" fg:w="1"/><text x="21.3914%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="21.1414%" y="869" width="0.0649%" height="15" fill="rgb(219,221,36)" fg:x="326" fg:w="1"/><text x="21.3914%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.1414%" y="853" width="0.0649%" height="15" fill="rgb(248,218,19)" fg:x="326" fg:w="1"/><text x="21.3914%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.1414%" y="837" width="0.0649%" height="15" fill="rgb(205,50,9)" fg:x="326" fg:w="1"/><text x="21.3914%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.1414%" y="821" width="0.0649%" height="15" fill="rgb(238,81,28)" fg:x="326" fg:w="1"/><text x="21.3914%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="21.2062%" y="933" width="0.0649%" height="15" fill="rgb(235,110,19)" fg:x="327" fg:w="1"/><text x="21.4562%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.2062%" y="917" width="0.0649%" height="15" fill="rgb(214,7,14)" fg:x="327" fg:w="1"/><text x="21.4562%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.2062%" y="901" width="0.0649%" height="15" fill="rgb(211,77,3)" fg:x="327" fg:w="1"/><text x="21.4562%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.2062%" y="885" width="0.0649%" height="15" fill="rgb(229,5,9)" fg:x="327" fg:w="1"/><text x="21.4562%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="21.2062%" y="1013" width="0.1297%" height="15" fill="rgb(225,90,11)" fg:x="327" fg:w="2"/><text x="21.4562%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt; (2 samples, 0.13%)</title><rect x="21.2062%" y="997" width="0.1297%" height="15" fill="rgb(242,56,8)" fg:x="327" fg:w="2"/><text x="21.4562%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="21.2062%" y="981" width="0.1297%" height="15" fill="rgb(249,212,39)" fg:x="327" fg:w="2"/><text x="21.4562%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (2 samples, 0.13%)</title><rect x="21.2062%" y="965" width="0.1297%" height="15" fill="rgb(236,90,9)" fg:x="327" fg:w="2"/><text x="21.4562%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (2 samples, 0.13%)</title><rect x="21.2062%" y="949" width="0.1297%" height="15" fill="rgb(206,88,35)" fg:x="327" fg:w="2"/><text x="21.4562%" y="959.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="21.2711%" y="933" width="0.0649%" height="15" fill="rgb(205,126,30)" fg:x="328" fg:w="1"/><text x="21.5211%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="21.2711%" y="917" width="0.0649%" height="15" fill="rgb(230,176,12)" fg:x="328" fg:w="1"/><text x="21.5211%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="21.2711%" y="901" width="0.0649%" height="15" fill="rgb(243,19,9)" fg:x="328" fg:w="1"/><text x="21.5211%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="21.2711%" y="885" width="0.0649%" height="15" fill="rgb(245,171,17)" fg:x="328" fg:w="1"/><text x="21.5211%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.06%)</title><rect x="21.2711%" y="869" width="0.0649%" height="15" fill="rgb(227,52,21)" fg:x="328" fg:w="1"/><text x="21.5211%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.06%)</title><rect x="21.2711%" y="853" width="0.0649%" height="15" fill="rgb(238,69,14)" fg:x="328" fg:w="1"/><text x="21.5211%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.2711%" y="837" width="0.0649%" height="15" fill="rgb(241,156,39)" fg:x="328" fg:w="1"/><text x="21.5211%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.2711%" y="821" width="0.0649%" height="15" fill="rgb(212,227,28)" fg:x="328" fg:w="1"/><text x="21.5211%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.2711%" y="805" width="0.0649%" height="15" fill="rgb(209,118,27)" fg:x="328" fg:w="1"/><text x="21.5211%" y="815.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="21.3359%" y="933" width="0.0649%" height="15" fill="rgb(226,102,5)" fg:x="329" fg:w="1"/><text x="21.5859%" y="943.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="21.3359%" y="917" width="0.0649%" height="15" fill="rgb(223,34,3)" fg:x="329" fg:w="1"/><text x="21.5859%" y="927.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="21.3359%" y="901" width="0.0649%" height="15" fill="rgb(221,81,38)" fg:x="329" fg:w="1"/><text x="21.5859%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.3359%" y="885" width="0.0649%" height="15" fill="rgb(236,219,28)" fg:x="329" fg:w="1"/><text x="21.5859%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.3359%" y="869" width="0.0649%" height="15" fill="rgb(213,200,14)" fg:x="329" fg:w="1"/><text x="21.5859%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.3359%" y="853" width="0.0649%" height="15" fill="rgb(240,33,19)" fg:x="329" fg:w="1"/><text x="21.5859%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (2 samples, 0.13%)</title><rect x="21.3359%" y="949" width="0.1297%" height="15" fill="rgb(233,113,27)" fg:x="329" fg:w="2"/><text x="21.5859%" y="959.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="21.4008%" y="933" width="0.0649%" height="15" fill="rgb(220,221,18)" fg:x="330" fg:w="1"/><text x="21.6508%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="21.4008%" y="917" width="0.0649%" height="15" fill="rgb(238,92,8)" fg:x="330" fg:w="1"/><text x="21.6508%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="21.4008%" y="901" width="0.0649%" height="15" fill="rgb(222,164,16)" fg:x="330" fg:w="1"/><text x="21.6508%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="21.4008%" y="885" width="0.0649%" height="15" fill="rgb(241,119,3)" fg:x="330" fg:w="1"/><text x="21.6508%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="21.4008%" y="869" width="0.0649%" height="15" fill="rgb(241,44,8)" fg:x="330" fg:w="1"/><text x="21.6508%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="21.4008%" y="853" width="0.0649%" height="15" fill="rgb(230,36,40)" fg:x="330" fg:w="1"/><text x="21.6508%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.4008%" y="837" width="0.0649%" height="15" fill="rgb(243,16,36)" fg:x="330" fg:w="1"/><text x="21.6508%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.4008%" y="821" width="0.0649%" height="15" fill="rgb(231,4,26)" fg:x="330" fg:w="1"/><text x="21.6508%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.4008%" y="805" width="0.0649%" height="15" fill="rgb(240,9,31)" fg:x="330" fg:w="1"/><text x="21.6508%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="21.3359%" y="1013" width="0.1946%" height="15" fill="rgb(207,173,15)" fg:x="329" fg:w="3"/><text x="21.5859%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="21.3359%" y="997" width="0.1946%" height="15" fill="rgb(224,192,53)" fg:x="329" fg:w="3"/><text x="21.5859%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="21.3359%" y="981" width="0.1946%" height="15" fill="rgb(223,67,28)" fg:x="329" fg:w="3"/><text x="21.5859%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (3 samples, 0.19%)</title><rect x="21.3359%" y="965" width="0.1946%" height="15" fill="rgb(211,20,47)" fg:x="329" fg:w="3"/><text x="21.5859%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (1 samples, 0.06%)</title><rect x="21.4656%" y="949" width="0.0649%" height="15" fill="rgb(240,228,2)" fg:x="331" fg:w="1"/><text x="21.7156%" y="959.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="21.4656%" y="933" width="0.0649%" height="15" fill="rgb(248,151,12)" fg:x="331" fg:w="1"/><text x="21.7156%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="21.4656%" y="917" width="0.0649%" height="15" fill="rgb(244,8,39)" fg:x="331" fg:w="1"/><text x="21.7156%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="21.4656%" y="901" width="0.0649%" height="15" fill="rgb(222,26,8)" fg:x="331" fg:w="1"/><text x="21.7156%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.4656%" y="885" width="0.0649%" height="15" fill="rgb(213,106,44)" fg:x="331" fg:w="1"/><text x="21.7156%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.4656%" y="869" width="0.0649%" height="15" fill="rgb(214,129,20)" fg:x="331" fg:w="1"/><text x="21.7156%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.4656%" y="853" width="0.0649%" height="15" fill="rgb(212,32,13)" fg:x="331" fg:w="1"/><text x="21.7156%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="21.5305%" y="789" width="0.0649%" height="15" fill="rgb(208,168,33)" fg:x="332" fg:w="1"/><text x="21.7805%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="21.5305%" y="773" width="0.0649%" height="15" fill="rgb(231,207,8)" fg:x="332" fg:w="1"/><text x="21.7805%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="21.5305%" y="757" width="0.0649%" height="15" fill="rgb(235,219,23)" fg:x="332" fg:w="1"/><text x="21.7805%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="21.5305%" y="741" width="0.0649%" height="15" fill="rgb(226,216,26)" fg:x="332" fg:w="1"/><text x="21.7805%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.5305%" y="725" width="0.0649%" height="15" fill="rgb(239,137,16)" fg:x="332" fg:w="1"/><text x="21.7805%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.5305%" y="709" width="0.0649%" height="15" fill="rgb(207,12,36)" fg:x="332" fg:w="1"/><text x="21.7805%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.5305%" y="693" width="0.0649%" height="15" fill="rgb(210,214,24)" fg:x="332" fg:w="1"/><text x="21.7805%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::multimap_table::MultimapValue&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="1013" width="0.1297%" height="15" fill="rgb(206,56,30)" fg:x="332" fg:w="2"/><text x="21.7805%" y="1023.50"></text></g><g><title>&lt;redb::multimap_table::MultimapValue&lt;V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="21.5305%" y="997" width="0.1297%" height="15" fill="rgb(228,143,26)" fg:x="332" fg:w="2"/><text x="21.7805%" y="1007.50"></text></g><g><title>core::mem::drop (2 samples, 0.13%)</title><rect x="21.5305%" y="981" width="0.1297%" height="15" fill="rgb(216,218,46)" fg:x="332" fg:w="2"/><text x="21.7805%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::multimap_table::ValueIterState&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="965" width="0.1297%" height="15" fill="rgb(206,6,19)" fg:x="332" fg:w="2"/><text x="21.7805%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::multimap_table::ValueIterState&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="949" width="0.1297%" height="15" fill="rgb(239,177,51)" fg:x="332" fg:w="2"/><text x="21.7805%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,()&gt;&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="933" width="0.1297%" height="15" fill="rgb(216,55,25)" fg:x="332" fg:w="2"/><text x="21.7805%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_iters::RangeIterState&gt;&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="917" width="0.1297%" height="15" fill="rgb(231,163,29)" fg:x="332" fg:w="2"/><text x="21.7805%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::RangeIterState&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="901" width="0.1297%" height="15" fill="rgb(232,149,50)" fg:x="332" fg:w="2"/><text x="21.7805%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="21.5305%" y="885" width="0.1297%" height="15" fill="rgb(223,142,48)" fg:x="332" fg:w="2"/><text x="21.7805%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="21.5305%" y="869" width="0.1297%" height="15" fill="rgb(245,83,23)" fg:x="332" fg:w="2"/><text x="21.7805%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="21.5305%" y="853" width="0.1297%" height="15" fill="rgb(224,63,2)" fg:x="332" fg:w="2"/><text x="21.7805%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="21.5305%" y="837" width="0.1297%" height="15" fill="rgb(218,65,53)" fg:x="332" fg:w="2"/><text x="21.7805%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="21.5305%" y="821" width="0.1297%" height="15" fill="rgb(221,84,29)" fg:x="332" fg:w="2"/><text x="21.7805%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="21.5305%" y="805" width="0.1297%" height="15" fill="rgb(234,0,32)" fg:x="332" fg:w="2"/><text x="21.7805%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="21.5953%" y="789" width="0.0649%" height="15" fill="rgb(206,20,16)" fg:x="333" fg:w="1"/><text x="21.8453%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="21.5953%" y="773" width="0.0649%" height="15" fill="rgb(244,172,18)" fg:x="333" fg:w="1"/><text x="21.8453%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="21.5953%" y="757" width="0.0649%" height="15" fill="rgb(254,133,1)" fg:x="333" fg:w="1"/><text x="21.8453%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="21.5953%" y="741" width="0.0649%" height="15" fill="rgb(222,206,41)" fg:x="333" fg:w="1"/><text x="21.8453%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="21.5953%" y="725" width="0.0649%" height="15" fill="rgb(212,3,42)" fg:x="333" fg:w="1"/><text x="21.8453%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="21.5953%" y="709" width="0.0649%" height="15" fill="rgb(241,11,4)" fg:x="333" fg:w="1"/><text x="21.8453%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="21.5953%" y="693" width="0.0649%" height="15" fill="rgb(205,19,26)" fg:x="333" fg:w="1"/><text x="21.8453%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="21.5953%" y="677" width="0.0649%" height="15" fill="rgb(210,179,32)" fg:x="333" fg:w="1"/><text x="21.8453%" y="687.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="21.5953%" y="661" width="0.0649%" height="15" fill="rgb(227,116,49)" fg:x="333" fg:w="1"/><text x="21.8453%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="21.5953%" y="645" width="0.0649%" height="15" fill="rgb(211,146,6)" fg:x="333" fg:w="1"/><text x="21.8453%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="21.5953%" y="629" width="0.0649%" height="15" fill="rgb(219,44,39)" fg:x="333" fg:w="1"/><text x="21.8453%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="21.5953%" y="613" width="0.0649%" height="15" fill="rgb(234,128,11)" fg:x="333" fg:w="1"/><text x="21.8453%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.5953%" y="597" width="0.0649%" height="15" fill="rgb(220,183,53)" fg:x="333" fg:w="1"/><text x="21.8453%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.5953%" y="581" width="0.0649%" height="15" fill="rgb(213,219,32)" fg:x="333" fg:w="1"/><text x="21.8453%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.5953%" y="565" width="0.0649%" height="15" fill="rgb(232,156,16)" fg:x="333" fg:w="1"/><text x="21.8453%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.6602%" y="965" width="0.0649%" height="15" fill="rgb(246,135,34)" fg:x="334" fg:w="1"/><text x="21.9102%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.6602%" y="949" width="0.0649%" height="15" fill="rgb(241,99,0)" fg:x="334" fg:w="1"/><text x="21.9102%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.6602%" y="933" width="0.0649%" height="15" fill="rgb(222,103,45)" fg:x="334" fg:w="1"/><text x="21.9102%" y="943.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;usize&gt; for isize&gt;::try_from (1 samples, 0.06%)</title><rect x="21.7250%" y="965" width="0.0649%" height="15" fill="rgb(212,57,4)" fg:x="335" fg:w="1"/><text x="21.9750%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.7250%" y="949" width="0.0649%" height="15" fill="rgb(215,68,47)" fg:x="335" fg:w="1"/><text x="21.9750%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.7250%" y="933" width="0.0649%" height="15" fill="rgb(230,84,2)" fg:x="335" fg:w="1"/><text x="21.9750%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.7250%" y="917" width="0.0649%" height="15" fill="rgb(220,102,14)" fg:x="335" fg:w="1"/><text x="21.9750%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (1 samples, 0.06%)</title><rect x="21.7899%" y="965" width="0.0649%" height="15" fill="rgb(240,10,32)" fg:x="336" fg:w="1"/><text x="22.0399%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.7899%" y="949" width="0.0649%" height="15" fill="rgb(215,47,27)" fg:x="336" fg:w="1"/><text x="22.0399%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.7899%" y="933" width="0.0649%" height="15" fill="rgb(233,188,43)" fg:x="336" fg:w="1"/><text x="22.0399%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.7899%" y="917" width="0.0649%" height="15" fill="rgb(253,190,1)" fg:x="336" fg:w="1"/><text x="22.0399%" y="927.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="21.8547%" y="949" width="0.0649%" height="15" fill="rgb(206,114,52)" fg:x="337" fg:w="1"/><text x="22.1047%" y="959.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;isize&gt; for u32&gt;::try_from (1 samples, 0.06%)</title><rect x="21.8547%" y="933" width="0.0649%" height="15" fill="rgb(233,120,37)" fg:x="337" fg:w="1"/><text x="22.1047%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.8547%" y="917" width="0.0649%" height="15" fill="rgb(214,52,39)" fg:x="337" fg:w="1"/><text x="22.1047%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.8547%" y="901" width="0.0649%" height="15" fill="rgb(223,80,29)" fg:x="337" fg:w="1"/><text x="22.1047%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.8547%" y="885" width="0.0649%" height="15" fill="rgb(230,101,40)" fg:x="337" fg:w="1"/><text x="22.1047%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (5 samples, 0.32%)</title><rect x="21.6602%" y="1013" width="0.3243%" height="15" fill="rgb(219,211,8)" fg:x="334" fg:w="5"/><text x="21.9102%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.32%)</title><rect x="21.6602%" y="997" width="0.3243%" height="15" fill="rgb(252,126,28)" fg:x="334" fg:w="5"/><text x="21.9102%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (5 samples, 0.32%)</title><rect x="21.6602%" y="981" width="0.3243%" height="15" fill="rgb(215,56,38)" fg:x="334" fg:w="5"/><text x="21.9102%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (2 samples, 0.13%)</title><rect x="21.8547%" y="965" width="0.1297%" height="15" fill="rgb(249,55,44)" fg:x="337" fg:w="2"/><text x="22.1047%" y="975.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="21.9196%" y="949" width="0.0649%" height="15" fill="rgb(220,221,32)" fg:x="338" fg:w="1"/><text x="22.1696%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.9196%" y="933" width="0.0649%" height="15" fill="rgb(212,216,41)" fg:x="338" fg:w="1"/><text x="22.1696%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.9196%" y="917" width="0.0649%" height="15" fill="rgb(228,213,43)" fg:x="338" fg:w="1"/><text x="22.1696%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.9196%" y="901" width="0.0649%" height="15" fill="rgb(211,31,26)" fg:x="338" fg:w="1"/><text x="22.1696%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="21.9844%" y="933" width="0.0649%" height="15" fill="rgb(229,202,19)" fg:x="339" fg:w="1"/><text x="22.2344%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="21.9844%" y="917" width="0.0649%" height="15" fill="rgb(229,105,46)" fg:x="339" fg:w="1"/><text x="22.2344%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="21.9844%" y="901" width="0.0649%" height="15" fill="rgb(235,108,1)" fg:x="339" fg:w="1"/><text x="22.2344%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="22.0493%" y="917" width="0.0649%" height="15" fill="rgb(245,111,35)" fg:x="340" fg:w="1"/><text x="22.2993%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="22.0493%" y="901" width="0.0649%" height="15" fill="rgb(219,185,31)" fg:x="340" fg:w="1"/><text x="22.2993%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="22.0493%" y="885" width="0.0649%" height="15" fill="rgb(214,4,43)" fg:x="340" fg:w="1"/><text x="22.2993%" y="895.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="22.0493%" y="869" width="0.0649%" height="15" fill="rgb(235,227,40)" fg:x="340" fg:w="1"/><text x="22.2993%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.0493%" y="853" width="0.0649%" height="15" fill="rgb(230,88,30)" fg:x="340" fg:w="1"/><text x="22.2993%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.0493%" y="837" width="0.0649%" height="15" fill="rgb(216,217,1)" fg:x="340" fg:w="1"/><text x="22.2993%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.0493%" y="821" width="0.0649%" height="15" fill="rgb(248,139,50)" fg:x="340" fg:w="1"/><text x="22.2993%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="22.1141%" y="917" width="0.1946%" height="15" fill="rgb(233,1,21)" fg:x="341" fg:w="3"/><text x="22.3641%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="22.1141%" y="901" width="0.1946%" height="15" fill="rgb(215,183,12)" fg:x="341" fg:w="3"/><text x="22.3641%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="22.1141%" y="885" width="0.1946%" height="15" fill="rgb(229,104,42)" fg:x="341" fg:w="3"/><text x="22.3641%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt;&gt; (6 samples, 0.39%)</title><rect x="21.9844%" y="997" width="0.3891%" height="15" fill="rgb(243,34,48)" fg:x="339" fg:w="6"/><text x="22.2344%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt; (6 samples, 0.39%)</title><rect x="21.9844%" y="981" width="0.3891%" height="15" fill="rgb(239,11,44)" fg:x="339" fg:w="6"/><text x="22.2344%" y="991.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.39%)</title><rect x="21.9844%" y="965" width="0.3891%" height="15" fill="rgb(231,98,35)" fg:x="339" fg:w="6"/><text x="22.2344%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (6 samples, 0.39%)</title><rect x="21.9844%" y="949" width="0.3891%" height="15" fill="rgb(233,28,25)" fg:x="339" fg:w="6"/><text x="22.2344%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (5 samples, 0.32%)</title><rect x="22.0493%" y="933" width="0.3243%" height="15" fill="rgb(234,123,11)" fg:x="340" fg:w="5"/><text x="22.2993%" y="943.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="22.3087%" y="917" width="0.0649%" height="15" fill="rgb(220,69,3)" fg:x="344" fg:w="1"/><text x="22.5587%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="22.3087%" y="901" width="0.0649%" height="15" fill="rgb(214,64,36)" fg:x="344" fg:w="1"/><text x="22.5587%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="22.3087%" y="885" width="0.0649%" height="15" fill="rgb(211,138,32)" fg:x="344" fg:w="1"/><text x="22.5587%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="22.3087%" y="869" width="0.0649%" height="15" fill="rgb(213,118,47)" fg:x="344" fg:w="1"/><text x="22.5587%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="22.3087%" y="853" width="0.0649%" height="15" fill="rgb(243,124,49)" fg:x="344" fg:w="1"/><text x="22.5587%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="22.3087%" y="837" width="0.0649%" height="15" fill="rgb(221,30,28)" fg:x="344" fg:w="1"/><text x="22.5587%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.3087%" y="821" width="0.0649%" height="15" fill="rgb(246,37,13)" fg:x="344" fg:w="1"/><text x="22.5587%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.3087%" y="805" width="0.0649%" height="15" fill="rgb(249,66,14)" fg:x="344" fg:w="1"/><text x="22.5587%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.3087%" y="789" width="0.0649%" height="15" fill="rgb(213,166,5)" fg:x="344" fg:w="1"/><text x="22.5587%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="22.3735%" y="997" width="0.0649%" height="15" fill="rgb(221,66,24)" fg:x="345" fg:w="1"/><text x="22.6235%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="22.3735%" y="981" width="0.0649%" height="15" fill="rgb(210,132,17)" fg:x="345" fg:w="1"/><text x="22.6235%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="22.3735%" y="965" width="0.0649%" height="15" fill="rgb(243,202,5)" fg:x="345" fg:w="1"/><text x="22.6235%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="22.3735%" y="949" width="0.0649%" height="15" fill="rgb(233,70,48)" fg:x="345" fg:w="1"/><text x="22.6235%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="22.3735%" y="933" width="0.0649%" height="15" fill="rgb(238,41,26)" fg:x="345" fg:w="1"/><text x="22.6235%" y="943.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="22.3735%" y="917" width="0.0649%" height="15" fill="rgb(241,19,31)" fg:x="345" fg:w="1"/><text x="22.6235%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="22.3735%" y="901" width="0.0649%" height="15" fill="rgb(214,76,10)" fg:x="345" fg:w="1"/><text x="22.6235%" y="911.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="22.3735%" y="885" width="0.0649%" height="15" fill="rgb(254,202,22)" fg:x="345" fg:w="1"/><text x="22.6235%" y="895.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="22.3735%" y="869" width="0.0649%" height="15" fill="rgb(214,72,24)" fg:x="345" fg:w="1"/><text x="22.6235%" y="879.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="22.3735%" y="853" width="0.0649%" height="15" fill="rgb(221,92,46)" fg:x="345" fg:w="1"/><text x="22.6235%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="22.3735%" y="837" width="0.0649%" height="15" fill="rgb(246,13,50)" fg:x="345" fg:w="1"/><text x="22.6235%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.3735%" y="821" width="0.0649%" height="15" fill="rgb(240,165,38)" fg:x="345" fg:w="1"/><text x="22.6235%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.3735%" y="805" width="0.0649%" height="15" fill="rgb(241,24,51)" fg:x="345" fg:w="1"/><text x="22.6235%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.3735%" y="789" width="0.0649%" height="15" fill="rgb(227,51,44)" fg:x="345" fg:w="1"/><text x="22.6235%" y="799.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="22.4384%" y="917" width="0.0649%" height="15" fill="rgb(231,121,3)" fg:x="346" fg:w="1"/><text x="22.6884%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="22.4384%" y="901" width="0.0649%" height="15" fill="rgb(245,3,41)" fg:x="346" fg:w="1"/><text x="22.6884%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="885" width="0.0649%" height="15" fill="rgb(214,13,26)" fg:x="346" fg:w="1"/><text x="22.6884%" y="895.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="869" width="0.0649%" height="15" fill="rgb(252,75,11)" fg:x="346" fg:w="1"/><text x="22.6884%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="22.4384%" y="853" width="0.0649%" height="15" fill="rgb(218,226,17)" fg:x="346" fg:w="1"/><text x="22.6884%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="837" width="0.0649%" height="15" fill="rgb(248,89,38)" fg:x="346" fg:w="1"/><text x="22.6884%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="821" width="0.0649%" height="15" fill="rgb(237,73,46)" fg:x="346" fg:w="1"/><text x="22.6884%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.4384%" y="805" width="0.0649%" height="15" fill="rgb(242,78,33)" fg:x="346" fg:w="1"/><text x="22.6884%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.4384%" y="789" width="0.0649%" height="15" fill="rgb(235,60,3)" fg:x="346" fg:w="1"/><text x="22.6884%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.4384%" y="773" width="0.0649%" height="15" fill="rgb(216,172,19)" fg:x="346" fg:w="1"/><text x="22.6884%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="22.4384%" y="757" width="0.0649%" height="15" fill="rgb(227,6,42)" fg:x="346" fg:w="1"/><text x="22.6884%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="22.4384%" y="741" width="0.0649%" height="15" fill="rgb(223,207,42)" fg:x="346" fg:w="1"/><text x="22.6884%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="725" width="0.0649%" height="15" fill="rgb(246,138,30)" fg:x="346" fg:w="1"/><text x="22.6884%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="709" width="0.0649%" height="15" fill="rgb(251,199,47)" fg:x="346" fg:w="1"/><text x="22.6884%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.4384%" y="693" width="0.0649%" height="15" fill="rgb(228,218,44)" fg:x="346" fg:w="1"/><text x="22.6884%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.4384%" y="677" width="0.0649%" height="15" fill="rgb(220,68,6)" fg:x="346" fg:w="1"/><text x="22.6884%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.4384%" y="661" width="0.0649%" height="15" fill="rgb(240,60,26)" fg:x="346" fg:w="1"/><text x="22.6884%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="22.4384%" y="645" width="0.0649%" height="15" fill="rgb(211,200,19)" fg:x="346" fg:w="1"/><text x="22.6884%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="22.4384%" y="629" width="0.0649%" height="15" fill="rgb(242,145,30)" fg:x="346" fg:w="1"/><text x="22.6884%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="613" width="0.0649%" height="15" fill="rgb(225,64,13)" fg:x="346" fg:w="1"/><text x="22.6884%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.4384%" y="597" width="0.0649%" height="15" fill="rgb(218,103,35)" fg:x="346" fg:w="1"/><text x="22.6884%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.4384%" y="581" width="0.0649%" height="15" fill="rgb(216,93,46)" fg:x="346" fg:w="1"/><text x="22.6884%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.4384%" y="565" width="0.0649%" height="15" fill="rgb(225,159,27)" fg:x="346" fg:w="1"/><text x="22.6884%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.4384%" y="549" width="0.0649%" height="15" fill="rgb(225,204,11)" fg:x="346" fg:w="1"/><text x="22.6884%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.4384%" y="533" width="0.0649%" height="15" fill="rgb(205,56,4)" fg:x="346" fg:w="1"/><text x="22.6884%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.4384%" y="517" width="0.0649%" height="15" fill="rgb(206,6,35)" fg:x="346" fg:w="1"/><text x="22.6884%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.4384%" y="501" width="0.0649%" height="15" fill="rgb(247,73,52)" fg:x="346" fg:w="1"/><text x="22.6884%" y="511.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="22.4384%" y="997" width="0.1297%" height="15" fill="rgb(246,97,4)" fg:x="346" fg:w="2"/><text x="22.6884%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="22.4384%" y="981" width="0.1297%" height="15" fill="rgb(212,37,15)" fg:x="346" fg:w="2"/><text x="22.6884%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="22.4384%" y="965" width="0.1297%" height="15" fill="rgb(208,130,40)" fg:x="346" fg:w="2"/><text x="22.6884%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="22.4384%" y="949" width="0.1297%" height="15" fill="rgb(236,55,29)" fg:x="346" fg:w="2"/><text x="22.6884%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="22.4384%" y="933" width="0.1297%" height="15" fill="rgb(209,156,45)" fg:x="346" fg:w="2"/><text x="22.6884%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="22.5032%" y="917" width="0.0649%" height="15" fill="rgb(249,107,4)" fg:x="347" fg:w="1"/><text x="22.7532%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="22.5032%" y="901" width="0.0649%" height="15" fill="rgb(227,7,13)" fg:x="347" fg:w="1"/><text x="22.7532%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="22.5032%" y="885" width="0.0649%" height="15" fill="rgb(250,129,14)" fg:x="347" fg:w="1"/><text x="22.7532%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.5032%" y="869" width="0.0649%" height="15" fill="rgb(229,92,13)" fg:x="347" fg:w="1"/><text x="22.7532%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.5032%" y="853" width="0.0649%" height="15" fill="rgb(245,98,39)" fg:x="347" fg:w="1"/><text x="22.7532%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.5032%" y="837" width="0.0649%" height="15" fill="rgb(234,135,48)" fg:x="347" fg:w="1"/><text x="22.7532%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.5681%" y="949" width="0.0649%" height="15" fill="rgb(230,98,28)" fg:x="348" fg:w="1"/><text x="22.8181%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.5681%" y="933" width="0.0649%" height="15" fill="rgb(223,121,0)" fg:x="348" fg:w="1"/><text x="22.8181%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.5681%" y="917" width="0.0649%" height="15" fill="rgb(234,173,33)" fg:x="348" fg:w="1"/><text x="22.8181%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="22.6329%" y="949" width="0.0649%" height="15" fill="rgb(245,47,8)" fg:x="349" fg:w="1"/><text x="22.8829%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="22.6329%" y="933" width="0.0649%" height="15" fill="rgb(205,17,20)" fg:x="349" fg:w="1"/><text x="22.8829%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="22.6329%" y="917" width="0.0649%" height="15" fill="rgb(232,151,16)" fg:x="349" fg:w="1"/><text x="22.8829%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="901" width="0.0649%" height="15" fill="rgb(208,30,32)" fg:x="349" fg:w="1"/><text x="22.8829%" y="911.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="885" width="0.0649%" height="15" fill="rgb(254,26,3)" fg:x="349" fg:w="1"/><text x="22.8829%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="22.6329%" y="869" width="0.0649%" height="15" fill="rgb(240,177,30)" fg:x="349" fg:w="1"/><text x="22.8829%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="853" width="0.0649%" height="15" fill="rgb(248,76,44)" fg:x="349" fg:w="1"/><text x="22.8829%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="837" width="0.0649%" height="15" fill="rgb(241,186,54)" fg:x="349" fg:w="1"/><text x="22.8829%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.6329%" y="821" width="0.0649%" height="15" fill="rgb(249,171,29)" fg:x="349" fg:w="1"/><text x="22.8829%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.6329%" y="805" width="0.0649%" height="15" fill="rgb(237,151,44)" fg:x="349" fg:w="1"/><text x="22.8829%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.6329%" y="789" width="0.0649%" height="15" fill="rgb(228,174,30)" fg:x="349" fg:w="1"/><text x="22.8829%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="22.6329%" y="773" width="0.0649%" height="15" fill="rgb(252,14,37)" fg:x="349" fg:w="1"/><text x="22.8829%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="22.6329%" y="757" width="0.0649%" height="15" fill="rgb(207,111,40)" fg:x="349" fg:w="1"/><text x="22.8829%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="741" width="0.0649%" height="15" fill="rgb(248,171,54)" fg:x="349" fg:w="1"/><text x="22.8829%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="725" width="0.0649%" height="15" fill="rgb(211,127,2)" fg:x="349" fg:w="1"/><text x="22.8829%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.6329%" y="709" width="0.0649%" height="15" fill="rgb(236,87,47)" fg:x="349" fg:w="1"/><text x="22.8829%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.6329%" y="693" width="0.0649%" height="15" fill="rgb(223,190,45)" fg:x="349" fg:w="1"/><text x="22.8829%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.6329%" y="677" width="0.0649%" height="15" fill="rgb(215,5,16)" fg:x="349" fg:w="1"/><text x="22.8829%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="22.6329%" y="661" width="0.0649%" height="15" fill="rgb(252,82,33)" fg:x="349" fg:w="1"/><text x="22.8829%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="22.6329%" y="645" width="0.0649%" height="15" fill="rgb(247,213,44)" fg:x="349" fg:w="1"/><text x="22.8829%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="629" width="0.0649%" height="15" fill="rgb(205,196,44)" fg:x="349" fg:w="1"/><text x="22.8829%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.6329%" y="613" width="0.0649%" height="15" fill="rgb(237,96,54)" fg:x="349" fg:w="1"/><text x="22.8829%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.6329%" y="597" width="0.0649%" height="15" fill="rgb(230,113,34)" fg:x="349" fg:w="1"/><text x="22.8829%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.6329%" y="581" width="0.0649%" height="15" fill="rgb(221,224,12)" fg:x="349" fg:w="1"/><text x="22.8829%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.6329%" y="565" width="0.0649%" height="15" fill="rgb(219,112,44)" fg:x="349" fg:w="1"/><text x="22.8829%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.6329%" y="549" width="0.0649%" height="15" fill="rgb(210,31,13)" fg:x="349" fg:w="1"/><text x="22.8829%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.6329%" y="533" width="0.0649%" height="15" fill="rgb(230,25,16)" fg:x="349" fg:w="1"/><text x="22.8829%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.6329%" y="517" width="0.0649%" height="15" fill="rgb(246,108,53)" fg:x="349" fg:w="1"/><text x="22.8829%" y="527.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (1 samples, 0.06%)</title><rect x="22.6978%" y="949" width="0.0649%" height="15" fill="rgb(241,172,50)" fg:x="350" fg:w="1"/><text x="22.9478%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (1 samples, 0.06%)</title><rect x="22.6978%" y="933" width="0.0649%" height="15" fill="rgb(235,141,10)" fg:x="350" fg:w="1"/><text x="22.9478%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (1 samples, 0.06%)</title><rect x="22.6978%" y="917" width="0.0649%" height="15" fill="rgb(220,174,43)" fg:x="350" fg:w="1"/><text x="22.9478%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper_retry (1 samples, 0.06%)</title><rect x="22.6978%" y="901" width="0.0649%" height="15" fill="rgb(215,181,40)" fg:x="350" fg:w="1"/><text x="22.9478%" y="911.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc (1 samples, 0.06%)</title><rect x="22.6978%" y="885" width="0.0649%" height="15" fill="rgb(230,97,2)" fg:x="350" fg:w="1"/><text x="22.9478%" y="895.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc_inner (1 samples, 0.06%)</title><rect x="22.6978%" y="869" width="0.0649%" height="15" fill="rgb(211,25,27)" fg:x="350" fg:w="1"/><text x="22.9478%" y="879.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::alloc (1 samples, 0.06%)</title><rect x="22.6978%" y="853" width="0.0649%" height="15" fill="rgb(230,87,26)" fg:x="350" fg:w="1"/><text x="22.9478%" y="863.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::find_first_unset (1 samples, 0.06%)</title><rect x="22.6978%" y="837" width="0.0649%" height="15" fill="rgb(227,160,17)" fg:x="350" fg:w="1"/><text x="22.9478%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.6978%" y="821" width="0.0649%" height="15" fill="rgb(244,85,34)" fg:x="350" fg:w="1"/><text x="22.9478%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.6978%" y="805" width="0.0649%" height="15" fill="rgb(207,70,0)" fg:x="350" fg:w="1"/><text x="22.9478%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.6978%" y="789" width="0.0649%" height="15" fill="rgb(223,129,7)" fg:x="350" fg:w="1"/><text x="22.9478%" y="799.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (4 samples, 0.26%)</title><rect x="22.5681%" y="997" width="0.2594%" height="15" fill="rgb(246,105,7)" fg:x="348" fg:w="4"/><text x="22.8181%" y="1007.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (4 samples, 0.26%)</title><rect x="22.5681%" y="981" width="0.2594%" height="15" fill="rgb(215,154,42)" fg:x="348" fg:w="4"/><text x="22.8181%" y="991.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (4 samples, 0.26%)</title><rect x="22.5681%" y="965" width="0.2594%" height="15" fill="rgb(220,215,30)" fg:x="348" fg:w="4"/><text x="22.8181%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::sufficient_insert_inplace_space (1 samples, 0.06%)</title><rect x="22.7626%" y="949" width="0.0649%" height="15" fill="rgb(228,81,51)" fg:x="351" fg:w="1"/><text x="23.0126%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_pairs (1 samples, 0.06%)</title><rect x="22.7626%" y="933" width="0.0649%" height="15" fill="rgb(247,71,54)" fg:x="351" fg:w="1"/><text x="23.0126%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_keys (1 samples, 0.06%)</title><rect x="22.7626%" y="917" width="0.0649%" height="15" fill="rgb(234,176,34)" fg:x="351" fg:w="1"/><text x="23.0126%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="22.7626%" y="901" width="0.0649%" height="15" fill="rgb(241,103,54)" fg:x="351" fg:w="1"/><text x="23.0126%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.7626%" y="885" width="0.0649%" height="15" fill="rgb(228,22,34)" fg:x="351" fg:w="1"/><text x="23.0126%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.7626%" y="869" width="0.0649%" height="15" fill="rgb(241,179,48)" fg:x="351" fg:w="1"/><text x="23.0126%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.7626%" y="853" width="0.0649%" height="15" fill="rgb(235,167,37)" fg:x="351" fg:w="1"/><text x="23.0126%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="22.8275%" y="933" width="0.0649%" height="15" fill="rgb(213,109,30)" fg:x="352" fg:w="1"/><text x="23.0775%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="22.8275%" y="917" width="0.0649%" height="15" fill="rgb(222,172,16)" fg:x="352" fg:w="1"/><text x="23.0775%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="22.8275%" y="901" width="0.0649%" height="15" fill="rgb(233,192,5)" fg:x="352" fg:w="1"/><text x="23.0775%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="22.8275%" y="885" width="0.0649%" height="15" fill="rgb(247,189,41)" fg:x="352" fg:w="1"/><text x="23.0775%" y="895.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="22.8275%" y="869" width="0.0649%" height="15" fill="rgb(218,134,47)" fg:x="352" fg:w="1"/><text x="23.0775%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="22.8275%" y="853" width="0.0649%" height="15" fill="rgb(216,29,3)" fg:x="352" fg:w="1"/><text x="23.0775%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.8275%" y="837" width="0.0649%" height="15" fill="rgb(246,140,12)" fg:x="352" fg:w="1"/><text x="23.0775%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.8275%" y="821" width="0.0649%" height="15" fill="rgb(230,136,11)" fg:x="352" fg:w="1"/><text x="23.0775%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="22.8275%" y="805" width="0.0649%" height="15" fill="rgb(247,22,47)" fg:x="352" fg:w="1"/><text x="23.0775%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="22.8275%" y="789" width="0.0649%" height="15" fill="rgb(218,84,22)" fg:x="352" fg:w="1"/><text x="23.0775%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="22.8275%" y="773" width="0.0649%" height="15" fill="rgb(216,87,39)" fg:x="352" fg:w="1"/><text x="23.0775%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="22.8275%" y="757" width="0.0649%" height="15" fill="rgb(221,178,8)" fg:x="352" fg:w="1"/><text x="23.0775%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="22.8275%" y="741" width="0.0649%" height="15" fill="rgb(230,42,11)" fg:x="352" fg:w="1"/><text x="23.0775%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.8275%" y="725" width="0.0649%" height="15" fill="rgb(237,229,4)" fg:x="352" fg:w="1"/><text x="23.0775%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="22.8275%" y="709" width="0.0649%" height="15" fill="rgb(222,31,33)" fg:x="352" fg:w="1"/><text x="23.0775%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="22.8275%" y="693" width="0.0649%" height="15" fill="rgb(210,17,39)" fg:x="352" fg:w="1"/><text x="23.0775%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="22.8275%" y="677" width="0.0649%" height="15" fill="rgb(244,93,20)" fg:x="352" fg:w="1"/><text x="23.0775%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="22.8275%" y="661" width="0.0649%" height="15" fill="rgb(210,40,47)" fg:x="352" fg:w="1"/><text x="23.0775%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="22.8275%" y="645" width="0.0649%" height="15" fill="rgb(239,211,47)" fg:x="352" fg:w="1"/><text x="23.0775%" y="655.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="22.8275%" y="629" width="0.0649%" height="15" fill="rgb(251,223,49)" fg:x="352" fg:w="1"/><text x="23.0775%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="22.8275%" y="613" width="0.0649%" height="15" fill="rgb(221,149,5)" fg:x="352" fg:w="1"/><text x="23.0775%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="22.8275%" y="597" width="0.0649%" height="15" fill="rgb(219,224,51)" fg:x="352" fg:w="1"/><text x="23.0775%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.8275%" y="581" width="0.0649%" height="15" fill="rgb(223,7,8)" fg:x="352" fg:w="1"/><text x="23.0775%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.8275%" y="565" width="0.0649%" height="15" fill="rgb(241,217,22)" fg:x="352" fg:w="1"/><text x="23.0775%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.8275%" y="549" width="0.0649%" height="15" fill="rgb(248,209,0)" fg:x="352" fg:w="1"/><text x="23.0775%" y="559.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="22.8923%" y="885" width="0.0649%" height="15" fill="rgb(217,205,4)" fg:x="353" fg:w="1"/><text x="23.1423%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.8923%" y="869" width="0.0649%" height="15" fill="rgb(228,124,39)" fg:x="353" fg:w="1"/><text x="23.1423%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.8923%" y="853" width="0.0649%" height="15" fill="rgb(250,116,42)" fg:x="353" fg:w="1"/><text x="23.1423%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.8923%" y="837" width="0.0649%" height="15" fill="rgb(223,202,9)" fg:x="353" fg:w="1"/><text x="23.1423%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="22.9572%" y="885" width="0.0649%" height="15" fill="rgb(242,222,40)" fg:x="354" fg:w="1"/><text x="23.2072%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="22.9572%" y="869" width="0.0649%" height="15" fill="rgb(229,99,46)" fg:x="354" fg:w="1"/><text x="23.2072%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="22.9572%" y="853" width="0.0649%" height="15" fill="rgb(225,56,46)" fg:x="354" fg:w="1"/><text x="23.2072%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="22.9572%" y="837" width="0.0649%" height="15" fill="rgb(227,94,5)" fg:x="354" fg:w="1"/><text x="23.2072%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="22.9572%" y="821" width="0.0649%" height="15" fill="rgb(205,112,38)" fg:x="354" fg:w="1"/><text x="23.2072%" y="831.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="23.0220%" y="837" width="0.0649%" height="15" fill="rgb(231,133,46)" fg:x="355" fg:w="1"/><text x="23.2720%" y="847.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="23.0220%" y="821" width="0.0649%" height="15" fill="rgb(217,16,9)" fg:x="355" fg:w="1"/><text x="23.2720%" y="831.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="23.0220%" y="805" width="0.0649%" height="15" fill="rgb(249,173,9)" fg:x="355" fg:w="1"/><text x="23.2720%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.0220%" y="789" width="0.0649%" height="15" fill="rgb(205,163,53)" fg:x="355" fg:w="1"/><text x="23.2720%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.0220%" y="773" width="0.0649%" height="15" fill="rgb(217,54,41)" fg:x="355" fg:w="1"/><text x="23.2720%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.0220%" y="757" width="0.0649%" height="15" fill="rgb(228,216,12)" fg:x="355" fg:w="1"/><text x="23.2720%" y="767.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (4 samples, 0.26%)</title><rect x="22.8923%" y="901" width="0.2594%" height="15" fill="rgb(244,228,15)" fg:x="353" fg:w="4"/><text x="23.1423%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (2 samples, 0.13%)</title><rect x="23.0220%" y="885" width="0.1297%" height="15" fill="rgb(221,176,53)" fg:x="355" fg:w="2"/><text x="23.2720%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (2 samples, 0.13%)</title><rect x="23.0220%" y="869" width="0.1297%" height="15" fill="rgb(205,94,34)" fg:x="355" fg:w="2"/><text x="23.2720%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="23.0220%" y="853" width="0.1297%" height="15" fill="rgb(213,110,48)" fg:x="355" fg:w="2"/><text x="23.2720%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="23.0869%" y="837" width="0.0649%" height="15" fill="rgb(236,142,28)" fg:x="356" fg:w="1"/><text x="23.3369%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.0869%" y="821" width="0.0649%" height="15" fill="rgb(225,135,29)" fg:x="356" fg:w="1"/><text x="23.3369%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.0869%" y="805" width="0.0649%" height="15" fill="rgb(252,45,31)" fg:x="356" fg:w="1"/><text x="23.3369%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.0869%" y="789" width="0.0649%" height="15" fill="rgb(211,187,50)" fg:x="356" fg:w="1"/><text x="23.3369%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_pairs (1 samples, 0.06%)</title><rect x="23.1518%" y="901" width="0.0649%" height="15" fill="rgb(229,109,7)" fg:x="357" fg:w="1"/><text x="23.4018%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_values (1 samples, 0.06%)</title><rect x="23.1518%" y="885" width="0.0649%" height="15" fill="rgb(251,131,51)" fg:x="357" fg:w="1"/><text x="23.4018%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.1518%" y="869" width="0.0649%" height="15" fill="rgb(251,180,35)" fg:x="357" fg:w="1"/><text x="23.4018%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.1518%" y="853" width="0.0649%" height="15" fill="rgb(211,46,32)" fg:x="357" fg:w="1"/><text x="23.4018%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.1518%" y="837" width="0.0649%" height="15" fill="rgb(248,123,17)" fg:x="357" fg:w="1"/><text x="23.4018%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.2166%" y="725" width="0.0649%" height="15" fill="rgb(227,141,18)" fg:x="358" fg:w="1"/><text x="23.4666%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.2166%" y="709" width="0.0649%" height="15" fill="rgb(216,102,9)" fg:x="358" fg:w="1"/><text x="23.4666%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.2166%" y="693" width="0.0649%" height="15" fill="rgb(253,47,13)" fg:x="358" fg:w="1"/><text x="23.4666%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="23.2815%" y="549" width="0.0649%" height="15" fill="rgb(226,93,23)" fg:x="359" fg:w="1"/><text x="23.5315%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="23.2815%" y="533" width="0.0649%" height="15" fill="rgb(247,104,17)" fg:x="359" fg:w="1"/><text x="23.5315%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="23.2815%" y="517" width="0.0649%" height="15" fill="rgb(233,203,26)" fg:x="359" fg:w="1"/><text x="23.5315%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="23.2815%" y="501" width="0.0649%" height="15" fill="rgb(244,98,49)" fg:x="359" fg:w="1"/><text x="23.5315%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="23.2815%" y="485" width="0.0649%" height="15" fill="rgb(235,134,22)" fg:x="359" fg:w="1"/><text x="23.5315%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="23.2815%" y="469" width="0.0649%" height="15" fill="rgb(221,70,32)" fg:x="359" fg:w="1"/><text x="23.5315%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="23.2815%" y="453" width="0.0649%" height="15" fill="rgb(238,15,50)" fg:x="359" fg:w="1"/><text x="23.5315%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="23.2815%" y="437" width="0.0649%" height="15" fill="rgb(215,221,48)" fg:x="359" fg:w="1"/><text x="23.5315%" y="447.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="23.2815%" y="421" width="0.0649%" height="15" fill="rgb(236,73,3)" fg:x="359" fg:w="1"/><text x="23.5315%" y="431.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="23.2815%" y="405" width="0.0649%" height="15" fill="rgb(250,107,11)" fg:x="359" fg:w="1"/><text x="23.5315%" y="415.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="23.2815%" y="389" width="0.0649%" height="15" fill="rgb(242,39,14)" fg:x="359" fg:w="1"/><text x="23.5315%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="23.2815%" y="373" width="0.0649%" height="15" fill="rgb(248,164,37)" fg:x="359" fg:w="1"/><text x="23.5315%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="23.2815%" y="357" width="0.0649%" height="15" fill="rgb(217,60,12)" fg:x="359" fg:w="1"/><text x="23.5315%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact::{{closure}} (1 samples, 0.06%)</title><rect x="23.2815%" y="341" width="0.0649%" height="15" fill="rgb(240,125,29)" fg:x="359" fg:w="1"/><text x="23.5315%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.2815%" y="325" width="0.0649%" height="15" fill="rgb(208,207,28)" fg:x="359" fg:w="1"/><text x="23.5315%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.2815%" y="309" width="0.0649%" height="15" fill="rgb(209,159,27)" fg:x="359" fg:w="1"/><text x="23.5315%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.2815%" y="293" width="0.0649%" height="15" fill="rgb(251,176,53)" fg:x="359" fg:w="1"/><text x="23.5315%" y="303.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="23.2166%" y="805" width="0.1946%" height="15" fill="rgb(211,85,7)" fg:x="358" fg:w="3"/><text x="23.4666%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="23.2166%" y="789" width="0.1946%" height="15" fill="rgb(216,64,54)" fg:x="358" fg:w="3"/><text x="23.4666%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="23.2166%" y="773" width="0.1946%" height="15" fill="rgb(217,54,24)" fg:x="358" fg:w="3"/><text x="23.4666%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="23.2166%" y="757" width="0.1946%" height="15" fill="rgb(208,206,53)" fg:x="358" fg:w="3"/><text x="23.4666%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="23.2166%" y="741" width="0.1946%" height="15" fill="rgb(251,74,39)" fg:x="358" fg:w="3"/><text x="23.4666%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="23.2815%" y="725" width="0.1297%" height="15" fill="rgb(226,47,5)" fg:x="359" fg:w="2"/><text x="23.5315%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="23.2815%" y="709" width="0.1297%" height="15" fill="rgb(234,111,33)" fg:x="359" fg:w="2"/><text x="23.5315%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="23.2815%" y="693" width="0.1297%" height="15" fill="rgb(251,14,10)" fg:x="359" fg:w="2"/><text x="23.5315%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="23.2815%" y="677" width="0.1297%" height="15" fill="rgb(232,43,0)" fg:x="359" fg:w="2"/><text x="23.5315%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="23.2815%" y="661" width="0.1297%" height="15" fill="rgb(222,68,43)" fg:x="359" fg:w="2"/><text x="23.5315%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="23.2815%" y="645" width="0.1297%" height="15" fill="rgb(217,24,23)" fg:x="359" fg:w="2"/><text x="23.5315%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="23.2815%" y="629" width="0.1297%" height="15" fill="rgb(229,209,14)" fg:x="359" fg:w="2"/><text x="23.5315%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="23.2815%" y="613" width="0.1297%" height="15" fill="rgb(250,149,48)" fg:x="359" fg:w="2"/><text x="23.5315%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="23.2815%" y="597" width="0.1297%" height="15" fill="rgb(210,120,37)" fg:x="359" fg:w="2"/><text x="23.5315%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="23.2815%" y="581" width="0.1297%" height="15" fill="rgb(210,21,8)" fg:x="359" fg:w="2"/><text x="23.5315%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="23.2815%" y="565" width="0.1297%" height="15" fill="rgb(243,145,7)" fg:x="359" fg:w="2"/><text x="23.5315%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.3463%" y="549" width="0.0649%" height="15" fill="rgb(238,178,32)" fg:x="360" fg:w="1"/><text x="23.5963%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.3463%" y="533" width="0.0649%" height="15" fill="rgb(222,4,10)" fg:x="360" fg:w="1"/><text x="23.5963%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.3463%" y="517" width="0.0649%" height="15" fill="rgb(239,7,37)" fg:x="360" fg:w="1"/><text x="23.5963%" y="527.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="23.2166%" y="901" width="0.2594%" height="15" fill="rgb(215,31,37)" fg:x="358" fg:w="4"/><text x="23.4666%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="23.2166%" y="885" width="0.2594%" height="15" fill="rgb(224,83,33)" fg:x="358" fg:w="4"/><text x="23.4666%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="23.2166%" y="869" width="0.2594%" height="15" fill="rgb(239,55,3)" fg:x="358" fg:w="4"/><text x="23.4666%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="23.2166%" y="853" width="0.2594%" height="15" fill="rgb(247,92,11)" fg:x="358" fg:w="4"/><text x="23.4666%" y="863.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="23.2166%" y="837" width="0.2594%" height="15" fill="rgb(239,200,7)" fg:x="358" fg:w="4"/><text x="23.4666%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="23.2166%" y="821" width="0.2594%" height="15" fill="rgb(227,115,8)" fg:x="358" fg:w="4"/><text x="23.4666%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="23.4112%" y="805" width="0.0649%" height="15" fill="rgb(215,189,27)" fg:x="361" fg:w="1"/><text x="23.6612%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.4112%" y="789" width="0.0649%" height="15" fill="rgb(251,216,39)" fg:x="361" fg:w="1"/><text x="23.6612%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.4112%" y="773" width="0.0649%" height="15" fill="rgb(207,29,47)" fg:x="361" fg:w="1"/><text x="23.6612%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.4112%" y="757" width="0.0649%" height="15" fill="rgb(210,71,34)" fg:x="361" fg:w="1"/><text x="23.6612%" y="767.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="23.4760%" y="885" width="0.0649%" height="15" fill="rgb(253,217,51)" fg:x="362" fg:w="1"/><text x="23.7260%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="23.4760%" y="869" width="0.0649%" height="15" fill="rgb(222,117,46)" fg:x="362" fg:w="1"/><text x="23.7260%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="23.4760%" y="853" width="0.0649%" height="15" fill="rgb(226,132,6)" fg:x="362" fg:w="1"/><text x="23.7260%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="23.4760%" y="837" width="0.0649%" height="15" fill="rgb(254,145,51)" fg:x="362" fg:w="1"/><text x="23.7260%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.4760%" y="821" width="0.0649%" height="15" fill="rgb(231,199,27)" fg:x="362" fg:w="1"/><text x="23.7260%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.4760%" y="805" width="0.0649%" height="15" fill="rgb(245,158,14)" fg:x="362" fg:w="1"/><text x="23.7260%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.4760%" y="789" width="0.0649%" height="15" fill="rgb(240,113,14)" fg:x="362" fg:w="1"/><text x="23.7260%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::new (1 samples, 0.06%)</title><rect x="23.5409%" y="885" width="0.0649%" height="15" fill="rgb(210,20,13)" fg:x="363" fg:w="1"/><text x="23.7909%" y="895.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="23.5409%" y="869" width="0.0649%" height="15" fill="rgb(241,144,13)" fg:x="363" fg:w="1"/><text x="23.7909%" y="879.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.06%)</title><rect x="23.5409%" y="853" width="0.0649%" height="15" fill="rgb(235,43,34)" fg:x="363" fg:w="1"/><text x="23.7909%" y="863.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.06%)</title><rect x="23.5409%" y="837" width="0.0649%" height="15" fill="rgb(208,36,20)" fg:x="363" fg:w="1"/><text x="23.7909%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.5409%" y="821" width="0.0649%" height="15" fill="rgb(239,204,10)" fg:x="363" fg:w="1"/><text x="23.7909%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.5409%" y="805" width="0.0649%" height="15" fill="rgb(217,84,43)" fg:x="363" fg:w="1"/><text x="23.7909%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.5409%" y="789" width="0.0649%" height="15" fill="rgb(241,170,50)" fg:x="363" fg:w="1"/><text x="23.7909%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (4 samples, 0.26%)</title><rect x="23.4760%" y="901" width="0.2594%" height="15" fill="rgb(226,205,29)" fg:x="362" fg:w="4"/><text x="23.7260%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (2 samples, 0.13%)</title><rect x="23.6057%" y="885" width="0.1297%" height="15" fill="rgb(233,113,1)" fg:x="364" fg:w="2"/><text x="23.8557%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (2 samples, 0.13%)</title><rect x="23.6057%" y="869" width="0.1297%" height="15" fill="rgb(253,98,13)" fg:x="364" fg:w="2"/><text x="23.8557%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (2 samples, 0.13%)</title><rect x="23.6057%" y="853" width="0.1297%" height="15" fill="rgb(211,115,12)" fg:x="364" fg:w="2"/><text x="23.8557%" y="863.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (2 samples, 0.13%)</title><rect x="23.6057%" y="837" width="0.1297%" height="15" fill="rgb(208,12,16)" fg:x="364" fg:w="2"/><text x="23.8557%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="23.6057%" y="821" width="0.1297%" height="15" fill="rgb(237,193,54)" fg:x="364" fg:w="2"/><text x="23.8557%" y="831.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (2 samples, 0.13%)</title><rect x="23.6057%" y="805" width="0.1297%" height="15" fill="rgb(243,22,42)" fg:x="364" fg:w="2"/><text x="23.8557%" y="815.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.13%)</title><rect x="23.6057%" y="789" width="0.1297%" height="15" fill="rgb(233,151,36)" fg:x="364" fg:w="2"/><text x="23.8557%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="23.6057%" y="773" width="0.1297%" height="15" fill="rgb(237,57,45)" fg:x="364" fg:w="2"/><text x="23.8557%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="23.6057%" y="757" width="0.1297%" height="15" fill="rgb(221,88,17)" fg:x="364" fg:w="2"/><text x="23.8557%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="23.6057%" y="741" width="0.1297%" height="15" fill="rgb(230,79,15)" fg:x="364" fg:w="2"/><text x="23.8557%" y="751.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (14 samples, 0.91%)</title><rect x="22.8923%" y="933" width="0.9079%" height="15" fill="rgb(213,57,13)" fg:x="353" fg:w="14"/><text x="23.1423%" y="943.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (14 samples, 0.91%)</title><rect x="22.8923%" y="917" width="0.9079%" height="15" fill="rgb(222,116,39)" fg:x="353" fg:w="14"/><text x="23.1423%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free (1 samples, 0.06%)</title><rect x="23.7354%" y="901" width="0.0649%" height="15" fill="rgb(245,107,2)" fg:x="366" fg:w="1"/><text x="23.9854%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free_helper (1 samples, 0.06%)</title><rect x="23.7354%" y="885" width="0.0649%" height="15" fill="rgb(238,1,10)" fg:x="366" fg:w="1"/><text x="23.9854%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::cancel_pending_write (1 samples, 0.06%)</title><rect x="23.7354%" y="869" width="0.0649%" height="15" fill="rgb(249,4,48)" fg:x="366" fg:w="1"/><text x="23.9854%" y="879.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::remove (1 samples, 0.06%)</title><rect x="23.7354%" y="853" width="0.0649%" height="15" fill="rgb(223,151,18)" fg:x="366" fg:w="1"/><text x="23.9854%" y="863.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="23.7354%" y="837" width="0.0649%" height="15" fill="rgb(227,65,43)" fg:x="366" fg:w="1"/><text x="23.9854%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="23.7354%" y="821" width="0.0649%" height="15" fill="rgb(218,40,45)" fg:x="366" fg:w="1"/><text x="23.9854%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="23.7354%" y="805" width="0.0649%" height="15" fill="rgb(252,121,31)" fg:x="366" fg:w="1"/><text x="23.9854%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="23.7354%" y="789" width="0.0649%" height="15" fill="rgb(219,158,43)" fg:x="366" fg:w="1"/><text x="23.9854%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="23.7354%" y="773" width="0.0649%" height="15" fill="rgb(231,162,42)" fg:x="366" fg:w="1"/><text x="23.9854%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="23.7354%" y="757" width="0.0649%" height="15" fill="rgb(217,179,25)" fg:x="366" fg:w="1"/><text x="23.9854%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="23.7354%" y="741" width="0.0649%" height="15" fill="rgb(206,212,31)" fg:x="366" fg:w="1"/><text x="23.9854%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.7354%" y="725" width="0.0649%" height="15" fill="rgb(235,144,12)" fg:x="366" fg:w="1"/><text x="23.9854%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.7354%" y="709" width="0.0649%" height="15" fill="rgb(213,51,10)" fg:x="366" fg:w="1"/><text x="23.9854%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.7354%" y="693" width="0.0649%" height="15" fill="rgb(231,145,14)" fg:x="366" fg:w="1"/><text x="23.9854%" y="703.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete (16 samples, 1.04%)</title><rect x="22.8275%" y="981" width="1.0376%" height="15" fill="rgb(235,15,28)" fg:x="352" fg:w="16"/><text x="23.0775%" y="991.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (16 samples, 1.04%)</title><rect x="22.8275%" y="965" width="1.0376%" height="15" fill="rgb(237,206,10)" fg:x="352" fg:w="16"/><text x="23.0775%" y="975.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_branch_helper (16 samples, 1.04%)</title><rect x="22.8275%" y="949" width="1.0376%" height="15" fill="rgb(236,227,27)" fg:x="352" fg:w="16"/><text x="23.0775%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="23.8003%" y="933" width="0.0649%" height="15" fill="rgb(246,83,35)" fg:x="367" fg:w="1"/><text x="24.0503%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="23.8003%" y="917" width="0.0649%" height="15" fill="rgb(220,136,24)" fg:x="367" fg:w="1"/><text x="24.0503%" y="927.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="23.8003%" y="901" width="0.0649%" height="15" fill="rgb(217,3,25)" fg:x="367" fg:w="1"/><text x="24.0503%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="23.8003%" y="885" width="0.0649%" height="15" fill="rgb(239,24,14)" fg:x="367" fg:w="1"/><text x="24.0503%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="23.8003%" y="869" width="0.0649%" height="15" fill="rgb(244,16,53)" fg:x="367" fg:w="1"/><text x="24.0503%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.8003%" y="853" width="0.0649%" height="15" fill="rgb(208,175,44)" fg:x="367" fg:w="1"/><text x="24.0503%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.8003%" y="837" width="0.0649%" height="15" fill="rgb(252,18,48)" fg:x="367" fg:w="1"/><text x="24.0503%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.8003%" y="821" width="0.0649%" height="15" fill="rgb(234,199,32)" fg:x="367" fg:w="1"/><text x="24.0503%" y="831.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::remove (17 samples, 1.10%)</title><rect x="22.8275%" y="997" width="1.1025%" height="15" fill="rgb(225,77,54)" fg:x="352" fg:w="17"/><text x="23.0775%" y="1007.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="23.8651%" y="981" width="0.0649%" height="15" fill="rgb(225,42,25)" fg:x="368" fg:w="1"/><text x="24.1151%" y="991.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="23.8651%" y="965" width="0.0649%" height="15" fill="rgb(242,227,46)" fg:x="368" fg:w="1"/><text x="24.1151%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="23.8651%" y="949" width="0.0649%" height="15" fill="rgb(246,197,35)" fg:x="368" fg:w="1"/><text x="24.1151%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="23.8651%" y="933" width="0.0649%" height="15" fill="rgb(215,159,26)" fg:x="368" fg:w="1"/><text x="24.1151%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.8651%" y="917" width="0.0649%" height="15" fill="rgb(212,194,50)" fg:x="368" fg:w="1"/><text x="24.1151%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.8651%" y="901" width="0.0649%" height="15" fill="rgb(246,132,1)" fg:x="368" fg:w="1"/><text x="24.1151%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.8651%" y="885" width="0.0649%" height="15" fill="rgb(217,71,7)" fg:x="368" fg:w="1"/><text x="24.1151%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (1 samples, 0.06%)</title><rect x="23.9300%" y="997" width="0.0649%" height="15" fill="rgb(252,59,32)" fg:x="369" fg:w="1"/><text x="24.1800%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="23.9300%" y="981" width="0.0649%" height="15" fill="rgb(253,204,25)" fg:x="369" fg:w="1"/><text x="24.1800%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="23.9300%" y="965" width="0.0649%" height="15" fill="rgb(232,21,16)" fg:x="369" fg:w="1"/><text x="24.1800%" y="975.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="23.9300%" y="949" width="0.0649%" height="15" fill="rgb(248,90,29)" fg:x="369" fg:w="1"/><text x="24.1800%" y="959.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="23.9300%" y="933" width="0.0649%" height="15" fill="rgb(249,223,7)" fg:x="369" fg:w="1"/><text x="24.1800%" y="943.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="23.9300%" y="917" width="0.0649%" height="15" fill="rgb(231,119,42)" fg:x="369" fg:w="1"/><text x="24.1800%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T (1 samples, 0.06%)</title><rect x="23.9300%" y="901" width="0.0649%" height="15" fill="rgb(215,41,35)" fg:x="369" fg:w="1"/><text x="24.1800%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="23.9300%" y="885" width="0.0649%" height="15" fill="rgb(220,44,45)" fg:x="369" fg:w="1"/><text x="24.1800%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.06%)</title><rect x="23.9300%" y="869" width="0.0649%" height="15" fill="rgb(253,197,36)" fg:x="369" fg:w="1"/><text x="24.1800%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.9300%" y="853" width="0.0649%" height="15" fill="rgb(245,225,54)" fg:x="369" fg:w="1"/><text x="24.1800%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.9300%" y="837" width="0.0649%" height="15" fill="rgb(239,94,37)" fg:x="369" fg:w="1"/><text x="24.1800%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.9300%" y="821" width="0.0649%" height="15" fill="rgb(242,217,10)" fg:x="369" fg:w="1"/><text x="24.1800%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="23.9948%" y="997" width="0.0649%" height="15" fill="rgb(250,193,7)" fg:x="370" fg:w="1"/><text x="24.2448%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="23.9948%" y="981" width="0.0649%" height="15" fill="rgb(230,104,19)" fg:x="370" fg:w="1"/><text x="24.2448%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="23.9948%" y="965" width="0.0649%" height="15" fill="rgb(230,181,4)" fg:x="370" fg:w="1"/><text x="24.2448%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="23.9948%" y="949" width="0.0649%" height="15" fill="rgb(216,219,49)" fg:x="370" fg:w="1"/><text x="24.2448%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="23.9948%" y="933" width="0.0649%" height="15" fill="rgb(254,144,0)" fg:x="370" fg:w="1"/><text x="24.2448%" y="943.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="23.9948%" y="917" width="0.0649%" height="15" fill="rgb(205,209,38)" fg:x="370" fg:w="1"/><text x="24.2448%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="23.9948%" y="901" width="0.0649%" height="15" fill="rgb(240,21,42)" fg:x="370" fg:w="1"/><text x="24.2448%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="23.9948%" y="885" width="0.0649%" height="15" fill="rgb(241,132,3)" fg:x="370" fg:w="1"/><text x="24.2448%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="23.9948%" y="869" width="0.0649%" height="15" fill="rgb(225,14,2)" fg:x="370" fg:w="1"/><text x="24.2448%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="23.9948%" y="853" width="0.0649%" height="15" fill="rgb(210,141,35)" fg:x="370" fg:w="1"/><text x="24.2448%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="23.9948%" y="837" width="0.0649%" height="15" fill="rgb(251,14,44)" fg:x="370" fg:w="1"/><text x="24.2448%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="23.9948%" y="821" width="0.0649%" height="15" fill="rgb(247,48,18)" fg:x="370" fg:w="1"/><text x="24.2448%" y="831.50"></text></g><g><title>redb::multimap_table::MultimapTable&lt;K,V&gt;::remove (33 samples, 2.14%)</title><rect x="21.9844%" y="1013" width="2.1401%" height="15" fill="rgb(225,0,40)" fg:x="339" fg:w="33"/><text x="22.2344%" y="1023.50">r..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="24.0597%" y="997" width="0.0649%" height="15" fill="rgb(221,31,33)" fg:x="371" fg:w="1"/><text x="24.3097%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="24.0597%" y="981" width="0.0649%" height="15" fill="rgb(237,42,40)" fg:x="371" fg:w="1"/><text x="24.3097%" y="991.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="24.0597%" y="965" width="0.0649%" height="15" fill="rgb(233,51,29)" fg:x="371" fg:w="1"/><text x="24.3097%" y="975.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="24.0597%" y="949" width="0.0649%" height="15" fill="rgb(226,58,20)" fg:x="371" fg:w="1"/><text x="24.3097%" y="959.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="24.0597%" y="933" width="0.0649%" height="15" fill="rgb(208,98,7)" fg:x="371" fg:w="1"/><text x="24.3097%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="24.0597%" y="917" width="0.0649%" height="15" fill="rgb(228,143,44)" fg:x="371" fg:w="1"/><text x="24.3097%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="24.0597%" y="901" width="0.0649%" height="15" fill="rgb(246,55,38)" fg:x="371" fg:w="1"/><text x="24.3097%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="24.0597%" y="885" width="0.0649%" height="15" fill="rgb(247,87,16)" fg:x="371" fg:w="1"/><text x="24.3097%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="24.0597%" y="869" width="0.0649%" height="15" fill="rgb(234,129,42)" fg:x="371" fg:w="1"/><text x="24.3097%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="24.0597%" y="853" width="0.0649%" height="15" fill="rgb(220,82,16)" fg:x="371" fg:w="1"/><text x="24.3097%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="24.0597%" y="837" width="0.0649%" height="15" fill="rgb(211,88,4)" fg:x="371" fg:w="1"/><text x="24.3097%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="24.0597%" y="821" width="0.0649%" height="15" fill="rgb(248,151,21)" fg:x="371" fg:w="1"/><text x="24.3097%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="24.0597%" y="805" width="0.0649%" height="15" fill="rgb(238,163,6)" fg:x="371" fg:w="1"/><text x="24.3097%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="24.0597%" y="789" width="0.0649%" height="15" fill="rgb(209,183,11)" fg:x="371" fg:w="1"/><text x="24.3097%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.0597%" y="773" width="0.0649%" height="15" fill="rgb(219,37,20)" fg:x="371" fg:w="1"/><text x="24.3097%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.0597%" y="757" width="0.0649%" height="15" fill="rgb(210,158,4)" fg:x="371" fg:w="1"/><text x="24.3097%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.0597%" y="741" width="0.0649%" height="15" fill="rgb(221,167,53)" fg:x="371" fg:w="1"/><text x="24.3097%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="24.1245%" y="981" width="0.0649%" height="15" fill="rgb(237,151,45)" fg:x="372" fg:w="1"/><text x="24.3745%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="24.1245%" y="965" width="0.0649%" height="15" fill="rgb(231,39,3)" fg:x="372" fg:w="1"/><text x="24.3745%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="24.1245%" y="949" width="0.0649%" height="15" fill="rgb(212,167,28)" fg:x="372" fg:w="1"/><text x="24.3745%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.1245%" y="933" width="0.0649%" height="15" fill="rgb(232,178,8)" fg:x="372" fg:w="1"/><text x="24.3745%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.1245%" y="917" width="0.0649%" height="15" fill="rgb(225,151,20)" fg:x="372" fg:w="1"/><text x="24.3745%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.1245%" y="901" width="0.0649%" height="15" fill="rgb(238,3,37)" fg:x="372" fg:w="1"/><text x="24.3745%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="24.1894%" y="965" width="0.0649%" height="15" fill="rgb(251,147,42)" fg:x="373" fg:w="1"/><text x="24.4394%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="24.1894%" y="949" width="0.0649%" height="15" fill="rgb(208,173,10)" fg:x="373" fg:w="1"/><text x="24.4394%" y="959.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="24.1894%" y="933" width="0.0649%" height="15" fill="rgb(246,225,4)" fg:x="373" fg:w="1"/><text x="24.4394%" y="943.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="24.1894%" y="917" width="0.0649%" height="15" fill="rgb(248,102,6)" fg:x="373" fg:w="1"/><text x="24.4394%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="24.1894%" y="901" width="0.0649%" height="15" fill="rgb(232,6,21)" fg:x="373" fg:w="1"/><text x="24.4394%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="24.1894%" y="885" width="0.0649%" height="15" fill="rgb(221,179,22)" fg:x="373" fg:w="1"/><text x="24.4394%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="24.1894%" y="869" width="0.0649%" height="15" fill="rgb(252,50,20)" fg:x="373" fg:w="1"/><text x="24.4394%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="24.1894%" y="853" width="0.0649%" height="15" fill="rgb(222,56,38)" fg:x="373" fg:w="1"/><text x="24.4394%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="24.1894%" y="837" width="0.0649%" height="15" fill="rgb(206,193,29)" fg:x="373" fg:w="1"/><text x="24.4394%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="24.1894%" y="821" width="0.0649%" height="15" fill="rgb(239,192,45)" fg:x="373" fg:w="1"/><text x="24.4394%" y="831.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="24.1894%" y="805" width="0.0649%" height="15" fill="rgb(254,18,36)" fg:x="373" fg:w="1"/><text x="24.4394%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="24.1894%" y="789" width="0.0649%" height="15" fill="rgb(221,127,11)" fg:x="373" fg:w="1"/><text x="24.4394%" y="799.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="24.1894%" y="773" width="0.0649%" height="15" fill="rgb(234,146,35)" fg:x="373" fg:w="1"/><text x="24.4394%" y="783.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="24.1894%" y="757" width="0.0649%" height="15" fill="rgb(254,201,37)" fg:x="373" fg:w="1"/><text x="24.4394%" y="767.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="24.1894%" y="741" width="0.0649%" height="15" fill="rgb(211,202,23)" fg:x="373" fg:w="1"/><text x="24.4394%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="24.1894%" y="725" width="0.0649%" height="15" fill="rgb(237,91,2)" fg:x="373" fg:w="1"/><text x="24.4394%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.1894%" y="709" width="0.0649%" height="15" fill="rgb(226,228,36)" fg:x="373" fg:w="1"/><text x="24.4394%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.1894%" y="693" width="0.0649%" height="15" fill="rgb(213,63,50)" fg:x="373" fg:w="1"/><text x="24.4394%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.1894%" y="677" width="0.0649%" height="15" fill="rgb(235,194,19)" fg:x="373" fg:w="1"/><text x="24.4394%" y="687.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (1 samples, 0.06%)</title><rect x="24.2542%" y="965" width="0.0649%" height="15" fill="rgb(207,204,18)" fg:x="374" fg:w="1"/><text x="24.5042%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (1 samples, 0.06%)</title><rect x="24.2542%" y="949" width="0.0649%" height="15" fill="rgb(248,8,7)" fg:x="374" fg:w="1"/><text x="24.5042%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (1 samples, 0.06%)</title><rect x="24.2542%" y="933" width="0.0649%" height="15" fill="rgb(223,145,47)" fg:x="374" fg:w="1"/><text x="24.5042%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="24.2542%" y="917" width="0.0649%" height="15" fill="rgb(228,84,11)" fg:x="374" fg:w="1"/><text x="24.5042%" y="927.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="24.2542%" y="901" width="0.0649%" height="15" fill="rgb(218,76,45)" fg:x="374" fg:w="1"/><text x="24.5042%" y="911.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="24.2542%" y="885" width="0.0649%" height="15" fill="rgb(223,80,15)" fg:x="374" fg:w="1"/><text x="24.5042%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.2542%" y="869" width="0.0649%" height="15" fill="rgb(219,218,33)" fg:x="374" fg:w="1"/><text x="24.5042%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.2542%" y="853" width="0.0649%" height="15" fill="rgb(208,51,11)" fg:x="374" fg:w="1"/><text x="24.5042%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.2542%" y="837" width="0.0649%" height="15" fill="rgb(229,165,39)" fg:x="374" fg:w="1"/><text x="24.5042%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::push_all_except (1 samples, 0.06%)</title><rect x="24.3191%" y="965" width="0.0649%" height="15" fill="rgb(241,100,24)" fg:x="375" fg:w="1"/><text x="24.5691%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (1 samples, 0.06%)</title><rect x="24.3191%" y="949" width="0.0649%" height="15" fill="rgb(228,14,23)" fg:x="375" fg:w="1"/><text x="24.5691%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="24.3191%" y="933" width="0.0649%" height="15" fill="rgb(247,116,52)" fg:x="375" fg:w="1"/><text x="24.5691%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="24.3191%" y="917" width="0.0649%" height="15" fill="rgb(216,149,33)" fg:x="375" fg:w="1"/><text x="24.5691%" y="927.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="24.3191%" y="901" width="0.0649%" height="15" fill="rgb(238,142,29)" fg:x="375" fg:w="1"/><text x="24.5691%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="24.3191%" y="885" width="0.0649%" height="15" fill="rgb(224,83,40)" fg:x="375" fg:w="1"/><text x="24.5691%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="24.3191%" y="869" width="0.0649%" height="15" fill="rgb(234,165,11)" fg:x="375" fg:w="1"/><text x="24.5691%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.3191%" y="853" width="0.0649%" height="15" fill="rgb(215,96,23)" fg:x="375" fg:w="1"/><text x="24.5691%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.3191%" y="837" width="0.0649%" height="15" fill="rgb(233,179,26)" fg:x="375" fg:w="1"/><text x="24.5691%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.3191%" y="821" width="0.0649%" height="15" fill="rgb(225,129,33)" fg:x="375" fg:w="1"/><text x="24.5691%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="24.3839%" y="709" width="0.0649%" height="15" fill="rgb(237,49,13)" fg:x="376" fg:w="1"/><text x="24.6339%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="24.3839%" y="693" width="0.0649%" height="15" fill="rgb(211,3,31)" fg:x="376" fg:w="1"/><text x="24.6339%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="24.3839%" y="677" width="0.0649%" height="15" fill="rgb(216,152,19)" fg:x="376" fg:w="1"/><text x="24.6339%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="24.3839%" y="661" width="0.0649%" height="15" fill="rgb(251,121,35)" fg:x="376" fg:w="1"/><text x="24.6339%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="24.3839%" y="645" width="0.0649%" height="15" fill="rgb(210,217,47)" fg:x="376" fg:w="1"/><text x="24.6339%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="24.3839%" y="629" width="0.0649%" height="15" fill="rgb(244,116,22)" fg:x="376" fg:w="1"/><text x="24.6339%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="24.3839%" y="613" width="0.0649%" height="15" fill="rgb(228,17,21)" fg:x="376" fg:w="1"/><text x="24.6339%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="24.3839%" y="597" width="0.0649%" height="15" fill="rgb(240,149,34)" fg:x="376" fg:w="1"/><text x="24.6339%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="24.3839%" y="581" width="0.0649%" height="15" fill="rgb(208,125,47)" fg:x="376" fg:w="1"/><text x="24.6339%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="24.3839%" y="565" width="0.0649%" height="15" fill="rgb(249,186,39)" fg:x="376" fg:w="1"/><text x="24.6339%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.3839%" y="549" width="0.0649%" height="15" fill="rgb(240,220,33)" fg:x="376" fg:w="1"/><text x="24.6339%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.3839%" y="533" width="0.0649%" height="15" fill="rgb(243,110,23)" fg:x="376" fg:w="1"/><text x="24.6339%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.3839%" y="517" width="0.0649%" height="15" fill="rgb(219,163,46)" fg:x="376" fg:w="1"/><text x="24.6339%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="24.3839%" y="725" width="0.1297%" height="15" fill="rgb(216,126,30)" fg:x="376" fg:w="2"/><text x="24.6339%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="24.4488%" y="709" width="0.0649%" height="15" fill="rgb(208,139,11)" fg:x="377" fg:w="1"/><text x="24.6988%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="24.4488%" y="693" width="0.0649%" height="15" fill="rgb(213,118,36)" fg:x="377" fg:w="1"/><text x="24.6988%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="24.4488%" y="677" width="0.0649%" height="15" fill="rgb(226,43,17)" fg:x="377" fg:w="1"/><text x="24.6988%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="24.4488%" y="661" width="0.0649%" height="15" fill="rgb(254,217,4)" fg:x="377" fg:w="1"/><text x="24.6988%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="24.4488%" y="645" width="0.0649%" height="15" fill="rgb(210,134,47)" fg:x="377" fg:w="1"/><text x="24.6988%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="24.4488%" y="629" width="0.0649%" height="15" fill="rgb(237,24,49)" fg:x="377" fg:w="1"/><text x="24.6988%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="24.4488%" y="613" width="0.0649%" height="15" fill="rgb(251,39,46)" fg:x="377" fg:w="1"/><text x="24.6988%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="24.4488%" y="597" width="0.0649%" height="15" fill="rgb(251,220,3)" fg:x="377" fg:w="1"/><text x="24.6988%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="24.4488%" y="581" width="0.0649%" height="15" fill="rgb(228,105,12)" fg:x="377" fg:w="1"/><text x="24.6988%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="24.4488%" y="565" width="0.0649%" height="15" fill="rgb(215,196,1)" fg:x="377" fg:w="1"/><text x="24.6988%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.4488%" y="549" width="0.0649%" height="15" fill="rgb(214,33,39)" fg:x="377" fg:w="1"/><text x="24.6988%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.4488%" y="533" width="0.0649%" height="15" fill="rgb(220,19,52)" fg:x="377" fg:w="1"/><text x="24.6988%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.4488%" y="517" width="0.0649%" height="15" fill="rgb(221,78,38)" fg:x="377" fg:w="1"/><text x="24.6988%" y="527.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (3 samples, 0.19%)</title><rect x="24.3839%" y="933" width="0.1946%" height="15" fill="rgb(253,30,16)" fg:x="376" fg:w="3"/><text x="24.6339%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="24.3839%" y="917" width="0.1946%" height="15" fill="rgb(242,65,0)" fg:x="376" fg:w="3"/><text x="24.6339%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="24.3839%" y="901" width="0.1946%" height="15" fill="rgb(235,201,12)" fg:x="376" fg:w="3"/><text x="24.6339%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="24.3839%" y="885" width="0.1946%" height="15" fill="rgb(233,161,9)" fg:x="376" fg:w="3"/><text x="24.6339%" y="895.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="24.3839%" y="869" width="0.1946%" height="15" fill="rgb(241,207,41)" fg:x="376" fg:w="3"/><text x="24.6339%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="24.3839%" y="853" width="0.1946%" height="15" fill="rgb(212,69,46)" fg:x="376" fg:w="3"/><text x="24.6339%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="24.3839%" y="837" width="0.1946%" height="15" fill="rgb(239,69,45)" fg:x="376" fg:w="3"/><text x="24.6339%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="24.3839%" y="821" width="0.1946%" height="15" fill="rgb(242,117,48)" fg:x="376" fg:w="3"/><text x="24.6339%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="24.3839%" y="805" width="0.1946%" height="15" fill="rgb(228,41,36)" fg:x="376" fg:w="3"/><text x="24.6339%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="24.3839%" y="789" width="0.1946%" height="15" fill="rgb(212,3,32)" fg:x="376" fg:w="3"/><text x="24.6339%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="24.3839%" y="773" width="0.1946%" height="15" fill="rgb(233,41,49)" fg:x="376" fg:w="3"/><text x="24.6339%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="24.3839%" y="757" width="0.1946%" height="15" fill="rgb(252,170,49)" fg:x="376" fg:w="3"/><text x="24.6339%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="24.3839%" y="741" width="0.1946%" height="15" fill="rgb(229,53,26)" fg:x="376" fg:w="3"/><text x="24.6339%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.5136%" y="725" width="0.0649%" height="15" fill="rgb(217,157,12)" fg:x="378" fg:w="1"/><text x="24.7636%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.5136%" y="709" width="0.0649%" height="15" fill="rgb(227,17,9)" fg:x="378" fg:w="1"/><text x="24.7636%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.5136%" y="693" width="0.0649%" height="15" fill="rgb(218,84,12)" fg:x="378" fg:w="1"/><text x="24.7636%" y="703.50"></text></g><g><title>redb::tree_store::btree_base::BranchBuilder::build (1 samples, 0.06%)</title><rect x="24.5785%" y="933" width="0.0649%" height="15" fill="rgb(212,79,24)" fg:x="379" fg:w="1"/><text x="24.8285%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (1 samples, 0.06%)</title><rect x="24.5785%" y="917" width="0.0649%" height="15" fill="rgb(217,222,37)" fg:x="379" fg:w="1"/><text x="24.8285%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (1 samples, 0.06%)</title><rect x="24.5785%" y="901" width="0.0649%" height="15" fill="rgb(246,208,8)" fg:x="379" fg:w="1"/><text x="24.8285%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="24.5785%" y="885" width="0.0649%" height="15" fill="rgb(244,133,10)" fg:x="379" fg:w="1"/><text x="24.8285%" y="895.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="24.5785%" y="869" width="0.0649%" height="15" fill="rgb(209,219,41)" fg:x="379" fg:w="1"/><text x="24.8285%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.5785%" y="853" width="0.0649%" height="15" fill="rgb(253,175,45)" fg:x="379" fg:w="1"/><text x="24.8285%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.5785%" y="837" width="0.0649%" height="15" fill="rgb(235,100,37)" fg:x="379" fg:w="1"/><text x="24.8285%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.5785%" y="821" width="0.0649%" height="15" fill="rgb(225,87,19)" fg:x="379" fg:w="1"/><text x="24.8285%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchMutator::write_child_page (1 samples, 0.06%)</title><rect x="24.6433%" y="933" width="0.0649%" height="15" fill="rgb(217,152,17)" fg:x="380" fg:w="1"/><text x="24.8933%" y="943.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="24.6433%" y="917" width="0.0649%" height="15" fill="rgb(235,72,13)" fg:x="380" fg:w="1"/><text x="24.8933%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="24.6433%" y="901" width="0.0649%" height="15" fill="rgb(233,140,18)" fg:x="380" fg:w="1"/><text x="24.8933%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.6433%" y="885" width="0.0649%" height="15" fill="rgb(207,212,28)" fg:x="380" fg:w="1"/><text x="24.8933%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.6433%" y="869" width="0.0649%" height="15" fill="rgb(220,130,25)" fg:x="380" fg:w="1"/><text x="24.8933%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.6433%" y="853" width="0.0649%" height="15" fill="rgb(205,55,34)" fg:x="380" fg:w="1"/><text x="24.8933%" y="863.50"></text></g><g><title>core::mem::drop (1 samples, 0.06%)</title><rect x="24.7082%" y="901" width="0.0649%" height="15" fill="rgb(237,54,35)" fg:x="381" fg:w="1"/><text x="24.9582%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="24.7082%" y="885" width="0.0649%" height="15" fill="rgb(208,67,23)" fg:x="381" fg:w="1"/><text x="24.9582%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="24.7082%" y="869" width="0.0649%" height="15" fill="rgb(206,207,50)" fg:x="381" fg:w="1"/><text x="24.9582%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="24.7082%" y="853" width="0.0649%" height="15" fill="rgb(213,211,42)" fg:x="381" fg:w="1"/><text x="24.9582%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="24.7082%" y="837" width="0.0649%" height="15" fill="rgb(252,197,50)" fg:x="381" fg:w="1"/><text x="24.9582%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="24.7082%" y="821" width="0.0649%" height="15" fill="rgb(251,211,41)" fg:x="381" fg:w="1"/><text x="24.9582%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="24.7082%" y="805" width="0.0649%" height="15" fill="rgb(229,211,5)" fg:x="381" fg:w="1"/><text x="24.9582%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="24.7082%" y="789" width="0.0649%" height="15" fill="rgb(239,36,31)" fg:x="381" fg:w="1"/><text x="24.9582%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="24.7082%" y="773" width="0.0649%" height="15" fill="rgb(248,67,31)" fg:x="381" fg:w="1"/><text x="24.9582%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.7082%" y="757" width="0.0649%" height="15" fill="rgb(249,55,44)" fg:x="381" fg:w="1"/><text x="24.9582%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.7082%" y="741" width="0.0649%" height="15" fill="rgb(216,82,12)" fg:x="381" fg:w="1"/><text x="24.9582%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.7082%" y="725" width="0.0649%" height="15" fill="rgb(242,174,1)" fg:x="381" fg:w="1"/><text x="24.9582%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.7730%" y="885" width="0.0649%" height="15" fill="rgb(208,120,29)" fg:x="382" fg:w="1"/><text x="25.0230%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.7730%" y="869" width="0.0649%" height="15" fill="rgb(221,105,43)" fg:x="382" fg:w="1"/><text x="25.0230%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.7730%" y="853" width="0.0649%" height="15" fill="rgb(234,124,22)" fg:x="382" fg:w="1"/><text x="25.0230%" y="863.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="24.8379%" y="869" width="0.0649%" height="15" fill="rgb(212,23,30)" fg:x="383" fg:w="1"/><text x="25.0879%" y="879.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="24.8379%" y="853" width="0.0649%" height="15" fill="rgb(219,122,53)" fg:x="383" fg:w="1"/><text x="25.0879%" y="863.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="24.8379%" y="837" width="0.0649%" height="15" fill="rgb(248,84,24)" fg:x="383" fg:w="1"/><text x="25.0879%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.8379%" y="821" width="0.0649%" height="15" fill="rgb(245,115,18)" fg:x="383" fg:w="1"/><text x="25.0879%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.8379%" y="805" width="0.0649%" height="15" fill="rgb(227,176,51)" fg:x="383" fg:w="1"/><text x="25.0879%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.8379%" y="789" width="0.0649%" height="15" fill="rgb(229,63,42)" fg:x="383" fg:w="1"/><text x="25.0879%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.9027%" y="869" width="0.0649%" height="15" fill="rgb(247,202,24)" fg:x="384" fg:w="1"/><text x="25.1527%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.9027%" y="853" width="0.0649%" height="15" fill="rgb(244,173,20)" fg:x="384" fg:w="1"/><text x="25.1527%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.9027%" y="837" width="0.0649%" height="15" fill="rgb(242,81,47)" fg:x="384" fg:w="1"/><text x="25.1527%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (3 samples, 0.19%)</title><rect x="24.8379%" y="885" width="0.1946%" height="15" fill="rgb(231,185,54)" fg:x="383" fg:w="3"/><text x="25.0879%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="24.9676%" y="869" width="0.0649%" height="15" fill="rgb(243,55,32)" fg:x="385" fg:w="1"/><text x="25.2176%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="24.9676%" y="853" width="0.0649%" height="15" fill="rgb(208,167,19)" fg:x="385" fg:w="1"/><text x="25.2176%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="24.9676%" y="837" width="0.0649%" height="15" fill="rgb(231,72,35)" fg:x="385" fg:w="1"/><text x="25.2176%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="24.9676%" y="821" width="0.0649%" height="15" fill="rgb(250,173,51)" fg:x="385" fg:w="1"/><text x="25.2176%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="24.9676%" y="805" width="0.0649%" height="15" fill="rgb(209,5,22)" fg:x="385" fg:w="1"/><text x="25.2176%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (5 samples, 0.32%)</title><rect x="24.7730%" y="901" width="0.3243%" height="15" fill="rgb(250,174,19)" fg:x="382" fg:w="5"/><text x="25.0230%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="25.0324%" y="885" width="0.0649%" height="15" fill="rgb(217,3,49)" fg:x="386" fg:w="1"/><text x="25.2824%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="25.0324%" y="869" width="0.0649%" height="15" fill="rgb(218,225,5)" fg:x="386" fg:w="1"/><text x="25.2824%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="25.0324%" y="853" width="0.0649%" height="15" fill="rgb(236,89,11)" fg:x="386" fg:w="1"/><text x="25.2824%" y="863.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="25.0324%" y="837" width="0.0649%" height="15" fill="rgb(206,33,28)" fg:x="386" fg:w="1"/><text x="25.2824%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.0324%" y="821" width="0.0649%" height="15" fill="rgb(241,56,42)" fg:x="386" fg:w="1"/><text x="25.2824%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.0324%" y="805" width="0.0649%" height="15" fill="rgb(222,44,11)" fg:x="386" fg:w="1"/><text x="25.2824%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.0324%" y="789" width="0.0649%" height="15" fill="rgb(234,111,20)" fg:x="386" fg:w="1"/><text x="25.2824%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_pairs (1 samples, 0.06%)</title><rect x="25.0973%" y="901" width="0.0649%" height="15" fill="rgb(237,77,6)" fg:x="387" fg:w="1"/><text x="25.3473%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_keys (1 samples, 0.06%)</title><rect x="25.0973%" y="885" width="0.0649%" height="15" fill="rgb(235,111,23)" fg:x="387" fg:w="1"/><text x="25.3473%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.0973%" y="869" width="0.0649%" height="15" fill="rgb(251,135,29)" fg:x="387" fg:w="1"/><text x="25.3473%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.0973%" y="853" width="0.0649%" height="15" fill="rgb(217,57,1)" fg:x="387" fg:w="1"/><text x="25.3473%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.0973%" y="837" width="0.0649%" height="15" fill="rgb(249,119,31)" fg:x="387" fg:w="1"/><text x="25.3473%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.1621%" y="725" width="0.0649%" height="15" fill="rgb(233,164,33)" fg:x="388" fg:w="1"/><text x="25.4121%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.1621%" y="709" width="0.0649%" height="15" fill="rgb(250,217,43)" fg:x="388" fg:w="1"/><text x="25.4121%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.1621%" y="693" width="0.0649%" height="15" fill="rgb(232,154,50)" fg:x="388" fg:w="1"/><text x="25.4121%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.2270%" y="501" width="0.0649%" height="15" fill="rgb(227,190,8)" fg:x="389" fg:w="1"/><text x="25.4770%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.2270%" y="485" width="0.0649%" height="15" fill="rgb(209,217,32)" fg:x="389" fg:w="1"/><text x="25.4770%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.2270%" y="469" width="0.0649%" height="15" fill="rgb(243,203,50)" fg:x="389" fg:w="1"/><text x="25.4770%" y="479.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="25.1621%" y="869" width="0.1946%" height="15" fill="rgb(232,152,27)" fg:x="388" fg:w="3"/><text x="25.4121%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="25.1621%" y="853" width="0.1946%" height="15" fill="rgb(240,34,29)" fg:x="388" fg:w="3"/><text x="25.4121%" y="863.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="25.1621%" y="837" width="0.1946%" height="15" fill="rgb(215,185,52)" fg:x="388" fg:w="3"/><text x="25.4121%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="25.1621%" y="821" width="0.1946%" height="15" fill="rgb(240,89,49)" fg:x="388" fg:w="3"/><text x="25.4121%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="25.1621%" y="805" width="0.1946%" height="15" fill="rgb(225,12,52)" fg:x="388" fg:w="3"/><text x="25.4121%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="25.1621%" y="789" width="0.1946%" height="15" fill="rgb(239,128,45)" fg:x="388" fg:w="3"/><text x="25.4121%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="25.1621%" y="773" width="0.1946%" height="15" fill="rgb(211,78,47)" fg:x="388" fg:w="3"/><text x="25.4121%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="25.1621%" y="757" width="0.1946%" height="15" fill="rgb(232,31,21)" fg:x="388" fg:w="3"/><text x="25.4121%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="25.1621%" y="741" width="0.1946%" height="15" fill="rgb(222,168,14)" fg:x="388" fg:w="3"/><text x="25.4121%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="25.2270%" y="725" width="0.1297%" height="15" fill="rgb(209,128,24)" fg:x="389" fg:w="2"/><text x="25.4770%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="25.2270%" y="709" width="0.1297%" height="15" fill="rgb(249,35,13)" fg:x="389" fg:w="2"/><text x="25.4770%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="25.2270%" y="693" width="0.1297%" height="15" fill="rgb(218,7,2)" fg:x="389" fg:w="2"/><text x="25.4770%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="25.2270%" y="677" width="0.1297%" height="15" fill="rgb(238,107,27)" fg:x="389" fg:w="2"/><text x="25.4770%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="25.2270%" y="661" width="0.1297%" height="15" fill="rgb(217,88,38)" fg:x="389" fg:w="2"/><text x="25.4770%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="25.2270%" y="645" width="0.1297%" height="15" fill="rgb(230,207,0)" fg:x="389" fg:w="2"/><text x="25.4770%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="25.2270%" y="629" width="0.1297%" height="15" fill="rgb(249,64,54)" fg:x="389" fg:w="2"/><text x="25.4770%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="25.2270%" y="613" width="0.1297%" height="15" fill="rgb(231,7,11)" fg:x="389" fg:w="2"/><text x="25.4770%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="25.2270%" y="597" width="0.1297%" height="15" fill="rgb(205,149,21)" fg:x="389" fg:w="2"/><text x="25.4770%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="25.2270%" y="581" width="0.1297%" height="15" fill="rgb(215,126,34)" fg:x="389" fg:w="2"/><text x="25.4770%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="25.2270%" y="565" width="0.1297%" height="15" fill="rgb(241,132,45)" fg:x="389" fg:w="2"/><text x="25.4770%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="25.2270%" y="549" width="0.1297%" height="15" fill="rgb(252,69,32)" fg:x="389" fg:w="2"/><text x="25.4770%" y="559.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="25.2270%" y="533" width="0.1297%" height="15" fill="rgb(232,204,19)" fg:x="389" fg:w="2"/><text x="25.4770%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="25.2270%" y="517" width="0.1297%" height="15" fill="rgb(249,15,47)" fg:x="389" fg:w="2"/><text x="25.4770%" y="527.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="25.2918%" y="501" width="0.0649%" height="15" fill="rgb(209,227,23)" fg:x="390" fg:w="1"/><text x="25.5418%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="25.2918%" y="485" width="0.0649%" height="15" fill="rgb(248,92,24)" fg:x="390" fg:w="1"/><text x="25.5418%" y="495.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="25.2918%" y="469" width="0.0649%" height="15" fill="rgb(247,59,2)" fg:x="390" fg:w="1"/><text x="25.5418%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="25.2918%" y="453" width="0.0649%" height="15" fill="rgb(221,30,5)" fg:x="390" fg:w="1"/><text x="25.5418%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="25.2918%" y="437" width="0.0649%" height="15" fill="rgb(208,108,53)" fg:x="390" fg:w="1"/><text x="25.5418%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="25.2918%" y="421" width="0.0649%" height="15" fill="rgb(211,183,26)" fg:x="390" fg:w="1"/><text x="25.5418%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="25.2918%" y="405" width="0.0649%" height="15" fill="rgb(232,132,4)" fg:x="390" fg:w="1"/><text x="25.5418%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="25.2918%" y="389" width="0.0649%" height="15" fill="rgb(253,128,37)" fg:x="390" fg:w="1"/><text x="25.5418%" y="399.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="25.2918%" y="373" width="0.0649%" height="15" fill="rgb(221,58,24)" fg:x="390" fg:w="1"/><text x="25.5418%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.2918%" y="357" width="0.0649%" height="15" fill="rgb(230,54,45)" fg:x="390" fg:w="1"/><text x="25.5418%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.2918%" y="341" width="0.0649%" height="15" fill="rgb(254,21,18)" fg:x="390" fg:w="1"/><text x="25.5418%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.2918%" y="325" width="0.0649%" height="15" fill="rgb(221,108,0)" fg:x="390" fg:w="1"/><text x="25.5418%" y="335.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="25.1621%" y="901" width="0.2594%" height="15" fill="rgb(206,95,1)" fg:x="388" fg:w="4"/><text x="25.4121%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="25.1621%" y="885" width="0.2594%" height="15" fill="rgb(237,52,5)" fg:x="388" fg:w="4"/><text x="25.4121%" y="895.50"></text></g><g><title>&lt;utxo::UtxoPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="25.3567%" y="869" width="0.0649%" height="15" fill="rgb(218,150,34)" fg:x="391" fg:w="1"/><text x="25.6067%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.3567%" y="853" width="0.0649%" height="15" fill="rgb(235,194,28)" fg:x="391" fg:w="1"/><text x="25.6067%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.3567%" y="837" width="0.0649%" height="15" fill="rgb(245,92,18)" fg:x="391" fg:w="1"/><text x="25.6067%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.3567%" y="821" width="0.0649%" height="15" fill="rgb(253,203,53)" fg:x="391" fg:w="1"/><text x="25.6067%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="25.4215%" y="837" width="0.0649%" height="15" fill="rgb(249,185,47)" fg:x="392" fg:w="1"/><text x="25.6715%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.4215%" y="821" width="0.0649%" height="15" fill="rgb(252,194,52)" fg:x="392" fg:w="1"/><text x="25.6715%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.4215%" y="805" width="0.0649%" height="15" fill="rgb(210,53,36)" fg:x="392" fg:w="1"/><text x="25.6715%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.4215%" y="789" width="0.0649%" height="15" fill="rgb(237,37,25)" fg:x="392" fg:w="1"/><text x="25.6715%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="25.4215%" y="869" width="0.1297%" height="15" fill="rgb(242,116,27)" fg:x="392" fg:w="2"/><text x="25.6715%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="25.4215%" y="853" width="0.1297%" height="15" fill="rgb(213,185,26)" fg:x="392" fg:w="2"/><text x="25.6715%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="25.4864%" y="837" width="0.0649%" height="15" fill="rgb(225,204,8)" fg:x="393" fg:w="1"/><text x="25.7364%" y="847.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="25.4864%" y="821" width="0.0649%" height="15" fill="rgb(254,111,37)" fg:x="393" fg:w="1"/><text x="25.7364%" y="831.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="25.4864%" y="805" width="0.0649%" height="15" fill="rgb(242,35,9)" fg:x="393" fg:w="1"/><text x="25.7364%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="25.4864%" y="789" width="0.0649%" height="15" fill="rgb(232,138,49)" fg:x="393" fg:w="1"/><text x="25.7364%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.4864%" y="773" width="0.0649%" height="15" fill="rgb(247,56,4)" fg:x="393" fg:w="1"/><text x="25.7364%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.4864%" y="757" width="0.0649%" height="15" fill="rgb(226,179,17)" fg:x="393" fg:w="1"/><text x="25.7364%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.4864%" y="741" width="0.0649%" height="15" fill="rgb(216,163,45)" fg:x="393" fg:w="1"/><text x="25.7364%" y="751.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="25.5512%" y="869" width="0.0649%" height="15" fill="rgb(211,157,3)" fg:x="394" fg:w="1"/><text x="25.8012%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="25.5512%" y="853" width="0.0649%" height="15" fill="rgb(234,44,20)" fg:x="394" fg:w="1"/><text x="25.8012%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.5512%" y="837" width="0.0649%" height="15" fill="rgb(254,138,23)" fg:x="394" fg:w="1"/><text x="25.8012%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.5512%" y="821" width="0.0649%" height="15" fill="rgb(206,119,39)" fg:x="394" fg:w="1"/><text x="25.8012%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.5512%" y="805" width="0.0649%" height="15" fill="rgb(231,105,52)" fg:x="394" fg:w="1"/><text x="25.8012%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_end (1 samples, 0.06%)</title><rect x="25.6161%" y="869" width="0.0649%" height="15" fill="rgb(250,20,5)" fg:x="395" fg:w="1"/><text x="25.8661%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.6161%" y="853" width="0.0649%" height="15" fill="rgb(215,198,30)" fg:x="395" fg:w="1"/><text x="25.8661%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.6161%" y="837" width="0.0649%" height="15" fill="rgb(246,142,8)" fg:x="395" fg:w="1"/><text x="25.8661%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.6161%" y="821" width="0.0649%" height="15" fill="rgb(243,26,38)" fg:x="395" fg:w="1"/><text x="25.8661%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (5 samples, 0.32%)</title><rect x="25.4215%" y="885" width="0.3243%" height="15" fill="rgb(205,133,28)" fg:x="392" fg:w="5"/><text x="25.6715%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_section_start (1 samples, 0.06%)</title><rect x="25.6809%" y="869" width="0.0649%" height="15" fill="rgb(212,34,0)" fg:x="396" fg:w="1"/><text x="25.9309%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.6809%" y="853" width="0.0649%" height="15" fill="rgb(251,226,22)" fg:x="396" fg:w="1"/><text x="25.9309%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.6809%" y="837" width="0.0649%" height="15" fill="rgb(252,119,9)" fg:x="396" fg:w="1"/><text x="25.9309%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.6809%" y="821" width="0.0649%" height="15" fill="rgb(213,150,50)" fg:x="396" fg:w="1"/><text x="25.9309%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::new (1 samples, 0.06%)</title><rect x="25.7458%" y="885" width="0.0649%" height="15" fill="rgb(212,24,39)" fg:x="397" fg:w="1"/><text x="25.9958%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="25.7458%" y="869" width="0.0649%" height="15" fill="rgb(213,46,39)" fg:x="397" fg:w="1"/><text x="25.9958%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="25.7458%" y="853" width="0.0649%" height="15" fill="rgb(239,106,12)" fg:x="397" fg:w="1"/><text x="25.9958%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="25.7458%" y="837" width="0.0649%" height="15" fill="rgb(249,229,21)" fg:x="397" fg:w="1"/><text x="25.9958%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (2 samples, 0.13%)</title><rect x="25.8106%" y="805" width="0.1297%" height="15" fill="rgb(212,158,3)" fg:x="398" fg:w="2"/><text x="26.0606%" y="815.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.13%)</title><rect x="25.8106%" y="789" width="0.1297%" height="15" fill="rgb(253,26,48)" fg:x="398" fg:w="2"/><text x="26.0606%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="25.8106%" y="773" width="0.1297%" height="15" fill="rgb(238,178,20)" fg:x="398" fg:w="2"/><text x="26.0606%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="25.8106%" y="757" width="0.1297%" height="15" fill="rgb(208,86,15)" fg:x="398" fg:w="2"/><text x="26.0606%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="25.8106%" y="741" width="0.1297%" height="15" fill="rgb(239,42,53)" fg:x="398" fg:w="2"/><text x="26.0606%" y="751.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.32%)</title><rect x="25.8106%" y="821" width="0.3243%" height="15" fill="rgb(245,226,8)" fg:x="398" fg:w="5"/><text x="26.0606%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="25.9403%" y="805" width="0.1946%" height="15" fill="rgb(216,176,32)" fg:x="400" fg:w="3"/><text x="26.1903%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="25.9403%" y="789" width="0.1946%" height="15" fill="rgb(231,186,21)" fg:x="400" fg:w="3"/><text x="26.1903%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="25.9403%" y="773" width="0.1946%" height="15" fill="rgb(205,95,49)" fg:x="400" fg:w="3"/><text x="26.1903%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (8 samples, 0.52%)</title><rect x="25.8106%" y="853" width="0.5188%" height="15" fill="rgb(217,145,8)" fg:x="398" fg:w="8"/><text x="26.0606%" y="863.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (8 samples, 0.52%)</title><rect x="25.8106%" y="837" width="0.5188%" height="15" fill="rgb(239,144,48)" fg:x="398" fg:w="8"/><text x="26.0606%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="26.1349%" y="821" width="0.1946%" height="15" fill="rgb(214,189,23)" fg:x="403" fg:w="3"/><text x="26.3849%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="26.1349%" y="805" width="0.1946%" height="15" fill="rgb(229,157,17)" fg:x="403" fg:w="3"/><text x="26.3849%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="26.1349%" y="789" width="0.1946%" height="15" fill="rgb(230,5,48)" fg:x="403" fg:w="3"/><text x="26.3849%" y="799.50"></text></g><g><title>alloc::sync::Arc&lt;[T],A&gt;::allocate_for_slice_in (1 samples, 0.06%)</title><rect x="26.3294%" y="805" width="0.0649%" height="15" fill="rgb(224,156,48)" fg:x="406" fg:w="1"/><text x="26.5794%" y="815.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.06%)</title><rect x="26.3294%" y="789" width="0.0649%" height="15" fill="rgb(223,14,29)" fg:x="406" fg:w="1"/><text x="26.5794%" y="799.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.06%)</title><rect x="26.3294%" y="773" width="0.0649%" height="15" fill="rgb(229,96,36)" fg:x="406" fg:w="1"/><text x="26.5794%" y="783.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.06%)</title><rect x="26.3294%" y="757" width="0.0649%" height="15" fill="rgb(231,102,53)" fg:x="406" fg:w="1"/><text x="26.5794%" y="767.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="26.3294%" y="741" width="0.0649%" height="15" fill="rgb(210,77,38)" fg:x="406" fg:w="1"/><text x="26.5794%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.3294%" y="725" width="0.0649%" height="15" fill="rgb(235,131,6)" fg:x="406" fg:w="1"/><text x="26.5794%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.3294%" y="709" width="0.0649%" height="15" fill="rgb(252,55,38)" fg:x="406" fg:w="1"/><text x="26.5794%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.3294%" y="693" width="0.0649%" height="15" fill="rgb(246,38,14)" fg:x="406" fg:w="1"/><text x="26.5794%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.13%)</title><rect x="26.3294%" y="837" width="0.1297%" height="15" fill="rgb(242,27,5)" fg:x="406" fg:w="2"/><text x="26.5794%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;[T],A&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T,A&gt;&gt;&gt;::from (2 samples, 0.13%)</title><rect x="26.3294%" y="821" width="0.1297%" height="15" fill="rgb(228,65,35)" fg:x="406" fg:w="2"/><text x="26.5794%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (1 samples, 0.06%)</title><rect x="26.3943%" y="805" width="0.0649%" height="15" fill="rgb(245,93,11)" fg:x="407" fg:w="1"/><text x="26.6443%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (1 samples, 0.06%)</title><rect x="26.3943%" y="789" width="0.0649%" height="15" fill="rgb(213,1,31)" fg:x="407" fg:w="1"/><text x="26.6443%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.3943%" y="773" width="0.0649%" height="15" fill="rgb(237,205,14)" fg:x="407" fg:w="1"/><text x="26.6443%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.3943%" y="757" width="0.0649%" height="15" fill="rgb(232,118,45)" fg:x="407" fg:w="1"/><text x="26.6443%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.3943%" y="741" width="0.0649%" height="15" fill="rgb(218,5,6)" fg:x="407" fg:w="1"/><text x="26.6443%" y="751.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (3 samples, 0.19%)</title><rect x="26.3294%" y="853" width="0.1946%" height="15" fill="rgb(251,87,51)" fg:x="406" fg:w="3"/><text x="26.5794%" y="863.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.06%)</title><rect x="26.4591%" y="837" width="0.0649%" height="15" fill="rgb(207,225,20)" fg:x="408" fg:w="1"/><text x="26.7091%" y="847.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.06%)</title><rect x="26.4591%" y="821" width="0.0649%" height="15" fill="rgb(222,78,54)" fg:x="408" fg:w="1"/><text x="26.7091%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.06%)</title><rect x="26.4591%" y="805" width="0.0649%" height="15" fill="rgb(232,85,16)" fg:x="408" fg:w="1"/><text x="26.7091%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1 samples, 0.06%)</title><rect x="26.4591%" y="789" width="0.0649%" height="15" fill="rgb(244,25,33)" fg:x="408" fg:w="1"/><text x="26.7091%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="26.4591%" y="773" width="0.0649%" height="15" fill="rgb(233,24,36)" fg:x="408" fg:w="1"/><text x="26.7091%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.4591%" y="757" width="0.0649%" height="15" fill="rgb(253,49,54)" fg:x="408" fg:w="1"/><text x="26.7091%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.4591%" y="741" width="0.0649%" height="15" fill="rgb(245,12,22)" fg:x="408" fg:w="1"/><text x="26.7091%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.4591%" y="725" width="0.0649%" height="15" fill="rgb(253,141,28)" fg:x="408" fg:w="1"/><text x="26.7091%" y="735.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (18 samples, 1.17%)</title><rect x="25.4215%" y="901" width="1.1673%" height="15" fill="rgb(225,207,27)" fg:x="392" fg:w="18"/><text x="25.6715%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (12 samples, 0.78%)</title><rect x="25.8106%" y="885" width="0.7782%" height="15" fill="rgb(220,84,2)" fg:x="398" fg:w="12"/><text x="26.0606%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (12 samples, 0.78%)</title><rect x="25.8106%" y="869" width="0.7782%" height="15" fill="rgb(224,37,37)" fg:x="398" fg:w="12"/><text x="26.0606%" y="879.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper_retry (1 samples, 0.06%)</title><rect x="26.5240%" y="853" width="0.0649%" height="15" fill="rgb(220,143,18)" fg:x="409" fg:w="1"/><text x="26.7740%" y="863.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc (1 samples, 0.06%)</title><rect x="26.5240%" y="837" width="0.0649%" height="15" fill="rgb(210,88,33)" fg:x="409" fg:w="1"/><text x="26.7740%" y="847.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::set (1 samples, 0.06%)</title><rect x="26.5240%" y="821" width="0.0649%" height="15" fill="rgb(219,87,51)" fg:x="409" fg:w="1"/><text x="26.7740%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="26.5240%" y="805" width="0.0649%" height="15" fill="rgb(211,7,35)" fg:x="409" fg:w="1"/><text x="26.7740%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="26.5240%" y="789" width="0.0649%" height="15" fill="rgb(232,77,2)" fg:x="409" fg:w="1"/><text x="26.7740%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1 samples, 0.06%)</title><rect x="26.5240%" y="773" width="0.0649%" height="15" fill="rgb(249,94,25)" fg:x="409" fg:w="1"/><text x="26.7740%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.5240%" y="757" width="0.0649%" height="15" fill="rgb(215,112,2)" fg:x="409" fg:w="1"/><text x="26.7740%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.5240%" y="741" width="0.0649%" height="15" fill="rgb(226,115,48)" fg:x="409" fg:w="1"/><text x="26.7740%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.5240%" y="725" width="0.0649%" height="15" fill="rgb(249,196,10)" fg:x="409" fg:w="1"/><text x="26.7740%" y="735.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free (1 samples, 0.06%)</title><rect x="26.5888%" y="901" width="0.0649%" height="15" fill="rgb(237,109,14)" fg:x="410" fg:w="1"/><text x="26.8388%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free_helper (1 samples, 0.06%)</title><rect x="26.5888%" y="885" width="0.0649%" height="15" fill="rgb(217,103,53)" fg:x="410" fg:w="1"/><text x="26.8388%" y="895.50"></text></g><g><title>redb::tree_store::page_store::region::RegionTracker::mark_free (1 samples, 0.06%)</title><rect x="26.5888%" y="869" width="0.0649%" height="15" fill="rgb(244,137,9)" fg:x="410" fg:w="1"/><text x="26.8388%" y="879.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.06%)</title><rect x="26.5888%" y="853" width="0.0649%" height="15" fill="rgb(227,201,3)" fg:x="410" fg:w="1"/><text x="26.8388%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.5888%" y="837" width="0.0649%" height="15" fill="rgb(243,94,6)" fg:x="410" fg:w="1"/><text x="26.8388%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.5888%" y="821" width="0.0649%" height="15" fill="rgb(235,118,5)" fg:x="410" fg:w="1"/><text x="26.8388%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.5888%" y="805" width="0.0649%" height="15" fill="rgb(247,10,30)" fg:x="410" fg:w="1"/><text x="26.8388%" y="815.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="26.6537%" y="901" width="0.0649%" height="15" fill="rgb(205,26,28)" fg:x="411" fg:w="1"/><text x="26.9037%" y="911.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="26.6537%" y="885" width="0.0649%" height="15" fill="rgb(206,99,35)" fg:x="411" fg:w="1"/><text x="26.9037%" y="895.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="26.6537%" y="869" width="0.0649%" height="15" fill="rgb(238,130,40)" fg:x="411" fg:w="1"/><text x="26.9037%" y="879.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="26.6537%" y="853" width="0.0649%" height="15" fill="rgb(224,126,31)" fg:x="411" fg:w="1"/><text x="26.9037%" y="863.50"></text></g><g><title>std::thread::panicking (1 samples, 0.06%)</title><rect x="26.6537%" y="837" width="0.0649%" height="15" fill="rgb(254,105,17)" fg:x="411" fg:w="1"/><text x="26.9037%" y="847.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.06%)</title><rect x="26.6537%" y="821" width="0.0649%" height="15" fill="rgb(216,87,36)" fg:x="411" fg:w="1"/><text x="26.9037%" y="831.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.06%)</title><rect x="26.6537%" y="805" width="0.0649%" height="15" fill="rgb(240,21,12)" fg:x="411" fg:w="1"/><text x="26.9037%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.6537%" y="789" width="0.0649%" height="15" fill="rgb(245,192,34)" fg:x="411" fg:w="1"/><text x="26.9037%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.6537%" y="773" width="0.0649%" height="15" fill="rgb(226,100,49)" fg:x="411" fg:w="1"/><text x="26.9037%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.6537%" y="757" width="0.0649%" height="15" fill="rgb(245,188,27)" fg:x="411" fg:w="1"/><text x="26.9037%" y="767.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (32 samples, 2.08%)</title><rect x="24.7082%" y="933" width="2.0752%" height="15" fill="rgb(212,170,8)" fg:x="381" fg:w="32"/><text x="24.9582%" y="943.50">r..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (32 samples, 2.08%)</title><rect x="24.7082%" y="917" width="2.0752%" height="15" fill="rgb(217,113,29)" fg:x="381" fg:w="32"/><text x="24.9582%" y="927.50">r..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::uncommitted (1 samples, 0.06%)</title><rect x="26.7185%" y="901" width="0.0649%" height="15" fill="rgb(237,30,3)" fg:x="412" fg:w="1"/><text x="26.9685%" y="911.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="26.7185%" y="885" width="0.0649%" height="15" fill="rgb(227,19,28)" fg:x="412" fg:w="1"/><text x="26.9685%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.7185%" y="869" width="0.0649%" height="15" fill="rgb(239,172,45)" fg:x="412" fg:w="1"/><text x="26.9685%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.7185%" y="853" width="0.0649%" height="15" fill="rgb(254,55,39)" fg:x="412" fg:w="1"/><text x="26.9685%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.7185%" y="837" width="0.0649%" height="15" fill="rgb(249,208,12)" fg:x="412" fg:w="1"/><text x="26.9685%" y="847.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="26.7834%" y="901" width="0.0649%" height="15" fill="rgb(240,52,13)" fg:x="413" fg:w="1"/><text x="27.0334%" y="911.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="26.7834%" y="885" width="0.0649%" height="15" fill="rgb(252,149,13)" fg:x="413" fg:w="1"/><text x="27.0334%" y="895.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="26.7834%" y="869" width="0.0649%" height="15" fill="rgb(232,81,48)" fg:x="413" fg:w="1"/><text x="27.0334%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="26.7834%" y="853" width="0.0649%" height="15" fill="rgb(222,144,2)" fg:x="413" fg:w="1"/><text x="27.0334%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="26.7834%" y="837" width="0.0649%" height="15" fill="rgb(216,81,32)" fg:x="413" fg:w="1"/><text x="27.0334%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.7834%" y="821" width="0.0649%" height="15" fill="rgb(244,78,51)" fg:x="413" fg:w="1"/><text x="27.0334%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.7834%" y="805" width="0.0649%" height="15" fill="rgb(217,66,21)" fg:x="413" fg:w="1"/><text x="27.0334%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.7834%" y="789" width="0.0649%" height="15" fill="rgb(247,101,42)" fg:x="413" fg:w="1"/><text x="27.0334%" y="799.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (2 samples, 0.13%)</title><rect x="26.7834%" y="933" width="0.1297%" height="15" fill="rgb(227,81,39)" fg:x="413" fg:w="2"/><text x="27.0334%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="26.7834%" y="917" width="0.1297%" height="15" fill="rgb(220,223,44)" fg:x="413" fg:w="2"/><text x="27.0334%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="26.8482%" y="901" width="0.0649%" height="15" fill="rgb(205,218,2)" fg:x="414" fg:w="1"/><text x="27.0982%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="26.8482%" y="885" width="0.0649%" height="15" fill="rgb(212,207,28)" fg:x="414" fg:w="1"/><text x="27.0982%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="26.8482%" y="869" width="0.0649%" height="15" fill="rgb(224,12,41)" fg:x="414" fg:w="1"/><text x="27.0982%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="26.8482%" y="853" width="0.0649%" height="15" fill="rgb(216,118,12)" fg:x="414" fg:w="1"/><text x="27.0982%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="26.8482%" y="837" width="0.0649%" height="15" fill="rgb(252,97,46)" fg:x="414" fg:w="1"/><text x="27.0982%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="26.8482%" y="821" width="0.0649%" height="15" fill="rgb(244,206,19)" fg:x="414" fg:w="1"/><text x="27.0982%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="26.8482%" y="805" width="0.0649%" height="15" fill="rgb(231,84,31)" fg:x="414" fg:w="1"/><text x="27.0982%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="26.8482%" y="789" width="0.0649%" height="15" fill="rgb(244,133,0)" fg:x="414" fg:w="1"/><text x="27.0982%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="26.8482%" y="773" width="0.0649%" height="15" fill="rgb(223,15,50)" fg:x="414" fg:w="1"/><text x="27.0982%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.8482%" y="757" width="0.0649%" height="15" fill="rgb(250,118,49)" fg:x="414" fg:w="1"/><text x="27.0982%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.8482%" y="741" width="0.0649%" height="15" fill="rgb(248,25,38)" fg:x="414" fg:w="1"/><text x="27.0982%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.8482%" y="725" width="0.0649%" height="15" fill="rgb(215,70,14)" fg:x="414" fg:w="1"/><text x="27.0982%" y="735.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_branch_helper (40 samples, 2.59%)</title><rect x="24.3839%" y="949" width="2.5940%" height="15" fill="rgb(215,28,15)" fg:x="376" fg:w="40"/><text x="24.6339%" y="959.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="26.9131%" y="933" width="0.0649%" height="15" fill="rgb(243,6,28)" fg:x="415" fg:w="1"/><text x="27.1631%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="26.9131%" y="917" width="0.0649%" height="15" fill="rgb(222,130,1)" fg:x="415" fg:w="1"/><text x="27.1631%" y="927.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="26.9131%" y="901" width="0.0649%" height="15" fill="rgb(236,166,44)" fg:x="415" fg:w="1"/><text x="27.1631%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="26.9131%" y="885" width="0.0649%" height="15" fill="rgb(221,108,14)" fg:x="415" fg:w="1"/><text x="27.1631%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="26.9131%" y="869" width="0.0649%" height="15" fill="rgb(252,3,45)" fg:x="415" fg:w="1"/><text x="27.1631%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="26.9131%" y="853" width="0.0649%" height="15" fill="rgb(237,68,30)" fg:x="415" fg:w="1"/><text x="27.1631%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="26.9131%" y="837" width="0.0649%" height="15" fill="rgb(211,79,22)" fg:x="415" fg:w="1"/><text x="27.1631%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="26.9131%" y="821" width="0.0649%" height="15" fill="rgb(252,185,21)" fg:x="415" fg:w="1"/><text x="27.1631%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="26.9131%" y="805" width="0.0649%" height="15" fill="rgb(225,189,26)" fg:x="415" fg:w="1"/><text x="27.1631%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="26.9131%" y="789" width="0.0649%" height="15" fill="rgb(241,30,40)" fg:x="415" fg:w="1"/><text x="27.1631%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="26.9131%" y="773" width="0.0649%" height="15" fill="rgb(235,215,44)" fg:x="415" fg:w="1"/><text x="27.1631%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.9131%" y="757" width="0.0649%" height="15" fill="rgb(205,8,29)" fg:x="415" fg:w="1"/><text x="27.1631%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.9131%" y="741" width="0.0649%" height="15" fill="rgb(241,137,42)" fg:x="415" fg:w="1"/><text x="27.1631%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.9131%" y="725" width="0.0649%" height="15" fill="rgb(237,155,2)" fg:x="415" fg:w="1"/><text x="27.1631%" y="735.50"></text></g><g><title>redb::table::Table&lt;K,V&gt;::remove (45 samples, 2.92%)</title><rect x="24.1245%" y="1013" width="2.9183%" height="15" fill="rgb(245,29,42)" fg:x="372" fg:w="45"/><text x="24.3745%" y="1023.50">re..</text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::remove (45 samples, 2.92%)</title><rect x="24.1245%" y="997" width="2.9183%" height="15" fill="rgb(234,101,35)" fg:x="372" fg:w="45"/><text x="24.3745%" y="1007.50">re..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete (44 samples, 2.85%)</title><rect x="24.1894%" y="981" width="2.8534%" height="15" fill="rgb(228,64,37)" fg:x="373" fg:w="44"/><text x="24.4394%" y="991.50">re..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (41 samples, 2.66%)</title><rect x="24.3839%" y="965" width="2.6589%" height="15" fill="rgb(217,214,36)" fg:x="376" fg:w="41"/><text x="24.6339%" y="975.50">re..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (1 samples, 0.06%)</title><rect x="26.9780%" y="949" width="0.0649%" height="15" fill="rgb(243,70,3)" fg:x="416" fg:w="1"/><text x="27.2280%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="26.9780%" y="933" width="0.0649%" height="15" fill="rgb(253,158,52)" fg:x="416" fg:w="1"/><text x="27.2280%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="26.9780%" y="917" width="0.0649%" height="15" fill="rgb(234,111,54)" fg:x="416" fg:w="1"/><text x="27.2280%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="26.9780%" y="901" width="0.0649%" height="15" fill="rgb(217,70,32)" fg:x="416" fg:w="1"/><text x="27.2280%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="885" width="0.0649%" height="15" fill="rgb(234,18,33)" fg:x="416" fg:w="1"/><text x="27.2280%" y="895.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="869" width="0.0649%" height="15" fill="rgb(234,12,49)" fg:x="416" fg:w="1"/><text x="27.2280%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="26.9780%" y="853" width="0.0649%" height="15" fill="rgb(236,10,21)" fg:x="416" fg:w="1"/><text x="27.2280%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="837" width="0.0649%" height="15" fill="rgb(248,182,45)" fg:x="416" fg:w="1"/><text x="27.2280%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="821" width="0.0649%" height="15" fill="rgb(217,95,36)" fg:x="416" fg:w="1"/><text x="27.2280%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="26.9780%" y="805" width="0.0649%" height="15" fill="rgb(212,110,31)" fg:x="416" fg:w="1"/><text x="27.2280%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="26.9780%" y="789" width="0.0649%" height="15" fill="rgb(206,32,53)" fg:x="416" fg:w="1"/><text x="27.2280%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="26.9780%" y="773" width="0.0649%" height="15" fill="rgb(246,141,37)" fg:x="416" fg:w="1"/><text x="27.2280%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="26.9780%" y="757" width="0.0649%" height="15" fill="rgb(219,16,7)" fg:x="416" fg:w="1"/><text x="27.2280%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="26.9780%" y="741" width="0.0649%" height="15" fill="rgb(230,205,45)" fg:x="416" fg:w="1"/><text x="27.2280%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="725" width="0.0649%" height="15" fill="rgb(231,43,49)" fg:x="416" fg:w="1"/><text x="27.2280%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="709" width="0.0649%" height="15" fill="rgb(212,106,34)" fg:x="416" fg:w="1"/><text x="27.2280%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="26.9780%" y="693" width="0.0649%" height="15" fill="rgb(206,83,17)" fg:x="416" fg:w="1"/><text x="27.2280%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="26.9780%" y="677" width="0.0649%" height="15" fill="rgb(244,154,49)" fg:x="416" fg:w="1"/><text x="27.2280%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="26.9780%" y="661" width="0.0649%" height="15" fill="rgb(244,149,49)" fg:x="416" fg:w="1"/><text x="27.2280%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="26.9780%" y="645" width="0.0649%" height="15" fill="rgb(227,134,18)" fg:x="416" fg:w="1"/><text x="27.2280%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="26.9780%" y="629" width="0.0649%" height="15" fill="rgb(237,116,36)" fg:x="416" fg:w="1"/><text x="27.2280%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="613" width="0.0649%" height="15" fill="rgb(205,129,40)" fg:x="416" fg:w="1"/><text x="27.2280%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="26.9780%" y="597" width="0.0649%" height="15" fill="rgb(236,178,4)" fg:x="416" fg:w="1"/><text x="27.2280%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="26.9780%" y="581" width="0.0649%" height="15" fill="rgb(251,76,53)" fg:x="416" fg:w="1"/><text x="27.2280%" y="591.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="26.9780%" y="565" width="0.0649%" height="15" fill="rgb(242,92,40)" fg:x="416" fg:w="1"/><text x="27.2280%" y="575.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="26.9780%" y="549" width="0.0649%" height="15" fill="rgb(209,45,30)" fg:x="416" fg:w="1"/><text x="27.2280%" y="559.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="26.9780%" y="533" width="0.0649%" height="15" fill="rgb(218,157,36)" fg:x="416" fg:w="1"/><text x="27.2280%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="26.9780%" y="517" width="0.0649%" height="15" fill="rgb(222,186,16)" fg:x="416" fg:w="1"/><text x="27.2280%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="26.9780%" y="501" width="0.0649%" height="15" fill="rgb(254,72,35)" fg:x="416" fg:w="1"/><text x="27.2280%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="26.9780%" y="485" width="0.0649%" height="15" fill="rgb(224,25,35)" fg:x="416" fg:w="1"/><text x="27.2280%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="26.9780%" y="469" width="0.0649%" height="15" fill="rgb(206,135,52)" fg:x="416" fg:w="1"/><text x="27.2280%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="26.9780%" y="453" width="0.0649%" height="15" fill="rgb(229,174,47)" fg:x="416" fg:w="1"/><text x="27.2280%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="26.9780%" y="437" width="0.0649%" height="15" fill="rgb(242,184,21)" fg:x="416" fg:w="1"/><text x="27.2280%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="26.9780%" y="421" width="0.0649%" height="15" fill="rgb(213,22,45)" fg:x="416" fg:w="1"/><text x="27.2280%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="26.9780%" y="405" width="0.0649%" height="15" fill="rgb(237,81,54)" fg:x="416" fg:w="1"/><text x="27.2280%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;&amp;redb::multimap_table::DynamicCollection&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="27.0428%" y="965" width="0.0649%" height="15" fill="rgb(248,177,18)" fg:x="417" fg:w="1"/><text x="27.2928%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="27.0428%" y="949" width="0.0649%" height="15" fill="rgb(254,31,16)" fg:x="417" fg:w="1"/><text x="27.2928%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="27.0428%" y="933" width="0.0649%" height="15" fill="rgb(235,20,31)" fg:x="417" fg:w="1"/><text x="27.2928%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="27.0428%" y="917" width="0.0649%" height="15" fill="rgb(240,56,43)" fg:x="417" fg:w="1"/><text x="27.2928%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="27.0428%" y="901" width="0.0649%" height="15" fill="rgb(237,197,51)" fg:x="417" fg:w="1"/><text x="27.2928%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="27.0428%" y="885" width="0.0649%" height="15" fill="rgb(241,162,44)" fg:x="417" fg:w="1"/><text x="27.2928%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="27.0428%" y="869" width="0.0649%" height="15" fill="rgb(224,23,20)" fg:x="417" fg:w="1"/><text x="27.2928%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="27.0428%" y="853" width="0.0649%" height="15" fill="rgb(250,109,34)" fg:x="417" fg:w="1"/><text x="27.2928%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="27.0428%" y="837" width="0.0649%" height="15" fill="rgb(214,175,50)" fg:x="417" fg:w="1"/><text x="27.2928%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="27.0428%" y="821" width="0.0649%" height="15" fill="rgb(213,182,5)" fg:x="417" fg:w="1"/><text x="27.2928%" y="831.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="27.0428%" y="805" width="0.0649%" height="15" fill="rgb(209,199,19)" fg:x="417" fg:w="1"/><text x="27.2928%" y="815.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="27.0428%" y="789" width="0.0649%" height="15" fill="rgb(236,224,42)" fg:x="417" fg:w="1"/><text x="27.2928%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="27.0428%" y="773" width="0.0649%" height="15" fill="rgb(246,226,29)" fg:x="417" fg:w="1"/><text x="27.2928%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.0428%" y="757" width="0.0649%" height="15" fill="rgb(227,223,11)" fg:x="417" fg:w="1"/><text x="27.2928%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.0428%" y="741" width="0.0649%" height="15" fill="rgb(219,7,51)" fg:x="417" fg:w="1"/><text x="27.2928%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.0428%" y="725" width="0.0649%" height="15" fill="rgb(245,167,10)" fg:x="417" fg:w="1"/><text x="27.2928%" y="735.50"></text></g><g><title>redb::multimap_table::DynamicCollection&lt;V&gt;::as_subtree (1 samples, 0.06%)</title><rect x="27.1077%" y="965" width="0.0649%" height="15" fill="rgb(237,224,16)" fg:x="418" fg:w="1"/><text x="27.3577%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::BtreeHeader::from_le_bytes (1 samples, 0.06%)</title><rect x="27.1077%" y="949" width="0.0649%" height="15" fill="rgb(226,132,13)" fg:x="418" fg:w="1"/><text x="27.3577%" y="959.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="27.1077%" y="933" width="0.0649%" height="15" fill="rgb(214,140,3)" fg:x="418" fg:w="1"/><text x="27.3577%" y="943.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="27.1077%" y="917" width="0.0649%" height="15" fill="rgb(221,177,4)" fg:x="418" fg:w="1"/><text x="27.3577%" y="927.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="27.1077%" y="901" width="0.0649%" height="15" fill="rgb(238,139,3)" fg:x="418" fg:w="1"/><text x="27.3577%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.1077%" y="885" width="0.0649%" height="15" fill="rgb(216,17,39)" fg:x="418" fg:w="1"/><text x="27.3577%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.1077%" y="869" width="0.0649%" height="15" fill="rgb(238,120,9)" fg:x="418" fg:w="1"/><text x="27.3577%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.1077%" y="853" width="0.0649%" height="15" fill="rgb(244,92,53)" fg:x="418" fg:w="1"/><text x="27.3577%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="27.1725%" y="949" width="0.0649%" height="15" fill="rgb(224,148,33)" fg:x="419" fg:w="1"/><text x="27.4225%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.1725%" y="933" width="0.0649%" height="15" fill="rgb(243,6,36)" fg:x="419" fg:w="1"/><text x="27.4225%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.1725%" y="917" width="0.0649%" height="15" fill="rgb(230,102,11)" fg:x="419" fg:w="1"/><text x="27.4225%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.1725%" y="901" width="0.0649%" height="15" fill="rgb(234,148,36)" fg:x="419" fg:w="1"/><text x="27.4225%" y="911.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_unbounded (1 samples, 0.06%)</title><rect x="27.2374%" y="949" width="0.0649%" height="15" fill="rgb(251,153,25)" fg:x="420" fg:w="1"/><text x="27.4874%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="27.2374%" y="933" width="0.0649%" height="15" fill="rgb(215,129,8)" fg:x="420" fg:w="1"/><text x="27.4874%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="27.2374%" y="917" width="0.0649%" height="15" fill="rgb(224,128,35)" fg:x="420" fg:w="1"/><text x="27.4874%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="27.2374%" y="901" width="0.0649%" height="15" fill="rgb(237,56,52)" fg:x="420" fg:w="1"/><text x="27.4874%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="27.2374%" y="885" width="0.0649%" height="15" fill="rgb(234,213,19)" fg:x="420" fg:w="1"/><text x="27.4874%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.06%)</title><rect x="27.2374%" y="869" width="0.0649%" height="15" fill="rgb(252,82,23)" fg:x="420" fg:w="1"/><text x="27.4874%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.2374%" y="853" width="0.0649%" height="15" fill="rgb(254,201,21)" fg:x="420" fg:w="1"/><text x="27.4874%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.2374%" y="837" width="0.0649%" height="15" fill="rgb(250,186,11)" fg:x="420" fg:w="1"/><text x="27.4874%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.2374%" y="821" width="0.0649%" height="15" fill="rgb(211,174,5)" fg:x="420" fg:w="1"/><text x="27.4874%" y="831.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="27.3022%" y="917" width="0.0649%" height="15" fill="rgb(214,121,10)" fg:x="421" fg:w="1"/><text x="27.5522%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="27.3022%" y="901" width="0.0649%" height="15" fill="rgb(241,66,2)" fg:x="421" fg:w="1"/><text x="27.5522%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="27.3022%" y="885" width="0.0649%" height="15" fill="rgb(220,167,19)" fg:x="421" fg:w="1"/><text x="27.5522%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="27.3022%" y="869" width="0.0649%" height="15" fill="rgb(231,54,50)" fg:x="421" fg:w="1"/><text x="27.5522%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="27.3022%" y="853" width="0.0649%" height="15" fill="rgb(239,217,53)" fg:x="421" fg:w="1"/><text x="27.5522%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="27.3022%" y="837" width="0.0649%" height="15" fill="rgb(248,8,0)" fg:x="421" fg:w="1"/><text x="27.5522%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="27.3022%" y="821" width="0.0649%" height="15" fill="rgb(229,118,37)" fg:x="421" fg:w="1"/><text x="27.5522%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="27.3022%" y="805" width="0.0649%" height="15" fill="rgb(253,223,43)" fg:x="421" fg:w="1"/><text x="27.5522%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="27.3022%" y="789" width="0.0649%" height="15" fill="rgb(211,77,36)" fg:x="421" fg:w="1"/><text x="27.5522%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="27.3022%" y="773" width="0.0649%" height="15" fill="rgb(219,3,53)" fg:x="421" fg:w="1"/><text x="27.5522%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="27.3022%" y="757" width="0.0649%" height="15" fill="rgb(244,45,42)" fg:x="421" fg:w="1"/><text x="27.5522%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.3022%" y="741" width="0.0649%" height="15" fill="rgb(225,95,27)" fg:x="421" fg:w="1"/><text x="27.5522%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.3022%" y="725" width="0.0649%" height="15" fill="rgb(207,74,8)" fg:x="421" fg:w="1"/><text x="27.5522%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.3022%" y="709" width="0.0649%" height="15" fill="rgb(243,63,36)" fg:x="421" fg:w="1"/><text x="27.5522%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="27.3671%" y="805" width="0.0649%" height="15" fill="rgb(211,180,12)" fg:x="422" fg:w="1"/><text x="27.6171%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.3671%" y="789" width="0.0649%" height="15" fill="rgb(254,166,49)" fg:x="422" fg:w="1"/><text x="27.6171%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.3671%" y="773" width="0.0649%" height="15" fill="rgb(205,19,0)" fg:x="422" fg:w="1"/><text x="27.6171%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.3671%" y="757" width="0.0649%" height="15" fill="rgb(224,172,32)" fg:x="422" fg:w="1"/><text x="27.6171%" y="767.50"></text></g><g><title>redb::multimap_table::DynamicCollection&lt;V&gt;::iter (7 samples, 0.45%)</title><rect x="27.0428%" y="981" width="0.4540%" height="15" fill="rgb(254,136,30)" fg:x="417" fg:w="7"/><text x="27.2928%" y="991.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (5 samples, 0.32%)</title><rect x="27.1725%" y="965" width="0.3243%" height="15" fill="rgb(246,19,35)" fg:x="419" fg:w="5"/><text x="27.4225%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (3 samples, 0.19%)</title><rect x="27.3022%" y="949" width="0.1946%" height="15" fill="rgb(219,24,36)" fg:x="421" fg:w="3"/><text x="27.5522%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (3 samples, 0.19%)</title><rect x="27.3022%" y="933" width="0.1946%" height="15" fill="rgb(251,55,1)" fg:x="421" fg:w="3"/><text x="27.5522%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="27.3671%" y="917" width="0.1297%" height="15" fill="rgb(218,117,39)" fg:x="422" fg:w="2"/><text x="27.6171%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="27.3671%" y="901" width="0.1297%" height="15" fill="rgb(248,169,11)" fg:x="422" fg:w="2"/><text x="27.6171%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="27.3671%" y="885" width="0.1297%" height="15" fill="rgb(244,40,44)" fg:x="422" fg:w="2"/><text x="27.6171%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="27.3671%" y="869" width="0.1297%" height="15" fill="rgb(234,62,37)" fg:x="422" fg:w="2"/><text x="27.6171%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="27.3671%" y="853" width="0.1297%" height="15" fill="rgb(207,117,42)" fg:x="422" fg:w="2"/><text x="27.6171%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="27.3671%" y="837" width="0.1297%" height="15" fill="rgb(213,43,2)" fg:x="422" fg:w="2"/><text x="27.6171%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="27.3671%" y="821" width="0.1297%" height="15" fill="rgb(244,202,51)" fg:x="422" fg:w="2"/><text x="27.6171%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="27.4319%" y="805" width="0.0649%" height="15" fill="rgb(253,174,46)" fg:x="423" fg:w="1"/><text x="27.6819%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.4319%" y="789" width="0.0649%" height="15" fill="rgb(251,23,1)" fg:x="423" fg:w="1"/><text x="27.6819%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.4319%" y="773" width="0.0649%" height="15" fill="rgb(253,26,1)" fg:x="423" fg:w="1"/><text x="27.6819%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.4319%" y="757" width="0.0649%" height="15" fill="rgb(216,89,31)" fg:x="423" fg:w="1"/><text x="27.6819%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="27.4968%" y="965" width="0.0649%" height="15" fill="rgb(209,109,5)" fg:x="424" fg:w="1"/><text x="27.7468%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.4968%" y="949" width="0.0649%" height="15" fill="rgb(229,63,13)" fg:x="424" fg:w="1"/><text x="27.7468%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.4968%" y="933" width="0.0649%" height="15" fill="rgb(238,137,54)" fg:x="424" fg:w="1"/><text x="27.7468%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.4968%" y="917" width="0.0649%" height="15" fill="rgb(228,1,9)" fg:x="424" fg:w="1"/><text x="27.7468%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,&amp;redb::multimap_table::DynamicCollection&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="27.5616%" y="965" width="0.0649%" height="15" fill="rgb(249,120,48)" fg:x="425" fg:w="1"/><text x="27.8116%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="27.5616%" y="949" width="0.0649%" height="15" fill="rgb(209,72,36)" fg:x="425" fg:w="1"/><text x="27.8116%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="27.5616%" y="933" width="0.0649%" height="15" fill="rgb(247,98,49)" fg:x="425" fg:w="1"/><text x="27.8116%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="27.5616%" y="917" width="0.0649%" height="15" fill="rgb(233,75,36)" fg:x="425" fg:w="1"/><text x="27.8116%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="27.5616%" y="901" width="0.0649%" height="15" fill="rgb(225,14,24)" fg:x="425" fg:w="1"/><text x="27.8116%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="27.5616%" y="885" width="0.0649%" height="15" fill="rgb(237,193,20)" fg:x="425" fg:w="1"/><text x="27.8116%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="27.5616%" y="869" width="0.0649%" height="15" fill="rgb(239,122,19)" fg:x="425" fg:w="1"/><text x="27.8116%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="27.5616%" y="853" width="0.0649%" height="15" fill="rgb(231,220,10)" fg:x="425" fg:w="1"/><text x="27.8116%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="27.5616%" y="837" width="0.0649%" height="15" fill="rgb(220,66,15)" fg:x="425" fg:w="1"/><text x="27.8116%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="27.5616%" y="821" width="0.0649%" height="15" fill="rgb(215,171,52)" fg:x="425" fg:w="1"/><text x="27.8116%" y="831.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="27.5616%" y="805" width="0.0649%" height="15" fill="rgb(241,169,50)" fg:x="425" fg:w="1"/><text x="27.8116%" y="815.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="27.5616%" y="789" width="0.0649%" height="15" fill="rgb(236,189,0)" fg:x="425" fg:w="1"/><text x="27.8116%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="27.5616%" y="773" width="0.0649%" height="15" fill="rgb(217,147,20)" fg:x="425" fg:w="1"/><text x="27.8116%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.5616%" y="757" width="0.0649%" height="15" fill="rgb(206,188,39)" fg:x="425" fg:w="1"/><text x="27.8116%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.5616%" y="741" width="0.0649%" height="15" fill="rgb(227,118,25)" fg:x="425" fg:w="1"/><text x="27.8116%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.5616%" y="725" width="0.0649%" height="15" fill="rgb(248,171,40)" fg:x="425" fg:w="1"/><text x="27.8116%" y="735.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="27.6265%" y="949" width="0.0649%" height="15" fill="rgb(251,90,54)" fg:x="426" fg:w="1"/><text x="27.8765%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="27.6265%" y="933" width="0.0649%" height="15" fill="rgb(234,11,46)" fg:x="426" fg:w="1"/><text x="27.8765%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="27.6265%" y="917" width="0.0649%" height="15" fill="rgb(229,134,13)" fg:x="426" fg:w="1"/><text x="27.8765%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="27.6265%" y="901" width="0.0649%" height="15" fill="rgb(223,129,3)" fg:x="426" fg:w="1"/><text x="27.8765%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="27.6265%" y="885" width="0.0649%" height="15" fill="rgb(221,124,13)" fg:x="426" fg:w="1"/><text x="27.8765%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="27.6265%" y="869" width="0.0649%" height="15" fill="rgb(234,3,18)" fg:x="426" fg:w="1"/><text x="27.8765%" y="879.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="27.6265%" y="853" width="0.0649%" height="15" fill="rgb(249,199,20)" fg:x="426" fg:w="1"/><text x="27.8765%" y="863.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="27.6265%" y="837" width="0.0649%" height="15" fill="rgb(224,134,6)" fg:x="426" fg:w="1"/><text x="27.8765%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="27.6265%" y="821" width="0.0649%" height="15" fill="rgb(254,83,26)" fg:x="426" fg:w="1"/><text x="27.8765%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.6265%" y="805" width="0.0649%" height="15" fill="rgb(217,88,9)" fg:x="426" fg:w="1"/><text x="27.8765%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.6265%" y="789" width="0.0649%" height="15" fill="rgb(225,73,2)" fg:x="426" fg:w="1"/><text x="27.8765%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.6265%" y="773" width="0.0649%" height="15" fill="rgb(226,44,39)" fg:x="426" fg:w="1"/><text x="27.8765%" y="783.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="27.6913%" y="853" width="0.0649%" height="15" fill="rgb(228,53,17)" fg:x="427" fg:w="1"/><text x="27.9413%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="27.6913%" y="837" width="0.0649%" height="15" fill="rgb(212,27,27)" fg:x="427" fg:w="1"/><text x="27.9413%" y="847.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="27.6913%" y="821" width="0.0649%" height="15" fill="rgb(241,50,6)" fg:x="427" fg:w="1"/><text x="27.9413%" y="831.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="27.6913%" y="805" width="0.0649%" height="15" fill="rgb(225,28,51)" fg:x="427" fg:w="1"/><text x="27.9413%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.6913%" y="789" width="0.0649%" height="15" fill="rgb(215,33,16)" fg:x="427" fg:w="1"/><text x="27.9413%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.6913%" y="773" width="0.0649%" height="15" fill="rgb(243,40,39)" fg:x="427" fg:w="1"/><text x="27.9413%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.6913%" y="757" width="0.0649%" height="15" fill="rgb(225,11,42)" fg:x="427" fg:w="1"/><text x="27.9413%" y="767.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="27.6913%" y="949" width="0.1297%" height="15" fill="rgb(241,220,38)" fg:x="427" fg:w="2"/><text x="27.9413%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="27.6913%" y="933" width="0.1297%" height="15" fill="rgb(244,52,35)" fg:x="427" fg:w="2"/><text x="27.9413%" y="943.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="27.6913%" y="917" width="0.1297%" height="15" fill="rgb(246,42,46)" fg:x="427" fg:w="2"/><text x="27.9413%" y="927.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="27.6913%" y="901" width="0.1297%" height="15" fill="rgb(205,184,13)" fg:x="427" fg:w="2"/><text x="27.9413%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="27.6913%" y="885" width="0.1297%" height="15" fill="rgb(209,48,36)" fg:x="427" fg:w="2"/><text x="27.9413%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="27.6913%" y="869" width="0.1297%" height="15" fill="rgb(244,34,51)" fg:x="427" fg:w="2"/><text x="27.9413%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="27.7562%" y="853" width="0.0649%" height="15" fill="rgb(221,107,33)" fg:x="428" fg:w="1"/><text x="28.0062%" y="863.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="27.7562%" y="837" width="0.0649%" height="15" fill="rgb(224,203,12)" fg:x="428" fg:w="1"/><text x="28.0062%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="27.7562%" y="821" width="0.0649%" height="15" fill="rgb(230,215,18)" fg:x="428" fg:w="1"/><text x="28.0062%" y="831.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="27.7562%" y="805" width="0.0649%" height="15" fill="rgb(206,185,35)" fg:x="428" fg:w="1"/><text x="28.0062%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.7562%" y="789" width="0.0649%" height="15" fill="rgb(228,140,34)" fg:x="428" fg:w="1"/><text x="28.0062%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.7562%" y="773" width="0.0649%" height="15" fill="rgb(208,93,13)" fg:x="428" fg:w="1"/><text x="28.0062%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.7562%" y="757" width="0.0649%" height="15" fill="rgb(221,193,39)" fg:x="428" fg:w="1"/><text x="28.0062%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.8210%" y="805" width="0.0649%" height="15" fill="rgb(241,132,34)" fg:x="429" fg:w="1"/><text x="28.0710%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.8210%" y="789" width="0.0649%" height="15" fill="rgb(221,141,10)" fg:x="429" fg:w="1"/><text x="28.0710%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.8210%" y="773" width="0.0649%" height="15" fill="rgb(226,90,31)" fg:x="429" fg:w="1"/><text x="28.0710%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="27.8210%" y="933" width="0.1297%" height="15" fill="rgb(243,75,5)" fg:x="429" fg:w="2"/><text x="28.0710%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="27.8210%" y="917" width="0.1297%" height="15" fill="rgb(227,156,21)" fg:x="429" fg:w="2"/><text x="28.0710%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="27.8210%" y="901" width="0.1297%" height="15" fill="rgb(250,195,8)" fg:x="429" fg:w="2"/><text x="28.0710%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="27.8210%" y="885" width="0.1297%" height="15" fill="rgb(220,134,5)" fg:x="429" fg:w="2"/><text x="28.0710%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="27.8210%" y="869" width="0.1297%" height="15" fill="rgb(246,106,34)" fg:x="429" fg:w="2"/><text x="28.0710%" y="879.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="27.8210%" y="853" width="0.1297%" height="15" fill="rgb(205,1,4)" fg:x="429" fg:w="2"/><text x="28.0710%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="27.8210%" y="837" width="0.1297%" height="15" fill="rgb(224,151,29)" fg:x="429" fg:w="2"/><text x="28.0710%" y="847.50"></text></g><g><title>&lt;bincode::config::trailing::RejectTrailing as bincode::config::trailing::TrailingBytes&gt;::check_end (2 samples, 0.13%)</title><rect x="27.8210%" y="821" width="0.1297%" height="15" fill="rgb(251,196,0)" fg:x="429" fg:w="2"/><text x="28.0710%" y="831.50"></text></g><g><title>bincode::de::read::SliceReader::is_finished (1 samples, 0.06%)</title><rect x="27.8859%" y="805" width="0.0649%" height="15" fill="rgb(212,127,0)" fg:x="430" fg:w="1"/><text x="28.1359%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.8859%" y="789" width="0.0649%" height="15" fill="rgb(236,71,53)" fg:x="430" fg:w="1"/><text x="28.1359%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.8859%" y="773" width="0.0649%" height="15" fill="rgb(227,99,0)" fg:x="430" fg:w="1"/><text x="28.1359%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.8859%" y="757" width="0.0649%" height="15" fill="rgb(239,89,21)" fg:x="430" fg:w="1"/><text x="28.1359%" y="767.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="27.6265%" y="965" width="0.3891%" height="15" fill="rgb(243,122,19)" fg:x="426" fg:w="6"/><text x="27.8765%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="27.8210%" y="949" width="0.1946%" height="15" fill="rgb(229,192,45)" fg:x="429" fg:w="3"/><text x="28.0710%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="27.9507%" y="933" width="0.0649%" height="15" fill="rgb(235,165,35)" fg:x="431" fg:w="1"/><text x="28.2007%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="27.9507%" y="917" width="0.0649%" height="15" fill="rgb(253,202,0)" fg:x="431" fg:w="1"/><text x="28.2007%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="27.9507%" y="901" width="0.0649%" height="15" fill="rgb(235,51,20)" fg:x="431" fg:w="1"/><text x="28.2007%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="27.9507%" y="885" width="0.0649%" height="15" fill="rgb(218,95,46)" fg:x="431" fg:w="1"/><text x="28.2007%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="27.9507%" y="869" width="0.0649%" height="15" fill="rgb(212,81,10)" fg:x="431" fg:w="1"/><text x="28.2007%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="27.9507%" y="853" width="0.0649%" height="15" fill="rgb(240,59,0)" fg:x="431" fg:w="1"/><text x="28.2007%" y="863.50"></text></g><g><title>&lt;redb::multimap_table::MultimapTable&lt;K,V&gt; as redb::multimap_table::ReadableMultimapTable&lt;K,V&gt;&gt;::get (16 samples, 1.04%)</title><rect x="27.0428%" y="997" width="1.0376%" height="15" fill="rgb(212,191,42)" fg:x="417" fg:w="16"/><text x="27.2928%" y="1007.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (9 samples, 0.58%)</title><rect x="27.4968%" y="981" width="0.5837%" height="15" fill="rgb(233,140,3)" fg:x="424" fg:w="9"/><text x="27.7468%" y="991.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::read_tree (1 samples, 0.06%)</title><rect x="28.0156%" y="965" width="0.0649%" height="15" fill="rgb(215,69,23)" fg:x="432" fg:w="1"/><text x="28.2656%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="28.0156%" y="949" width="0.0649%" height="15" fill="rgb(240,202,20)" fg:x="432" fg:w="1"/><text x="28.2656%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="28.0156%" y="933" width="0.0649%" height="15" fill="rgb(209,146,50)" fg:x="432" fg:w="1"/><text x="28.2656%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="28.0156%" y="917" width="0.0649%" height="15" fill="rgb(253,102,54)" fg:x="432" fg:w="1"/><text x="28.2656%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.0156%" y="901" width="0.0649%" height="15" fill="rgb(250,173,47)" fg:x="432" fg:w="1"/><text x="28.2656%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.0156%" y="885" width="0.0649%" height="15" fill="rgb(232,142,7)" fg:x="432" fg:w="1"/><text x="28.2656%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.0156%" y="869" width="0.0649%" height="15" fill="rgb(230,157,47)" fg:x="432" fg:w="1"/><text x="28.2656%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.0804%" y="965" width="0.0649%" height="15" fill="rgb(214,177,35)" fg:x="433" fg:w="1"/><text x="28.3304%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.0804%" y="949" width="0.0649%" height="15" fill="rgb(234,119,46)" fg:x="433" fg:w="1"/><text x="28.3304%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.0804%" y="933" width="0.0649%" height="15" fill="rgb(241,180,50)" fg:x="433" fg:w="1"/><text x="28.3304%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="28.1453%" y="965" width="0.0649%" height="15" fill="rgb(221,54,25)" fg:x="434" fg:w="1"/><text x="28.3953%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="28.1453%" y="949" width="0.0649%" height="15" fill="rgb(209,157,44)" fg:x="434" fg:w="1"/><text x="28.3953%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.1453%" y="933" width="0.0649%" height="15" fill="rgb(246,115,41)" fg:x="434" fg:w="1"/><text x="28.3953%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.1453%" y="917" width="0.0649%" height="15" fill="rgb(229,86,1)" fg:x="434" fg:w="1"/><text x="28.3953%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.1453%" y="901" width="0.0649%" height="15" fill="rgb(240,108,53)" fg:x="434" fg:w="1"/><text x="28.3953%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="28.2101%" y="949" width="0.0649%" height="15" fill="rgb(227,134,2)" fg:x="435" fg:w="1"/><text x="28.4601%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="28.2101%" y="933" width="0.0649%" height="15" fill="rgb(213,129,25)" fg:x="435" fg:w="1"/><text x="28.4601%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.2101%" y="917" width="0.0649%" height="15" fill="rgb(226,35,21)" fg:x="435" fg:w="1"/><text x="28.4601%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.2101%" y="901" width="0.0649%" height="15" fill="rgb(208,129,26)" fg:x="435" fg:w="1"/><text x="28.4601%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.2101%" y="885" width="0.0649%" height="15" fill="rgb(224,83,6)" fg:x="435" fg:w="1"/><text x="28.4601%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="28.2750%" y="949" width="0.0649%" height="15" fill="rgb(227,52,39)" fg:x="436" fg:w="1"/><text x="28.5250%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="28.2750%" y="933" width="0.0649%" height="15" fill="rgb(241,30,17)" fg:x="436" fg:w="1"/><text x="28.5250%" y="943.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="28.2750%" y="917" width="0.0649%" height="15" fill="rgb(246,186,42)" fg:x="436" fg:w="1"/><text x="28.5250%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.06%)</title><rect x="28.2750%" y="901" width="0.0649%" height="15" fill="rgb(221,169,15)" fg:x="436" fg:w="1"/><text x="28.5250%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="28.2750%" y="885" width="0.0649%" height="15" fill="rgb(235,108,21)" fg:x="436" fg:w="1"/><text x="28.5250%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="28.2750%" y="869" width="0.0649%" height="15" fill="rgb(219,148,30)" fg:x="436" fg:w="1"/><text x="28.5250%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="28.2750%" y="853" width="0.0649%" height="15" fill="rgb(220,109,5)" fg:x="436" fg:w="1"/><text x="28.5250%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="28.2750%" y="837" width="0.0649%" height="15" fill="rgb(213,203,48)" fg:x="436" fg:w="1"/><text x="28.5250%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.2750%" y="821" width="0.0649%" height="15" fill="rgb(244,71,33)" fg:x="436" fg:w="1"/><text x="28.5250%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.2750%" y="805" width="0.0649%" height="15" fill="rgb(209,23,2)" fg:x="436" fg:w="1"/><text x="28.5250%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.2750%" y="789" width="0.0649%" height="15" fill="rgb(219,97,7)" fg:x="436" fg:w="1"/><text x="28.5250%" y="799.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="28.3398%" y="693" width="0.0649%" height="15" fill="rgb(216,161,23)" fg:x="437" fg:w="1"/><text x="28.5898%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="28.3398%" y="677" width="0.0649%" height="15" fill="rgb(207,45,42)" fg:x="437" fg:w="1"/><text x="28.5898%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="28.3398%" y="661" width="0.0649%" height="15" fill="rgb(241,61,4)" fg:x="437" fg:w="1"/><text x="28.5898%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="28.3398%" y="645" width="0.0649%" height="15" fill="rgb(236,170,1)" fg:x="437" fg:w="1"/><text x="28.5898%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="28.3398%" y="629" width="0.0649%" height="15" fill="rgb(239,72,5)" fg:x="437" fg:w="1"/><text x="28.5898%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="28.3398%" y="613" width="0.0649%" height="15" fill="rgb(214,13,50)" fg:x="437" fg:w="1"/><text x="28.5898%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="28.3398%" y="597" width="0.0649%" height="15" fill="rgb(224,88,9)" fg:x="437" fg:w="1"/><text x="28.5898%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="28.3398%" y="581" width="0.0649%" height="15" fill="rgb(238,192,34)" fg:x="437" fg:w="1"/><text x="28.5898%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="28.3398%" y="565" width="0.0649%" height="15" fill="rgb(217,203,50)" fg:x="437" fg:w="1"/><text x="28.5898%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="28.3398%" y="549" width="0.0649%" height="15" fill="rgb(241,123,32)" fg:x="437" fg:w="1"/><text x="28.5898%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.3398%" y="533" width="0.0649%" height="15" fill="rgb(248,151,39)" fg:x="437" fg:w="1"/><text x="28.5898%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.3398%" y="517" width="0.0649%" height="15" fill="rgb(208,89,6)" fg:x="437" fg:w="1"/><text x="28.5898%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.3398%" y="501" width="0.0649%" height="15" fill="rgb(254,43,26)" fg:x="437" fg:w="1"/><text x="28.5898%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.4047%" y="581" width="0.0649%" height="15" fill="rgb(216,158,13)" fg:x="438" fg:w="1"/><text x="28.6547%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.4047%" y="565" width="0.0649%" height="15" fill="rgb(212,47,37)" fg:x="438" fg:w="1"/><text x="28.6547%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.4047%" y="549" width="0.0649%" height="15" fill="rgb(254,16,10)" fg:x="438" fg:w="1"/><text x="28.6547%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="28.3398%" y="789" width="0.1946%" height="15" fill="rgb(223,228,16)" fg:x="437" fg:w="3"/><text x="28.5898%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="28.3398%" y="773" width="0.1946%" height="15" fill="rgb(249,108,50)" fg:x="437" fg:w="3"/><text x="28.5898%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="28.3398%" y="757" width="0.1946%" height="15" fill="rgb(208,220,5)" fg:x="437" fg:w="3"/><text x="28.5898%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="28.3398%" y="741" width="0.1946%" height="15" fill="rgb(217,89,48)" fg:x="437" fg:w="3"/><text x="28.5898%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="28.3398%" y="725" width="0.1946%" height="15" fill="rgb(212,113,41)" fg:x="437" fg:w="3"/><text x="28.5898%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="28.3398%" y="709" width="0.1946%" height="15" fill="rgb(231,127,5)" fg:x="437" fg:w="3"/><text x="28.5898%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="28.4047%" y="693" width="0.1297%" height="15" fill="rgb(217,141,17)" fg:x="438" fg:w="2"/><text x="28.6547%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="28.4047%" y="677" width="0.1297%" height="15" fill="rgb(245,125,54)" fg:x="438" fg:w="2"/><text x="28.6547%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="28.4047%" y="661" width="0.1297%" height="15" fill="rgb(248,125,3)" fg:x="438" fg:w="2"/><text x="28.6547%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="28.4047%" y="645" width="0.1297%" height="15" fill="rgb(236,119,51)" fg:x="438" fg:w="2"/><text x="28.6547%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="28.4047%" y="629" width="0.1297%" height="15" fill="rgb(239,99,8)" fg:x="438" fg:w="2"/><text x="28.6547%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="28.4047%" y="613" width="0.1297%" height="15" fill="rgb(224,228,4)" fg:x="438" fg:w="2"/><text x="28.6547%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="28.4047%" y="597" width="0.1297%" height="15" fill="rgb(220,131,45)" fg:x="438" fg:w="2"/><text x="28.6547%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="28.4695%" y="581" width="0.0649%" height="15" fill="rgb(215,62,5)" fg:x="439" fg:w="1"/><text x="28.7195%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="28.4695%" y="565" width="0.0649%" height="15" fill="rgb(253,12,24)" fg:x="439" fg:w="1"/><text x="28.7195%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="28.4695%" y="549" width="0.0649%" height="15" fill="rgb(248,120,50)" fg:x="439" fg:w="1"/><text x="28.7195%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="28.4695%" y="533" width="0.0649%" height="15" fill="rgb(245,194,10)" fg:x="439" fg:w="1"/><text x="28.7195%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="28.4695%" y="517" width="0.0649%" height="15" fill="rgb(241,149,38)" fg:x="439" fg:w="1"/><text x="28.7195%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="28.4695%" y="501" width="0.0649%" height="15" fill="rgb(219,215,7)" fg:x="439" fg:w="1"/><text x="28.7195%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="28.4695%" y="485" width="0.0649%" height="15" fill="rgb(208,120,31)" fg:x="439" fg:w="1"/><text x="28.7195%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="28.4695%" y="469" width="0.0649%" height="15" fill="rgb(244,30,8)" fg:x="439" fg:w="1"/><text x="28.7195%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="28.4695%" y="453" width="0.0649%" height="15" fill="rgb(238,35,44)" fg:x="439" fg:w="1"/><text x="28.7195%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="28.4695%" y="437" width="0.0649%" height="15" fill="rgb(243,218,37)" fg:x="439" fg:w="1"/><text x="28.7195%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.4695%" y="421" width="0.0649%" height="15" fill="rgb(218,169,10)" fg:x="439" fg:w="1"/><text x="28.7195%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.4695%" y="405" width="0.0649%" height="15" fill="rgb(221,144,10)" fg:x="439" fg:w="1"/><text x="28.7195%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.4695%" y="389" width="0.0649%" height="15" fill="rgb(226,41,38)" fg:x="439" fg:w="1"/><text x="28.7195%" y="399.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="28.3398%" y="901" width="0.2594%" height="15" fill="rgb(228,3,1)" fg:x="437" fg:w="4"/><text x="28.5898%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="28.3398%" y="885" width="0.2594%" height="15" fill="rgb(209,129,12)" fg:x="437" fg:w="4"/><text x="28.5898%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="28.3398%" y="869" width="0.2594%" height="15" fill="rgb(213,136,33)" fg:x="437" fg:w="4"/><text x="28.5898%" y="879.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="28.3398%" y="853" width="0.2594%" height="15" fill="rgb(209,181,29)" fg:x="437" fg:w="4"/><text x="28.5898%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="28.3398%" y="837" width="0.2594%" height="15" fill="rgb(234,173,18)" fg:x="437" fg:w="4"/><text x="28.5898%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="28.3398%" y="821" width="0.2594%" height="15" fill="rgb(227,73,47)" fg:x="437" fg:w="4"/><text x="28.5898%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="28.3398%" y="805" width="0.2594%" height="15" fill="rgb(234,9,34)" fg:x="437" fg:w="4"/><text x="28.5898%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.5344%" y="789" width="0.0649%" height="15" fill="rgb(235,172,15)" fg:x="440" fg:w="1"/><text x="28.7844%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.5344%" y="773" width="0.0649%" height="15" fill="rgb(245,61,2)" fg:x="440" fg:w="1"/><text x="28.7844%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.5344%" y="757" width="0.0649%" height="15" fill="rgb(238,39,47)" fg:x="440" fg:w="1"/><text x="28.7844%" y="767.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (7 samples, 0.45%)</title><rect x="28.2101%" y="965" width="0.4540%" height="15" fill="rgb(234,37,24)" fg:x="435" fg:w="7"/><text x="28.4601%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (5 samples, 0.32%)</title><rect x="28.3398%" y="949" width="0.3243%" height="15" fill="rgb(248,223,24)" fg:x="437" fg:w="5"/><text x="28.5898%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (5 samples, 0.32%)</title><rect x="28.3398%" y="933" width="0.3243%" height="15" fill="rgb(223,12,15)" fg:x="437" fg:w="5"/><text x="28.5898%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (5 samples, 0.32%)</title><rect x="28.3398%" y="917" width="0.3243%" height="15" fill="rgb(249,6,3)" fg:x="437" fg:w="5"/><text x="28.5898%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="28.5992%" y="901" width="0.0649%" height="15" fill="rgb(237,105,33)" fg:x="441" fg:w="1"/><text x="28.8492%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="28.5992%" y="885" width="0.0649%" height="15" fill="rgb(252,208,35)" fg:x="441" fg:w="1"/><text x="28.8492%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_section_start (1 samples, 0.06%)</title><rect x="28.5992%" y="869" width="0.0649%" height="15" fill="rgb(215,181,35)" fg:x="441" fg:w="1"/><text x="28.8492%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.5992%" y="853" width="0.0649%" height="15" fill="rgb(246,212,3)" fg:x="441" fg:w="1"/><text x="28.8492%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.5992%" y="837" width="0.0649%" height="15" fill="rgb(247,156,24)" fg:x="441" fg:w="1"/><text x="28.8492%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.5992%" y="821" width="0.0649%" height="15" fill="rgb(248,9,31)" fg:x="441" fg:w="1"/><text x="28.8492%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="28.6641%" y="917" width="0.0649%" height="15" fill="rgb(234,26,45)" fg:x="442" fg:w="1"/><text x="28.9141%" y="927.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="28.6641%" y="901" width="0.0649%" height="15" fill="rgb(249,11,32)" fg:x="442" fg:w="1"/><text x="28.9141%" y="911.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (1 samples, 0.06%)</title><rect x="28.6641%" y="885" width="0.0649%" height="15" fill="rgb(249,162,33)" fg:x="442" fg:w="1"/><text x="28.9141%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.06%)</title><rect x="28.6641%" y="869" width="0.0649%" height="15" fill="rgb(232,4,32)" fg:x="442" fg:w="1"/><text x="28.9141%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.06%)</title><rect x="28.6641%" y="853" width="0.0649%" height="15" fill="rgb(212,5,45)" fg:x="442" fg:w="1"/><text x="28.9141%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.6641%" y="837" width="0.0649%" height="15" fill="rgb(227,95,13)" fg:x="442" fg:w="1"/><text x="28.9141%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.6641%" y="821" width="0.0649%" height="15" fill="rgb(223,205,10)" fg:x="442" fg:w="1"/><text x="28.9141%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.6641%" y="805" width="0.0649%" height="15" fill="rgb(222,178,8)" fg:x="442" fg:w="1"/><text x="28.9141%" y="815.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="28.7289%" y="901" width="0.0649%" height="15" fill="rgb(216,13,22)" fg:x="443" fg:w="1"/><text x="28.9789%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="28.7289%" y="885" width="0.0649%" height="15" fill="rgb(240,167,12)" fg:x="443" fg:w="1"/><text x="28.9789%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="28.7289%" y="869" width="0.0649%" height="15" fill="rgb(235,68,35)" fg:x="443" fg:w="1"/><text x="28.9789%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="28.7289%" y="853" width="0.0649%" height="15" fill="rgb(253,40,27)" fg:x="443" fg:w="1"/><text x="28.9789%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="28.7289%" y="837" width="0.0649%" height="15" fill="rgb(214,19,28)" fg:x="443" fg:w="1"/><text x="28.9789%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="28.7289%" y="821" width="0.0649%" height="15" fill="rgb(210,167,45)" fg:x="443" fg:w="1"/><text x="28.9789%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="28.7289%" y="805" width="0.0649%" height="15" fill="rgb(232,97,40)" fg:x="443" fg:w="1"/><text x="28.9789%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="28.7289%" y="789" width="0.0649%" height="15" fill="rgb(250,35,23)" fg:x="443" fg:w="1"/><text x="28.9789%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="28.7289%" y="773" width="0.0649%" height="15" fill="rgb(248,47,53)" fg:x="443" fg:w="1"/><text x="28.9789%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="28.7289%" y="757" width="0.0649%" height="15" fill="rgb(226,58,50)" fg:x="443" fg:w="1"/><text x="28.9789%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.7289%" y="741" width="0.0649%" height="15" fill="rgb(217,105,26)" fg:x="443" fg:w="1"/><text x="28.9789%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.7289%" y="725" width="0.0649%" height="15" fill="rgb(208,64,1)" fg:x="443" fg:w="1"/><text x="28.9789%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.7289%" y="709" width="0.0649%" height="15" fill="rgb(214,80,1)" fg:x="443" fg:w="1"/><text x="28.9789%" y="719.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (2 samples, 0.13%)</title><rect x="28.7289%" y="917" width="0.1297%" height="15" fill="rgb(206,175,26)" fg:x="443" fg:w="2"/><text x="28.9789%" y="927.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="28.7938%" y="901" width="0.0649%" height="15" fill="rgb(235,156,37)" fg:x="444" fg:w="1"/><text x="29.0438%" y="911.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="28.7938%" y="885" width="0.0649%" height="15" fill="rgb(213,100,9)" fg:x="444" fg:w="1"/><text x="29.0438%" y="895.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="28.7938%" y="869" width="0.0649%" height="15" fill="rgb(241,15,13)" fg:x="444" fg:w="1"/><text x="29.0438%" y="879.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.06%)</title><rect x="28.7938%" y="853" width="0.0649%" height="15" fill="rgb(205,97,43)" fg:x="444" fg:w="1"/><text x="29.0438%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.06%)</title><rect x="28.7938%" y="837" width="0.0649%" height="15" fill="rgb(216,106,32)" fg:x="444" fg:w="1"/><text x="29.0438%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="28.7938%" y="821" width="0.0649%" height="15" fill="rgb(226,200,8)" fg:x="444" fg:w="1"/><text x="29.0438%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.7938%" y="805" width="0.0649%" height="15" fill="rgb(244,54,29)" fg:x="444" fg:w="1"/><text x="29.0438%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.7938%" y="789" width="0.0649%" height="15" fill="rgb(252,169,12)" fg:x="444" fg:w="1"/><text x="29.0438%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.7938%" y="773" width="0.0649%" height="15" fill="rgb(231,199,11)" fg:x="444" fg:w="1"/><text x="29.0438%" y="783.50"></text></g><g><title>&lt;redb::table::Table&lt;K,V&gt; as redb::table::ReadableTable&lt;K,V&gt;&gt;::get (13 samples, 0.84%)</title><rect x="28.0804%" y="997" width="0.8431%" height="15" fill="rgb(233,191,18)" fg:x="433" fg:w="13"/><text x="28.3304%" y="1007.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (13 samples, 0.84%)</title><rect x="28.0804%" y="981" width="0.8431%" height="15" fill="rgb(215,83,47)" fg:x="433" fg:w="13"/><text x="28.3304%" y="991.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::read_tree (4 samples, 0.26%)</title><rect x="28.6641%" y="965" width="0.2594%" height="15" fill="rgb(251,67,19)" fg:x="442" fg:w="4"/><text x="28.9141%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (4 samples, 0.26%)</title><rect x="28.6641%" y="949" width="0.2594%" height="15" fill="rgb(240,7,20)" fg:x="442" fg:w="4"/><text x="28.9141%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (4 samples, 0.26%)</title><rect x="28.6641%" y="933" width="0.2594%" height="15" fill="rgb(210,150,26)" fg:x="442" fg:w="4"/><text x="28.9141%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="28.8586%" y="917" width="0.0649%" height="15" fill="rgb(228,75,42)" fg:x="445" fg:w="1"/><text x="29.1086%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="28.8586%" y="901" width="0.0649%" height="15" fill="rgb(237,134,48)" fg:x="445" fg:w="1"/><text x="29.1086%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="28.8586%" y="885" width="0.0649%" height="15" fill="rgb(205,80,50)" fg:x="445" fg:w="1"/><text x="29.1086%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="28.8586%" y="869" width="0.0649%" height="15" fill="rgb(217,74,48)" fg:x="445" fg:w="1"/><text x="29.1086%" y="879.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="28.8586%" y="853" width="0.0649%" height="15" fill="rgb(205,82,50)" fg:x="445" fg:w="1"/><text x="29.1086%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.8586%" y="837" width="0.0649%" height="15" fill="rgb(228,1,33)" fg:x="445" fg:w="1"/><text x="29.1086%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.8586%" y="821" width="0.0649%" height="15" fill="rgb(214,50,23)" fg:x="445" fg:w="1"/><text x="29.1086%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.8586%" y="805" width="0.0649%" height="15" fill="rgb(210,62,9)" fg:x="445" fg:w="1"/><text x="29.1086%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="28.9235%" y="965" width="0.0649%" height="15" fill="rgb(210,104,37)" fg:x="446" fg:w="1"/><text x="29.1735%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="28.9235%" y="949" width="0.0649%" height="15" fill="rgb(232,104,43)" fg:x="446" fg:w="1"/><text x="29.1735%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="28.9235%" y="933" width="0.0649%" height="15" fill="rgb(244,52,6)" fg:x="446" fg:w="1"/><text x="29.1735%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="28.9235%" y="917" width="0.0649%" height="15" fill="rgb(211,174,52)" fg:x="446" fg:w="1"/><text x="29.1735%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="28.9235%" y="901" width="0.0649%" height="15" fill="rgb(229,48,4)" fg:x="446" fg:w="1"/><text x="29.1735%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="28.9235%" y="885" width="0.0649%" height="15" fill="rgb(205,155,16)" fg:x="446" fg:w="1"/><text x="29.1735%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="28.9235%" y="869" width="0.0649%" height="15" fill="rgb(211,141,53)" fg:x="446" fg:w="1"/><text x="29.1735%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="28.9235%" y="853" width="0.0649%" height="15" fill="rgb(240,148,11)" fg:x="446" fg:w="1"/><text x="29.1735%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="28.9235%" y="837" width="0.0649%" height="15" fill="rgb(214,45,23)" fg:x="446" fg:w="1"/><text x="29.1735%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="28.9235%" y="821" width="0.0649%" height="15" fill="rgb(248,74,26)" fg:x="446" fg:w="1"/><text x="29.1735%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (1 samples, 0.06%)</title><rect x="28.9235%" y="805" width="0.0649%" height="15" fill="rgb(218,121,16)" fg:x="446" fg:w="1"/><text x="29.1735%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::to_base_index (1 samples, 0.06%)</title><rect x="28.9235%" y="789" width="0.0649%" height="15" fill="rgb(218,10,47)" fg:x="446" fg:w="1"/><text x="29.1735%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.9235%" y="773" width="0.0649%" height="15" fill="rgb(227,99,14)" fg:x="446" fg:w="1"/><text x="29.1735%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.9235%" y="757" width="0.0649%" height="15" fill="rgb(229,83,46)" fg:x="446" fg:w="1"/><text x="29.1735%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.9235%" y="741" width="0.0649%" height="15" fill="rgb(228,25,1)" fg:x="446" fg:w="1"/><text x="29.1735%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="28.9883%" y="917" width="0.0649%" height="15" fill="rgb(252,190,15)" fg:x="447" fg:w="1"/><text x="29.2383%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="28.9883%" y="901" width="0.0649%" height="15" fill="rgb(213,103,51)" fg:x="447" fg:w="1"/><text x="29.2383%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="28.9883%" y="885" width="0.0649%" height="15" fill="rgb(220,38,44)" fg:x="447" fg:w="1"/><text x="29.2383%" y="895.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="29.0532%" y="901" width="0.0649%" height="15" fill="rgb(210,45,26)" fg:x="448" fg:w="1"/><text x="29.3032%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="29.0532%" y="885" width="0.0649%" height="15" fill="rgb(205,95,48)" fg:x="448" fg:w="1"/><text x="29.3032%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="29.0532%" y="869" width="0.0649%" height="15" fill="rgb(225,179,37)" fg:x="448" fg:w="1"/><text x="29.3032%" y="879.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="29.0532%" y="853" width="0.0649%" height="15" fill="rgb(230,209,3)" fg:x="448" fg:w="1"/><text x="29.3032%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="29.0532%" y="837" width="0.0649%" height="15" fill="rgb(248,12,46)" fg:x="448" fg:w="1"/><text x="29.3032%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="29.0532%" y="821" width="0.0649%" height="15" fill="rgb(234,18,0)" fg:x="448" fg:w="1"/><text x="29.3032%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="29.0532%" y="805" width="0.0649%" height="15" fill="rgb(238,197,14)" fg:x="448" fg:w="1"/><text x="29.3032%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.19%)</title><rect x="29.1180%" y="901" width="0.1946%" height="15" fill="rgb(251,162,48)" fg:x="449" fg:w="3"/><text x="29.3680%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="29.1180%" y="885" width="0.1946%" height="15" fill="rgb(237,73,42)" fg:x="449" fg:w="3"/><text x="29.3680%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="29.1180%" y="869" width="0.1946%" height="15" fill="rgb(211,108,8)" fg:x="449" fg:w="3"/><text x="29.3680%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="29.1180%" y="853" width="0.1946%" height="15" fill="rgb(213,45,22)" fg:x="449" fg:w="3"/><text x="29.3680%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="29.3126%" y="901" width="0.0649%" height="15" fill="rgb(252,154,5)" fg:x="452" fg:w="1"/><text x="29.5626%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="29.3126%" y="885" width="0.0649%" height="15" fill="rgb(221,79,52)" fg:x="452" fg:w="1"/><text x="29.5626%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="29.3126%" y="869" width="0.0649%" height="15" fill="rgb(229,220,36)" fg:x="452" fg:w="1"/><text x="29.5626%" y="879.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="29.3126%" y="853" width="0.0649%" height="15" fill="rgb(211,17,16)" fg:x="452" fg:w="1"/><text x="29.5626%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="29.3126%" y="837" width="0.0649%" height="15" fill="rgb(222,55,31)" fg:x="452" fg:w="1"/><text x="29.5626%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="29.3126%" y="821" width="0.0649%" height="15" fill="rgb(221,221,31)" fg:x="452" fg:w="1"/><text x="29.5626%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="29.3126%" y="805" width="0.0649%" height="15" fill="rgb(227,168,26)" fg:x="452" fg:w="1"/><text x="29.5626%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="29.3126%" y="789" width="0.0649%" height="15" fill="rgb(224,139,9)" fg:x="452" fg:w="1"/><text x="29.5626%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="29.3126%" y="773" width="0.0649%" height="15" fill="rgb(254,172,0)" fg:x="452" fg:w="1"/><text x="29.5626%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (7 samples, 0.45%)</title><rect x="29.0532%" y="917" width="0.4540%" height="15" fill="rgb(235,203,1)" fg:x="448" fg:w="7"/><text x="29.3032%" y="927.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (2 samples, 0.13%)</title><rect x="29.3774%" y="901" width="0.1297%" height="15" fill="rgb(216,205,24)" fg:x="453" fg:w="2"/><text x="29.6274%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (2 samples, 0.13%)</title><rect x="29.3774%" y="885" width="0.1297%" height="15" fill="rgb(233,24,6)" fg:x="453" fg:w="2"/><text x="29.6274%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="29.3774%" y="869" width="0.1297%" height="15" fill="rgb(244,110,9)" fg:x="453" fg:w="2"/><text x="29.6274%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (2 samples, 0.13%)</title><rect x="29.3774%" y="853" width="0.1297%" height="15" fill="rgb(239,222,42)" fg:x="453" fg:w="2"/><text x="29.6274%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.13%)</title><rect x="29.3774%" y="837" width="0.1297%" height="15" fill="rgb(218,145,13)" fg:x="453" fg:w="2"/><text x="29.6274%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.13%)</title><rect x="29.3774%" y="821" width="0.1297%" height="15" fill="rgb(207,69,11)" fg:x="453" fg:w="2"/><text x="29.6274%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="29.3774%" y="805" width="0.1297%" height="15" fill="rgb(220,223,22)" fg:x="453" fg:w="2"/><text x="29.6274%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="29.3774%" y="789" width="0.1297%" height="15" fill="rgb(245,102,5)" fg:x="453" fg:w="2"/><text x="29.6274%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="29.3774%" y="773" width="0.1297%" height="15" fill="rgb(211,148,2)" fg:x="453" fg:w="2"/><text x="29.6274%" y="783.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="29.5071%" y="901" width="0.0649%" height="15" fill="rgb(241,13,44)" fg:x="455" fg:w="1"/><text x="29.7571%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="29.5071%" y="885" width="0.0649%" height="15" fill="rgb(219,137,21)" fg:x="455" fg:w="1"/><text x="29.7571%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="29.5071%" y="869" width="0.0649%" height="15" fill="rgb(242,206,5)" fg:x="455" fg:w="1"/><text x="29.7571%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="29.5071%" y="853" width="0.0649%" height="15" fill="rgb(217,114,22)" fg:x="455" fg:w="1"/><text x="29.7571%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="29.5071%" y="837" width="0.0649%" height="15" fill="rgb(253,206,42)" fg:x="455" fg:w="1"/><text x="29.7571%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="29.5071%" y="821" width="0.0649%" height="15" fill="rgb(236,102,18)" fg:x="455" fg:w="1"/><text x="29.7571%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="29.5720%" y="901" width="0.0649%" height="15" fill="rgb(208,59,49)" fg:x="456" fg:w="1"/><text x="29.8220%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="29.5720%" y="885" width="0.0649%" height="15" fill="rgb(215,194,28)" fg:x="456" fg:w="1"/><text x="29.8220%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="29.5720%" y="869" width="0.0649%" height="15" fill="rgb(243,207,11)" fg:x="456" fg:w="1"/><text x="29.8220%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="29.6368%" y="901" width="0.0649%" height="15" fill="rgb(254,179,35)" fg:x="457" fg:w="1"/><text x="29.8868%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="29.6368%" y="885" width="0.0649%" height="15" fill="rgb(235,97,3)" fg:x="457" fg:w="1"/><text x="29.8868%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="29.6368%" y="869" width="0.0649%" height="15" fill="rgb(215,155,33)" fg:x="457" fg:w="1"/><text x="29.8868%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="29.6368%" y="853" width="0.0649%" height="15" fill="rgb(223,128,12)" fg:x="457" fg:w="1"/><text x="29.8868%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="29.7017%" y="885" width="0.1297%" height="15" fill="rgb(208,157,18)" fg:x="458" fg:w="2"/><text x="29.9517%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="29.7017%" y="869" width="0.1297%" height="15" fill="rgb(249,70,54)" fg:x="458" fg:w="2"/><text x="29.9517%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="29.7017%" y="853" width="0.1297%" height="15" fill="rgb(244,118,24)" fg:x="458" fg:w="2"/><text x="29.9517%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.19%)</title><rect x="29.7017%" y="901" width="0.1946%" height="15" fill="rgb(211,54,0)" fg:x="458" fg:w="3"/><text x="29.9517%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="29.8314%" y="885" width="0.0649%" height="15" fill="rgb(245,137,45)" fg:x="460" fg:w="1"/><text x="30.0814%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="29.8314%" y="869" width="0.0649%" height="15" fill="rgb(232,154,31)" fg:x="460" fg:w="1"/><text x="30.0814%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="29.8314%" y="853" width="0.0649%" height="15" fill="rgb(253,6,39)" fg:x="460" fg:w="1"/><text x="30.0814%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="29.8314%" y="837" width="0.0649%" height="15" fill="rgb(234,183,24)" fg:x="460" fg:w="1"/><text x="30.0814%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="29.8314%" y="821" width="0.0649%" height="15" fill="rgb(252,84,40)" fg:x="460" fg:w="1"/><text x="30.0814%" y="831.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.04%)</title><rect x="28.9883%" y="949" width="1.0376%" height="15" fill="rgb(224,65,2)" fg:x="447" fg:w="16"/><text x="29.2383%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (16 samples, 1.04%)</title><rect x="28.9883%" y="933" width="1.0376%" height="15" fill="rgb(229,38,24)" fg:x="447" fg:w="16"/><text x="29.2383%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (8 samples, 0.52%)</title><rect x="29.5071%" y="917" width="0.5188%" height="15" fill="rgb(218,131,50)" fg:x="455" fg:w="8"/><text x="29.7571%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (2 samples, 0.13%)</title><rect x="29.8962%" y="901" width="0.1297%" height="15" fill="rgb(233,106,18)" fg:x="461" fg:w="2"/><text x="30.1462%" y="911.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.13%)</title><rect x="29.8962%" y="885" width="0.1297%" height="15" fill="rgb(220,216,11)" fg:x="461" fg:w="2"/><text x="30.1462%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.13%)</title><rect x="29.8962%" y="869" width="0.1297%" height="15" fill="rgb(251,100,45)" fg:x="461" fg:w="2"/><text x="30.1462%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (2 samples, 0.13%)</title><rect x="29.8962%" y="853" width="0.1297%" height="15" fill="rgb(235,143,32)" fg:x="461" fg:w="2"/><text x="30.1462%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="29.8962%" y="837" width="0.1297%" height="15" fill="rgb(248,124,34)" fg:x="461" fg:w="2"/><text x="30.1462%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="29.8962%" y="821" width="0.1297%" height="15" fill="rgb(225,221,4)" fg:x="461" fg:w="2"/><text x="30.1462%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="29.8962%" y="805" width="0.1297%" height="15" fill="rgb(242,27,43)" fg:x="461" fg:w="2"/><text x="30.1462%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (17 samples, 1.10%)</title><rect x="28.9883%" y="965" width="1.1025%" height="15" fill="rgb(227,54,8)" fg:x="447" fg:w="17"/><text x="29.2383%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="30.0259%" y="949" width="0.0649%" height="15" fill="rgb(253,139,49)" fg:x="463" fg:w="1"/><text x="30.2759%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="30.0259%" y="933" width="0.0649%" height="15" fill="rgb(231,26,43)" fg:x="463" fg:w="1"/><text x="30.2759%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="30.0259%" y="917" width="0.0649%" height="15" fill="rgb(207,121,39)" fg:x="463" fg:w="1"/><text x="30.2759%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.06%)</title><rect x="30.0259%" y="901" width="0.0649%" height="15" fill="rgb(223,101,35)" fg:x="463" fg:w="1"/><text x="30.2759%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="30.0259%" y="885" width="0.0649%" height="15" fill="rgb(232,87,23)" fg:x="463" fg:w="1"/><text x="30.2759%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="30.0259%" y="869" width="0.0649%" height="15" fill="rgb(225,180,29)" fg:x="463" fg:w="1"/><text x="30.2759%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="30.0259%" y="853" width="0.0649%" height="15" fill="rgb(225,25,17)" fg:x="463" fg:w="1"/><text x="30.2759%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="30.0259%" y="837" width="0.0649%" height="15" fill="rgb(223,8,52)" fg:x="463" fg:w="1"/><text x="30.2759%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="30.0259%" y="821" width="0.0649%" height="15" fill="rgb(246,42,21)" fg:x="463" fg:w="1"/><text x="30.2759%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="30.0259%" y="805" width="0.0649%" height="15" fill="rgb(205,64,43)" fg:x="463" fg:w="1"/><text x="30.2759%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="30.0259%" y="789" width="0.0649%" height="15" fill="rgb(221,160,13)" fg:x="463" fg:w="1"/><text x="30.2759%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="30.0259%" y="773" width="0.0649%" height="15" fill="rgb(239,58,35)" fg:x="463" fg:w="1"/><text x="30.2759%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="30.0259%" y="757" width="0.0649%" height="15" fill="rgb(251,26,40)" fg:x="463" fg:w="1"/><text x="30.2759%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="30.0259%" y="741" width="0.0649%" height="15" fill="rgb(247,0,4)" fg:x="463" fg:w="1"/><text x="30.2759%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="30.0259%" y="725" width="0.0649%" height="15" fill="rgb(218,130,10)" fg:x="463" fg:w="1"/><text x="30.2759%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="30.0259%" y="709" width="0.0649%" height="15" fill="rgb(239,32,7)" fg:x="463" fg:w="1"/><text x="30.2759%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="30.0259%" y="693" width="0.0649%" height="15" fill="rgb(210,192,24)" fg:x="463" fg:w="1"/><text x="30.2759%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="30.0259%" y="677" width="0.0649%" height="15" fill="rgb(226,212,17)" fg:x="463" fg:w="1"/><text x="30.2759%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="30.0259%" y="661" width="0.0649%" height="15" fill="rgb(219,201,28)" fg:x="463" fg:w="1"/><text x="30.2759%" y="671.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="30.0259%" y="645" width="0.0649%" height="15" fill="rgb(235,207,41)" fg:x="463" fg:w="1"/><text x="30.2759%" y="655.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="30.0259%" y="629" width="0.0649%" height="15" fill="rgb(241,95,54)" fg:x="463" fg:w="1"/><text x="30.2759%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.0259%" y="613" width="0.0649%" height="15" fill="rgb(248,12,23)" fg:x="463" fg:w="1"/><text x="30.2759%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.0259%" y="597" width="0.0649%" height="15" fill="rgb(228,173,4)" fg:x="463" fg:w="1"/><text x="30.2759%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.0259%" y="581" width="0.0649%" height="15" fill="rgb(254,99,5)" fg:x="463" fg:w="1"/><text x="30.2759%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.06%)</title><rect x="30.0908%" y="869" width="0.0649%" height="15" fill="rgb(212,184,17)" fg:x="464" fg:w="1"/><text x="30.3408%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.06%)</title><rect x="30.0908%" y="853" width="0.0649%" height="15" fill="rgb(252,174,1)" fg:x="464" fg:w="1"/><text x="30.3408%" y="863.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_string (1 samples, 0.06%)</title><rect x="30.0908%" y="837" width="0.0649%" height="15" fill="rgb(241,118,51)" fg:x="464" fg:w="1"/><text x="30.3408%" y="847.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_vec (1 samples, 0.06%)</title><rect x="30.0908%" y="821" width="0.0649%" height="15" fill="rgb(227,94,47)" fg:x="464" fg:w="1"/><text x="30.3408%" y="831.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as bincode::de::read::BincodeRead&gt;::get_byte_buffer (1 samples, 0.06%)</title><rect x="30.0908%" y="805" width="0.0649%" height="15" fill="rgb(229,104,2)" fg:x="464" fg:w="1"/><text x="30.3408%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="30.0908%" y="789" width="0.0649%" height="15" fill="rgb(219,28,31)" fg:x="464" fg:w="1"/><text x="30.3408%" y="799.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as bincode::de::read::BincodeRead&gt;::get_byte_buffer::{{closure}} (1 samples, 0.06%)</title><rect x="30.0908%" y="773" width="0.0649%" height="15" fill="rgb(233,109,36)" fg:x="464" fg:w="1"/><text x="30.3408%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="30.0908%" y="757" width="0.0649%" height="15" fill="rgb(246,88,11)" fg:x="464" fg:w="1"/><text x="30.3408%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.0908%" y="741" width="0.0649%" height="15" fill="rgb(209,212,17)" fg:x="464" fg:w="1"/><text x="30.3408%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.0908%" y="725" width="0.0649%" height="15" fill="rgb(243,59,29)" fg:x="464" fg:w="1"/><text x="30.3408%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.0908%" y="709" width="0.0649%" height="15" fill="rgb(244,205,48)" fg:x="464" fg:w="1"/><text x="30.3408%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="30.1556%" y="661" width="0.0649%" height="15" fill="rgb(227,30,6)" fg:x="465" fg:w="1"/><text x="30.4056%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="30.1556%" y="645" width="0.0649%" height="15" fill="rgb(220,205,48)" fg:x="465" fg:w="1"/><text x="30.4056%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="30.1556%" y="629" width="0.0649%" height="15" fill="rgb(250,94,14)" fg:x="465" fg:w="1"/><text x="30.4056%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="30.1556%" y="613" width="0.0649%" height="15" fill="rgb(216,119,42)" fg:x="465" fg:w="1"/><text x="30.4056%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="30.1556%" y="597" width="0.0649%" height="15" fill="rgb(232,155,0)" fg:x="465" fg:w="1"/><text x="30.4056%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="30.1556%" y="581" width="0.0649%" height="15" fill="rgb(212,24,32)" fg:x="465" fg:w="1"/><text x="30.4056%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="30.1556%" y="565" width="0.0649%" height="15" fill="rgb(216,69,20)" fg:x="465" fg:w="1"/><text x="30.4056%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.1556%" y="549" width="0.0649%" height="15" fill="rgb(229,73,31)" fg:x="465" fg:w="1"/><text x="30.4056%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.1556%" y="533" width="0.0649%" height="15" fill="rgb(224,219,20)" fg:x="465" fg:w="1"/><text x="30.4056%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.1556%" y="517" width="0.0649%" height="15" fill="rgb(215,146,41)" fg:x="465" fg:w="1"/><text x="30.4056%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 1.36%)</title><rect x="28.9235%" y="997" width="1.3619%" height="15" fill="rgb(244,71,31)" fg:x="446" fg:w="21"/><text x="29.1735%" y="1007.50"></text></g><g><title>utxo::Asset::delete_many::{{closure}} (21 samples, 1.36%)</title><rect x="28.9235%" y="981" width="1.3619%" height="15" fill="rgb(224,24,11)" fg:x="446" fg:w="21"/><text x="29.1735%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (3 samples, 0.19%)</title><rect x="30.0908%" y="965" width="0.1946%" height="15" fill="rgb(229,76,15)" fg:x="464" fg:w="3"/><text x="30.3408%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="30.0908%" y="949" width="0.1946%" height="15" fill="rgb(209,93,2)" fg:x="464" fg:w="3"/><text x="30.3408%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="30.0908%" y="933" width="0.1946%" height="15" fill="rgb(216,200,50)" fg:x="464" fg:w="3"/><text x="30.3408%" y="943.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="30.0908%" y="917" width="0.1946%" height="15" fill="rgb(211,67,34)" fg:x="464" fg:w="3"/><text x="30.3408%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="30.0908%" y="901" width="0.1946%" height="15" fill="rgb(225,87,47)" fg:x="464" fg:w="3"/><text x="30.3408%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="30.0908%" y="885" width="0.1946%" height="15" fill="rgb(217,185,16)" fg:x="464" fg:w="3"/><text x="30.3408%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="30.1556%" y="869" width="0.1297%" height="15" fill="rgb(205,0,0)" fg:x="465" fg:w="2"/><text x="30.4056%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="30.1556%" y="853" width="0.1297%" height="15" fill="rgb(207,116,45)" fg:x="465" fg:w="2"/><text x="30.4056%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="30.1556%" y="837" width="0.1297%" height="15" fill="rgb(221,156,26)" fg:x="465" fg:w="2"/><text x="30.4056%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="30.1556%" y="821" width="0.1297%" height="15" fill="rgb(213,140,4)" fg:x="465" fg:w="2"/><text x="30.4056%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="30.1556%" y="805" width="0.1297%" height="15" fill="rgb(231,224,15)" fg:x="465" fg:w="2"/><text x="30.4056%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="30.1556%" y="789" width="0.1297%" height="15" fill="rgb(244,76,20)" fg:x="465" fg:w="2"/><text x="30.4056%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="30.1556%" y="773" width="0.1297%" height="15" fill="rgb(238,117,7)" fg:x="465" fg:w="2"/><text x="30.4056%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="30.1556%" y="757" width="0.1297%" height="15" fill="rgb(235,1,10)" fg:x="465" fg:w="2"/><text x="30.4056%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="30.1556%" y="741" width="0.1297%" height="15" fill="rgb(216,165,6)" fg:x="465" fg:w="2"/><text x="30.4056%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="30.1556%" y="725" width="0.1297%" height="15" fill="rgb(246,91,35)" fg:x="465" fg:w="2"/><text x="30.4056%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="30.1556%" y="709" width="0.1297%" height="15" fill="rgb(228,96,24)" fg:x="465" fg:w="2"/><text x="30.4056%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="30.1556%" y="693" width="0.1297%" height="15" fill="rgb(254,217,53)" fg:x="465" fg:w="2"/><text x="30.4056%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="30.1556%" y="677" width="0.1297%" height="15" fill="rgb(209,60,0)" fg:x="465" fg:w="2"/><text x="30.4056%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.2205%" y="661" width="0.0649%" height="15" fill="rgb(250,93,26)" fg:x="466" fg:w="1"/><text x="30.4705%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.2205%" y="645" width="0.0649%" height="15" fill="rgb(211,9,40)" fg:x="466" fg:w="1"/><text x="30.4705%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.2205%" y="629" width="0.0649%" height="15" fill="rgb(242,57,20)" fg:x="466" fg:w="1"/><text x="30.4705%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.2853%" y="933" width="0.0649%" height="15" fill="rgb(248,85,48)" fg:x="467" fg:w="1"/><text x="30.5353%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.2853%" y="917" width="0.0649%" height="15" fill="rgb(212,117,2)" fg:x="467" fg:w="1"/><text x="30.5353%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.2853%" y="901" width="0.0649%" height="15" fill="rgb(243,19,3)" fg:x="467" fg:w="1"/><text x="30.5353%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="30.3502%" y="917" width="0.1946%" height="15" fill="rgb(232,217,24)" fg:x="468" fg:w="3"/><text x="30.6002%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="30.3502%" y="901" width="0.1946%" height="15" fill="rgb(224,175,40)" fg:x="468" fg:w="3"/><text x="30.6002%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="30.3502%" y="885" width="0.1946%" height="15" fill="rgb(212,162,32)" fg:x="468" fg:w="3"/><text x="30.6002%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="30.5447%" y="917" width="0.0649%" height="15" fill="rgb(215,9,4)" fg:x="471" fg:w="1"/><text x="30.7947%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.5447%" y="901" width="0.0649%" height="15" fill="rgb(242,42,7)" fg:x="471" fg:w="1"/><text x="30.7947%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.5447%" y="885" width="0.0649%" height="15" fill="rgb(242,184,45)" fg:x="471" fg:w="1"/><text x="30.7947%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.5447%" y="869" width="0.0649%" height="15" fill="rgb(228,111,51)" fg:x="471" fg:w="1"/><text x="30.7947%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.6096%" y="869" width="0.0649%" height="15" fill="rgb(236,147,17)" fg:x="472" fg:w="1"/><text x="30.8596%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.6096%" y="853" width="0.0649%" height="15" fill="rgb(210,75,22)" fg:x="472" fg:w="1"/><text x="30.8596%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.6096%" y="837" width="0.0649%" height="15" fill="rgb(217,159,45)" fg:x="472" fg:w="1"/><text x="30.8596%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.6744%" y="853" width="0.0649%" height="15" fill="rgb(245,165,53)" fg:x="473" fg:w="1"/><text x="30.9244%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.6744%" y="837" width="0.0649%" height="15" fill="rgb(251,190,50)" fg:x="473" fg:w="1"/><text x="30.9244%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.6744%" y="821" width="0.0649%" height="15" fill="rgb(208,203,29)" fg:x="473" fg:w="1"/><text x="30.9244%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="30.7393%" y="853" width="0.0649%" height="15" fill="rgb(207,209,35)" fg:x="474" fg:w="1"/><text x="30.9893%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="30.7393%" y="837" width="0.0649%" height="15" fill="rgb(230,144,49)" fg:x="474" fg:w="1"/><text x="30.9893%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.7393%" y="821" width="0.0649%" height="15" fill="rgb(229,31,6)" fg:x="474" fg:w="1"/><text x="30.9893%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.7393%" y="805" width="0.0649%" height="15" fill="rgb(251,129,24)" fg:x="474" fg:w="1"/><text x="30.9893%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.7393%" y="789" width="0.0649%" height="15" fill="rgb(235,105,15)" fg:x="474" fg:w="1"/><text x="30.9893%" y="799.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.58%)</title><rect x="30.2853%" y="965" width="0.5837%" height="15" fill="rgb(216,52,43)" fg:x="467" fg:w="9"/><text x="30.5353%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (9 samples, 0.58%)</title><rect x="30.2853%" y="949" width="0.5837%" height="15" fill="rgb(238,144,41)" fg:x="467" fg:w="9"/><text x="30.5353%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (8 samples, 0.52%)</title><rect x="30.3502%" y="933" width="0.5188%" height="15" fill="rgb(243,63,9)" fg:x="468" fg:w="8"/><text x="30.6002%" y="943.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (4 samples, 0.26%)</title><rect x="30.6096%" y="917" width="0.2594%" height="15" fill="rgb(246,208,1)" fg:x="472" fg:w="4"/><text x="30.8596%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (4 samples, 0.26%)</title><rect x="30.6096%" y="901" width="0.2594%" height="15" fill="rgb(233,182,18)" fg:x="472" fg:w="4"/><text x="30.8596%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (4 samples, 0.26%)</title><rect x="30.6096%" y="885" width="0.2594%" height="15" fill="rgb(242,224,8)" fg:x="472" fg:w="4"/><text x="30.8596%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (3 samples, 0.19%)</title><rect x="30.6744%" y="869" width="0.1946%" height="15" fill="rgb(243,54,37)" fg:x="473" fg:w="3"/><text x="30.9244%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.06%)</title><rect x="30.8042%" y="853" width="0.0649%" height="15" fill="rgb(233,192,12)" fg:x="475" fg:w="1"/><text x="31.0542%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.06%)</title><rect x="30.8042%" y="837" width="0.0649%" height="15" fill="rgb(251,192,53)" fg:x="475" fg:w="1"/><text x="31.0542%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.8042%" y="821" width="0.0649%" height="15" fill="rgb(246,141,26)" fg:x="475" fg:w="1"/><text x="31.0542%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.8042%" y="805" width="0.0649%" height="15" fill="rgb(239,195,19)" fg:x="475" fg:w="1"/><text x="31.0542%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.8042%" y="789" width="0.0649%" height="15" fill="rgb(241,16,39)" fg:x="475" fg:w="1"/><text x="31.0542%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt;&gt; (10 samples, 0.65%)</title><rect x="30.2853%" y="997" width="0.6485%" height="15" fill="rgb(223,13,53)" fg:x="467" fg:w="10"/><text x="30.5353%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt; (10 samples, 0.65%)</title><rect x="30.2853%" y="981" width="0.6485%" height="15" fill="rgb(214,227,0)" fg:x="467" fg:w="10"/><text x="30.5353%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="30.8690%" y="965" width="0.0649%" height="15" fill="rgb(228,103,26)" fg:x="476" fg:w="1"/><text x="31.1190%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="30.8690%" y="949" width="0.0649%" height="15" fill="rgb(254,177,53)" fg:x="476" fg:w="1"/><text x="31.1190%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::cached_file::WritablePage&gt; (1 samples, 0.06%)</title><rect x="30.8690%" y="933" width="0.0649%" height="15" fill="rgb(208,201,34)" fg:x="476" fg:w="1"/><text x="31.1190%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::cached_file::WritablePage as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="30.8690%" y="917" width="0.0649%" height="15" fill="rgb(212,39,5)" fg:x="476" fg:w="1"/><text x="31.1190%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::return_value (1 samples, 0.06%)</title><rect x="30.8690%" y="901" width="0.0649%" height="15" fill="rgb(246,117,3)" fg:x="476" fg:w="1"/><text x="31.1190%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="30.8690%" y="885" width="0.0649%" height="15" fill="rgb(244,118,39)" fg:x="476" fg:w="1"/><text x="31.1190%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="30.8690%" y="869" width="0.0649%" height="15" fill="rgb(241,64,10)" fg:x="476" fg:w="1"/><text x="31.1190%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="30.8690%" y="853" width="0.0649%" height="15" fill="rgb(229,39,44)" fg:x="476" fg:w="1"/><text x="31.1190%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="30.8690%" y="837" width="0.0649%" height="15" fill="rgb(230,226,3)" fg:x="476" fg:w="1"/><text x="31.1190%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="30.8690%" y="821" width="0.0649%" height="15" fill="rgb(222,13,42)" fg:x="476" fg:w="1"/><text x="31.1190%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="30.8690%" y="805" width="0.0649%" height="15" fill="rgb(247,180,54)" fg:x="476" fg:w="1"/><text x="31.1190%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="30.8690%" y="789" width="0.0649%" height="15" fill="rgb(205,96,16)" fg:x="476" fg:w="1"/><text x="31.1190%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="30.8690%" y="773" width="0.0649%" height="15" fill="rgb(205,100,21)" fg:x="476" fg:w="1"/><text x="31.1190%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="30.8690%" y="757" width="0.0649%" height="15" fill="rgb(248,51,4)" fg:x="476" fg:w="1"/><text x="31.1190%" y="767.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="30.8690%" y="741" width="0.0649%" height="15" fill="rgb(217,197,30)" fg:x="476" fg:w="1"/><text x="31.1190%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="30.8690%" y="725" width="0.0649%" height="15" fill="rgb(240,179,40)" fg:x="476" fg:w="1"/><text x="31.1190%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="30.8690%" y="709" width="0.0649%" height="15" fill="rgb(212,185,35)" fg:x="476" fg:w="1"/><text x="31.1190%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="30.8690%" y="693" width="0.0649%" height="15" fill="rgb(251,222,31)" fg:x="476" fg:w="1"/><text x="31.1190%" y="703.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (2 samples, 0.13%)</title><rect x="30.9339%" y="933" width="0.1297%" height="15" fill="rgb(208,140,36)" fg:x="477" fg:w="2"/><text x="31.1839%" y="943.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.13%)</title><rect x="30.9339%" y="917" width="0.1297%" height="15" fill="rgb(220,148,1)" fg:x="477" fg:w="2"/><text x="31.1839%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="30.9339%" y="901" width="0.1297%" height="15" fill="rgb(254,4,28)" fg:x="477" fg:w="2"/><text x="31.1839%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="30.9339%" y="885" width="0.1297%" height="15" fill="rgb(222,185,44)" fg:x="477" fg:w="2"/><text x="31.1839%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="30.9339%" y="869" width="0.1297%" height="15" fill="rgb(215,74,39)" fg:x="477" fg:w="2"/><text x="31.1839%" y="879.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="31.0636%" y="917" width="0.0649%" height="15" fill="rgb(247,86,4)" fg:x="479" fg:w="1"/><text x="31.3136%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="31.0636%" y="901" width="0.0649%" height="15" fill="rgb(231,105,32)" fg:x="479" fg:w="1"/><text x="31.3136%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="31.0636%" y="885" width="0.0649%" height="15" fill="rgb(222,65,35)" fg:x="479" fg:w="1"/><text x="31.3136%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.0636%" y="869" width="0.0649%" height="15" fill="rgb(218,145,35)" fg:x="479" fg:w="1"/><text x="31.3136%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.0636%" y="853" width="0.0649%" height="15" fill="rgb(208,7,15)" fg:x="479" fg:w="1"/><text x="31.3136%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.0636%" y="837" width="0.0649%" height="15" fill="rgb(209,83,13)" fg:x="479" fg:w="1"/><text x="31.3136%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.1284%" y="917" width="0.0649%" height="15" fill="rgb(218,3,10)" fg:x="480" fg:w="1"/><text x="31.3784%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.1284%" y="901" width="0.0649%" height="15" fill="rgb(211,219,4)" fg:x="480" fg:w="1"/><text x="31.3784%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.1284%" y="885" width="0.0649%" height="15" fill="rgb(228,194,12)" fg:x="480" fg:w="1"/><text x="31.3784%" y="895.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="31.1933%" y="901" width="0.0649%" height="15" fill="rgb(210,175,7)" fg:x="481" fg:w="1"/><text x="31.4433%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="31.1933%" y="885" width="0.0649%" height="15" fill="rgb(243,132,6)" fg:x="481" fg:w="1"/><text x="31.4433%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="31.1933%" y="869" width="0.0649%" height="15" fill="rgb(207,72,18)" fg:x="481" fg:w="1"/><text x="31.4433%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.1933%" y="853" width="0.0649%" height="15" fill="rgb(236,1,18)" fg:x="481" fg:w="1"/><text x="31.4433%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.1933%" y="837" width="0.0649%" height="15" fill="rgb(227,0,18)" fg:x="481" fg:w="1"/><text x="31.4433%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.1933%" y="821" width="0.0649%" height="15" fill="rgb(247,37,5)" fg:x="481" fg:w="1"/><text x="31.4433%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt;&gt; (7 samples, 0.45%)</title><rect x="30.9339%" y="997" width="0.4540%" height="15" fill="rgb(237,179,24)" fg:x="477" fg:w="7"/><text x="31.1839%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (7 samples, 0.45%)</title><rect x="30.9339%" y="981" width="0.4540%" height="15" fill="rgb(226,53,20)" fg:x="477" fg:w="7"/><text x="31.1839%" y="991.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.45%)</title><rect x="30.9339%" y="965" width="0.4540%" height="15" fill="rgb(247,75,7)" fg:x="477" fg:w="7"/><text x="31.1839%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (7 samples, 0.45%)</title><rect x="30.9339%" y="949" width="0.4540%" height="15" fill="rgb(233,96,12)" fg:x="477" fg:w="7"/><text x="31.1839%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (5 samples, 0.32%)</title><rect x="31.0636%" y="933" width="0.3243%" height="15" fill="rgb(224,125,0)" fg:x="479" fg:w="5"/><text x="31.3136%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (3 samples, 0.19%)</title><rect x="31.1933%" y="917" width="0.1946%" height="15" fill="rgb(224,92,25)" fg:x="481" fg:w="3"/><text x="31.4433%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="31.2581%" y="901" width="0.1297%" height="15" fill="rgb(224,42,24)" fg:x="482" fg:w="2"/><text x="31.5081%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="31.2581%" y="885" width="0.1297%" height="15" fill="rgb(234,132,49)" fg:x="482" fg:w="2"/><text x="31.5081%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="31.2581%" y="869" width="0.1297%" height="15" fill="rgb(248,100,35)" fg:x="482" fg:w="2"/><text x="31.5081%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="31.3878%" y="981" width="0.0649%" height="15" fill="rgb(239,94,40)" fg:x="484" fg:w="1"/><text x="31.6378%" y="991.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="31.3878%" y="965" width="0.0649%" height="15" fill="rgb(235,139,28)" fg:x="484" fg:w="1"/><text x="31.6378%" y="975.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="31.3878%" y="949" width="0.0649%" height="15" fill="rgb(217,144,7)" fg:x="484" fg:w="1"/><text x="31.6378%" y="959.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="31.3878%" y="933" width="0.0649%" height="15" fill="rgb(227,55,4)" fg:x="484" fg:w="1"/><text x="31.6378%" y="943.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="31.3878%" y="917" width="0.0649%" height="15" fill="rgb(252,82,54)" fg:x="484" fg:w="1"/><text x="31.6378%" y="927.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="31.3878%" y="901" width="0.0649%" height="15" fill="rgb(245,172,4)" fg:x="484" fg:w="1"/><text x="31.6378%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="31.3878%" y="885" width="0.0649%" height="15" fill="rgb(207,26,27)" fg:x="484" fg:w="1"/><text x="31.6378%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="31.3878%" y="869" width="0.0649%" height="15" fill="rgb(252,98,18)" fg:x="484" fg:w="1"/><text x="31.6378%" y="879.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="31.3878%" y="853" width="0.0649%" height="15" fill="rgb(244,8,26)" fg:x="484" fg:w="1"/><text x="31.6378%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="31.3878%" y="837" width="0.0649%" height="15" fill="rgb(237,173,45)" fg:x="484" fg:w="1"/><text x="31.6378%" y="847.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="31.3878%" y="821" width="0.0649%" height="15" fill="rgb(208,213,49)" fg:x="484" fg:w="1"/><text x="31.6378%" y="831.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="31.3878%" y="805" width="0.0649%" height="15" fill="rgb(212,122,37)" fg:x="484" fg:w="1"/><text x="31.6378%" y="815.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="31.3878%" y="789" width="0.0649%" height="15" fill="rgb(213,80,17)" fg:x="484" fg:w="1"/><text x="31.6378%" y="799.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="31.3878%" y="773" width="0.0649%" height="15" fill="rgb(206,210,43)" fg:x="484" fg:w="1"/><text x="31.6378%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="31.3878%" y="757" width="0.0649%" height="15" fill="rgb(229,214,3)" fg:x="484" fg:w="1"/><text x="31.6378%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="31.3878%" y="741" width="0.0649%" height="15" fill="rgb(235,213,29)" fg:x="484" fg:w="1"/><text x="31.6378%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="31.3878%" y="725" width="0.0649%" height="15" fill="rgb(248,135,26)" fg:x="484" fg:w="1"/><text x="31.6378%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="31.3878%" y="709" width="0.0649%" height="15" fill="rgb(242,188,12)" fg:x="484" fg:w="1"/><text x="31.6378%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="31.3878%" y="693" width="0.0649%" height="15" fill="rgb(245,38,12)" fg:x="484" fg:w="1"/><text x="31.6378%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="31.3878%" y="677" width="0.0649%" height="15" fill="rgb(218,42,13)" fg:x="484" fg:w="1"/><text x="31.6378%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.3878%" y="661" width="0.0649%" height="15" fill="rgb(238,132,49)" fg:x="484" fg:w="1"/><text x="31.6378%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.3878%" y="645" width="0.0649%" height="15" fill="rgb(209,196,19)" fg:x="484" fg:w="1"/><text x="31.6378%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.3878%" y="629" width="0.0649%" height="15" fill="rgb(244,131,22)" fg:x="484" fg:w="1"/><text x="31.6378%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="31.4527%" y="901" width="0.0649%" height="15" fill="rgb(223,18,34)" fg:x="485" fg:w="1"/><text x="31.7027%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="31.4527%" y="885" width="0.0649%" height="15" fill="rgb(252,124,54)" fg:x="485" fg:w="1"/><text x="31.7027%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="31.4527%" y="869" width="0.0649%" height="15" fill="rgb(229,106,42)" fg:x="485" fg:w="1"/><text x="31.7027%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="31.4527%" y="853" width="0.0649%" height="15" fill="rgb(221,129,1)" fg:x="485" fg:w="1"/><text x="31.7027%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="31.4527%" y="837" width="0.0649%" height="15" fill="rgb(229,74,15)" fg:x="485" fg:w="1"/><text x="31.7027%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="31.4527%" y="821" width="0.0649%" height="15" fill="rgb(210,206,50)" fg:x="485" fg:w="1"/><text x="31.7027%" y="831.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="31.4527%" y="805" width="0.0649%" height="15" fill="rgb(251,114,31)" fg:x="485" fg:w="1"/><text x="31.7027%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="31.4527%" y="789" width="0.0649%" height="15" fill="rgb(215,225,28)" fg:x="485" fg:w="1"/><text x="31.7027%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="31.4527%" y="773" width="0.0649%" height="15" fill="rgb(237,109,14)" fg:x="485" fg:w="1"/><text x="31.7027%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="31.4527%" y="757" width="0.0649%" height="15" fill="rgb(230,13,37)" fg:x="485" fg:w="1"/><text x="31.7027%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="31.4527%" y="741" width="0.0649%" height="15" fill="rgb(231,40,28)" fg:x="485" fg:w="1"/><text x="31.7027%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="31.4527%" y="725" width="0.0649%" height="15" fill="rgb(231,202,18)" fg:x="485" fg:w="1"/><text x="31.7027%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="31.4527%" y="709" width="0.0649%" height="15" fill="rgb(225,33,18)" fg:x="485" fg:w="1"/><text x="31.7027%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.4527%" y="693" width="0.0649%" height="15" fill="rgb(223,64,47)" fg:x="485" fg:w="1"/><text x="31.7027%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.4527%" y="677" width="0.0649%" height="15" fill="rgb(234,114,13)" fg:x="485" fg:w="1"/><text x="31.7027%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.4527%" y="661" width="0.0649%" height="15" fill="rgb(248,56,40)" fg:x="485" fg:w="1"/><text x="31.7027%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="31.5175%" y="757" width="0.0649%" height="15" fill="rgb(221,194,21)" fg:x="486" fg:w="1"/><text x="31.7675%" y="767.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="31.5175%" y="741" width="0.0649%" height="15" fill="rgb(242,108,46)" fg:x="486" fg:w="1"/><text x="31.7675%" y="751.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.06%)</title><rect x="31.5175%" y="725" width="0.0649%" height="15" fill="rgb(220,106,10)" fg:x="486" fg:w="1"/><text x="31.7675%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.5175%" y="709" width="0.0649%" height="15" fill="rgb(211,88,4)" fg:x="486" fg:w="1"/><text x="31.7675%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.5175%" y="693" width="0.0649%" height="15" fill="rgb(214,95,34)" fg:x="486" fg:w="1"/><text x="31.7675%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.5175%" y="677" width="0.0649%" height="15" fill="rgb(250,160,33)" fg:x="486" fg:w="1"/><text x="31.7675%" y="687.50"></text></g><g><title>core::mem::drop (3 samples, 0.19%)</title><rect x="31.4527%" y="981" width="0.1946%" height="15" fill="rgb(225,29,10)" fg:x="485" fg:w="3"/><text x="31.7027%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;&amp;redb::multimap_table::DynamicCollection&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="31.4527%" y="965" width="0.1946%" height="15" fill="rgb(224,28,30)" fg:x="485" fg:w="3"/><text x="31.7027%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (3 samples, 0.19%)</title><rect x="31.4527%" y="949" width="0.1946%" height="15" fill="rgb(231,77,4)" fg:x="485" fg:w="3"/><text x="31.7027%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (3 samples, 0.19%)</title><rect x="31.4527%" y="933" width="0.1946%" height="15" fill="rgb(209,63,21)" fg:x="485" fg:w="3"/><text x="31.7027%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="31.4527%" y="917" width="0.1946%" height="15" fill="rgb(226,22,11)" fg:x="485" fg:w="3"/><text x="31.7027%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="31.5175%" y="901" width="0.1297%" height="15" fill="rgb(216,82,30)" fg:x="486" fg:w="2"/><text x="31.7675%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="31.5175%" y="885" width="0.1297%" height="15" fill="rgb(246,227,38)" fg:x="486" fg:w="2"/><text x="31.7675%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="31.5175%" y="869" width="0.1297%" height="15" fill="rgb(251,203,53)" fg:x="486" fg:w="2"/><text x="31.7675%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="31.5175%" y="853" width="0.1297%" height="15" fill="rgb(254,101,1)" fg:x="486" fg:w="2"/><text x="31.7675%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.13%)</title><rect x="31.5175%" y="837" width="0.1297%" height="15" fill="rgb(241,180,5)" fg:x="486" fg:w="2"/><text x="31.7675%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (2 samples, 0.13%)</title><rect x="31.5175%" y="821" width="0.1297%" height="15" fill="rgb(218,168,4)" fg:x="486" fg:w="2"/><text x="31.7675%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (2 samples, 0.13%)</title><rect x="31.5175%" y="805" width="0.1297%" height="15" fill="rgb(224,223,32)" fg:x="486" fg:w="2"/><text x="31.7675%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (2 samples, 0.13%)</title><rect x="31.5175%" y="789" width="0.1297%" height="15" fill="rgb(236,106,22)" fg:x="486" fg:w="2"/><text x="31.7675%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (2 samples, 0.13%)</title><rect x="31.5175%" y="773" width="0.1297%" height="15" fill="rgb(206,121,5)" fg:x="486" fg:w="2"/><text x="31.7675%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="31.5824%" y="757" width="0.0649%" height="15" fill="rgb(233,87,28)" fg:x="487" fg:w="1"/><text x="31.8324%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="31.5824%" y="741" width="0.0649%" height="15" fill="rgb(236,137,17)" fg:x="487" fg:w="1"/><text x="31.8324%" y="751.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="31.5824%" y="725" width="0.0649%" height="15" fill="rgb(209,183,38)" fg:x="487" fg:w="1"/><text x="31.8324%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.5824%" y="709" width="0.0649%" height="15" fill="rgb(206,162,44)" fg:x="487" fg:w="1"/><text x="31.8324%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.5824%" y="693" width="0.0649%" height="15" fill="rgb(237,70,39)" fg:x="487" fg:w="1"/><text x="31.8324%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.5824%" y="677" width="0.0649%" height="15" fill="rgb(212,176,5)" fg:x="487" fg:w="1"/><text x="31.8324%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="31.6472%" y="917" width="0.0649%" height="15" fill="rgb(232,95,16)" fg:x="488" fg:w="1"/><text x="31.8972%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.6472%" y="901" width="0.0649%" height="15" fill="rgb(219,115,35)" fg:x="488" fg:w="1"/><text x="31.8972%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.6472%" y="885" width="0.0649%" height="15" fill="rgb(251,67,27)" fg:x="488" fg:w="1"/><text x="31.8972%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.6472%" y="869" width="0.0649%" height="15" fill="rgb(222,95,40)" fg:x="488" fg:w="1"/><text x="31.8972%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (1 samples, 0.06%)</title><rect x="31.7121%" y="917" width="0.0649%" height="15" fill="rgb(250,35,16)" fg:x="489" fg:w="1"/><text x="31.9621%" y="927.50"></text></g><g><title>core::slice::index::range (1 samples, 0.06%)</title><rect x="31.7121%" y="901" width="0.0649%" height="15" fill="rgb(224,86,44)" fg:x="489" fg:w="1"/><text x="31.9621%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.7121%" y="885" width="0.0649%" height="15" fill="rgb(237,53,53)" fg:x="489" fg:w="1"/><text x="31.9621%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.7121%" y="869" width="0.0649%" height="15" fill="rgb(208,171,33)" fg:x="489" fg:w="1"/><text x="31.9621%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.7121%" y="853" width="0.0649%" height="15" fill="rgb(222,64,27)" fg:x="489" fg:w="1"/><text x="31.9621%" y="863.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="31.7769%" y="901" width="0.0649%" height="15" fill="rgb(221,121,35)" fg:x="490" fg:w="1"/><text x="32.0269%" y="911.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;isize&gt; for u32&gt;::try_from (1 samples, 0.06%)</title><rect x="31.7769%" y="885" width="0.0649%" height="15" fill="rgb(228,137,42)" fg:x="490" fg:w="1"/><text x="32.0269%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="31.7769%" y="869" width="0.0649%" height="15" fill="rgb(227,54,21)" fg:x="490" fg:w="1"/><text x="32.0269%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="31.7769%" y="853" width="0.0649%" height="15" fill="rgb(240,168,33)" fg:x="490" fg:w="1"/><text x="32.0269%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="31.7769%" y="837" width="0.0649%" height="15" fill="rgb(243,159,6)" fg:x="490" fg:w="1"/><text x="32.0269%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5 samples, 0.32%)</title><rect x="31.8418%" y="901" width="0.3243%" height="15" fill="rgb(205,211,41)" fg:x="491" fg:w="5"/><text x="32.0918%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (5 samples, 0.32%)</title><rect x="31.8418%" y="885" width="0.3243%" height="15" fill="rgb(253,30,1)" fg:x="491" fg:w="5"/><text x="32.0918%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (5 samples, 0.32%)</title><rect x="31.8418%" y="869" width="0.3243%" height="15" fill="rgb(226,80,18)" fg:x="491" fg:w="5"/><text x="32.0918%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.13%)</title><rect x="32.1660%" y="869" width="0.1297%" height="15" fill="rgb(253,156,46)" fg:x="496" fg:w="2"/><text x="32.4160%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="32.1660%" y="853" width="0.1297%" height="15" fill="rgb(248,87,27)" fg:x="496" fg:w="2"/><text x="32.4160%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="32.1660%" y="837" width="0.1297%" height="15" fill="rgb(227,122,2)" fg:x="496" fg:w="2"/><text x="32.4160%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="32.1660%" y="821" width="0.1297%" height="15" fill="rgb(229,94,39)" fg:x="496" fg:w="2"/><text x="32.4160%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.2957%" y="853" width="0.0649%" height="15" fill="rgb(225,173,31)" fg:x="498" fg:w="1"/><text x="32.5457%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.2957%" y="837" width="0.0649%" height="15" fill="rgb(239,176,30)" fg:x="498" fg:w="1"/><text x="32.5457%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.2957%" y="821" width="0.0649%" height="15" fill="rgb(212,104,21)" fg:x="498" fg:w="1"/><text x="32.5457%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.26%)</title><rect x="32.1660%" y="901" width="0.2594%" height="15" fill="rgb(240,209,40)" fg:x="496" fg:w="4"/><text x="32.4160%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.26%)</title><rect x="32.1660%" y="885" width="0.2594%" height="15" fill="rgb(234,195,5)" fg:x="496" fg:w="4"/><text x="32.4160%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="32.2957%" y="869" width="0.1297%" height="15" fill="rgb(238,213,1)" fg:x="498" fg:w="2"/><text x="32.5457%" y="879.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="32.3606%" y="853" width="0.0649%" height="15" fill="rgb(235,182,54)" fg:x="499" fg:w="1"/><text x="32.6106%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="32.3606%" y="837" width="0.0649%" height="15" fill="rgb(229,50,46)" fg:x="499" fg:w="1"/><text x="32.6106%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.3606%" y="821" width="0.0649%" height="15" fill="rgb(219,145,13)" fg:x="499" fg:w="1"/><text x="32.6106%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.3606%" y="805" width="0.0649%" height="15" fill="rgb(220,226,10)" fg:x="499" fg:w="1"/><text x="32.6106%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.3606%" y="789" width="0.0649%" height="15" fill="rgb(248,47,30)" fg:x="499" fg:w="1"/><text x="32.6106%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (11 samples, 0.71%)</title><rect x="31.7769%" y="917" width="0.7134%" height="15" fill="rgb(231,209,44)" fg:x="490" fg:w="11"/><text x="32.0269%" y="927.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="32.4254%" y="901" width="0.0649%" height="15" fill="rgb(209,80,30)" fg:x="500" fg:w="1"/><text x="32.6754%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="32.4254%" y="885" width="0.0649%" height="15" fill="rgb(232,9,14)" fg:x="500" fg:w="1"/><text x="32.6754%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="32.4254%" y="869" width="0.0649%" height="15" fill="rgb(243,91,43)" fg:x="500" fg:w="1"/><text x="32.6754%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="32.4254%" y="853" width="0.0649%" height="15" fill="rgb(231,90,52)" fg:x="500" fg:w="1"/><text x="32.6754%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="32.4254%" y="837" width="0.0649%" height="15" fill="rgb(253,192,44)" fg:x="500" fg:w="1"/><text x="32.6754%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="32.4254%" y="821" width="0.0649%" height="15" fill="rgb(241,66,31)" fg:x="500" fg:w="1"/><text x="32.6754%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.4254%" y="805" width="0.0649%" height="15" fill="rgb(235,81,37)" fg:x="500" fg:w="1"/><text x="32.6754%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.4254%" y="789" width="0.0649%" height="15" fill="rgb(223,221,9)" fg:x="500" fg:w="1"/><text x="32.6754%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.4254%" y="773" width="0.0649%" height="15" fill="rgb(242,180,7)" fg:x="500" fg:w="1"/><text x="32.6754%" y="783.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.91%)</title><rect x="31.6472%" y="949" width="0.9079%" height="15" fill="rgb(243,78,19)" fg:x="488" fg:w="14"/><text x="31.8972%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::remove (14 samples, 0.91%)</title><rect x="31.6472%" y="933" width="0.9079%" height="15" fill="rgb(233,23,17)" fg:x="488" fg:w="14"/><text x="31.8972%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (1 samples, 0.06%)</title><rect x="32.4903%" y="917" width="0.0649%" height="15" fill="rgb(252,122,45)" fg:x="501" fg:w="1"/><text x="32.7403%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.4903%" y="901" width="0.0649%" height="15" fill="rgb(247,108,20)" fg:x="501" fg:w="1"/><text x="32.7403%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.4903%" y="885" width="0.0649%" height="15" fill="rgb(235,84,21)" fg:x="501" fg:w="1"/><text x="32.7403%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.4903%" y="869" width="0.0649%" height="15" fill="rgb(247,129,10)" fg:x="501" fg:w="1"/><text x="32.7403%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt;&gt; (15 samples, 0.97%)</title><rect x="31.6472%" y="981" width="0.9728%" height="15" fill="rgb(208,173,14)" fg:x="488" fg:w="15"/><text x="31.8972%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt; (15 samples, 0.97%)</title><rect x="31.6472%" y="965" width="0.9728%" height="15" fill="rgb(236,31,38)" fg:x="488" fg:w="15"/><text x="31.8972%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="32.5551%" y="949" width="0.0649%" height="15" fill="rgb(232,65,17)" fg:x="502" fg:w="1"/><text x="32.8051%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="32.5551%" y="933" width="0.0649%" height="15" fill="rgb(224,45,49)" fg:x="502" fg:w="1"/><text x="32.8051%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="32.5551%" y="917" width="0.0649%" height="15" fill="rgb(225,2,53)" fg:x="502" fg:w="1"/><text x="32.8051%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.06%)</title><rect x="32.5551%" y="901" width="0.0649%" height="15" fill="rgb(248,210,53)" fg:x="502" fg:w="1"/><text x="32.8051%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="32.5551%" y="885" width="0.0649%" height="15" fill="rgb(211,1,30)" fg:x="502" fg:w="1"/><text x="32.8051%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="32.5551%" y="869" width="0.0649%" height="15" fill="rgb(224,96,15)" fg:x="502" fg:w="1"/><text x="32.8051%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="32.5551%" y="853" width="0.0649%" height="15" fill="rgb(252,45,11)" fg:x="502" fg:w="1"/><text x="32.8051%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="32.5551%" y="837" width="0.0649%" height="15" fill="rgb(220,125,38)" fg:x="502" fg:w="1"/><text x="32.8051%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.5551%" y="821" width="0.0649%" height="15" fill="rgb(243,161,33)" fg:x="502" fg:w="1"/><text x="32.8051%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.5551%" y="805" width="0.0649%" height="15" fill="rgb(248,197,34)" fg:x="502" fg:w="1"/><text x="32.8051%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.5551%" y="789" width="0.0649%" height="15" fill="rgb(228,165,23)" fg:x="502" fg:w="1"/><text x="32.8051%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="32.6200%" y="981" width="0.0649%" height="15" fill="rgb(236,94,38)" fg:x="503" fg:w="1"/><text x="32.8700%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="32.6200%" y="965" width="0.0649%" height="15" fill="rgb(220,13,23)" fg:x="503" fg:w="1"/><text x="32.8700%" y="975.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="32.6200%" y="949" width="0.0649%" height="15" fill="rgb(234,26,39)" fg:x="503" fg:w="1"/><text x="32.8700%" y="959.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="32.6200%" y="933" width="0.0649%" height="15" fill="rgb(205,117,44)" fg:x="503" fg:w="1"/><text x="32.8700%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="32.6200%" y="917" width="0.0649%" height="15" fill="rgb(250,42,2)" fg:x="503" fg:w="1"/><text x="32.8700%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="32.6200%" y="901" width="0.0649%" height="15" fill="rgb(223,83,14)" fg:x="503" fg:w="1"/><text x="32.8700%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.6200%" y="885" width="0.0649%" height="15" fill="rgb(241,147,50)" fg:x="503" fg:w="1"/><text x="32.8700%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.6200%" y="869" width="0.0649%" height="15" fill="rgb(218,90,6)" fg:x="503" fg:w="1"/><text x="32.8700%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.6200%" y="853" width="0.0649%" height="15" fill="rgb(210,191,5)" fg:x="503" fg:w="1"/><text x="32.8700%" y="863.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="32.6848%" y="949" width="0.0649%" height="15" fill="rgb(225,139,19)" fg:x="504" fg:w="1"/><text x="32.9348%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="32.6848%" y="933" width="0.0649%" height="15" fill="rgb(210,1,33)" fg:x="504" fg:w="1"/><text x="32.9348%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="32.6848%" y="917" width="0.0649%" height="15" fill="rgb(213,50,3)" fg:x="504" fg:w="1"/><text x="32.9348%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="32.6848%" y="901" width="0.0649%" height="15" fill="rgb(234,227,4)" fg:x="504" fg:w="1"/><text x="32.9348%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="32.6848%" y="885" width="0.0649%" height="15" fill="rgb(246,63,5)" fg:x="504" fg:w="1"/><text x="32.9348%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="32.6848%" y="869" width="0.0649%" height="15" fill="rgb(245,136,27)" fg:x="504" fg:w="1"/><text x="32.9348%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="32.6848%" y="853" width="0.0649%" height="15" fill="rgb(247,199,27)" fg:x="504" fg:w="1"/><text x="32.9348%" y="863.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="32.6848%" y="837" width="0.0649%" height="15" fill="rgb(252,158,49)" fg:x="504" fg:w="1"/><text x="32.9348%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="32.6848%" y="821" width="0.0649%" height="15" fill="rgb(254,73,1)" fg:x="504" fg:w="1"/><text x="32.9348%" y="831.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="32.6848%" y="805" width="0.0649%" height="15" fill="rgb(248,93,19)" fg:x="504" fg:w="1"/><text x="32.9348%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.6848%" y="789" width="0.0649%" height="15" fill="rgb(206,67,5)" fg:x="504" fg:w="1"/><text x="32.9348%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.6848%" y="773" width="0.0649%" height="15" fill="rgb(209,210,4)" fg:x="504" fg:w="1"/><text x="32.9348%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.6848%" y="757" width="0.0649%" height="15" fill="rgb(214,185,36)" fg:x="504" fg:w="1"/><text x="32.9348%" y="767.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as redb::tree_store::page_store::base::Page&gt;::memory (1 samples, 0.06%)</title><rect x="32.7497%" y="933" width="0.0649%" height="15" fill="rgb(233,191,26)" fg:x="505" fg:w="1"/><text x="32.9997%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (1 samples, 0.06%)</title><rect x="32.7497%" y="917" width="0.0649%" height="15" fill="rgb(248,94,17)" fg:x="505" fg:w="1"/><text x="32.9997%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.7497%" y="901" width="0.0649%" height="15" fill="rgb(250,64,4)" fg:x="505" fg:w="1"/><text x="32.9997%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.7497%" y="885" width="0.0649%" height="15" fill="rgb(218,41,53)" fg:x="505" fg:w="1"/><text x="32.9997%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.7497%" y="869" width="0.0649%" height="15" fill="rgb(251,176,28)" fg:x="505" fg:w="1"/><text x="32.9997%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.8145%" y="741" width="0.0649%" height="15" fill="rgb(247,22,9)" fg:x="506" fg:w="1"/><text x="33.0645%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.8145%" y="725" width="0.0649%" height="15" fill="rgb(218,201,14)" fg:x="506" fg:w="1"/><text x="33.0645%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.8145%" y="709" width="0.0649%" height="15" fill="rgb(218,94,10)" fg:x="506" fg:w="1"/><text x="33.0645%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="32.8145%" y="789" width="0.1297%" height="15" fill="rgb(222,183,52)" fg:x="506" fg:w="2"/><text x="33.0645%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="32.8145%" y="773" width="0.1297%" height="15" fill="rgb(242,140,25)" fg:x="506" fg:w="2"/><text x="33.0645%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="32.8145%" y="757" width="0.1297%" height="15" fill="rgb(235,197,38)" fg:x="506" fg:w="2"/><text x="33.0645%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="32.8794%" y="741" width="0.0649%" height="15" fill="rgb(237,136,15)" fg:x="507" fg:w="1"/><text x="33.1294%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="32.8794%" y="725" width="0.0649%" height="15" fill="rgb(223,44,49)" fg:x="507" fg:w="1"/><text x="33.1294%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="32.8794%" y="709" width="0.0649%" height="15" fill="rgb(227,71,15)" fg:x="507" fg:w="1"/><text x="33.1294%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="32.8794%" y="693" width="0.0649%" height="15" fill="rgb(225,153,20)" fg:x="507" fg:w="1"/><text x="33.1294%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="32.8794%" y="677" width="0.0649%" height="15" fill="rgb(210,190,26)" fg:x="507" fg:w="1"/><text x="33.1294%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="32.8794%" y="661" width="0.0649%" height="15" fill="rgb(223,147,5)" fg:x="507" fg:w="1"/><text x="33.1294%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="32.8794%" y="645" width="0.0649%" height="15" fill="rgb(207,14,23)" fg:x="507" fg:w="1"/><text x="33.1294%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="32.8794%" y="629" width="0.0649%" height="15" fill="rgb(211,195,53)" fg:x="507" fg:w="1"/><text x="33.1294%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="32.8794%" y="613" width="0.0649%" height="15" fill="rgb(237,75,46)" fg:x="507" fg:w="1"/><text x="33.1294%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="32.8794%" y="597" width="0.0649%" height="15" fill="rgb(254,55,14)" fg:x="507" fg:w="1"/><text x="33.1294%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="32.8794%" y="581" width="0.0649%" height="15" fill="rgb(230,185,30)" fg:x="507" fg:w="1"/><text x="33.1294%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="32.8794%" y="565" width="0.0649%" height="15" fill="rgb(220,14,11)" fg:x="507" fg:w="1"/><text x="33.1294%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="32.8794%" y="549" width="0.0649%" height="15" fill="rgb(215,169,44)" fg:x="507" fg:w="1"/><text x="33.1294%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="32.8794%" y="533" width="0.0649%" height="15" fill="rgb(253,203,20)" fg:x="507" fg:w="1"/><text x="33.1294%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="32.8794%" y="517" width="0.0649%" height="15" fill="rgb(229,225,17)" fg:x="507" fg:w="1"/><text x="33.1294%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="32.8794%" y="501" width="0.0649%" height="15" fill="rgb(236,76,26)" fg:x="507" fg:w="1"/><text x="33.1294%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.8794%" y="485" width="0.0649%" height="15" fill="rgb(234,15,30)" fg:x="507" fg:w="1"/><text x="33.1294%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.8794%" y="469" width="0.0649%" height="15" fill="rgb(211,113,48)" fg:x="507" fg:w="1"/><text x="33.1294%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.8794%" y="453" width="0.0649%" height="15" fill="rgb(221,31,36)" fg:x="507" fg:w="1"/><text x="33.1294%" y="463.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (3 samples, 0.19%)</title><rect x="32.8145%" y="933" width="0.1946%" height="15" fill="rgb(215,118,52)" fg:x="506" fg:w="3"/><text x="33.0645%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="32.8145%" y="917" width="0.1946%" height="15" fill="rgb(241,151,27)" fg:x="506" fg:w="3"/><text x="33.0645%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="32.8145%" y="901" width="0.1946%" height="15" fill="rgb(253,51,3)" fg:x="506" fg:w="3"/><text x="33.0645%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="32.8145%" y="885" width="0.1946%" height="15" fill="rgb(216,201,24)" fg:x="506" fg:w="3"/><text x="33.0645%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="32.8145%" y="869" width="0.1946%" height="15" fill="rgb(231,107,4)" fg:x="506" fg:w="3"/><text x="33.0645%" y="879.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="32.8145%" y="853" width="0.1946%" height="15" fill="rgb(243,97,54)" fg:x="506" fg:w="3"/><text x="33.0645%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="32.8145%" y="837" width="0.1946%" height="15" fill="rgb(221,32,51)" fg:x="506" fg:w="3"/><text x="33.0645%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="32.8145%" y="821" width="0.1946%" height="15" fill="rgb(218,171,35)" fg:x="506" fg:w="3"/><text x="33.0645%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="32.8145%" y="805" width="0.1946%" height="15" fill="rgb(214,20,53)" fg:x="506" fg:w="3"/><text x="33.0645%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="32.9442%" y="789" width="0.0649%" height="15" fill="rgb(239,9,52)" fg:x="508" fg:w="1"/><text x="33.1942%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="32.9442%" y="773" width="0.0649%" height="15" fill="rgb(215,114,45)" fg:x="508" fg:w="1"/><text x="33.1942%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="32.9442%" y="757" width="0.0649%" height="15" fill="rgb(208,118,9)" fg:x="508" fg:w="1"/><text x="33.1942%" y="767.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="32.6848%" y="965" width="0.3891%" height="15" fill="rgb(235,7,39)" fg:x="504" fg:w="6"/><text x="32.9348%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (5 samples, 0.32%)</title><rect x="32.7497%" y="949" width="0.3243%" height="15" fill="rgb(243,225,15)" fg:x="505" fg:w="5"/><text x="32.9997%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="33.0091%" y="933" width="0.0649%" height="15" fill="rgb(225,216,18)" fg:x="509" fg:w="1"/><text x="33.2591%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="33.0091%" y="917" width="0.0649%" height="15" fill="rgb(233,36,38)" fg:x="509" fg:w="1"/><text x="33.2591%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.0091%" y="901" width="0.0649%" height="15" fill="rgb(239,88,23)" fg:x="509" fg:w="1"/><text x="33.2591%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.0091%" y="885" width="0.0649%" height="15" fill="rgb(219,181,35)" fg:x="509" fg:w="1"/><text x="33.2591%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.0091%" y="869" width="0.0649%" height="15" fill="rgb(215,18,46)" fg:x="509" fg:w="1"/><text x="33.2591%" y="879.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (7 samples, 0.45%)</title><rect x="32.6848%" y="981" width="0.4540%" height="15" fill="rgb(241,38,11)" fg:x="504" fg:w="7"/><text x="32.9348%" y="991.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::read_tree (1 samples, 0.06%)</title><rect x="33.0739%" y="965" width="0.0649%" height="15" fill="rgb(248,169,45)" fg:x="510" fg:w="1"/><text x="33.3239%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="33.0739%" y="949" width="0.0649%" height="15" fill="rgb(239,50,49)" fg:x="510" fg:w="1"/><text x="33.3239%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="33.0739%" y="933" width="0.0649%" height="15" fill="rgb(231,96,31)" fg:x="510" fg:w="1"/><text x="33.3239%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="33.0739%" y="917" width="0.0649%" height="15" fill="rgb(224,193,37)" fg:x="510" fg:w="1"/><text x="33.3239%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="33.0739%" y="901" width="0.0649%" height="15" fill="rgb(227,153,50)" fg:x="510" fg:w="1"/><text x="33.3239%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="33.0739%" y="885" width="0.0649%" height="15" fill="rgb(249,228,3)" fg:x="510" fg:w="1"/><text x="33.3239%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="33.0739%" y="869" width="0.0649%" height="15" fill="rgb(219,164,43)" fg:x="510" fg:w="1"/><text x="33.3239%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="33.0739%" y="853" width="0.0649%" height="15" fill="rgb(216,45,41)" fg:x="510" fg:w="1"/><text x="33.3239%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="33.0739%" y="837" width="0.0649%" height="15" fill="rgb(210,226,51)" fg:x="510" fg:w="1"/><text x="33.3239%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="33.0739%" y="821" width="0.0649%" height="15" fill="rgb(209,117,49)" fg:x="510" fg:w="1"/><text x="33.3239%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="33.0739%" y="805" width="0.0649%" height="15" fill="rgb(206,196,24)" fg:x="510" fg:w="1"/><text x="33.3239%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="33.0739%" y="789" width="0.0649%" height="15" fill="rgb(253,218,3)" fg:x="510" fg:w="1"/><text x="33.3239%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="33.0739%" y="773" width="0.0649%" height="15" fill="rgb(252,166,2)" fg:x="510" fg:w="1"/><text x="33.3239%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="33.0739%" y="757" width="0.0649%" height="15" fill="rgb(236,218,26)" fg:x="510" fg:w="1"/><text x="33.3239%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="33.0739%" y="741" width="0.0649%" height="15" fill="rgb(254,84,19)" fg:x="510" fg:w="1"/><text x="33.3239%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="33.0739%" y="725" width="0.0649%" height="15" fill="rgb(219,137,29)" fg:x="510" fg:w="1"/><text x="33.3239%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.0739%" y="709" width="0.0649%" height="15" fill="rgb(227,47,52)" fg:x="510" fg:w="1"/><text x="33.3239%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.0739%" y="693" width="0.0649%" height="15" fill="rgb(229,167,24)" fg:x="510" fg:w="1"/><text x="33.3239%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.0739%" y="677" width="0.0649%" height="15" fill="rgb(233,164,1)" fg:x="510" fg:w="1"/><text x="33.3239%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.1388%" y="933" width="0.0649%" height="15" fill="rgb(218,88,48)" fg:x="511" fg:w="1"/><text x="33.3888%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.1388%" y="917" width="0.0649%" height="15" fill="rgb(226,214,24)" fg:x="511" fg:w="1"/><text x="33.3888%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.1388%" y="901" width="0.0649%" height="15" fill="rgb(233,29,12)" fg:x="511" fg:w="1"/><text x="33.3888%" y="911.50"></text></g><g><title>core::mem::drop (1 samples, 0.06%)</title><rect x="33.2036%" y="933" width="0.0649%" height="15" fill="rgb(219,120,34)" fg:x="512" fg:w="1"/><text x="33.4536%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="33.2036%" y="917" width="0.0649%" height="15" fill="rgb(226,78,44)" fg:x="512" fg:w="1"/><text x="33.4536%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="33.2036%" y="901" width="0.0649%" height="15" fill="rgb(240,15,48)" fg:x="512" fg:w="1"/><text x="33.4536%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.2036%" y="885" width="0.0649%" height="15" fill="rgb(253,176,7)" fg:x="512" fg:w="1"/><text x="33.4536%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.2036%" y="869" width="0.0649%" height="15" fill="rgb(206,166,28)" fg:x="512" fg:w="1"/><text x="33.4536%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.2036%" y="853" width="0.0649%" height="15" fill="rgb(241,53,51)" fg:x="512" fg:w="1"/><text x="33.4536%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.13%)</title><rect x="33.2685%" y="917" width="0.1297%" height="15" fill="rgb(249,112,30)" fg:x="513" fg:w="2"/><text x="33.5185%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="33.2685%" y="901" width="0.1297%" height="15" fill="rgb(217,85,30)" fg:x="513" fg:w="2"/><text x="33.5185%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="33.2685%" y="885" width="0.1297%" height="15" fill="rgb(233,49,7)" fg:x="513" fg:w="2"/><text x="33.5185%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="33.2685%" y="869" width="0.1297%" height="15" fill="rgb(234,109,9)" fg:x="513" fg:w="2"/><text x="33.5185%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="33.3982%" y="917" width="0.0649%" height="15" fill="rgb(253,95,22)" fg:x="515" fg:w="1"/><text x="33.6482%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="33.3982%" y="901" width="0.0649%" height="15" fill="rgb(233,176,25)" fg:x="515" fg:w="1"/><text x="33.6482%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="33.3982%" y="885" width="0.0649%" height="15" fill="rgb(236,33,39)" fg:x="515" fg:w="1"/><text x="33.6482%" y="895.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="33.3982%" y="869" width="0.0649%" height="15" fill="rgb(223,226,42)" fg:x="515" fg:w="1"/><text x="33.6482%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.3982%" y="853" width="0.0649%" height="15" fill="rgb(216,99,33)" fg:x="515" fg:w="1"/><text x="33.6482%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.3982%" y="837" width="0.0649%" height="15" fill="rgb(235,84,23)" fg:x="515" fg:w="1"/><text x="33.6482%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.3982%" y="821" width="0.0649%" height="15" fill="rgb(232,2,27)" fg:x="515" fg:w="1"/><text x="33.6482%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.4630%" y="901" width="0.0649%" height="15" fill="rgb(241,23,22)" fg:x="516" fg:w="1"/><text x="33.7130%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.4630%" y="885" width="0.0649%" height="15" fill="rgb(211,73,27)" fg:x="516" fg:w="1"/><text x="33.7130%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.4630%" y="869" width="0.0649%" height="15" fill="rgb(235,109,49)" fg:x="516" fg:w="1"/><text x="33.7130%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (5 samples, 0.32%)</title><rect x="33.2685%" y="933" width="0.3243%" height="15" fill="rgb(230,99,29)" fg:x="513" fg:w="5"/><text x="33.5185%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (2 samples, 0.13%)</title><rect x="33.4630%" y="917" width="0.1297%" height="15" fill="rgb(245,199,7)" fg:x="516" fg:w="2"/><text x="33.7130%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="33.5279%" y="901" width="0.0649%" height="15" fill="rgb(217,179,10)" fg:x="517" fg:w="1"/><text x="33.7779%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="33.5279%" y="885" width="0.0649%" height="15" fill="rgb(254,99,47)" fg:x="517" fg:w="1"/><text x="33.7779%" y="895.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="33.5279%" y="869" width="0.0649%" height="15" fill="rgb(251,121,7)" fg:x="517" fg:w="1"/><text x="33.7779%" y="879.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="33.5279%" y="853" width="0.0649%" height="15" fill="rgb(250,177,26)" fg:x="517" fg:w="1"/><text x="33.7779%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.5279%" y="837" width="0.0649%" height="15" fill="rgb(232,88,15)" fg:x="517" fg:w="1"/><text x="33.7779%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.5279%" y="821" width="0.0649%" height="15" fill="rgb(251,54,54)" fg:x="517" fg:w="1"/><text x="33.7779%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.5279%" y="805" width="0.0649%" height="15" fill="rgb(208,177,15)" fg:x="517" fg:w="1"/><text x="33.7779%" y="815.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="33.5927%" y="917" width="0.0649%" height="15" fill="rgb(205,97,32)" fg:x="518" fg:w="1"/><text x="33.8427%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::take_value (1 samples, 0.06%)</title><rect x="33.5927%" y="901" width="0.0649%" height="15" fill="rgb(217,192,13)" fg:x="518" fg:w="1"/><text x="33.8427%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="33.5927%" y="885" width="0.0649%" height="15" fill="rgb(215,163,41)" fg:x="518" fg:w="1"/><text x="33.8427%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (1 samples, 0.06%)</title><rect x="33.5927%" y="869" width="0.0649%" height="15" fill="rgb(246,83,29)" fg:x="518" fg:w="1"/><text x="33.8427%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.5927%" y="853" width="0.0649%" height="15" fill="rgb(219,2,45)" fg:x="518" fg:w="1"/><text x="33.8427%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.5927%" y="837" width="0.0649%" height="15" fill="rgb(242,215,33)" fg:x="518" fg:w="1"/><text x="33.8427%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.5927%" y="821" width="0.0649%" height="15" fill="rgb(217,1,6)" fg:x="518" fg:w="1"/><text x="33.8427%" y="831.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (9 samples, 0.58%)</title><rect x="33.1388%" y="949" width="0.5837%" height="15" fill="rgb(207,85,52)" fg:x="511" fg:w="9"/><text x="33.3888%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (2 samples, 0.13%)</title><rect x="33.5927%" y="933" width="0.1297%" height="15" fill="rgb(231,171,19)" fg:x="518" fg:w="2"/><text x="33.8427%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="33.6576%" y="917" width="0.0649%" height="15" fill="rgb(207,128,4)" fg:x="519" fg:w="1"/><text x="33.9076%" y="927.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="33.6576%" y="901" width="0.0649%" height="15" fill="rgb(219,208,4)" fg:x="519" fg:w="1"/><text x="33.9076%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="33.6576%" y="885" width="0.0649%" height="15" fill="rgb(235,161,42)" fg:x="519" fg:w="1"/><text x="33.9076%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.6576%" y="869" width="0.0649%" height="15" fill="rgb(247,218,18)" fg:x="519" fg:w="1"/><text x="33.9076%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.6576%" y="853" width="0.0649%" height="15" fill="rgb(232,114,51)" fg:x="519" fg:w="1"/><text x="33.9076%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.6576%" y="837" width="0.0649%" height="15" fill="rgb(222,95,3)" fg:x="519" fg:w="1"/><text x="33.9076%" y="847.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (10 samples, 0.65%)</title><rect x="33.1388%" y="965" width="0.6485%" height="15" fill="rgb(240,65,29)" fg:x="511" fg:w="10"/><text x="33.3888%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="33.7224%" y="949" width="0.0649%" height="15" fill="rgb(249,209,20)" fg:x="520" fg:w="1"/><text x="33.9724%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="33.7224%" y="933" width="0.0649%" height="15" fill="rgb(241,48,37)" fg:x="520" fg:w="1"/><text x="33.9724%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="33.7224%" y="917" width="0.0649%" height="15" fill="rgb(230,140,42)" fg:x="520" fg:w="1"/><text x="33.9724%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="33.7224%" y="901" width="0.0649%" height="15" fill="rgb(230,176,45)" fg:x="520" fg:w="1"/><text x="33.9724%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="33.7224%" y="885" width="0.0649%" height="15" fill="rgb(245,112,21)" fg:x="520" fg:w="1"/><text x="33.9724%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="33.7224%" y="869" width="0.0649%" height="15" fill="rgb(207,183,35)" fg:x="520" fg:w="1"/><text x="33.9724%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.7224%" y="853" width="0.0649%" height="15" fill="rgb(227,44,33)" fg:x="520" fg:w="1"/><text x="33.9724%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.7224%" y="837" width="0.0649%" height="15" fill="rgb(246,120,21)" fg:x="520" fg:w="1"/><text x="33.9724%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.7224%" y="821" width="0.0649%" height="15" fill="rgb(235,57,52)" fg:x="520" fg:w="1"/><text x="33.9724%" y="831.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (11 samples, 0.71%)</title><rect x="33.1388%" y="981" width="0.7134%" height="15" fill="rgb(238,84,10)" fg:x="511" fg:w="11"/><text x="33.3888%" y="991.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="33.7873%" y="965" width="0.0649%" height="15" fill="rgb(251,200,32)" fg:x="521" fg:w="1"/><text x="34.0373%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.7873%" y="949" width="0.0649%" height="15" fill="rgb(247,159,13)" fg:x="521" fg:w="1"/><text x="34.0373%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.7873%" y="933" width="0.0649%" height="15" fill="rgb(238,64,4)" fg:x="521" fg:w="1"/><text x="34.0373%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.7873%" y="917" width="0.0649%" height="15" fill="rgb(221,131,51)" fg:x="521" fg:w="1"/><text x="34.0373%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.8521%" y="645" width="0.0649%" height="15" fill="rgb(242,5,29)" fg:x="522" fg:w="1"/><text x="34.1021%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.8521%" y="629" width="0.0649%" height="15" fill="rgb(214,130,32)" fg:x="522" fg:w="1"/><text x="34.1021%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.8521%" y="613" width="0.0649%" height="15" fill="rgb(244,210,16)" fg:x="522" fg:w="1"/><text x="34.1021%" y="623.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="33.8521%" y="949" width="0.1297%" height="15" fill="rgb(234,48,26)" fg:x="522" fg:w="2"/><text x="34.1021%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="33.8521%" y="933" width="0.1297%" height="15" fill="rgb(231,82,38)" fg:x="522" fg:w="2"/><text x="34.1021%" y="943.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="33.8521%" y="917" width="0.1297%" height="15" fill="rgb(254,128,41)" fg:x="522" fg:w="2"/><text x="34.1021%" y="927.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="33.8521%" y="901" width="0.1297%" height="15" fill="rgb(212,73,49)" fg:x="522" fg:w="2"/><text x="34.1021%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="33.8521%" y="885" width="0.1297%" height="15" fill="rgb(205,62,54)" fg:x="522" fg:w="2"/><text x="34.1021%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="33.8521%" y="869" width="0.1297%" height="15" fill="rgb(228,0,8)" fg:x="522" fg:w="2"/><text x="34.1021%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="33.8521%" y="853" width="0.1297%" height="15" fill="rgb(251,28,17)" fg:x="522" fg:w="2"/><text x="34.1021%" y="863.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="33.8521%" y="837" width="0.1297%" height="15" fill="rgb(238,105,27)" fg:x="522" fg:w="2"/><text x="34.1021%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="33.8521%" y="821" width="0.1297%" height="15" fill="rgb(237,216,33)" fg:x="522" fg:w="2"/><text x="34.1021%" y="831.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="33.8521%" y="805" width="0.1297%" height="15" fill="rgb(229,228,25)" fg:x="522" fg:w="2"/><text x="34.1021%" y="815.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (2 samples, 0.13%)</title><rect x="33.8521%" y="789" width="0.1297%" height="15" fill="rgb(233,75,23)" fg:x="522" fg:w="2"/><text x="34.1021%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (2 samples, 0.13%)</title><rect x="33.8521%" y="773" width="0.1297%" height="15" fill="rgb(231,207,16)" fg:x="522" fg:w="2"/><text x="34.1021%" y="783.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (2 samples, 0.13%)</title><rect x="33.8521%" y="757" width="0.1297%" height="15" fill="rgb(231,191,45)" fg:x="522" fg:w="2"/><text x="34.1021%" y="767.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (2 samples, 0.13%)</title><rect x="33.8521%" y="741" width="0.1297%" height="15" fill="rgb(224,133,17)" fg:x="522" fg:w="2"/><text x="34.1021%" y="751.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (2 samples, 0.13%)</title><rect x="33.8521%" y="725" width="0.1297%" height="15" fill="rgb(209,178,27)" fg:x="522" fg:w="2"/><text x="34.1021%" y="735.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.13%)</title><rect x="33.8521%" y="709" width="0.1297%" height="15" fill="rgb(218,37,11)" fg:x="522" fg:w="2"/><text x="34.1021%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.13%)</title><rect x="33.8521%" y="693" width="0.1297%" height="15" fill="rgb(251,226,25)" fg:x="522" fg:w="2"/><text x="34.1021%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.13%)</title><rect x="33.8521%" y="677" width="0.1297%" height="15" fill="rgb(209,222,27)" fg:x="522" fg:w="2"/><text x="34.1021%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="33.8521%" y="661" width="0.1297%" height="15" fill="rgb(238,22,21)" fg:x="522" fg:w="2"/><text x="34.1021%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="33.9170%" y="645" width="0.0649%" height="15" fill="rgb(233,161,25)" fg:x="523" fg:w="1"/><text x="34.1670%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="33.9170%" y="629" width="0.0649%" height="15" fill="rgb(226,122,53)" fg:x="523" fg:w="1"/><text x="34.1670%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="33.9170%" y="613" width="0.0649%" height="15" fill="rgb(220,123,17)" fg:x="523" fg:w="1"/><text x="34.1670%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.9170%" y="597" width="0.0649%" height="15" fill="rgb(230,224,35)" fg:x="523" fg:w="1"/><text x="34.1670%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.9170%" y="581" width="0.0649%" height="15" fill="rgb(246,83,8)" fg:x="523" fg:w="1"/><text x="34.1670%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.9170%" y="565" width="0.0649%" height="15" fill="rgb(230,214,17)" fg:x="523" fg:w="1"/><text x="34.1670%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="33.9818%" y="917" width="0.0649%" height="15" fill="rgb(222,97,18)" fg:x="524" fg:w="1"/><text x="34.2318%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="33.9818%" y="901" width="0.0649%" height="15" fill="rgb(206,79,1)" fg:x="524" fg:w="1"/><text x="34.2318%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="33.9818%" y="885" width="0.0649%" height="15" fill="rgb(214,121,34)" fg:x="524" fg:w="1"/><text x="34.2318%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="33.9818%" y="869" width="0.0649%" height="15" fill="rgb(249,199,46)" fg:x="524" fg:w="1"/><text x="34.2318%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="34.0467%" y="869" width="0.0649%" height="15" fill="rgb(214,222,46)" fg:x="525" fg:w="1"/><text x="34.2967%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="34.0467%" y="853" width="0.0649%" height="15" fill="rgb(248,168,30)" fg:x="525" fg:w="1"/><text x="34.2967%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="34.0467%" y="837" width="0.0649%" height="15" fill="rgb(226,14,28)" fg:x="525" fg:w="1"/><text x="34.2967%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="34.0467%" y="821" width="0.0649%" height="15" fill="rgb(253,123,1)" fg:x="525" fg:w="1"/><text x="34.2967%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="34.0467%" y="805" width="0.0649%" height="15" fill="rgb(225,24,42)" fg:x="525" fg:w="1"/><text x="34.2967%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="34.0467%" y="789" width="0.0649%" height="15" fill="rgb(216,161,37)" fg:x="525" fg:w="1"/><text x="34.2967%" y="799.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="34.0467%" y="773" width="0.0649%" height="15" fill="rgb(251,164,26)" fg:x="525" fg:w="1"/><text x="34.2967%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="34.0467%" y="757" width="0.0649%" height="15" fill="rgb(219,177,3)" fg:x="525" fg:w="1"/><text x="34.2967%" y="767.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="34.0467%" y="741" width="0.0649%" height="15" fill="rgb(222,65,0)" fg:x="525" fg:w="1"/><text x="34.2967%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="34.0467%" y="725" width="0.0649%" height="15" fill="rgb(223,69,54)" fg:x="525" fg:w="1"/><text x="34.2967%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="34.0467%" y="709" width="0.0649%" height="15" fill="rgb(235,30,27)" fg:x="525" fg:w="1"/><text x="34.2967%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="34.0467%" y="693" width="0.0649%" height="15" fill="rgb(220,183,50)" fg:x="525" fg:w="1"/><text x="34.2967%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.0467%" y="677" width="0.0649%" height="15" fill="rgb(248,198,15)" fg:x="525" fg:w="1"/><text x="34.2967%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.0467%" y="661" width="0.0649%" height="15" fill="rgb(222,211,4)" fg:x="525" fg:w="1"/><text x="34.2967%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.0467%" y="645" width="0.0649%" height="15" fill="rgb(214,102,34)" fg:x="525" fg:w="1"/><text x="34.2967%" y="655.50"></text></g><g><title>core::mem::drop (2 samples, 0.13%)</title><rect x="34.0467%" y="917" width="0.1297%" height="15" fill="rgb(245,92,5)" fg:x="525" fg:w="2"/><text x="34.2967%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="34.0467%" y="901" width="0.1297%" height="15" fill="rgb(252,72,51)" fg:x="525" fg:w="2"/><text x="34.2967%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="34.0467%" y="885" width="0.1297%" height="15" fill="rgb(252,208,19)" fg:x="525" fg:w="2"/><text x="34.2967%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="34.1115%" y="869" width="0.0649%" height="15" fill="rgb(211,69,7)" fg:x="526" fg:w="1"/><text x="34.3615%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="34.1115%" y="853" width="0.0649%" height="15" fill="rgb(211,27,16)" fg:x="526" fg:w="1"/><text x="34.3615%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="34.1115%" y="837" width="0.0649%" height="15" fill="rgb(219,216,14)" fg:x="526" fg:w="1"/><text x="34.3615%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="34.1115%" y="821" width="0.0649%" height="15" fill="rgb(219,71,8)" fg:x="526" fg:w="1"/><text x="34.3615%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="34.1115%" y="805" width="0.0649%" height="15" fill="rgb(223,170,53)" fg:x="526" fg:w="1"/><text x="34.3615%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="34.1115%" y="789" width="0.0649%" height="15" fill="rgb(246,21,26)" fg:x="526" fg:w="1"/><text x="34.3615%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="34.1115%" y="773" width="0.0649%" height="15" fill="rgb(248,20,46)" fg:x="526" fg:w="1"/><text x="34.3615%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="34.1115%" y="757" width="0.0649%" height="15" fill="rgb(252,94,11)" fg:x="526" fg:w="1"/><text x="34.3615%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.1115%" y="741" width="0.0649%" height="15" fill="rgb(236,163,8)" fg:x="526" fg:w="1"/><text x="34.3615%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.1115%" y="725" width="0.0649%" height="15" fill="rgb(217,221,45)" fg:x="526" fg:w="1"/><text x="34.3615%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.1115%" y="709" width="0.0649%" height="15" fill="rgb(238,38,17)" fg:x="526" fg:w="1"/><text x="34.3615%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="34.1764%" y="917" width="0.0649%" height="15" fill="rgb(242,210,23)" fg:x="527" fg:w="1"/><text x="34.4264%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::mutex::Mutex&lt;std::collections::hash::set::HashSet&lt;redb::tree_store::page_store::base::PageNumber&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="34.1764%" y="901" width="0.0649%" height="15" fill="rgb(250,86,53)" fg:x="527" fg:w="1"/><text x="34.4264%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.1764%" y="885" width="0.0649%" height="15" fill="rgb(223,168,25)" fg:x="527" fg:w="1"/><text x="34.4264%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.1764%" y="869" width="0.0649%" height="15" fill="rgb(251,189,4)" fg:x="527" fg:w="1"/><text x="34.4264%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.1764%" y="853" width="0.0649%" height="15" fill="rgb(245,19,28)" fg:x="527" fg:w="1"/><text x="34.4264%" y="863.50"></text></g><g><title>&lt;bincode::config::trailing::RejectTrailing as bincode::config::trailing::TrailingBytes&gt;::check_end (1 samples, 0.06%)</title><rect x="34.2412%" y="821" width="0.0649%" height="15" fill="rgb(207,10,34)" fg:x="528" fg:w="1"/><text x="34.4912%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.2412%" y="805" width="0.0649%" height="15" fill="rgb(235,153,31)" fg:x="528" fg:w="1"/><text x="34.4912%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.2412%" y="789" width="0.0649%" height="15" fill="rgb(228,72,37)" fg:x="528" fg:w="1"/><text x="34.4912%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.2412%" y="773" width="0.0649%" height="15" fill="rgb(215,15,16)" fg:x="528" fg:w="1"/><text x="34.4912%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.3061%" y="741" width="0.0649%" height="15" fill="rgb(250,119,29)" fg:x="529" fg:w="1"/><text x="34.5561%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.3061%" y="725" width="0.0649%" height="15" fill="rgb(214,59,1)" fg:x="529" fg:w="1"/><text x="34.5561%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.3061%" y="709" width="0.0649%" height="15" fill="rgb(223,109,25)" fg:x="529" fg:w="1"/><text x="34.5561%" y="719.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="34.3709%" y="581" width="0.0649%" height="15" fill="rgb(230,198,22)" fg:x="530" fg:w="1"/><text x="34.6209%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="34.3709%" y="565" width="0.0649%" height="15" fill="rgb(245,184,46)" fg:x="530" fg:w="1"/><text x="34.6209%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="34.3709%" y="549" width="0.0649%" height="15" fill="rgb(253,73,16)" fg:x="530" fg:w="1"/><text x="34.6209%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="34.3709%" y="533" width="0.0649%" height="15" fill="rgb(206,94,45)" fg:x="530" fg:w="1"/><text x="34.6209%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="34.3709%" y="517" width="0.0649%" height="15" fill="rgb(236,83,27)" fg:x="530" fg:w="1"/><text x="34.6209%" y="527.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="34.3709%" y="501" width="0.0649%" height="15" fill="rgb(220,196,8)" fg:x="530" fg:w="1"/><text x="34.6209%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="34.3709%" y="485" width="0.0649%" height="15" fill="rgb(254,185,14)" fg:x="530" fg:w="1"/><text x="34.6209%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="34.3709%" y="469" width="0.0649%" height="15" fill="rgb(226,50,22)" fg:x="530" fg:w="1"/><text x="34.6209%" y="479.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="34.3709%" y="453" width="0.0649%" height="15" fill="rgb(253,147,0)" fg:x="530" fg:w="1"/><text x="34.6209%" y="463.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="34.3709%" y="437" width="0.0649%" height="15" fill="rgb(252,46,33)" fg:x="530" fg:w="1"/><text x="34.6209%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="34.3709%" y="421" width="0.0649%" height="15" fill="rgb(242,22,54)" fg:x="530" fg:w="1"/><text x="34.6209%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.3709%" y="405" width="0.0649%" height="15" fill="rgb(223,178,32)" fg:x="530" fg:w="1"/><text x="34.6209%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.3709%" y="389" width="0.0649%" height="15" fill="rgb(214,106,53)" fg:x="530" fg:w="1"/><text x="34.6209%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.3709%" y="373" width="0.0649%" height="15" fill="rgb(232,65,50)" fg:x="530" fg:w="1"/><text x="34.6209%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.4358%" y="469" width="0.0649%" height="15" fill="rgb(231,110,28)" fg:x="531" fg:w="1"/><text x="34.6858%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.4358%" y="453" width="0.0649%" height="15" fill="rgb(216,71,40)" fg:x="531" fg:w="1"/><text x="34.6858%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.4358%" y="437" width="0.0649%" height="15" fill="rgb(229,89,53)" fg:x="531" fg:w="1"/><text x="34.6858%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="34.5006%" y="469" width="0.1297%" height="15" fill="rgb(210,124,14)" fg:x="532" fg:w="2"/><text x="34.7506%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="34.5006%" y="453" width="0.1297%" height="15" fill="rgb(236,213,6)" fg:x="532" fg:w="2"/><text x="34.7506%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="34.5006%" y="437" width="0.1297%" height="15" fill="rgb(228,41,5)" fg:x="532" fg:w="2"/><text x="34.7506%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="34.5006%" y="421" width="0.1297%" height="15" fill="rgb(221,167,25)" fg:x="532" fg:w="2"/><text x="34.7506%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="34.5006%" y="405" width="0.1297%" height="15" fill="rgb(228,144,37)" fg:x="532" fg:w="2"/><text x="34.7506%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="34.5006%" y="389" width="0.1297%" height="15" fill="rgb(227,189,38)" fg:x="532" fg:w="2"/><text x="34.7506%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="34.5006%" y="373" width="0.1297%" height="15" fill="rgb(218,8,2)" fg:x="532" fg:w="2"/><text x="34.7506%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="34.5006%" y="357" width="0.1297%" height="15" fill="rgb(209,61,28)" fg:x="532" fg:w="2"/><text x="34.7506%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="34.5006%" y="341" width="0.1297%" height="15" fill="rgb(233,140,39)" fg:x="532" fg:w="2"/><text x="34.7506%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="34.5006%" y="325" width="0.1297%" height="15" fill="rgb(251,66,48)" fg:x="532" fg:w="2"/><text x="34.7506%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="34.5006%" y="309" width="0.1297%" height="15" fill="rgb(210,44,45)" fg:x="532" fg:w="2"/><text x="34.7506%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="34.5006%" y="293" width="0.1297%" height="15" fill="rgb(214,136,46)" fg:x="532" fg:w="2"/><text x="34.7506%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="34.5006%" y="277" width="0.1297%" height="15" fill="rgb(207,130,50)" fg:x="532" fg:w="2"/><text x="34.7506%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="34.5006%" y="261" width="0.1297%" height="15" fill="rgb(228,102,49)" fg:x="532" fg:w="2"/><text x="34.7506%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="34.5006%" y="245" width="0.1297%" height="15" fill="rgb(253,55,1)" fg:x="532" fg:w="2"/><text x="34.7506%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.13%)</title><rect x="34.5006%" y="229" width="0.1297%" height="15" fill="rgb(238,222,9)" fg:x="532" fg:w="2"/><text x="34.7506%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (2 samples, 0.13%)</title><rect x="34.5006%" y="213" width="0.1297%" height="15" fill="rgb(246,99,6)" fg:x="532" fg:w="2"/><text x="34.7506%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="34.5006%" y="197" width="0.1297%" height="15" fill="rgb(219,110,26)" fg:x="532" fg:w="2"/><text x="34.7506%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="34.5006%" y="181" width="0.1297%" height="15" fill="rgb(239,160,33)" fg:x="532" fg:w="2"/><text x="34.7506%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="34.5006%" y="165" width="0.1297%" height="15" fill="rgb(220,202,23)" fg:x="532" fg:w="2"/><text x="34.7506%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="34.6304%" y="373" width="0.0649%" height="15" fill="rgb(208,80,26)" fg:x="534" fg:w="1"/><text x="34.8804%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="34.6304%" y="357" width="0.0649%" height="15" fill="rgb(243,85,7)" fg:x="534" fg:w="1"/><text x="34.8804%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="34.6304%" y="341" width="0.0649%" height="15" fill="rgb(228,77,47)" fg:x="534" fg:w="1"/><text x="34.8804%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="34.6304%" y="325" width="0.0649%" height="15" fill="rgb(212,226,8)" fg:x="534" fg:w="1"/><text x="34.8804%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="34.6304%" y="309" width="0.0649%" height="15" fill="rgb(241,120,54)" fg:x="534" fg:w="1"/><text x="34.8804%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="34.6304%" y="293" width="0.0649%" height="15" fill="rgb(226,80,16)" fg:x="534" fg:w="1"/><text x="34.8804%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="34.6304%" y="277" width="0.0649%" height="15" fill="rgb(240,76,13)" fg:x="534" fg:w="1"/><text x="34.8804%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="34.6304%" y="261" width="0.0649%" height="15" fill="rgb(252,74,8)" fg:x="534" fg:w="1"/><text x="34.8804%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="34.6304%" y="245" width="0.0649%" height="15" fill="rgb(244,155,2)" fg:x="534" fg:w="1"/><text x="34.8804%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="34.6304%" y="229" width="0.0649%" height="15" fill="rgb(215,81,35)" fg:x="534" fg:w="1"/><text x="34.8804%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="34.6304%" y="213" width="0.0649%" height="15" fill="rgb(206,55,2)" fg:x="534" fg:w="1"/><text x="34.8804%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.6304%" y="197" width="0.0649%" height="15" fill="rgb(231,2,34)" fg:x="534" fg:w="1"/><text x="34.8804%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.6304%" y="181" width="0.0649%" height="15" fill="rgb(242,176,48)" fg:x="534" fg:w="1"/><text x="34.8804%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.6304%" y="165" width="0.0649%" height="15" fill="rgb(249,31,36)" fg:x="534" fg:w="1"/><text x="34.8804%" y="175.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (8 samples, 0.52%)</title><rect x="34.2412%" y="901" width="0.5188%" height="15" fill="rgb(205,18,17)" fg:x="528" fg:w="8"/><text x="34.4912%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (8 samples, 0.52%)</title><rect x="34.2412%" y="885" width="0.5188%" height="15" fill="rgb(254,130,5)" fg:x="528" fg:w="8"/><text x="34.4912%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (8 samples, 0.52%)</title><rect x="34.2412%" y="869" width="0.5188%" height="15" fill="rgb(229,42,45)" fg:x="528" fg:w="8"/><text x="34.4912%" y="879.50"></text></g><g><title>bincode::internal::deserialize (8 samples, 0.52%)</title><rect x="34.2412%" y="853" width="0.5188%" height="15" fill="rgb(245,95,25)" fg:x="528" fg:w="8"/><text x="34.4912%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (8 samples, 0.52%)</title><rect x="34.2412%" y="837" width="0.5188%" height="15" fill="rgb(249,193,38)" fg:x="528" fg:w="8"/><text x="34.4912%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="34.3061%" y="821" width="0.4540%" height="15" fill="rgb(241,140,43)" fg:x="529" fg:w="7"/><text x="34.5561%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (7 samples, 0.45%)</title><rect x="34.3061%" y="805" width="0.4540%" height="15" fill="rgb(245,78,48)" fg:x="529" fg:w="7"/><text x="34.5561%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (7 samples, 0.45%)</title><rect x="34.3061%" y="789" width="0.4540%" height="15" fill="rgb(214,92,39)" fg:x="529" fg:w="7"/><text x="34.5561%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (7 samples, 0.45%)</title><rect x="34.3061%" y="773" width="0.4540%" height="15" fill="rgb(211,189,14)" fg:x="529" fg:w="7"/><text x="34.5561%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (7 samples, 0.45%)</title><rect x="34.3061%" y="757" width="0.4540%" height="15" fill="rgb(218,7,24)" fg:x="529" fg:w="7"/><text x="34.5561%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="34.3709%" y="741" width="0.3891%" height="15" fill="rgb(224,200,49)" fg:x="530" fg:w="6"/><text x="34.6209%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="34.3709%" y="725" width="0.3891%" height="15" fill="rgb(218,210,14)" fg:x="530" fg:w="6"/><text x="34.6209%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="34.3709%" y="709" width="0.3891%" height="15" fill="rgb(234,142,31)" fg:x="530" fg:w="6"/><text x="34.6209%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="34.3709%" y="693" width="0.3891%" height="15" fill="rgb(227,165,2)" fg:x="530" fg:w="6"/><text x="34.6209%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="34.3709%" y="677" width="0.3891%" height="15" fill="rgb(232,44,46)" fg:x="530" fg:w="6"/><text x="34.6209%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="34.3709%" y="661" width="0.3891%" height="15" fill="rgb(236,149,47)" fg:x="530" fg:w="6"/><text x="34.6209%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.39%)</title><rect x="34.3709%" y="645" width="0.3891%" height="15" fill="rgb(227,45,31)" fg:x="530" fg:w="6"/><text x="34.6209%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="34.3709%" y="629" width="0.3891%" height="15" fill="rgb(240,176,51)" fg:x="530" fg:w="6"/><text x="34.6209%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="34.3709%" y="613" width="0.3891%" height="15" fill="rgb(249,146,41)" fg:x="530" fg:w="6"/><text x="34.6209%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="34.3709%" y="597" width="0.3891%" height="15" fill="rgb(213,208,4)" fg:x="530" fg:w="6"/><text x="34.6209%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="34.4358%" y="581" width="0.3243%" height="15" fill="rgb(245,84,36)" fg:x="531" fg:w="5"/><text x="34.6858%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="34.4358%" y="565" width="0.3243%" height="15" fill="rgb(254,84,18)" fg:x="531" fg:w="5"/><text x="34.6858%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="34.4358%" y="549" width="0.3243%" height="15" fill="rgb(225,38,54)" fg:x="531" fg:w="5"/><text x="34.6858%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="34.4358%" y="533" width="0.3243%" height="15" fill="rgb(246,50,30)" fg:x="531" fg:w="5"/><text x="34.6858%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.32%)</title><rect x="34.4358%" y="517" width="0.3243%" height="15" fill="rgb(246,148,9)" fg:x="531" fg:w="5"/><text x="34.6858%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.32%)</title><rect x="34.4358%" y="501" width="0.3243%" height="15" fill="rgb(223,75,4)" fg:x="531" fg:w="5"/><text x="34.6858%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="34.4358%" y="485" width="0.3243%" height="15" fill="rgb(239,148,41)" fg:x="531" fg:w="5"/><text x="34.6858%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="34.6304%" y="469" width="0.1297%" height="15" fill="rgb(205,195,3)" fg:x="534" fg:w="2"/><text x="34.8804%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="34.6304%" y="453" width="0.1297%" height="15" fill="rgb(254,161,1)" fg:x="534" fg:w="2"/><text x="34.8804%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="34.6304%" y="437" width="0.1297%" height="15" fill="rgb(211,229,8)" fg:x="534" fg:w="2"/><text x="34.8804%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="34.6304%" y="421" width="0.1297%" height="15" fill="rgb(220,97,9)" fg:x="534" fg:w="2"/><text x="34.8804%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="34.6304%" y="405" width="0.1297%" height="15" fill="rgb(240,218,8)" fg:x="534" fg:w="2"/><text x="34.8804%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="34.6304%" y="389" width="0.1297%" height="15" fill="rgb(250,44,0)" fg:x="534" fg:w="2"/><text x="34.8804%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.6952%" y="373" width="0.0649%" height="15" fill="rgb(236,41,53)" fg:x="535" fg:w="1"/><text x="34.9452%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.6952%" y="357" width="0.0649%" height="15" fill="rgb(218,227,13)" fg:x="535" fg:w="1"/><text x="34.9452%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.6952%" y="341" width="0.0649%" height="15" fill="rgb(217,94,32)" fg:x="535" fg:w="1"/><text x="34.9452%" y="351.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="34.7601%" y="885" width="0.0649%" height="15" fill="rgb(213,217,12)" fg:x="536" fg:w="1"/><text x="35.0101%" y="895.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="34.7601%" y="869" width="0.0649%" height="15" fill="rgb(229,13,46)" fg:x="536" fg:w="1"/><text x="35.0101%" y="879.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="34.7601%" y="853" width="0.0649%" height="15" fill="rgb(243,139,5)" fg:x="536" fg:w="1"/><text x="35.0101%" y="863.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="34.7601%" y="837" width="0.0649%" height="15" fill="rgb(249,38,45)" fg:x="536" fg:w="1"/><text x="35.0101%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.7601%" y="821" width="0.0649%" height="15" fill="rgb(216,70,11)" fg:x="536" fg:w="1"/><text x="35.0101%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.7601%" y="805" width="0.0649%" height="15" fill="rgb(253,101,25)" fg:x="536" fg:w="1"/><text x="35.0101%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.7601%" y="789" width="0.0649%" height="15" fill="rgb(207,197,30)" fg:x="536" fg:w="1"/><text x="35.0101%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (10 samples, 0.65%)</title><rect x="34.2412%" y="917" width="0.6485%" height="15" fill="rgb(238,87,13)" fg:x="528" fg:w="10"/><text x="34.4912%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (2 samples, 0.13%)</title><rect x="34.7601%" y="901" width="0.1297%" height="15" fill="rgb(215,155,8)" fg:x="536" fg:w="2"/><text x="35.0101%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="34.8249%" y="885" width="0.0649%" height="15" fill="rgb(239,166,38)" fg:x="537" fg:w="1"/><text x="35.0749%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="34.8249%" y="869" width="0.0649%" height="15" fill="rgb(240,194,35)" fg:x="537" fg:w="1"/><text x="35.0749%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.8249%" y="853" width="0.0649%" height="15" fill="rgb(219,10,44)" fg:x="537" fg:w="1"/><text x="35.0749%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.8249%" y="837" width="0.0649%" height="15" fill="rgb(251,220,35)" fg:x="537" fg:w="1"/><text x="35.0749%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.8249%" y="821" width="0.0649%" height="15" fill="rgb(218,117,13)" fg:x="537" fg:w="1"/><text x="35.0749%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="34.8898%" y="885" width="0.0649%" height="15" fill="rgb(221,213,40)" fg:x="538" fg:w="1"/><text x="35.1398%" y="895.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="34.8898%" y="869" width="0.0649%" height="15" fill="rgb(251,224,35)" fg:x="538" fg:w="1"/><text x="35.1398%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.8898%" y="853" width="0.0649%" height="15" fill="rgb(241,33,39)" fg:x="538" fg:w="1"/><text x="35.1398%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.8898%" y="837" width="0.0649%" height="15" fill="rgb(222,74,17)" fg:x="538" fg:w="1"/><text x="35.1398%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.8898%" y="821" width="0.0649%" height="15" fill="rgb(225,103,0)" fg:x="538" fg:w="1"/><text x="35.1398%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::push_all_except (2 samples, 0.13%)</title><rect x="34.8898%" y="917" width="0.1297%" height="15" fill="rgb(240,0,12)" fg:x="538" fg:w="2"/><text x="35.1398%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (2 samples, 0.13%)</title><rect x="34.8898%" y="901" width="0.1297%" height="15" fill="rgb(233,213,37)" fg:x="538" fg:w="2"/><text x="35.1398%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="34.9546%" y="885" width="0.0649%" height="15" fill="rgb(225,84,52)" fg:x="539" fg:w="1"/><text x="35.2046%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="34.9546%" y="869" width="0.0649%" height="15" fill="rgb(247,160,51)" fg:x="539" fg:w="1"/><text x="35.2046%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="34.9546%" y="853" width="0.0649%" height="15" fill="rgb(244,60,51)" fg:x="539" fg:w="1"/><text x="35.2046%" y="863.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="34.9546%" y="837" width="0.0649%" height="15" fill="rgb(233,114,7)" fg:x="539" fg:w="1"/><text x="35.2046%" y="847.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (1 samples, 0.06%)</title><rect x="34.9546%" y="821" width="0.0649%" height="15" fill="rgb(246,136,16)" fg:x="539" fg:w="1"/><text x="35.2046%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="34.9546%" y="805" width="0.0649%" height="15" fill="rgb(243,114,45)" fg:x="539" fg:w="1"/><text x="35.2046%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="34.9546%" y="789" width="0.0649%" height="15" fill="rgb(247,183,43)" fg:x="539" fg:w="1"/><text x="35.2046%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="34.9546%" y="773" width="0.0649%" height="15" fill="rgb(251,210,42)" fg:x="539" fg:w="1"/><text x="35.2046%" y="783.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.06%)</title><rect x="35.0195%" y="885" width="0.0649%" height="15" fill="rgb(221,88,35)" fg:x="540" fg:w="1"/><text x="35.2695%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.06%)</title><rect x="35.0195%" y="869" width="0.0649%" height="15" fill="rgb(242,21,20)" fg:x="540" fg:w="1"/><text x="35.2695%" y="879.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.06%)</title><rect x="35.0195%" y="853" width="0.0649%" height="15" fill="rgb(233,226,36)" fg:x="540" fg:w="1"/><text x="35.2695%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.06%)</title><rect x="35.0195%" y="837" width="0.0649%" height="15" fill="rgb(243,189,34)" fg:x="540" fg:w="1"/><text x="35.2695%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add::precondition_check (1 samples, 0.06%)</title><rect x="35.0195%" y="821" width="0.0649%" height="15" fill="rgb(207,145,50)" fg:x="540" fg:w="1"/><text x="35.2695%" y="831.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.06%)</title><rect x="35.0195%" y="805" width="0.0649%" height="15" fill="rgb(242,1,50)" fg:x="540" fg:w="1"/><text x="35.2695%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.0195%" y="789" width="0.0649%" height="15" fill="rgb(231,65,32)" fg:x="540" fg:w="1"/><text x="35.2695%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.0195%" y="773" width="0.0649%" height="15" fill="rgb(208,68,49)" fg:x="540" fg:w="1"/><text x="35.2695%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.0195%" y="757" width="0.0649%" height="15" fill="rgb(253,54,49)" fg:x="540" fg:w="1"/><text x="35.2695%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.0843%" y="869" width="0.0649%" height="15" fill="rgb(245,186,24)" fg:x="541" fg:w="1"/><text x="35.3343%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.0843%" y="853" width="0.0649%" height="15" fill="rgb(209,2,41)" fg:x="541" fg:w="1"/><text x="35.3343%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.0843%" y="837" width="0.0649%" height="15" fill="rgb(242,208,54)" fg:x="541" fg:w="1"/><text x="35.3343%" y="847.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="35.1492%" y="853" width="0.0649%" height="15" fill="rgb(225,9,51)" fg:x="542" fg:w="1"/><text x="35.3992%" y="863.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="35.1492%" y="837" width="0.0649%" height="15" fill="rgb(207,207,25)" fg:x="542" fg:w="1"/><text x="35.3992%" y="847.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="35.1492%" y="821" width="0.0649%" height="15" fill="rgb(253,96,18)" fg:x="542" fg:w="1"/><text x="35.3992%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.1492%" y="805" width="0.0649%" height="15" fill="rgb(252,215,20)" fg:x="542" fg:w="1"/><text x="35.3992%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.1492%" y="789" width="0.0649%" height="15" fill="rgb(245,227,26)" fg:x="542" fg:w="1"/><text x="35.3992%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.1492%" y="773" width="0.0649%" height="15" fill="rgb(241,208,0)" fg:x="542" fg:w="1"/><text x="35.3992%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="35.1492%" y="869" width="0.1297%" height="15" fill="rgb(224,130,10)" fg:x="542" fg:w="2"/><text x="35.3992%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.2140%" y="853" width="0.0649%" height="15" fill="rgb(237,29,0)" fg:x="543" fg:w="1"/><text x="35.4640%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.2140%" y="837" width="0.0649%" height="15" fill="rgb(219,27,41)" fg:x="543" fg:w="1"/><text x="35.4640%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.2140%" y="821" width="0.0649%" height="15" fill="rgb(245,101,19)" fg:x="543" fg:w="1"/><text x="35.4640%" y="831.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="35.2789%" y="837" width="0.0649%" height="15" fill="rgb(243,44,37)" fg:x="544" fg:w="1"/><text x="35.5289%" y="847.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="35.2789%" y="821" width="0.0649%" height="15" fill="rgb(228,213,43)" fg:x="544" fg:w="1"/><text x="35.5289%" y="831.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="35.2789%" y="805" width="0.0649%" height="15" fill="rgb(219,163,21)" fg:x="544" fg:w="1"/><text x="35.5289%" y="815.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T (1 samples, 0.06%)</title><rect x="35.2789%" y="789" width="0.0649%" height="15" fill="rgb(234,86,24)" fg:x="544" fg:w="1"/><text x="35.5289%" y="799.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="35.2789%" y="773" width="0.0649%" height="15" fill="rgb(225,10,24)" fg:x="544" fg:w="1"/><text x="35.5289%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.06%)</title><rect x="35.2789%" y="757" width="0.0649%" height="15" fill="rgb(218,109,7)" fg:x="544" fg:w="1"/><text x="35.5289%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.2789%" y="741" width="0.0649%" height="15" fill="rgb(210,20,26)" fg:x="544" fg:w="1"/><text x="35.5289%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.2789%" y="725" width="0.0649%" height="15" fill="rgb(216,18,1)" fg:x="544" fg:w="1"/><text x="35.5289%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.2789%" y="709" width="0.0649%" height="15" fill="rgb(206,163,23)" fg:x="544" fg:w="1"/><text x="35.5289%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (2 samples, 0.13%)</title><rect x="35.2789%" y="869" width="0.1297%" height="15" fill="rgb(229,150,31)" fg:x="544" fg:w="2"/><text x="35.5289%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="35.2789%" y="853" width="0.1297%" height="15" fill="rgb(231,10,5)" fg:x="544" fg:w="2"/><text x="35.5289%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="35.3437%" y="837" width="0.0649%" height="15" fill="rgb(250,40,50)" fg:x="545" fg:w="1"/><text x="35.5937%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="35.3437%" y="821" width="0.0649%" height="15" fill="rgb(217,119,7)" fg:x="545" fg:w="1"/><text x="35.5937%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.3437%" y="805" width="0.0649%" height="15" fill="rgb(245,214,40)" fg:x="545" fg:w="1"/><text x="35.5937%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.3437%" y="789" width="0.0649%" height="15" fill="rgb(216,187,1)" fg:x="545" fg:w="1"/><text x="35.5937%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.3437%" y="773" width="0.0649%" height="15" fill="rgb(237,146,21)" fg:x="545" fg:w="1"/><text x="35.5937%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="35.4086%" y="869" width="0.0649%" height="15" fill="rgb(210,174,47)" fg:x="546" fg:w="1"/><text x="35.6586%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="35.4086%" y="853" width="0.0649%" height="15" fill="rgb(218,111,39)" fg:x="546" fg:w="1"/><text x="35.6586%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="35.4086%" y="837" width="0.0649%" height="15" fill="rgb(224,95,19)" fg:x="546" fg:w="1"/><text x="35.6586%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.4086%" y="821" width="0.0649%" height="15" fill="rgb(234,15,38)" fg:x="546" fg:w="1"/><text x="35.6586%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.4086%" y="805" width="0.0649%" height="15" fill="rgb(246,56,12)" fg:x="546" fg:w="1"/><text x="35.6586%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.4086%" y="789" width="0.0649%" height="15" fill="rgb(247,16,17)" fg:x="546" fg:w="1"/><text x="35.6586%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.4734%" y="821" width="0.0649%" height="15" fill="rgb(215,151,11)" fg:x="547" fg:w="1"/><text x="35.7234%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.4734%" y="805" width="0.0649%" height="15" fill="rgb(225,16,24)" fg:x="547" fg:w="1"/><text x="35.7234%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.4734%" y="789" width="0.0649%" height="15" fill="rgb(217,117,5)" fg:x="547" fg:w="1"/><text x="35.7234%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (8 samples, 0.52%)</title><rect x="35.0843%" y="885" width="0.5188%" height="15" fill="rgb(246,187,53)" fg:x="541" fg:w="8"/><text x="35.3343%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (2 samples, 0.13%)</title><rect x="35.4734%" y="869" width="0.1297%" height="15" fill="rgb(241,71,40)" fg:x="547" fg:w="2"/><text x="35.7234%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (2 samples, 0.13%)</title><rect x="35.4734%" y="853" width="0.1297%" height="15" fill="rgb(231,67,39)" fg:x="547" fg:w="2"/><text x="35.7234%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="35.4734%" y="837" width="0.1297%" height="15" fill="rgb(222,120,24)" fg:x="547" fg:w="2"/><text x="35.7234%" y="847.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="35.5383%" y="821" width="0.0649%" height="15" fill="rgb(248,3,3)" fg:x="548" fg:w="1"/><text x="35.7883%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.5383%" y="805" width="0.0649%" height="15" fill="rgb(228,218,5)" fg:x="548" fg:w="1"/><text x="35.7883%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.5383%" y="789" width="0.0649%" height="15" fill="rgb(212,202,43)" fg:x="548" fg:w="1"/><text x="35.7883%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.5383%" y="773" width="0.0649%" height="15" fill="rgb(235,183,2)" fg:x="548" fg:w="1"/><text x="35.7883%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="35.6031%" y="885" width="0.0649%" height="15" fill="rgb(230,165,10)" fg:x="549" fg:w="1"/><text x="35.8531%" y="895.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="35.6031%" y="869" width="0.0649%" height="15" fill="rgb(219,54,40)" fg:x="549" fg:w="1"/><text x="35.8531%" y="879.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="35.6031%" y="853" width="0.0649%" height="15" fill="rgb(244,73,9)" fg:x="549" fg:w="1"/><text x="35.8531%" y="863.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="35.6031%" y="837" width="0.0649%" height="15" fill="rgb(212,32,45)" fg:x="549" fg:w="1"/><text x="35.8531%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.6031%" y="821" width="0.0649%" height="15" fill="rgb(205,58,31)" fg:x="549" fg:w="1"/><text x="35.8531%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.6031%" y="805" width="0.0649%" height="15" fill="rgb(250,120,43)" fg:x="549" fg:w="1"/><text x="35.8531%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.6031%" y="789" width="0.0649%" height="15" fill="rgb(235,13,10)" fg:x="549" fg:w="1"/><text x="35.8531%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.6680%" y="837" width="0.0649%" height="15" fill="rgb(232,219,31)" fg:x="550" fg:w="1"/><text x="35.9180%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.6680%" y="821" width="0.0649%" height="15" fill="rgb(218,157,51)" fg:x="550" fg:w="1"/><text x="35.9180%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.6680%" y="805" width="0.0649%" height="15" fill="rgb(211,91,52)" fg:x="550" fg:w="1"/><text x="35.9180%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.7328%" y="805" width="0.0649%" height="15" fill="rgb(240,173,1)" fg:x="551" fg:w="1"/><text x="35.9828%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.7328%" y="789" width="0.0649%" height="15" fill="rgb(248,20,47)" fg:x="551" fg:w="1"/><text x="35.9828%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.7328%" y="773" width="0.0649%" height="15" fill="rgb(217,221,40)" fg:x="551" fg:w="1"/><text x="35.9828%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="35.7977%" y="709" width="0.0649%" height="15" fill="rgb(226,149,51)" fg:x="552" fg:w="1"/><text x="36.0477%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.7977%" y="693" width="0.0649%" height="15" fill="rgb(252,193,7)" fg:x="552" fg:w="1"/><text x="36.0477%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.7977%" y="677" width="0.0649%" height="15" fill="rgb(205,123,0)" fg:x="552" fg:w="1"/><text x="36.0477%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.7977%" y="661" width="0.0649%" height="15" fill="rgb(233,173,25)" fg:x="552" fg:w="1"/><text x="36.0477%" y="671.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="35.8625%" y="549" width="0.1297%" height="15" fill="rgb(216,63,32)" fg:x="553" fg:w="2"/><text x="36.1125%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="35.8625%" y="533" width="0.1297%" height="15" fill="rgb(209,56,45)" fg:x="553" fg:w="2"/><text x="36.1125%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="35.8625%" y="517" width="0.1297%" height="15" fill="rgb(226,111,49)" fg:x="553" fg:w="2"/><text x="36.1125%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="35.8625%" y="501" width="0.1297%" height="15" fill="rgb(244,181,21)" fg:x="553" fg:w="2"/><text x="36.1125%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="35.8625%" y="485" width="0.1297%" height="15" fill="rgb(222,126,15)" fg:x="553" fg:w="2"/><text x="36.1125%" y="495.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="35.8625%" y="469" width="0.1297%" height="15" fill="rgb(222,95,17)" fg:x="553" fg:w="2"/><text x="36.1125%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="35.8625%" y="453" width="0.1297%" height="15" fill="rgb(254,46,5)" fg:x="553" fg:w="2"/><text x="36.1125%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="35.8625%" y="437" width="0.1297%" height="15" fill="rgb(236,216,35)" fg:x="553" fg:w="2"/><text x="36.1125%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="35.8625%" y="421" width="0.1297%" height="15" fill="rgb(217,187,26)" fg:x="553" fg:w="2"/><text x="36.1125%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="35.8625%" y="405" width="0.1297%" height="15" fill="rgb(207,192,25)" fg:x="553" fg:w="2"/><text x="36.1125%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="35.8625%" y="389" width="0.1297%" height="15" fill="rgb(253,135,27)" fg:x="553" fg:w="2"/><text x="36.1125%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="35.8625%" y="373" width="0.1297%" height="15" fill="rgb(211,122,29)" fg:x="553" fg:w="2"/><text x="36.1125%" y="383.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="35.8625%" y="357" width="0.1297%" height="15" fill="rgb(233,162,40)" fg:x="553" fg:w="2"/><text x="36.1125%" y="367.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="35.8625%" y="341" width="0.1297%" height="15" fill="rgb(222,184,47)" fg:x="553" fg:w="2"/><text x="36.1125%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="35.8625%" y="325" width="0.1297%" height="15" fill="rgb(249,99,23)" fg:x="553" fg:w="2"/><text x="36.1125%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="35.8625%" y="309" width="0.1297%" height="15" fill="rgb(214,60,12)" fg:x="553" fg:w="2"/><text x="36.1125%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="35.8625%" y="293" width="0.1297%" height="15" fill="rgb(250,229,36)" fg:x="553" fg:w="2"/><text x="36.1125%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="35.8625%" y="277" width="0.1297%" height="15" fill="rgb(232,195,10)" fg:x="553" fg:w="2"/><text x="36.1125%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="35.9922%" y="485" width="0.0649%" height="15" fill="rgb(205,213,31)" fg:x="555" fg:w="1"/><text x="36.2422%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="35.9922%" y="469" width="0.0649%" height="15" fill="rgb(237,43,8)" fg:x="555" fg:w="1"/><text x="36.2422%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="35.9922%" y="453" width="0.0649%" height="15" fill="rgb(216,208,3)" fg:x="555" fg:w="1"/><text x="36.2422%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="36.0571%" y="373" width="0.0649%" height="15" fill="rgb(228,179,44)" fg:x="556" fg:w="1"/><text x="36.3071%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.0571%" y="357" width="0.0649%" height="15" fill="rgb(230,192,27)" fg:x="556" fg:w="1"/><text x="36.3071%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.0571%" y="341" width="0.0649%" height="15" fill="rgb(251,30,38)" fg:x="556" fg:w="1"/><text x="36.3071%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.0571%" y="325" width="0.0649%" height="15" fill="rgb(246,55,52)" fg:x="556" fg:w="1"/><text x="36.3071%" y="335.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="36.1219%" y="309" width="0.0649%" height="15" fill="rgb(249,79,26)" fg:x="557" fg:w="1"/><text x="36.3719%" y="319.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="36.1219%" y="293" width="0.0649%" height="15" fill="rgb(220,202,16)" fg:x="557" fg:w="1"/><text x="36.3719%" y="303.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="36.1219%" y="277" width="0.0649%" height="15" fill="rgb(250,170,23)" fg:x="557" fg:w="1"/><text x="36.3719%" y="287.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="36.1219%" y="261" width="0.0649%" height="15" fill="rgb(230,7,37)" fg:x="557" fg:w="1"/><text x="36.3719%" y="271.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="36.1219%" y="245" width="0.0649%" height="15" fill="rgb(213,71,1)" fg:x="557" fg:w="1"/><text x="36.3719%" y="255.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="36.1219%" y="229" width="0.0649%" height="15" fill="rgb(227,87,39)" fg:x="557" fg:w="1"/><text x="36.3719%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="36.1219%" y="213" width="0.0649%" height="15" fill="rgb(210,41,29)" fg:x="557" fg:w="1"/><text x="36.3719%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="36.1219%" y="197" width="0.0649%" height="15" fill="rgb(206,191,31)" fg:x="557" fg:w="1"/><text x="36.3719%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="36.1219%" y="181" width="0.0649%" height="15" fill="rgb(247,75,54)" fg:x="557" fg:w="1"/><text x="36.3719%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="36.1219%" y="165" width="0.0649%" height="15" fill="rgb(208,54,50)" fg:x="557" fg:w="1"/><text x="36.3719%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="36.1219%" y="149" width="0.0649%" height="15" fill="rgb(214,90,37)" fg:x="557" fg:w="1"/><text x="36.3719%" y="159.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.1219%" y="133" width="0.0649%" height="15" fill="rgb(220,132,6)" fg:x="557" fg:w="1"/><text x="36.3719%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.1219%" y="117" width="0.0649%" height="15" fill="rgb(213,167,7)" fg:x="557" fg:w="1"/><text x="36.3719%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.1219%" y="101" width="0.0649%" height="15" fill="rgb(243,36,27)" fg:x="557" fg:w="1"/><text x="36.3719%" y="111.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="36.1219%" y="341" width="0.1297%" height="15" fill="rgb(235,147,12)" fg:x="557" fg:w="2"/><text x="36.3719%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="36.1219%" y="325" width="0.1297%" height="15" fill="rgb(212,198,44)" fg:x="557" fg:w="2"/><text x="36.3719%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.1868%" y="309" width="0.0649%" height="15" fill="rgb(218,68,50)" fg:x="558" fg:w="1"/><text x="36.4368%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.1868%" y="293" width="0.0649%" height="15" fill="rgb(224,79,48)" fg:x="558" fg:w="1"/><text x="36.4368%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.1868%" y="277" width="0.0649%" height="15" fill="rgb(213,191,50)" fg:x="558" fg:w="1"/><text x="36.4368%" y="287.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (7 samples, 0.45%)</title><rect x="35.8625%" y="645" width="0.4540%" height="15" fill="rgb(254,146,10)" fg:x="553" fg:w="7"/><text x="36.1125%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (7 samples, 0.45%)</title><rect x="35.8625%" y="629" width="0.4540%" height="15" fill="rgb(215,175,11)" fg:x="553" fg:w="7"/><text x="36.1125%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (7 samples, 0.45%)</title><rect x="35.8625%" y="613" width="0.4540%" height="15" fill="rgb(207,49,7)" fg:x="553" fg:w="7"/><text x="36.1125%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (7 samples, 0.45%)</title><rect x="35.8625%" y="597" width="0.4540%" height="15" fill="rgb(234,144,29)" fg:x="553" fg:w="7"/><text x="36.1125%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.45%)</title><rect x="35.8625%" y="581" width="0.4540%" height="15" fill="rgb(213,222,48)" fg:x="553" fg:w="7"/><text x="36.1125%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="35.8625%" y="565" width="0.4540%" height="15" fill="rgb(222,8,6)" fg:x="553" fg:w="7"/><text x="36.1125%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="35.9922%" y="549" width="0.3243%" height="15" fill="rgb(221,114,49)" fg:x="555" fg:w="5"/><text x="36.2422%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="35.9922%" y="533" width="0.3243%" height="15" fill="rgb(250,140,42)" fg:x="555" fg:w="5"/><text x="36.2422%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="35.9922%" y="517" width="0.3243%" height="15" fill="rgb(250,150,27)" fg:x="555" fg:w="5"/><text x="36.2422%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="35.9922%" y="501" width="0.3243%" height="15" fill="rgb(252,159,3)" fg:x="555" fg:w="5"/><text x="36.2422%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="36.0571%" y="485" width="0.2594%" height="15" fill="rgb(241,182,3)" fg:x="556" fg:w="4"/><text x="36.3071%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="36.0571%" y="469" width="0.2594%" height="15" fill="rgb(236,3,9)" fg:x="556" fg:w="4"/><text x="36.3071%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="36.0571%" y="453" width="0.2594%" height="15" fill="rgb(223,227,51)" fg:x="556" fg:w="4"/><text x="36.3071%" y="463.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="36.0571%" y="437" width="0.2594%" height="15" fill="rgb(232,133,30)" fg:x="556" fg:w="4"/><text x="36.3071%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="36.0571%" y="421" width="0.2594%" height="15" fill="rgb(209,93,27)" fg:x="556" fg:w="4"/><text x="36.3071%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="36.0571%" y="405" width="0.2594%" height="15" fill="rgb(208,108,34)" fg:x="556" fg:w="4"/><text x="36.3071%" y="415.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="36.0571%" y="389" width="0.2594%" height="15" fill="rgb(215,189,13)" fg:x="556" fg:w="4"/><text x="36.3071%" y="399.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="36.1219%" y="373" width="0.1946%" height="15" fill="rgb(206,88,23)" fg:x="557" fg:w="3"/><text x="36.3719%" y="383.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="36.1219%" y="357" width="0.1946%" height="15" fill="rgb(240,173,0)" fg:x="557" fg:w="3"/><text x="36.3719%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.2516%" y="341" width="0.0649%" height="15" fill="rgb(223,106,52)" fg:x="559" fg:w="1"/><text x="36.5016%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.2516%" y="325" width="0.0649%" height="15" fill="rgb(206,130,16)" fg:x="559" fg:w="1"/><text x="36.5016%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.2516%" y="309" width="0.0649%" height="15" fill="rgb(220,54,25)" fg:x="559" fg:w="1"/><text x="36.5016%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="35.8625%" y="677" width="0.5188%" height="15" fill="rgb(210,4,38)" fg:x="553" fg:w="8"/><text x="36.1125%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="35.8625%" y="661" width="0.5188%" height="15" fill="rgb(238,94,39)" fg:x="553" fg:w="8"/><text x="36.1125%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.3165%" y="645" width="0.0649%" height="15" fill="rgb(234,124,34)" fg:x="560" fg:w="1"/><text x="36.5665%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.3165%" y="629" width="0.0649%" height="15" fill="rgb(221,91,40)" fg:x="560" fg:w="1"/><text x="36.5665%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.3165%" y="613" width="0.0649%" height="15" fill="rgb(246,53,28)" fg:x="560" fg:w="1"/><text x="36.5665%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="35.7977%" y="741" width="0.6485%" height="15" fill="rgb(229,109,7)" fg:x="552" fg:w="10"/><text x="36.0477%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.65%)</title><rect x="35.7977%" y="725" width="0.6485%" height="15" fill="rgb(249,117,8)" fg:x="552" fg:w="10"/><text x="36.0477%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="35.8625%" y="709" width="0.5837%" height="15" fill="rgb(210,181,1)" fg:x="553" fg:w="9"/><text x="36.1125%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="35.8625%" y="693" width="0.5837%" height="15" fill="rgb(211,66,1)" fg:x="553" fg:w="9"/><text x="36.1125%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="36.3813%" y="677" width="0.0649%" height="15" fill="rgb(221,90,14)" fg:x="561" fg:w="1"/><text x="36.6313%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.3813%" y="661" width="0.0649%" height="15" fill="rgb(219,222,44)" fg:x="561" fg:w="1"/><text x="36.6313%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.3813%" y="645" width="0.0649%" height="15" fill="rgb(246,34,33)" fg:x="561" fg:w="1"/><text x="36.6313%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.3813%" y="629" width="0.0649%" height="15" fill="rgb(227,135,41)" fg:x="561" fg:w="1"/><text x="36.6313%" y="639.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (13 samples, 0.84%)</title><rect x="35.6680%" y="869" width="0.8431%" height="15" fill="rgb(226,15,14)" fg:x="550" fg:w="13"/><text x="35.9180%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (13 samples, 0.84%)</title><rect x="35.6680%" y="853" width="0.8431%" height="15" fill="rgb(236,148,47)" fg:x="550" fg:w="13"/><text x="35.9180%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (12 samples, 0.78%)</title><rect x="35.7328%" y="837" width="0.7782%" height="15" fill="rgb(233,162,52)" fg:x="551" fg:w="12"/><text x="35.9828%" y="847.50"></text></g><g><title>bincode::internal::deserialize (12 samples, 0.78%)</title><rect x="35.7328%" y="821" width="0.7782%" height="15" fill="rgb(244,35,28)" fg:x="551" fg:w="12"/><text x="35.9828%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (11 samples, 0.71%)</title><rect x="35.7977%" y="805" width="0.7134%" height="15" fill="rgb(205,121,10)" fg:x="552" fg:w="11"/><text x="36.0477%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="35.7977%" y="789" width="0.7134%" height="15" fill="rgb(250,58,18)" fg:x="552" fg:w="11"/><text x="36.0477%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (11 samples, 0.71%)</title><rect x="35.7977%" y="773" width="0.7134%" height="15" fill="rgb(216,37,13)" fg:x="552" fg:w="11"/><text x="36.0477%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 0.71%)</title><rect x="35.7977%" y="757" width="0.7134%" height="15" fill="rgb(221,215,42)" fg:x="552" fg:w="11"/><text x="36.0477%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.4462%" y="741" width="0.0649%" height="15" fill="rgb(217,214,19)" fg:x="562" fg:w="1"/><text x="36.6962%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.4462%" y="725" width="0.0649%" height="15" fill="rgb(233,139,13)" fg:x="562" fg:w="1"/><text x="36.6962%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.4462%" y="709" width="0.0649%" height="15" fill="rgb(247,168,23)" fg:x="562" fg:w="1"/><text x="36.6962%" y="719.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="36.5110%" y="837" width="0.0649%" height="15" fill="rgb(207,202,1)" fg:x="563" fg:w="1"/><text x="36.7610%" y="847.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="36.5110%" y="821" width="0.0649%" height="15" fill="rgb(220,155,48)" fg:x="563" fg:w="1"/><text x="36.7610%" y="831.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="36.5110%" y="805" width="0.0649%" height="15" fill="rgb(250,43,26)" fg:x="563" fg:w="1"/><text x="36.7610%" y="815.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="36.5110%" y="789" width="0.0649%" height="15" fill="rgb(212,190,23)" fg:x="563" fg:w="1"/><text x="36.7610%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.5110%" y="773" width="0.0649%" height="15" fill="rgb(216,39,24)" fg:x="563" fg:w="1"/><text x="36.7610%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.5110%" y="757" width="0.0649%" height="15" fill="rgb(252,113,16)" fg:x="563" fg:w="1"/><text x="36.7610%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.5110%" y="741" width="0.0649%" height="15" fill="rgb(208,113,19)" fg:x="563" fg:w="1"/><text x="36.7610%" y="751.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (15 samples, 0.97%)</title><rect x="35.6680%" y="885" width="0.9728%" height="15" fill="rgb(234,107,25)" fg:x="550" fg:w="15"/><text x="35.9180%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (2 samples, 0.13%)</title><rect x="36.5110%" y="869" width="0.1297%" height="15" fill="rgb(234,217,51)" fg:x="563" fg:w="2"/><text x="36.7610%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="36.5110%" y="853" width="0.1297%" height="15" fill="rgb(251,29,42)" fg:x="563" fg:w="2"/><text x="36.7610%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.5759%" y="837" width="0.0649%" height="15" fill="rgb(221,62,51)" fg:x="564" fg:w="1"/><text x="36.8259%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.5759%" y="821" width="0.0649%" height="15" fill="rgb(240,192,43)" fg:x="564" fg:w="1"/><text x="36.8259%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.5759%" y="805" width="0.0649%" height="15" fill="rgb(224,157,47)" fg:x="564" fg:w="1"/><text x="36.8259%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="36.6407%" y="869" width="0.0649%" height="15" fill="rgb(226,84,45)" fg:x="565" fg:w="1"/><text x="36.8907%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (1 samples, 0.06%)</title><rect x="36.6407%" y="853" width="0.0649%" height="15" fill="rgb(208,207,23)" fg:x="565" fg:w="1"/><text x="36.8907%" y="863.50"></text></g><g><title>core::ptr::read (1 samples, 0.06%)</title><rect x="36.6407%" y="837" width="0.0649%" height="15" fill="rgb(253,34,51)" fg:x="565" fg:w="1"/><text x="36.8907%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.6407%" y="821" width="0.0649%" height="15" fill="rgb(227,26,34)" fg:x="565" fg:w="1"/><text x="36.8907%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.6407%" y="805" width="0.0649%" height="15" fill="rgb(245,75,19)" fg:x="565" fg:w="1"/><text x="36.8907%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.6407%" y="789" width="0.0649%" height="15" fill="rgb(250,191,31)" fg:x="565" fg:w="1"/><text x="36.8907%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="36.7056%" y="853" width="0.1297%" height="15" fill="rgb(224,11,50)" fg:x="566" fg:w="2"/><text x="36.9556%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="36.7056%" y="837" width="0.1297%" height="15" fill="rgb(231,171,7)" fg:x="566" fg:w="2"/><text x="36.9556%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="36.7056%" y="821" width="0.1297%" height="15" fill="rgb(252,214,10)" fg:x="566" fg:w="2"/><text x="36.9556%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="36.8353%" y="837" width="0.0649%" height="15" fill="rgb(249,45,46)" fg:x="568" fg:w="1"/><text x="37.0853%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="36.8353%" y="821" width="0.0649%" height="15" fill="rgb(240,173,7)" fg:x="568" fg:w="1"/><text x="37.0853%" y="831.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="36.8353%" y="805" width="0.0649%" height="15" fill="rgb(235,214,13)" fg:x="568" fg:w="1"/><text x="37.0853%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="36.8353%" y="789" width="0.0649%" height="15" fill="rgb(245,156,8)" fg:x="568" fg:w="1"/><text x="37.0853%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="36.8353%" y="773" width="0.0649%" height="15" fill="rgb(235,46,12)" fg:x="568" fg:w="1"/><text x="37.0853%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.8353%" y="757" width="0.0649%" height="15" fill="rgb(221,81,14)" fg:x="568" fg:w="1"/><text x="37.0853%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.8353%" y="741" width="0.0649%" height="15" fill="rgb(238,207,9)" fg:x="568" fg:w="1"/><text x="37.0853%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.8353%" y="725" width="0.0649%" height="15" fill="rgb(224,129,35)" fg:x="568" fg:w="1"/><text x="37.0853%" y="735.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (4 samples, 0.26%)</title><rect x="36.7056%" y="869" width="0.2594%" height="15" fill="rgb(243,218,34)" fg:x="566" fg:w="4"/><text x="36.9556%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="36.8353%" y="853" width="0.1297%" height="15" fill="rgb(220,166,13)" fg:x="568" fg:w="2"/><text x="37.0853%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.06%)</title><rect x="36.9001%" y="837" width="0.0649%" height="15" fill="rgb(227,167,49)" fg:x="569" fg:w="1"/><text x="37.1501%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.9001%" y="821" width="0.0649%" height="15" fill="rgb(234,142,12)" fg:x="569" fg:w="1"/><text x="37.1501%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.9001%" y="805" width="0.0649%" height="15" fill="rgb(207,100,48)" fg:x="569" fg:w="1"/><text x="37.1501%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.9001%" y="789" width="0.0649%" height="15" fill="rgb(210,25,14)" fg:x="569" fg:w="1"/><text x="37.1501%" y="799.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="36.9650%" y="853" width="0.0649%" height="15" fill="rgb(246,116,27)" fg:x="570" fg:w="1"/><text x="37.2150%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="36.9650%" y="837" width="0.0649%" height="15" fill="rgb(214,193,42)" fg:x="570" fg:w="1"/><text x="37.2150%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="36.9650%" y="821" width="0.0649%" height="15" fill="rgb(214,122,8)" fg:x="570" fg:w="1"/><text x="37.2150%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="36.9650%" y="805" width="0.0649%" height="15" fill="rgb(244,173,18)" fg:x="570" fg:w="1"/><text x="37.2150%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::new (2 samples, 0.13%)</title><rect x="36.9650%" y="869" width="0.1297%" height="15" fill="rgb(232,68,19)" fg:x="570" fg:w="2"/><text x="37.2150%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.0298%" y="853" width="0.0649%" height="15" fill="rgb(236,224,1)" fg:x="571" fg:w="1"/><text x="37.2798%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.0298%" y="837" width="0.0649%" height="15" fill="rgb(240,11,8)" fg:x="571" fg:w="1"/><text x="37.2798%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.0298%" y="821" width="0.0649%" height="15" fill="rgb(244,159,20)" fg:x="571" fg:w="1"/><text x="37.2798%" y="831.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="37.0947%" y="805" width="0.1297%" height="15" fill="rgb(240,223,54)" fg:x="572" fg:w="2"/><text x="37.3447%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="37.0947%" y="789" width="0.1297%" height="15" fill="rgb(237,146,5)" fg:x="572" fg:w="2"/><text x="37.3447%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="37.0947%" y="773" width="0.1297%" height="15" fill="rgb(218,221,32)" fg:x="572" fg:w="2"/><text x="37.3447%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="37.0947%" y="757" width="0.1297%" height="15" fill="rgb(244,96,26)" fg:x="572" fg:w="2"/><text x="37.3447%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (8 samples, 0.52%)</title><rect x="37.0947%" y="837" width="0.5188%" height="15" fill="rgb(245,184,37)" fg:x="572" fg:w="8"/><text x="37.3447%" y="847.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (8 samples, 0.52%)</title><rect x="37.0947%" y="821" width="0.5188%" height="15" fill="rgb(248,91,47)" fg:x="572" fg:w="8"/><text x="37.3447%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (6 samples, 0.39%)</title><rect x="37.2244%" y="805" width="0.3891%" height="15" fill="rgb(243,199,8)" fg:x="574" fg:w="6"/><text x="37.4744%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (6 samples, 0.39%)</title><rect x="37.2244%" y="789" width="0.3891%" height="15" fill="rgb(249,12,15)" fg:x="574" fg:w="6"/><text x="37.4744%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (6 samples, 0.39%)</title><rect x="37.2244%" y="773" width="0.3891%" height="15" fill="rgb(245,97,12)" fg:x="574" fg:w="6"/><text x="37.4744%" y="783.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.06%)</title><rect x="37.6135%" y="821" width="0.0649%" height="15" fill="rgb(244,61,1)" fg:x="580" fg:w="1"/><text x="37.8635%" y="831.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.06%)</title><rect x="37.6135%" y="805" width="0.0649%" height="15" fill="rgb(222,194,10)" fg:x="580" fg:w="1"/><text x="37.8635%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.06%)</title><rect x="37.6135%" y="789" width="0.0649%" height="15" fill="rgb(226,178,8)" fg:x="580" fg:w="1"/><text x="37.8635%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1 samples, 0.06%)</title><rect x="37.6135%" y="773" width="0.0649%" height="15" fill="rgb(241,32,34)" fg:x="580" fg:w="1"/><text x="37.8635%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="37.6135%" y="757" width="0.0649%" height="15" fill="rgb(254,26,6)" fg:x="580" fg:w="1"/><text x="37.8635%" y="767.50"></text></g><g><title>__libc_calloc (1 samples, 0.06%)</title><rect x="37.6135%" y="741" width="0.0649%" height="15" fill="rgb(249,71,11)" fg:x="580" fg:w="1"/><text x="37.8635%" y="751.50"></text></g><g><title>_int_malloc (1 samples, 0.06%)</title><rect x="37.6135%" y="725" width="0.0649%" height="15" fill="rgb(232,170,27)" fg:x="580" fg:w="1"/><text x="37.8635%" y="735.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="37.6135%" y="709" width="0.0649%" height="15" fill="rgb(214,223,17)" fg:x="580" fg:w="1"/><text x="37.8635%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.6135%" y="693" width="0.0649%" height="15" fill="rgb(250,18,15)" fg:x="580" fg:w="1"/><text x="37.8635%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.6135%" y="677" width="0.0649%" height="15" fill="rgb(212,153,51)" fg:x="580" fg:w="1"/><text x="37.8635%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.6135%" y="661" width="0.0649%" height="15" fill="rgb(219,194,12)" fg:x="580" fg:w="1"/><text x="37.8635%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="37.6783%" y="821" width="0.0649%" height="15" fill="rgb(212,58,17)" fg:x="581" fg:w="1"/><text x="37.9283%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="37.6783%" y="805" width="0.0649%" height="15" fill="rgb(254,5,10)" fg:x="581" fg:w="1"/><text x="37.9283%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.6783%" y="789" width="0.0649%" height="15" fill="rgb(246,91,7)" fg:x="581" fg:w="1"/><text x="37.9283%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.6783%" y="773" width="0.0649%" height="15" fill="rgb(218,108,49)" fg:x="581" fg:w="1"/><text x="37.9283%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.6783%" y="757" width="0.0649%" height="15" fill="rgb(238,123,20)" fg:x="581" fg:w="1"/><text x="37.9283%" y="767.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (3 samples, 0.19%)</title><rect x="37.6135%" y="837" width="0.1946%" height="15" fill="rgb(231,69,23)" fg:x="580" fg:w="3"/><text x="37.8635%" y="847.50"></text></g><g><title>std::sync::poison::rwlock::RwLock&lt;T&gt;::write (1 samples, 0.06%)</title><rect x="37.7432%" y="821" width="0.0649%" height="15" fill="rgb(230,209,3)" fg:x="582" fg:w="1"/><text x="37.9932%" y="831.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write (1 samples, 0.06%)</title><rect x="37.7432%" y="805" width="0.0649%" height="15" fill="rgb(231,19,0)" fg:x="582" fg:w="1"/><text x="37.9932%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (1 samples, 0.06%)</title><rect x="37.7432%" y="789" width="0.0649%" height="15" fill="rgb(226,192,25)" fg:x="582" fg:w="1"/><text x="37.9932%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.7432%" y="773" width="0.0649%" height="15" fill="rgb(223,175,53)" fg:x="582" fg:w="1"/><text x="37.9932%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.7432%" y="757" width="0.0649%" height="15" fill="rgb(248,35,51)" fg:x="582" fg:w="1"/><text x="37.9932%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.7432%" y="741" width="0.0649%" height="15" fill="rgb(230,37,26)" fg:x="582" fg:w="1"/><text x="37.9932%" y="751.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc (1 samples, 0.06%)</title><rect x="37.8080%" y="821" width="0.0649%" height="15" fill="rgb(206,120,22)" fg:x="583" fg:w="1"/><text x="38.0580%" y="831.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc_inner (1 samples, 0.06%)</title><rect x="37.8080%" y="805" width="0.0649%" height="15" fill="rgb(207,165,28)" fg:x="583" fg:w="1"/><text x="38.0580%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::alloc (1 samples, 0.06%)</title><rect x="37.8080%" y="789" width="0.0649%" height="15" fill="rgb(226,23,46)" fg:x="583" fg:w="1"/><text x="38.0580%" y="799.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::find_first_unset (1 samples, 0.06%)</title><rect x="37.8080%" y="773" width="0.0649%" height="15" fill="rgb(208,130,44)" fg:x="583" fg:w="1"/><text x="38.0580%" y="783.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::first_unset (1 samples, 0.06%)</title><rect x="37.8080%" y="757" width="0.0649%" height="15" fill="rgb(231,67,8)" fg:x="583" fg:w="1"/><text x="38.0580%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.8080%" y="741" width="0.0649%" height="15" fill="rgb(205,183,22)" fg:x="583" fg:w="1"/><text x="38.0580%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.8080%" y="725" width="0.0649%" height="15" fill="rgb(224,47,9)" fg:x="583" fg:w="1"/><text x="38.0580%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.8080%" y="709" width="0.0649%" height="15" fill="rgb(250,183,49)" fg:x="583" fg:w="1"/><text x="38.0580%" y="719.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper_retry (2 samples, 0.13%)</title><rect x="37.8080%" y="837" width="0.1297%" height="15" fill="rgb(220,151,39)" fg:x="583" fg:w="2"/><text x="38.0580%" y="847.50"></text></g><g><title>redb::tree_store::page_store::region::RegionTracker::find_free (1 samples, 0.06%)</title><rect x="37.8729%" y="821" width="0.0649%" height="15" fill="rgb(220,118,20)" fg:x="584" fg:w="1"/><text x="38.1229%" y="831.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::find_first_unset (1 samples, 0.06%)</title><rect x="37.8729%" y="805" width="0.0649%" height="15" fill="rgb(231,65,51)" fg:x="584" fg:w="1"/><text x="38.1229%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::get_level (1 samples, 0.06%)</title><rect x="37.8729%" y="789" width="0.0649%" height="15" fill="rgb(253,125,37)" fg:x="584" fg:w="1"/><text x="38.1229%" y="799.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::get_height (1 samples, 0.06%)</title><rect x="37.8729%" y="773" width="0.0649%" height="15" fill="rgb(232,102,6)" fg:x="584" fg:w="1"/><text x="38.1229%" y="783.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="37.8729%" y="757" width="0.0649%" height="15" fill="rgb(251,105,13)" fg:x="584" fg:w="1"/><text x="38.1229%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.8729%" y="741" width="0.0649%" height="15" fill="rgb(222,179,29)" fg:x="584" fg:w="1"/><text x="38.1229%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.8729%" y="725" width="0.0649%" height="15" fill="rgb(229,180,53)" fg:x="584" fg:w="1"/><text x="38.1229%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.8729%" y="709" width="0.0649%" height="15" fill="rgb(238,104,13)" fg:x="584" fg:w="1"/><text x="38.1229%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (21 samples, 1.36%)</title><rect x="36.6407%" y="885" width="1.3619%" height="15" fill="rgb(210,130,5)" fg:x="565" fg:w="21"/><text x="36.8907%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (14 samples, 0.91%)</title><rect x="37.0947%" y="869" width="0.9079%" height="15" fill="rgb(233,87,49)" fg:x="572" fg:w="14"/><text x="37.3447%" y="879.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (14 samples, 0.91%)</title><rect x="37.0947%" y="853" width="0.9079%" height="15" fill="rgb(243,34,9)" fg:x="572" fg:w="14"/><text x="37.3447%" y="863.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.06%)</title><rect x="37.9377%" y="837" width="0.0649%" height="15" fill="rgb(235,225,10)" fg:x="585" fg:w="1"/><text x="38.1877%" y="847.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="37.9377%" y="821" width="0.0649%" height="15" fill="rgb(212,0,30)" fg:x="585" fg:w="1"/><text x="38.1877%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="37.9377%" y="805" width="0.0649%" height="15" fill="rgb(211,177,0)" fg:x="585" fg:w="1"/><text x="38.1877%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="37.9377%" y="789" width="0.0649%" height="15" fill="rgb(225,220,11)" fg:x="585" fg:w="1"/><text x="38.1877%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="37.9377%" y="773" width="0.0649%" height="15" fill="rgb(215,10,13)" fg:x="585" fg:w="1"/><text x="38.1877%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="37.9377%" y="757" width="0.0649%" height="15" fill="rgb(240,177,14)" fg:x="585" fg:w="1"/><text x="38.1877%" y="767.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="37.9377%" y="741" width="0.0649%" height="15" fill="rgb(243,7,39)" fg:x="585" fg:w="1"/><text x="38.1877%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="37.9377%" y="725" width="0.0649%" height="15" fill="rgb(212,99,0)" fg:x="585" fg:w="1"/><text x="38.1877%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="37.9377%" y="709" width="0.0649%" height="15" fill="rgb(225,162,48)" fg:x="585" fg:w="1"/><text x="38.1877%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="37.9377%" y="693" width="0.0649%" height="15" fill="rgb(246,16,25)" fg:x="585" fg:w="1"/><text x="38.1877%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="37.9377%" y="677" width="0.0649%" height="15" fill="rgb(220,150,2)" fg:x="585" fg:w="1"/><text x="38.1877%" y="687.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="38.0026%" y="885" width="0.0649%" height="15" fill="rgb(237,113,11)" fg:x="586" fg:w="1"/><text x="38.2526%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="38.0026%" y="869" width="0.0649%" height="15" fill="rgb(236,70,20)" fg:x="586" fg:w="1"/><text x="38.2526%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="38.0026%" y="853" width="0.0649%" height="15" fill="rgb(234,94,7)" fg:x="586" fg:w="1"/><text x="38.2526%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="38.0026%" y="837" width="0.0649%" height="15" fill="rgb(250,221,0)" fg:x="586" fg:w="1"/><text x="38.2526%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="38.0026%" y="821" width="0.0649%" height="15" fill="rgb(245,149,46)" fg:x="586" fg:w="1"/><text x="38.2526%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="38.0026%" y="805" width="0.0649%" height="15" fill="rgb(215,37,27)" fg:x="586" fg:w="1"/><text x="38.2526%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="38.0026%" y="789" width="0.0649%" height="15" fill="rgb(232,65,3)" fg:x="586" fg:w="1"/><text x="38.2526%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="38.0026%" y="773" width="0.0649%" height="15" fill="rgb(214,2,16)" fg:x="586" fg:w="1"/><text x="38.2526%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="38.0026%" y="757" width="0.0649%" height="15" fill="rgb(227,131,50)" fg:x="586" fg:w="1"/><text x="38.2526%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="38.0026%" y="741" width="0.0649%" height="15" fill="rgb(247,131,45)" fg:x="586" fg:w="1"/><text x="38.2526%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="38.0026%" y="725" width="0.0649%" height="15" fill="rgb(215,97,47)" fg:x="586" fg:w="1"/><text x="38.2526%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.0026%" y="709" width="0.0649%" height="15" fill="rgb(233,143,12)" fg:x="586" fg:w="1"/><text x="38.2526%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.0026%" y="693" width="0.0649%" height="15" fill="rgb(222,57,17)" fg:x="586" fg:w="1"/><text x="38.2526%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.0026%" y="677" width="0.0649%" height="15" fill="rgb(214,119,38)" fg:x="586" fg:w="1"/><text x="38.2526%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="38.0026%" y="661" width="0.0649%" height="15" fill="rgb(217,28,47)" fg:x="586" fg:w="1"/><text x="38.2526%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.0026%" y="645" width="0.0649%" height="15" fill="rgb(231,14,52)" fg:x="586" fg:w="1"/><text x="38.2526%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.0026%" y="629" width="0.0649%" height="15" fill="rgb(220,158,18)" fg:x="586" fg:w="1"/><text x="38.2526%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.0026%" y="613" width="0.0649%" height="15" fill="rgb(222,143,46)" fg:x="586" fg:w="1"/><text x="38.2526%" y="623.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (48 samples, 3.11%)</title><rect x="35.0195%" y="917" width="3.1128%" height="15" fill="rgb(227,165,5)" fg:x="540" fg:w="48"/><text x="35.2695%" y="927.50">red..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (48 samples, 3.11%)</title><rect x="35.0195%" y="901" width="3.1128%" height="15" fill="rgb(216,222,49)" fg:x="540" fg:w="48"/><text x="35.2695%" y="911.50">red..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_size (1 samples, 0.06%)</title><rect x="38.0674%" y="885" width="0.0649%" height="15" fill="rgb(238,73,39)" fg:x="587" fg:w="1"/><text x="38.3174%" y="895.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="38.0674%" y="869" width="0.0649%" height="15" fill="rgb(252,115,9)" fg:x="587" fg:w="1"/><text x="38.3174%" y="879.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;u32&gt; for usize&gt;::try_from (1 samples, 0.06%)</title><rect x="38.0674%" y="853" width="0.0649%" height="15" fill="rgb(238,202,4)" fg:x="587" fg:w="1"/><text x="38.3174%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.0674%" y="837" width="0.0649%" height="15" fill="rgb(252,153,44)" fg:x="587" fg:w="1"/><text x="38.3174%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.0674%" y="821" width="0.0649%" height="15" fill="rgb(235,128,27)" fg:x="587" fg:w="1"/><text x="38.3174%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.0674%" y="805" width="0.0649%" height="15" fill="rgb(221,121,47)" fg:x="587" fg:w="1"/><text x="38.3174%" y="815.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="38.1323%" y="917" width="0.0649%" height="15" fill="rgb(247,211,47)" fg:x="588" fg:w="1"/><text x="38.3823%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="38.1323%" y="901" width="0.0649%" height="15" fill="rgb(252,47,49)" fg:x="588" fg:w="1"/><text x="38.3823%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="38.1323%" y="885" width="0.0649%" height="15" fill="rgb(219,119,53)" fg:x="588" fg:w="1"/><text x="38.3823%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="38.1323%" y="869" width="0.0649%" height="15" fill="rgb(243,165,53)" fg:x="588" fg:w="1"/><text x="38.3823%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="38.1323%" y="853" width="0.0649%" height="15" fill="rgb(230,12,35)" fg:x="588" fg:w="1"/><text x="38.3823%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="38.1323%" y="837" width="0.0649%" height="15" fill="rgb(239,57,49)" fg:x="588" fg:w="1"/><text x="38.3823%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.1323%" y="821" width="0.0649%" height="15" fill="rgb(231,154,7)" fg:x="588" fg:w="1"/><text x="38.3823%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.1323%" y="805" width="0.0649%" height="15" fill="rgb(248,81,34)" fg:x="588" fg:w="1"/><text x="38.3823%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.1323%" y="789" width="0.0649%" height="15" fill="rgb(247,9,5)" fg:x="588" fg:w="1"/><text x="38.3823%" y="799.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_branch_helper (66 samples, 4.28%)</title><rect x="33.9818%" y="933" width="4.2802%" height="15" fill="rgb(228,172,27)" fg:x="524" fg:w="66"/><text x="34.2318%" y="943.50">redb:..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="38.1971%" y="917" width="0.0649%" height="15" fill="rgb(230,57,44)" fg:x="589" fg:w="1"/><text x="38.4471%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.06%)</title><rect x="38.1971%" y="901" width="0.0649%" height="15" fill="rgb(249,35,22)" fg:x="589" fg:w="1"/><text x="38.4471%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="38.1971%" y="885" width="0.0649%" height="15" fill="rgb(250,137,27)" fg:x="589" fg:w="1"/><text x="38.4471%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="38.1971%" y="869" width="0.0649%" height="15" fill="rgb(251,57,31)" fg:x="589" fg:w="1"/><text x="38.4471%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="38.1971%" y="853" width="0.0649%" height="15" fill="rgb(238,60,0)" fg:x="589" fg:w="1"/><text x="38.4471%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="38.1971%" y="837" width="0.0649%" height="15" fill="rgb(242,185,39)" fg:x="589" fg:w="1"/><text x="38.4471%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="38.1971%" y="821" width="0.0649%" height="15" fill="rgb(240,63,43)" fg:x="589" fg:w="1"/><text x="38.4471%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="38.1971%" y="805" width="0.0649%" height="15" fill="rgb(236,155,6)" fg:x="589" fg:w="1"/><text x="38.4471%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="38.1971%" y="789" width="0.0649%" height="15" fill="rgb(215,11,29)" fg:x="589" fg:w="1"/><text x="38.4471%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="38.1971%" y="773" width="0.0649%" height="15" fill="rgb(228,180,48)" fg:x="589" fg:w="1"/><text x="38.4471%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="38.1971%" y="757" width="0.0649%" height="15" fill="rgb(241,102,12)" fg:x="589" fg:w="1"/><text x="38.4471%" y="767.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="38.1971%" y="741" width="0.0649%" height="15" fill="rgb(246,213,4)" fg:x="589" fg:w="1"/><text x="38.4471%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.1971%" y="725" width="0.0649%" height="15" fill="rgb(218,134,35)" fg:x="589" fg:w="1"/><text x="38.4471%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.1971%" y="709" width="0.0649%" height="15" fill="rgb(251,117,35)" fg:x="589" fg:w="1"/><text x="38.4471%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.1971%" y="693" width="0.0649%" height="15" fill="rgb(206,156,45)" fg:x="589" fg:w="1"/><text x="38.4471%" y="703.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::remove (69 samples, 4.47%)</title><rect x="33.8521%" y="981" width="4.4747%" height="15" fill="rgb(218,52,27)" fg:x="522" fg:w="69"/><text x="34.1021%" y="991.50">redb:..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete (69 samples, 4.47%)</title><rect x="33.8521%" y="965" width="4.4747%" height="15" fill="rgb(238,83,36)" fg:x="522" fg:w="69"/><text x="34.1021%" y="975.50">redb:..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (67 samples, 4.35%)</title><rect x="33.9818%" y="949" width="4.3450%" height="15" fill="rgb(218,53,43)" fg:x="524" fg:w="67"/><text x="34.2318%" y="959.50">redb:..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (1 samples, 0.06%)</title><rect x="38.2620%" y="933" width="0.0649%" height="15" fill="rgb(239,54,39)" fg:x="590" fg:w="1"/><text x="38.5120%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="38.2620%" y="917" width="0.0649%" height="15" fill="rgb(212,198,13)" fg:x="590" fg:w="1"/><text x="38.5120%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="38.2620%" y="901" width="0.0649%" height="15" fill="rgb(234,54,46)" fg:x="590" fg:w="1"/><text x="38.5120%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="38.2620%" y="885" width="0.0649%" height="15" fill="rgb(217,120,7)" fg:x="590" fg:w="1"/><text x="38.5120%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="869" width="0.0649%" height="15" fill="rgb(246,39,15)" fg:x="590" fg:w="1"/><text x="38.5120%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="853" width="0.0649%" height="15" fill="rgb(242,143,31)" fg:x="590" fg:w="1"/><text x="38.5120%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="38.2620%" y="837" width="0.0649%" height="15" fill="rgb(252,60,24)" fg:x="590" fg:w="1"/><text x="38.5120%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="821" width="0.0649%" height="15" fill="rgb(249,220,7)" fg:x="590" fg:w="1"/><text x="38.5120%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="805" width="0.0649%" height="15" fill="rgb(236,67,13)" fg:x="590" fg:w="1"/><text x="38.5120%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="38.2620%" y="789" width="0.0649%" height="15" fill="rgb(210,62,39)" fg:x="590" fg:w="1"/><text x="38.5120%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="38.2620%" y="773" width="0.0649%" height="15" fill="rgb(219,122,53)" fg:x="590" fg:w="1"/><text x="38.5120%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="38.2620%" y="757" width="0.0649%" height="15" fill="rgb(218,87,25)" fg:x="590" fg:w="1"/><text x="38.5120%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="38.2620%" y="741" width="0.0649%" height="15" fill="rgb(234,179,48)" fg:x="590" fg:w="1"/><text x="38.5120%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="38.2620%" y="725" width="0.0649%" height="15" fill="rgb(248,90,0)" fg:x="590" fg:w="1"/><text x="38.5120%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="709" width="0.0649%" height="15" fill="rgb(207,228,37)" fg:x="590" fg:w="1"/><text x="38.5120%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="693" width="0.0649%" height="15" fill="rgb(235,214,15)" fg:x="590" fg:w="1"/><text x="38.5120%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="38.2620%" y="677" width="0.0649%" height="15" fill="rgb(210,144,39)" fg:x="590" fg:w="1"/><text x="38.5120%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="38.2620%" y="661" width="0.0649%" height="15" fill="rgb(222,67,41)" fg:x="590" fg:w="1"/><text x="38.5120%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="38.2620%" y="645" width="0.0649%" height="15" fill="rgb(205,35,37)" fg:x="590" fg:w="1"/><text x="38.5120%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="38.2620%" y="629" width="0.0649%" height="15" fill="rgb(216,125,40)" fg:x="590" fg:w="1"/><text x="38.5120%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="38.2620%" y="613" width="0.0649%" height="15" fill="rgb(228,227,20)" fg:x="590" fg:w="1"/><text x="38.5120%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="597" width="0.0649%" height="15" fill="rgb(242,173,45)" fg:x="590" fg:w="1"/><text x="38.5120%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="38.2620%" y="581" width="0.0649%" height="15" fill="rgb(215,79,24)" fg:x="590" fg:w="1"/><text x="38.5120%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="38.2620%" y="565" width="0.0649%" height="15" fill="rgb(238,164,38)" fg:x="590" fg:w="1"/><text x="38.5120%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="38.2620%" y="549" width="0.0649%" height="15" fill="rgb(245,196,38)" fg:x="590" fg:w="1"/><text x="38.5120%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="38.2620%" y="533" width="0.0649%" height="15" fill="rgb(231,217,29)" fg:x="590" fg:w="1"/><text x="38.5120%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="38.2620%" y="517" width="0.0649%" height="15" fill="rgb(245,6,4)" fg:x="590" fg:w="1"/><text x="38.5120%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="38.2620%" y="501" width="0.0649%" height="15" fill="rgb(214,76,49)" fg:x="590" fg:w="1"/><text x="38.5120%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="38.2620%" y="485" width="0.0649%" height="15" fill="rgb(205,96,12)" fg:x="590" fg:w="1"/><text x="38.5120%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="38.2620%" y="469" width="0.0649%" height="15" fill="rgb(243,131,4)" fg:x="590" fg:w="1"/><text x="38.5120%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="38.2620%" y="453" width="0.0649%" height="15" fill="rgb(214,114,4)" fg:x="590" fg:w="1"/><text x="38.5120%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="38.2620%" y="437" width="0.0649%" height="15" fill="rgb(234,215,15)" fg:x="590" fg:w="1"/><text x="38.5120%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.2620%" y="421" width="0.0649%" height="15" fill="rgb(250,216,45)" fg:x="590" fg:w="1"/><text x="38.5120%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.2620%" y="405" width="0.0649%" height="15" fill="rgb(236,128,4)" fg:x="590" fg:w="1"/><text x="38.5120%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.2620%" y="389" width="0.0649%" height="15" fill="rgb(234,50,33)" fg:x="590" fg:w="1"/><text x="38.5120%" y="399.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="38.3268%" y="981" width="0.0649%" height="15" fill="rgb(253,131,37)" fg:x="591" fg:w="1"/><text x="38.5768%" y="991.50"></text></g><g><title>&lt;&amp;redb::multimap_table::DynamicCollection&lt;V&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="38.3268%" y="965" width="0.0649%" height="15" fill="rgb(218,55,27)" fg:x="591" fg:w="1"/><text x="38.5768%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.3268%" y="949" width="0.0649%" height="15" fill="rgb(241,220,28)" fg:x="591" fg:w="1"/><text x="38.5768%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.3268%" y="933" width="0.0649%" height="15" fill="rgb(241,90,48)" fg:x="591" fg:w="1"/><text x="38.5768%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.3268%" y="917" width="0.0649%" height="15" fill="rgb(216,43,37)" fg:x="591" fg:w="1"/><text x="38.5768%" y="927.50"></text></g><g><title>redb::multimap_table::MultimapTable&lt;K,V&gt;::remove (109 samples, 7.07%)</title><rect x="31.3878%" y="997" width="7.0687%" height="15" fill="rgb(207,173,9)" fg:x="484" fg:w="109"/><text x="31.6378%" y="1007.50">redb::mul..</text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="38.3917%" y="981" width="0.0649%" height="15" fill="rgb(240,126,30)" fg:x="592" fg:w="1"/><text x="38.6417%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.3917%" y="965" width="0.0649%" height="15" fill="rgb(228,178,53)" fg:x="592" fg:w="1"/><text x="38.6417%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.3917%" y="949" width="0.0649%" height="15" fill="rgb(217,33,4)" fg:x="592" fg:w="1"/><text x="38.6417%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.3917%" y="933" width="0.0649%" height="15" fill="rgb(206,124,34)" fg:x="592" fg:w="1"/><text x="38.6417%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsMut&lt;alloc::vec::Vec&lt;T,A&gt;&gt;&gt;::as_mut (1 samples, 0.06%)</title><rect x="38.4565%" y="965" width="0.0649%" height="15" fill="rgb(208,122,53)" fg:x="593" fg:w="1"/><text x="38.7065%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.4565%" y="949" width="0.0649%" height="15" fill="rgb(215,202,26)" fg:x="593" fg:w="1"/><text x="38.7065%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.4565%" y="933" width="0.0649%" height="15" fill="rgb(232,198,31)" fg:x="593" fg:w="1"/><text x="38.7065%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.4565%" y="917" width="0.0649%" height="15" fill="rgb(222,23,35)" fg:x="593" fg:w="1"/><text x="38.7065%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.5214%" y="901" width="0.0649%" height="15" fill="rgb(242,27,53)" fg:x="594" fg:w="1"/><text x="38.7714%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.5214%" y="885" width="0.0649%" height="15" fill="rgb(210,216,42)" fg:x="594" fg:w="1"/><text x="38.7714%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.5214%" y="869" width="0.0649%" height="15" fill="rgb(234,39,38)" fg:x="594" fg:w="1"/><text x="38.7714%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="38.5214%" y="949" width="0.1297%" height="15" fill="rgb(235,126,54)" fg:x="594" fg:w="2"/><text x="38.7714%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="38.5214%" y="933" width="0.1297%" height="15" fill="rgb(235,150,33)" fg:x="594" fg:w="2"/><text x="38.7714%" y="943.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="38.5214%" y="917" width="0.1297%" height="15" fill="rgb(249,49,53)" fg:x="594" fg:w="2"/><text x="38.7714%" y="927.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="38.5863%" y="901" width="0.0649%" height="15" fill="rgb(238,60,50)" fg:x="595" fg:w="1"/><text x="38.8363%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="38.5863%" y="885" width="0.0649%" height="15" fill="rgb(210,5,2)" fg:x="595" fg:w="1"/><text x="38.8363%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="38.5863%" y="869" width="0.0649%" height="15" fill="rgb(214,207,24)" fg:x="595" fg:w="1"/><text x="38.8363%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="38.5863%" y="853" width="0.0649%" height="15" fill="rgb(228,173,2)" fg:x="595" fg:w="1"/><text x="38.8363%" y="863.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="38.5863%" y="837" width="0.0649%" height="15" fill="rgb(244,26,8)" fg:x="595" fg:w="1"/><text x="38.8363%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="38.5863%" y="821" width="0.0649%" height="15" fill="rgb(249,153,35)" fg:x="595" fg:w="1"/><text x="38.8363%" y="831.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="38.5863%" y="805" width="0.0649%" height="15" fill="rgb(221,215,40)" fg:x="595" fg:w="1"/><text x="38.8363%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="38.5863%" y="789" width="0.0649%" height="15" fill="rgb(238,106,35)" fg:x="595" fg:w="1"/><text x="38.8363%" y="799.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="38.5863%" y="773" width="0.0649%" height="15" fill="rgb(207,195,21)" fg:x="595" fg:w="1"/><text x="38.8363%" y="783.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="38.5863%" y="757" width="0.0649%" height="15" fill="rgb(205,43,29)" fg:x="595" fg:w="1"/><text x="38.8363%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="38.5863%" y="741" width="0.0649%" height="15" fill="rgb(236,35,21)" fg:x="595" fg:w="1"/><text x="38.8363%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="38.5863%" y="725" width="0.0649%" height="15" fill="rgb(244,74,8)" fg:x="595" fg:w="1"/><text x="38.8363%" y="735.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="38.5863%" y="709" width="0.0649%" height="15" fill="rgb(241,229,7)" fg:x="595" fg:w="1"/><text x="38.8363%" y="719.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="38.5863%" y="693" width="0.0649%" height="15" fill="rgb(212,223,25)" fg:x="595" fg:w="1"/><text x="38.8363%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="38.5863%" y="677" width="0.0649%" height="15" fill="rgb(234,58,53)" fg:x="595" fg:w="1"/><text x="38.8363%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.5863%" y="661" width="0.0649%" height="15" fill="rgb(244,36,1)" fg:x="595" fg:w="1"/><text x="38.8363%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.5863%" y="645" width="0.0649%" height="15" fill="rgb(222,40,54)" fg:x="595" fg:w="1"/><text x="38.8363%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.5863%" y="629" width="0.0649%" height="15" fill="rgb(210,207,39)" fg:x="595" fg:w="1"/><text x="38.8363%" y="639.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::new (1 samples, 0.06%)</title><rect x="38.6511%" y="933" width="0.0649%" height="15" fill="rgb(234,52,14)" fg:x="596" fg:w="1"/><text x="38.9011%" y="943.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="38.6511%" y="917" width="0.0649%" height="15" fill="rgb(239,108,46)" fg:x="596" fg:w="1"/><text x="38.9011%" y="927.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.06%)</title><rect x="38.6511%" y="901" width="0.0649%" height="15" fill="rgb(252,223,5)" fg:x="596" fg:w="1"/><text x="38.9011%" y="911.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_mut (1 samples, 0.06%)</title><rect x="38.6511%" y="885" width="0.0649%" height="15" fill="rgb(227,181,11)" fg:x="596" fg:w="1"/><text x="38.9011%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.6511%" y="869" width="0.0649%" height="15" fill="rgb(248,126,40)" fg:x="596" fg:w="1"/><text x="38.9011%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.6511%" y="853" width="0.0649%" height="15" fill="rgb(243,1,18)" fg:x="596" fg:w="1"/><text x="38.9011%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.6511%" y="837" width="0.0649%" height="15" fill="rgb(214,145,23)" fg:x="596" fg:w="1"/><text x="38.9011%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (2 samples, 0.13%)</title><rect x="38.6511%" y="949" width="0.1297%" height="15" fill="rgb(241,218,11)" fg:x="596" fg:w="2"/><text x="38.9011%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (1 samples, 0.06%)</title><rect x="38.7160%" y="933" width="0.0649%" height="15" fill="rgb(214,219,24)" fg:x="597" fg:w="1"/><text x="38.9660%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (1 samples, 0.06%)</title><rect x="38.7160%" y="917" width="0.0649%" height="15" fill="rgb(235,32,7)" fg:x="597" fg:w="1"/><text x="38.9660%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="38.7160%" y="901" width="0.0649%" height="15" fill="rgb(227,121,28)" fg:x="597" fg:w="1"/><text x="38.9660%" y="911.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="38.7160%" y="885" width="0.0649%" height="15" fill="rgb(216,129,49)" fg:x="597" fg:w="1"/><text x="38.9660%" y="895.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="38.7160%" y="869" width="0.0649%" height="15" fill="rgb(207,194,50)" fg:x="597" fg:w="1"/><text x="38.9660%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.7160%" y="853" width="0.0649%" height="15" fill="rgb(207,4,18)" fg:x="597" fg:w="1"/><text x="38.9660%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.7160%" y="837" width="0.0649%" height="15" fill="rgb(213,50,30)" fg:x="597" fg:w="1"/><text x="38.9660%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.7160%" y="821" width="0.0649%" height="15" fill="rgb(208,77,22)" fg:x="597" fg:w="1"/><text x="38.9660%" y="831.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="38.7808%" y="869" width="0.0649%" height="15" fill="rgb(244,204,34)" fg:x="598" fg:w="1"/><text x="39.0308%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="38.7808%" y="853" width="0.0649%" height="15" fill="rgb(230,20,17)" fg:x="598" fg:w="1"/><text x="39.0308%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="38.7808%" y="837" width="0.0649%" height="15" fill="rgb(237,83,15)" fg:x="598" fg:w="1"/><text x="39.0308%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="38.7808%" y="821" width="0.0649%" height="15" fill="rgb(221,109,25)" fg:x="598" fg:w="1"/><text x="39.0308%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="38.7808%" y="805" width="0.0649%" height="15" fill="rgb(205,194,52)" fg:x="598" fg:w="1"/><text x="39.0308%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="38.7808%" y="789" width="0.0649%" height="15" fill="rgb(244,173,54)" fg:x="598" fg:w="1"/><text x="39.0308%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="38.7808%" y="773" width="0.0649%" height="15" fill="rgb(227,181,18)" fg:x="598" fg:w="1"/><text x="39.0308%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="38.7808%" y="757" width="0.0649%" height="15" fill="rgb(238,36,30)" fg:x="598" fg:w="1"/><text x="39.0308%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="38.7808%" y="741" width="0.0649%" height="15" fill="rgb(254,85,0)" fg:x="598" fg:w="1"/><text x="39.0308%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.7808%" y="725" width="0.0649%" height="15" fill="rgb(247,63,33)" fg:x="598" fg:w="1"/><text x="39.0308%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.7808%" y="709" width="0.0649%" height="15" fill="rgb(220,7,54)" fg:x="598" fg:w="1"/><text x="39.0308%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.7808%" y="693" width="0.0649%" height="15" fill="rgb(238,227,21)" fg:x="598" fg:w="1"/><text x="39.0308%" y="703.50"></text></g><g><title>core::mem::drop (2 samples, 0.13%)</title><rect x="38.7808%" y="917" width="0.1297%" height="15" fill="rgb(237,29,31)" fg:x="598" fg:w="2"/><text x="39.0308%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="38.7808%" y="901" width="0.1297%" height="15" fill="rgb(211,21,50)" fg:x="598" fg:w="2"/><text x="39.0308%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="38.7808%" y="885" width="0.1297%" height="15" fill="rgb(239,119,2)" fg:x="598" fg:w="2"/><text x="39.0308%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="38.8457%" y="869" width="0.0649%" height="15" fill="rgb(250,2,39)" fg:x="599" fg:w="1"/><text x="39.0957%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="38.8457%" y="853" width="0.0649%" height="15" fill="rgb(244,46,53)" fg:x="599" fg:w="1"/><text x="39.0957%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="38.8457%" y="837" width="0.0649%" height="15" fill="rgb(209,21,19)" fg:x="599" fg:w="1"/><text x="39.0957%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="38.8457%" y="821" width="0.0649%" height="15" fill="rgb(236,145,4)" fg:x="599" fg:w="1"/><text x="39.0957%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="38.8457%" y="805" width="0.0649%" height="15" fill="rgb(220,133,36)" fg:x="599" fg:w="1"/><text x="39.0957%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="38.8457%" y="789" width="0.0649%" height="15" fill="rgb(244,18,3)" fg:x="599" fg:w="1"/><text x="39.0957%" y="799.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="38.8457%" y="773" width="0.0649%" height="15" fill="rgb(232,171,48)" fg:x="599" fg:w="1"/><text x="39.0957%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="38.8457%" y="757" width="0.0649%" height="15" fill="rgb(223,223,53)" fg:x="599" fg:w="1"/><text x="39.0957%" y="767.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="38.8457%" y="741" width="0.0649%" height="15" fill="rgb(246,92,13)" fg:x="599" fg:w="1"/><text x="39.0957%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.8457%" y="725" width="0.0649%" height="15" fill="rgb(229,171,10)" fg:x="599" fg:w="1"/><text x="39.0957%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.8457%" y="709" width="0.0649%" height="15" fill="rgb(213,131,26)" fg:x="599" fg:w="1"/><text x="39.0957%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.8457%" y="693" width="0.0649%" height="15" fill="rgb(242,87,54)" fg:x="599" fg:w="1"/><text x="39.0957%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="38.8457%" y="677" width="0.0649%" height="15" fill="rgb(237,21,35)" fg:x="599" fg:w="1"/><text x="39.0957%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="38.8457%" y="661" width="0.0649%" height="15" fill="rgb(253,13,47)" fg:x="599" fg:w="1"/><text x="39.0957%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.8457%" y="645" width="0.0649%" height="15" fill="rgb(215,122,49)" fg:x="599" fg:w="1"/><text x="39.0957%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.8457%" y="629" width="0.0649%" height="15" fill="rgb(209,179,30)" fg:x="599" fg:w="1"/><text x="39.0957%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.8457%" y="613" width="0.0649%" height="15" fill="rgb(235,100,24)" fg:x="599" fg:w="1"/><text x="39.0957%" y="623.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="38.9105%" y="901" width="0.0649%" height="15" fill="rgb(209,67,24)" fg:x="600" fg:w="1"/><text x="39.1605%" y="911.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.06%)</title><rect x="38.9105%" y="885" width="0.0649%" height="15" fill="rgb(206,74,32)" fg:x="600" fg:w="1"/><text x="39.1605%" y="895.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="38.9105%" y="869" width="0.0649%" height="15" fill="rgb(212,45,25)" fg:x="600" fg:w="1"/><text x="39.1605%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="38.9105%" y="853" width="0.0649%" height="15" fill="rgb(239,26,3)" fg:x="600" fg:w="1"/><text x="39.1605%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="38.9105%" y="837" width="0.0649%" height="15" fill="rgb(218,36,15)" fg:x="600" fg:w="1"/><text x="39.1605%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="38.9105%" y="821" width="0.0649%" height="15" fill="rgb(206,108,24)" fg:x="600" fg:w="1"/><text x="39.1605%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="38.9105%" y="805" width="0.0649%" height="15" fill="rgb(234,204,42)" fg:x="600" fg:w="1"/><text x="39.1605%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="38.9105%" y="789" width="0.0649%" height="15" fill="rgb(229,2,11)" fg:x="600" fg:w="1"/><text x="39.1605%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="38.9105%" y="773" width="0.0649%" height="15" fill="rgb(221,20,48)" fg:x="600" fg:w="1"/><text x="39.1605%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="38.9105%" y="757" width="0.0649%" height="15" fill="rgb(244,164,10)" fg:x="600" fg:w="1"/><text x="39.1605%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="38.9105%" y="741" width="0.0649%" height="15" fill="rgb(243,229,2)" fg:x="600" fg:w="1"/><text x="39.1605%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="38.9105%" y="725" width="0.0649%" height="15" fill="rgb(232,131,37)" fg:x="600" fg:w="1"/><text x="39.1605%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.9105%" y="709" width="0.0649%" height="15" fill="rgb(217,156,11)" fg:x="600" fg:w="1"/><text x="39.1605%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.9105%" y="693" width="0.0649%" height="15" fill="rgb(239,99,48)" fg:x="600" fg:w="1"/><text x="39.1605%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.9105%" y="677" width="0.0649%" height="15" fill="rgb(231,209,9)" fg:x="600" fg:w="1"/><text x="39.1605%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="38.9754%" y="789" width="0.0649%" height="15" fill="rgb(254,97,27)" fg:x="601" fg:w="1"/><text x="39.2254%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="38.9754%" y="773" width="0.0649%" height="15" fill="rgb(223,151,38)" fg:x="601" fg:w="1"/><text x="39.2254%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="38.9754%" y="757" width="0.0649%" height="15" fill="rgb(219,206,35)" fg:x="601" fg:w="1"/><text x="39.2254%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="38.9754%" y="741" width="0.0649%" height="15" fill="rgb(216,130,31)" fg:x="601" fg:w="1"/><text x="39.2254%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="38.9754%" y="725" width="0.0649%" height="15" fill="rgb(251,97,34)" fg:x="601" fg:w="1"/><text x="39.2254%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.9754%" y="709" width="0.0649%" height="15" fill="rgb(246,159,47)" fg:x="601" fg:w="1"/><text x="39.2254%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.9754%" y="693" width="0.0649%" height="15" fill="rgb(232,87,10)" fg:x="601" fg:w="1"/><text x="39.2254%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="38.9754%" y="677" width="0.0649%" height="15" fill="rgb(249,1,37)" fg:x="601" fg:w="1"/><text x="39.2254%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="38.9754%" y="661" width="0.0649%" height="15" fill="rgb(239,135,14)" fg:x="601" fg:w="1"/><text x="39.2254%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="38.9754%" y="645" width="0.0649%" height="15" fill="rgb(253,116,46)" fg:x="601" fg:w="1"/><text x="39.2254%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="38.9754%" y="629" width="0.0649%" height="15" fill="rgb(222,217,37)" fg:x="601" fg:w="1"/><text x="39.2254%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="38.9754%" y="613" width="0.0649%" height="15" fill="rgb(252,96,8)" fg:x="601" fg:w="1"/><text x="39.2254%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (3 samples, 0.19%)</title><rect x="38.9105%" y="917" width="0.1946%" height="15" fill="rgb(254,103,41)" fg:x="600" fg:w="3"/><text x="39.1605%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::cached_file::WritablePage&gt; (2 samples, 0.13%)</title><rect x="38.9754%" y="901" width="0.1297%" height="15" fill="rgb(218,213,19)" fg:x="601" fg:w="2"/><text x="39.2254%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::cached_file::WritablePage as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="38.9754%" y="885" width="0.1297%" height="15" fill="rgb(253,95,21)" fg:x="601" fg:w="2"/><text x="39.2254%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::return_value (2 samples, 0.13%)</title><rect x="38.9754%" y="869" width="0.1297%" height="15" fill="rgb(229,26,28)" fg:x="601" fg:w="2"/><text x="39.2254%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (2 samples, 0.13%)</title><rect x="38.9754%" y="853" width="0.1297%" height="15" fill="rgb(230,129,16)" fg:x="601" fg:w="2"/><text x="39.2254%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="38.9754%" y="837" width="0.1297%" height="15" fill="rgb(236,126,17)" fg:x="601" fg:w="2"/><text x="39.2254%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="38.9754%" y="821" width="0.1297%" height="15" fill="rgb(209,33,33)" fg:x="601" fg:w="2"/><text x="39.2254%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="38.9754%" y="805" width="0.1297%" height="15" fill="rgb(227,85,29)" fg:x="601" fg:w="2"/><text x="39.2254%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="39.0402%" y="789" width="0.0649%" height="15" fill="rgb(241,53,46)" fg:x="602" fg:w="1"/><text x="39.2902%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="39.0402%" y="773" width="0.0649%" height="15" fill="rgb(228,167,53)" fg:x="602" fg:w="1"/><text x="39.2902%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="39.0402%" y="757" width="0.0649%" height="15" fill="rgb(238,195,45)" fg:x="602" fg:w="1"/><text x="39.2902%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="39.0402%" y="741" width="0.0649%" height="15" fill="rgb(252,124,45)" fg:x="602" fg:w="1"/><text x="39.2902%" y="751.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="39.0402%" y="725" width="0.0649%" height="15" fill="rgb(251,38,35)" fg:x="602" fg:w="1"/><text x="39.2902%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.0402%" y="709" width="0.0649%" height="15" fill="rgb(227,33,2)" fg:x="602" fg:w="1"/><text x="39.2902%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.0402%" y="693" width="0.0649%" height="15" fill="rgb(223,157,46)" fg:x="602" fg:w="1"/><text x="39.2902%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.0402%" y="677" width="0.0649%" height="15" fill="rgb(222,78,41)" fg:x="602" fg:w="1"/><text x="39.2902%" y="687.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="39.1051%" y="613" width="0.0649%" height="15" fill="rgb(248,176,11)" fg:x="603" fg:w="1"/><text x="39.3551%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="39.1051%" y="597" width="0.0649%" height="15" fill="rgb(241,221,18)" fg:x="603" fg:w="1"/><text x="39.3551%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="39.1051%" y="581" width="0.0649%" height="15" fill="rgb(218,85,22)" fg:x="603" fg:w="1"/><text x="39.3551%" y="591.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="39.1051%" y="565" width="0.0649%" height="15" fill="rgb(222,223,7)" fg:x="603" fg:w="1"/><text x="39.3551%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.1051%" y="549" width="0.0649%" height="15" fill="rgb(254,59,39)" fg:x="603" fg:w="1"/><text x="39.3551%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.1051%" y="533" width="0.0649%" height="15" fill="rgb(247,100,27)" fg:x="603" fg:w="1"/><text x="39.3551%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.1051%" y="517" width="0.0649%" height="15" fill="rgb(237,207,10)" fg:x="603" fg:w="1"/><text x="39.3551%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="39.1051%" y="693" width="0.1297%" height="15" fill="rgb(220,121,28)" fg:x="603" fg:w="2"/><text x="39.3551%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="39.1051%" y="677" width="0.1297%" height="15" fill="rgb(213,223,20)" fg:x="603" fg:w="2"/><text x="39.3551%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="39.1051%" y="661" width="0.1297%" height="15" fill="rgb(205,121,27)" fg:x="603" fg:w="2"/><text x="39.3551%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="39.1051%" y="645" width="0.1297%" height="15" fill="rgb(253,24,53)" fg:x="603" fg:w="2"/><text x="39.3551%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="39.1051%" y="629" width="0.1297%" height="15" fill="rgb(224,224,47)" fg:x="603" fg:w="2"/><text x="39.3551%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="39.1699%" y="613" width="0.0649%" height="15" fill="rgb(250,125,36)" fg:x="604" fg:w="1"/><text x="39.4199%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="39.1699%" y="597" width="0.0649%" height="15" fill="rgb(240,144,38)" fg:x="604" fg:w="1"/><text x="39.4199%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="39.1699%" y="581" width="0.0649%" height="15" fill="rgb(250,15,50)" fg:x="604" fg:w="1"/><text x="39.4199%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="39.1699%" y="565" width="0.0649%" height="15" fill="rgb(210,24,26)" fg:x="604" fg:w="1"/><text x="39.4199%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="39.1699%" y="549" width="0.0649%" height="15" fill="rgb(234,53,53)" fg:x="604" fg:w="1"/><text x="39.4199%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="39.1699%" y="533" width="0.0649%" height="15" fill="rgb(208,108,28)" fg:x="604" fg:w="1"/><text x="39.4199%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="39.1699%" y="517" width="0.0649%" height="15" fill="rgb(227,143,7)" fg:x="604" fg:w="1"/><text x="39.4199%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.1699%" y="501" width="0.0649%" height="15" fill="rgb(238,189,38)" fg:x="604" fg:w="1"/><text x="39.4199%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.1699%" y="485" width="0.0649%" height="15" fill="rgb(222,69,15)" fg:x="604" fg:w="1"/><text x="39.4199%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.1699%" y="469" width="0.0649%" height="15" fill="rgb(213,169,7)" fg:x="604" fg:w="1"/><text x="39.4199%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="39.2348%" y="629" width="0.0649%" height="15" fill="rgb(251,219,4)" fg:x="605" fg:w="1"/><text x="39.4848%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.2348%" y="613" width="0.0649%" height="15" fill="rgb(241,55,40)" fg:x="605" fg:w="1"/><text x="39.4848%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.2348%" y="597" width="0.0649%" height="15" fill="rgb(243,57,30)" fg:x="605" fg:w="1"/><text x="39.4848%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.2348%" y="581" width="0.0649%" height="15" fill="rgb(234,50,30)" fg:x="605" fg:w="1"/><text x="39.4848%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.2996%" y="629" width="0.0649%" height="15" fill="rgb(239,23,42)" fg:x="606" fg:w="1"/><text x="39.5496%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.2996%" y="613" width="0.0649%" height="15" fill="rgb(217,38,19)" fg:x="606" fg:w="1"/><text x="39.5496%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.2996%" y="597" width="0.0649%" height="15" fill="rgb(215,179,16)" fg:x="606" fg:w="1"/><text x="39.5496%" y="607.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="39.3645%" y="517" width="0.1297%" height="15" fill="rgb(254,21,37)" fg:x="607" fg:w="2"/><text x="39.6145%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="39.3645%" y="501" width="0.1297%" height="15" fill="rgb(219,207,48)" fg:x="607" fg:w="2"/><text x="39.6145%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="39.3645%" y="485" width="0.1297%" height="15" fill="rgb(227,225,41)" fg:x="607" fg:w="2"/><text x="39.6145%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="39.3645%" y="469" width="0.1297%" height="15" fill="rgb(223,130,1)" fg:x="607" fg:w="2"/><text x="39.6145%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="39.3645%" y="453" width="0.1297%" height="15" fill="rgb(249,54,42)" fg:x="607" fg:w="2"/><text x="39.6145%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="39.3645%" y="437" width="0.1297%" height="15" fill="rgb(248,69,25)" fg:x="607" fg:w="2"/><text x="39.6145%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="39.3645%" y="421" width="0.1297%" height="15" fill="rgb(234,21,32)" fg:x="607" fg:w="2"/><text x="39.6145%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="39.3645%" y="405" width="0.1297%" height="15" fill="rgb(252,136,6)" fg:x="607" fg:w="2"/><text x="39.6145%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="39.3645%" y="389" width="0.1297%" height="15" fill="rgb(245,87,12)" fg:x="607" fg:w="2"/><text x="39.6145%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="39.3645%" y="581" width="0.1946%" height="15" fill="rgb(208,12,15)" fg:x="607" fg:w="3"/><text x="39.6145%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="39.3645%" y="565" width="0.1946%" height="15" fill="rgb(250,98,2)" fg:x="607" fg:w="3"/><text x="39.6145%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="39.3645%" y="549" width="0.1946%" height="15" fill="rgb(205,213,15)" fg:x="607" fg:w="3"/><text x="39.6145%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="39.3645%" y="533" width="0.1946%" height="15" fill="rgb(248,192,44)" fg:x="607" fg:w="3"/><text x="39.6145%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="39.4942%" y="517" width="0.0649%" height="15" fill="rgb(221,89,17)" fg:x="609" fg:w="1"/><text x="39.7442%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.4942%" y="501" width="0.0649%" height="15" fill="rgb(209,55,3)" fg:x="609" fg:w="1"/><text x="39.7442%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.4942%" y="485" width="0.0649%" height="15" fill="rgb(247,23,45)" fg:x="609" fg:w="1"/><text x="39.7442%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.4942%" y="469" width="0.0649%" height="15" fill="rgb(235,152,23)" fg:x="609" fg:w="1"/><text x="39.7442%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.5590%" y="533" width="0.0649%" height="15" fill="rgb(244,63,13)" fg:x="610" fg:w="1"/><text x="39.8090%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.5590%" y="517" width="0.0649%" height="15" fill="rgb(227,30,37)" fg:x="610" fg:w="1"/><text x="39.8090%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.5590%" y="501" width="0.0649%" height="15" fill="rgb(224,49,42)" fg:x="610" fg:w="1"/><text x="39.8090%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="39.6239%" y="517" width="0.0649%" height="15" fill="rgb(218,129,5)" fg:x="611" fg:w="1"/><text x="39.8739%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.6239%" y="501" width="0.0649%" height="15" fill="rgb(240,199,54)" fg:x="611" fg:w="1"/><text x="39.8739%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.6239%" y="485" width="0.0649%" height="15" fill="rgb(234,31,13)" fg:x="611" fg:w="1"/><text x="39.8739%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.6239%" y="469" width="0.0649%" height="15" fill="rgb(219,73,54)" fg:x="611" fg:w="1"/><text x="39.8739%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.6887%" y="517" width="0.0649%" height="15" fill="rgb(251,162,10)" fg:x="612" fg:w="1"/><text x="39.9387%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.6887%" y="501" width="0.0649%" height="15" fill="rgb(240,138,47)" fg:x="612" fg:w="1"/><text x="39.9387%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.6887%" y="485" width="0.0649%" height="15" fill="rgb(216,138,26)" fg:x="612" fg:w="1"/><text x="39.9387%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.7536%" y="341" width="0.0649%" height="15" fill="rgb(243,17,35)" fg:x="613" fg:w="1"/><text x="40.0036%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.7536%" y="325" width="0.0649%" height="15" fill="rgb(241,60,18)" fg:x="613" fg:w="1"/><text x="40.0036%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.7536%" y="309" width="0.0649%" height="15" fill="rgb(234,2,44)" fg:x="613" fg:w="1"/><text x="40.0036%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="39.7536%" y="389" width="0.1297%" height="15" fill="rgb(225,225,33)" fg:x="613" fg:w="2"/><text x="40.0036%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="39.7536%" y="373" width="0.1297%" height="15" fill="rgb(234,50,31)" fg:x="613" fg:w="2"/><text x="40.0036%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="39.7536%" y="357" width="0.1297%" height="15" fill="rgb(249,6,25)" fg:x="613" fg:w="2"/><text x="40.0036%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="39.8184%" y="341" width="0.0649%" height="15" fill="rgb(241,5,17)" fg:x="614" fg:w="1"/><text x="40.0684%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="39.8184%" y="325" width="0.0649%" height="15" fill="rgb(207,116,10)" fg:x="614" fg:w="1"/><text x="40.0684%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="39.8184%" y="309" width="0.0649%" height="15" fill="rgb(222,128,18)" fg:x="614" fg:w="1"/><text x="40.0684%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.8184%" y="293" width="0.0649%" height="15" fill="rgb(229,109,25)" fg:x="614" fg:w="1"/><text x="40.0684%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.8184%" y="277" width="0.0649%" height="15" fill="rgb(222,102,25)" fg:x="614" fg:w="1"/><text x="40.0684%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.8184%" y="261" width="0.0649%" height="15" fill="rgb(239,211,5)" fg:x="614" fg:w="1"/><text x="40.0684%" y="271.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="39.7536%" y="469" width="0.1946%" height="15" fill="rgb(223,136,26)" fg:x="613" fg:w="3"/><text x="40.0036%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="39.7536%" y="453" width="0.1946%" height="15" fill="rgb(227,30,15)" fg:x="613" fg:w="3"/><text x="40.0036%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="39.7536%" y="437" width="0.1946%" height="15" fill="rgb(247,76,4)" fg:x="613" fg:w="3"/><text x="40.0036%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="39.7536%" y="421" width="0.1946%" height="15" fill="rgb(245,38,48)" fg:x="613" fg:w="3"/><text x="40.0036%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="39.7536%" y="405" width="0.1946%" height="15" fill="rgb(210,220,14)" fg:x="613" fg:w="3"/><text x="40.0036%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.8833%" y="389" width="0.0649%" height="15" fill="rgb(224,60,51)" fg:x="615" fg:w="1"/><text x="40.1333%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.8833%" y="373" width="0.0649%" height="15" fill="rgb(212,133,49)" fg:x="615" fg:w="1"/><text x="40.1333%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.8833%" y="357" width="0.0649%" height="15" fill="rgb(231,39,22)" fg:x="615" fg:w="1"/><text x="40.1333%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="39.9481%" y="293" width="0.0649%" height="15" fill="rgb(236,173,22)" fg:x="616" fg:w="1"/><text x="40.1981%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="39.9481%" y="277" width="0.0649%" height="15" fill="rgb(210,70,0)" fg:x="616" fg:w="1"/><text x="40.1981%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="39.9481%" y="261" width="0.0649%" height="15" fill="rgb(215,170,11)" fg:x="616" fg:w="1"/><text x="40.1981%" y="271.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="40.0130%" y="261" width="0.0649%" height="15" fill="rgb(220,154,28)" fg:x="617" fg:w="1"/><text x="40.2630%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="40.0130%" y="245" width="0.0649%" height="15" fill="rgb(240,160,41)" fg:x="617" fg:w="1"/><text x="40.2630%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="40.0130%" y="229" width="0.0649%" height="15" fill="rgb(243,215,41)" fg:x="617" fg:w="1"/><text x="40.2630%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="40.0130%" y="213" width="0.0649%" height="15" fill="rgb(214,208,31)" fg:x="617" fg:w="1"/><text x="40.2630%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="40.0130%" y="197" width="0.0649%" height="15" fill="rgb(247,57,22)" fg:x="617" fg:w="1"/><text x="40.2630%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="40.0130%" y="181" width="0.0649%" height="15" fill="rgb(228,73,52)" fg:x="617" fg:w="1"/><text x="40.2630%" y="191.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="40.0130%" y="165" width="0.0649%" height="15" fill="rgb(252,60,9)" fg:x="617" fg:w="1"/><text x="40.2630%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="40.0130%" y="149" width="0.0649%" height="15" fill="rgb(233,9,51)" fg:x="617" fg:w="1"/><text x="40.2630%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="40.0130%" y="133" width="0.0649%" height="15" fill="rgb(223,67,14)" fg:x="617" fg:w="1"/><text x="40.2630%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="40.0130%" y="117" width="0.0649%" height="15" fill="rgb(222,86,2)" fg:x="617" fg:w="1"/><text x="40.2630%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="40.0130%" y="101" width="0.0649%" height="15" fill="rgb(243,58,54)" fg:x="617" fg:w="1"/><text x="40.2630%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.0130%" y="85" width="0.0649%" height="15" fill="rgb(210,200,39)" fg:x="617" fg:w="1"/><text x="40.2630%" y="95.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.0130%" y="69" width="0.0649%" height="15" fill="rgb(238,135,9)" fg:x="617" fg:w="1"/><text x="40.2630%" y="79.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.0130%" y="53" width="0.0649%" height="15" fill="rgb(232,179,7)" fg:x="617" fg:w="1"/><text x="40.2630%" y="63.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="40.0130%" y="277" width="0.1297%" height="15" fill="rgb(245,65,41)" fg:x="617" fg:w="2"/><text x="40.2630%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="40.0778%" y="261" width="0.0649%" height="15" fill="rgb(227,43,8)" fg:x="618" fg:w="1"/><text x="40.3278%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.0778%" y="245" width="0.0649%" height="15" fill="rgb(235,91,14)" fg:x="618" fg:w="1"/><text x="40.3278%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.0778%" y="229" width="0.0649%" height="15" fill="rgb(235,219,31)" fg:x="618" fg:w="1"/><text x="40.3278%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.0778%" y="213" width="0.0649%" height="15" fill="rgb(227,121,25)" fg:x="618" fg:w="1"/><text x="40.3278%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 1.10%)</title><rect x="39.1051%" y="709" width="1.1025%" height="15" fill="rgb(254,129,24)" fg:x="603" fg:w="17"/><text x="39.3551%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (15 samples, 0.97%)</title><rect x="39.2348%" y="693" width="0.9728%" height="15" fill="rgb(226,144,49)" fg:x="605" fg:w="15"/><text x="39.4848%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 0.97%)</title><rect x="39.2348%" y="677" width="0.9728%" height="15" fill="rgb(214,187,32)" fg:x="605" fg:w="15"/><text x="39.4848%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (15 samples, 0.97%)</title><rect x="39.2348%" y="661" width="0.9728%" height="15" fill="rgb(243,129,46)" fg:x="605" fg:w="15"/><text x="39.4848%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (15 samples, 0.97%)</title><rect x="39.2348%" y="645" width="0.9728%" height="15" fill="rgb(221,185,35)" fg:x="605" fg:w="15"/><text x="39.4848%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (13 samples, 0.84%)</title><rect x="39.3645%" y="629" width="0.8431%" height="15" fill="rgb(205,0,32)" fg:x="607" fg:w="13"/><text x="39.6145%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (13 samples, 0.84%)</title><rect x="39.3645%" y="613" width="0.8431%" height="15" fill="rgb(229,179,12)" fg:x="607" fg:w="13"/><text x="39.6145%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13 samples, 0.84%)</title><rect x="39.3645%" y="597" width="0.8431%" height="15" fill="rgb(252,107,19)" fg:x="607" fg:w="13"/><text x="39.6145%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (10 samples, 0.65%)</title><rect x="39.5590%" y="581" width="0.6485%" height="15" fill="rgb(220,95,27)" fg:x="610" fg:w="10"/><text x="39.8090%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (10 samples, 0.65%)</title><rect x="39.5590%" y="565" width="0.6485%" height="15" fill="rgb(240,113,40)" fg:x="610" fg:w="10"/><text x="39.8090%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="39.5590%" y="549" width="0.6485%" height="15" fill="rgb(208,4,43)" fg:x="610" fg:w="10"/><text x="39.8090%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="39.6239%" y="533" width="0.5837%" height="15" fill="rgb(247,189,30)" fg:x="611" fg:w="9"/><text x="39.8739%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (7 samples, 0.45%)</title><rect x="39.7536%" y="517" width="0.4540%" height="15" fill="rgb(231,157,17)" fg:x="613" fg:w="7"/><text x="40.0036%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.45%)</title><rect x="39.7536%" y="501" width="0.4540%" height="15" fill="rgb(224,139,6)" fg:x="613" fg:w="7"/><text x="40.0036%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="39.7536%" y="485" width="0.4540%" height="15" fill="rgb(223,83,16)" fg:x="613" fg:w="7"/><text x="40.0036%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="39.9481%" y="469" width="0.2594%" height="15" fill="rgb(232,211,20)" fg:x="616" fg:w="4"/><text x="40.1981%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="39.9481%" y="453" width="0.2594%" height="15" fill="rgb(225,203,35)" fg:x="616" fg:w="4"/><text x="40.1981%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="39.9481%" y="437" width="0.2594%" height="15" fill="rgb(215,211,44)" fg:x="616" fg:w="4"/><text x="40.1981%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="39.9481%" y="421" width="0.2594%" height="15" fill="rgb(248,213,26)" fg:x="616" fg:w="4"/><text x="40.1981%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="39.9481%" y="405" width="0.2594%" height="15" fill="rgb(214,23,52)" fg:x="616" fg:w="4"/><text x="40.1981%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="39.9481%" y="389" width="0.2594%" height="15" fill="rgb(225,173,50)" fg:x="616" fg:w="4"/><text x="40.1981%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="39.9481%" y="373" width="0.2594%" height="15" fill="rgb(206,150,22)" fg:x="616" fg:w="4"/><text x="40.1981%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (4 samples, 0.26%)</title><rect x="39.9481%" y="357" width="0.2594%" height="15" fill="rgb(239,64,23)" fg:x="616" fg:w="4"/><text x="40.1981%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (4 samples, 0.26%)</title><rect x="39.9481%" y="341" width="0.2594%" height="15" fill="rgb(242,50,38)" fg:x="616" fg:w="4"/><text x="40.1981%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (4 samples, 0.26%)</title><rect x="39.9481%" y="325" width="0.2594%" height="15" fill="rgb(217,91,15)" fg:x="616" fg:w="4"/><text x="40.1981%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (4 samples, 0.26%)</title><rect x="39.9481%" y="309" width="0.2594%" height="15" fill="rgb(230,172,6)" fg:x="616" fg:w="4"/><text x="40.1981%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="40.0130%" y="293" width="0.1946%" height="15" fill="rgb(221,98,26)" fg:x="617" fg:w="3"/><text x="40.2630%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.1427%" y="277" width="0.0649%" height="15" fill="rgb(227,210,45)" fg:x="619" fg:w="1"/><text x="40.3927%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.1427%" y="261" width="0.0649%" height="15" fill="rgb(206,8,30)" fg:x="619" fg:w="1"/><text x="40.3927%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.1427%" y="245" width="0.0649%" height="15" fill="rgb(241,219,17)" fg:x="619" fg:w="1"/><text x="40.3927%" y="255.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (19 samples, 1.23%)</title><rect x="39.1051%" y="773" width="1.2322%" height="15" fill="rgb(247,121,29)" fg:x="603" fg:w="19"/><text x="39.3551%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (19 samples, 1.23%)</title><rect x="39.1051%" y="757" width="1.2322%" height="15" fill="rgb(219,169,49)" fg:x="603" fg:w="19"/><text x="39.3551%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (19 samples, 1.23%)</title><rect x="39.1051%" y="741" width="1.2322%" height="15" fill="rgb(253,49,49)" fg:x="603" fg:w="19"/><text x="39.3551%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 1.23%)</title><rect x="39.1051%" y="725" width="1.2322%" height="15" fill="rgb(217,178,3)" fg:x="603" fg:w="19"/><text x="39.3551%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.13%)</title><rect x="40.2075%" y="709" width="0.1297%" height="15" fill="rgb(234,73,37)" fg:x="620" fg:w="2"/><text x="40.4575%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="40.2075%" y="693" width="0.1297%" height="15" fill="rgb(250,98,22)" fg:x="620" fg:w="2"/><text x="40.4575%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="40.2075%" y="677" width="0.1297%" height="15" fill="rgb(220,108,37)" fg:x="620" fg:w="2"/><text x="40.4575%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="40.2075%" y="661" width="0.1297%" height="15" fill="rgb(225,168,10)" fg:x="620" fg:w="2"/><text x="40.4575%" y="671.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (20 samples, 1.30%)</title><rect x="39.1051%" y="901" width="1.2970%" height="15" fill="rgb(247,215,21)" fg:x="603" fg:w="20"/><text x="39.3551%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (20 samples, 1.30%)</title><rect x="39.1051%" y="885" width="1.2970%" height="15" fill="rgb(253,189,31)" fg:x="603" fg:w="20"/><text x="39.3551%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (20 samples, 1.30%)</title><rect x="39.1051%" y="869" width="1.2970%" height="15" fill="rgb(241,54,22)" fg:x="603" fg:w="20"/><text x="39.3551%" y="879.50"></text></g><g><title>bincode::internal::deserialize (20 samples, 1.30%)</title><rect x="39.1051%" y="853" width="1.2970%" height="15" fill="rgb(211,87,4)" fg:x="603" fg:w="20"/><text x="39.3551%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (20 samples, 1.30%)</title><rect x="39.1051%" y="837" width="1.2970%" height="15" fill="rgb(245,112,24)" fg:x="603" fg:w="20"/><text x="39.3551%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (20 samples, 1.30%)</title><rect x="39.1051%" y="821" width="1.2970%" height="15" fill="rgb(235,190,41)" fg:x="603" fg:w="20"/><text x="39.3551%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (20 samples, 1.30%)</title><rect x="39.1051%" y="805" width="1.2970%" height="15" fill="rgb(214,89,8)" fg:x="603" fg:w="20"/><text x="39.3551%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (20 samples, 1.30%)</title><rect x="39.1051%" y="789" width="1.2970%" height="15" fill="rgb(249,155,35)" fg:x="603" fg:w="20"/><text x="39.3551%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.3372%" y="773" width="0.0649%" height="15" fill="rgb(249,88,26)" fg:x="622" fg:w="1"/><text x="40.5872%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.3372%" y="757" width="0.0649%" height="15" fill="rgb(232,56,8)" fg:x="622" fg:w="1"/><text x="40.5872%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.3372%" y="741" width="0.0649%" height="15" fill="rgb(240,95,3)" fg:x="622" fg:w="1"/><text x="40.5872%" y="751.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.13%)</title><rect x="40.4021%" y="885" width="0.1297%" height="15" fill="rgb(222,44,28)" fg:x="623" fg:w="2"/><text x="40.6521%" y="895.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (2 samples, 0.13%)</title><rect x="40.4021%" y="869" width="0.1297%" height="15" fill="rgb(234,16,30)" fg:x="623" fg:w="2"/><text x="40.6521%" y="879.50"></text></g><g><title> N]&gt;::try_from (2 samples, 0.13%)</title><rect x="40.4021%" y="853" width="0.1297%" height="15" fill="rgb(223,26,17)" fg:x="623" fg:w="2"/><text x="40.6521%" y="863.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (2 samples, 0.13%)</title><rect x="40.4021%" y="837" width="0.1297%" height="15" fill="rgb(239,187,47)" fg:x="623" fg:w="2"/><text x="40.6521%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="40.4021%" y="821" width="0.1297%" height="15" fill="rgb(247,102,50)" fg:x="623" fg:w="2"/><text x="40.6521%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="40.4021%" y="805" width="0.1297%" height="15" fill="rgb(231,216,22)" fg:x="623" fg:w="2"/><text x="40.6521%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="40.4021%" y="789" width="0.1297%" height="15" fill="rgb(216,201,26)" fg:x="623" fg:w="2"/><text x="40.6521%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_page (3 samples, 0.19%)</title><rect x="40.4021%" y="901" width="0.1946%" height="15" fill="rgb(214,186,23)" fg:x="623" fg:w="3"/><text x="40.6521%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as redb::tree_store::page_store::base::Page&gt;::memory (1 samples, 0.06%)</title><rect x="40.5318%" y="885" width="0.0649%" height="15" fill="rgb(235,184,4)" fg:x="625" fg:w="1"/><text x="40.7818%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.5318%" y="869" width="0.0649%" height="15" fill="rgb(244,46,17)" fg:x="625" fg:w="1"/><text x="40.7818%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.5318%" y="853" width="0.0649%" height="15" fill="rgb(248,74,46)" fg:x="625" fg:w="1"/><text x="40.7818%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.5318%" y="837" width="0.0649%" height="15" fill="rgb(243,79,5)" fg:x="625" fg:w="1"/><text x="40.7818%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="40.5966%" y="885" width="0.0649%" height="15" fill="rgb(213,148,1)" fg:x="626" fg:w="1"/><text x="40.8466%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="40.5966%" y="869" width="0.0649%" height="15" fill="rgb(221,30,0)" fg:x="626" fg:w="1"/><text x="40.8466%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.5966%" y="853" width="0.0649%" height="15" fill="rgb(207,85,29)" fg:x="626" fg:w="1"/><text x="40.8466%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.5966%" y="837" width="0.0649%" height="15" fill="rgb(239,31,46)" fg:x="626" fg:w="1"/><text x="40.8466%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.5966%" y="821" width="0.0649%" height="15" fill="rgb(219,6,1)" fg:x="626" fg:w="1"/><text x="40.8466%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (25 samples, 1.62%)</title><rect x="39.1051%" y="917" width="1.6213%" height="15" fill="rgb(229,90,29)" fg:x="603" fg:w="25"/><text x="39.3551%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (2 samples, 0.13%)</title><rect x="40.5966%" y="901" width="0.1297%" height="15" fill="rgb(242,201,42)" fg:x="626" fg:w="2"/><text x="40.8466%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="40.6615%" y="885" width="0.0649%" height="15" fill="rgb(243,80,54)" fg:x="627" fg:w="1"/><text x="40.9115%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="40.6615%" y="869" width="0.0649%" height="15" fill="rgb(223,166,15)" fg:x="627" fg:w="1"/><text x="40.9115%" y="879.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="40.6615%" y="853" width="0.0649%" height="15" fill="rgb(238,78,27)" fg:x="627" fg:w="1"/><text x="40.9115%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.6615%" y="837" width="0.0649%" height="15" fill="rgb(235,28,43)" fg:x="627" fg:w="1"/><text x="40.9115%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.6615%" y="821" width="0.0649%" height="15" fill="rgb(240,210,28)" fg:x="627" fg:w="1"/><text x="40.9115%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.6615%" y="805" width="0.0649%" height="15" fill="rgb(253,6,46)" fg:x="627" fg:w="1"/><text x="40.9115%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::BranchMutator::new (1 samples, 0.06%)</title><rect x="40.7263%" y="917" width="0.0649%" height="15" fill="rgb(250,159,47)" fg:x="628" fg:w="1"/><text x="40.9763%" y="927.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="40.7263%" y="901" width="0.0649%" height="15" fill="rgb(216,139,2)" fg:x="628" fg:w="1"/><text x="40.9763%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.7263%" y="885" width="0.0649%" height="15" fill="rgb(221,124,44)" fg:x="628" fg:w="1"/><text x="40.9763%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.7263%" y="869" width="0.0649%" height="15" fill="rgb(205,37,22)" fg:x="628" fg:w="1"/><text x="40.9763%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.7263%" y="853" width="0.0649%" height="15" fill="rgb(250,55,8)" fg:x="628" fg:w="1"/><text x="40.9763%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="40.7912%" y="869" width="0.0649%" height="15" fill="rgb(215,83,48)" fg:x="629" fg:w="1"/><text x="41.0412%" y="879.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="40.7912%" y="853" width="0.0649%" height="15" fill="rgb(253,2,32)" fg:x="629" fg:w="1"/><text x="41.0412%" y="863.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="40.7912%" y="837" width="0.0649%" height="15" fill="rgb(236,67,28)" fg:x="629" fg:w="1"/><text x="41.0412%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.06%)</title><rect x="40.7912%" y="821" width="0.0649%" height="15" fill="rgb(252,55,15)" fg:x="629" fg:w="1"/><text x="41.0412%" y="831.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.06%)</title><rect x="40.7912%" y="805" width="0.0649%" height="15" fill="rgb(243,173,17)" fg:x="629" fg:w="1"/><text x="41.0412%" y="815.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.06%)</title><rect x="40.7912%" y="789" width="0.0649%" height="15" fill="rgb(215,212,13)" fg:x="629" fg:w="1"/><text x="41.0412%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.7912%" y="773" width="0.0649%" height="15" fill="rgb(253,176,6)" fg:x="629" fg:w="1"/><text x="41.0412%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.7912%" y="757" width="0.0649%" height="15" fill="rgb(236,105,26)" fg:x="629" fg:w="1"/><text x="41.0412%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.7912%" y="741" width="0.0649%" height="15" fill="rgb(239,226,32)" fg:x="629" fg:w="1"/><text x="41.0412%" y="751.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (2 samples, 0.13%)</title><rect x="40.7912%" y="917" width="0.1297%" height="15" fill="rgb(236,104,51)" fg:x="629" fg:w="2"/><text x="41.0412%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (2 samples, 0.13%)</title><rect x="40.7912%" y="901" width="0.1297%" height="15" fill="rgb(220,172,33)" fg:x="629" fg:w="2"/><text x="41.0412%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (2 samples, 0.13%)</title><rect x="40.7912%" y="885" width="0.1297%" height="15" fill="rgb(224,182,25)" fg:x="629" fg:w="2"/><text x="41.0412%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper_retry (1 samples, 0.06%)</title><rect x="40.8560%" y="869" width="0.0649%" height="15" fill="rgb(236,184,24)" fg:x="630" fg:w="1"/><text x="41.1060%" y="879.50"></text></g><g><title>redb::tree_store::page_store::region::RegionTracker::find_free (1 samples, 0.06%)</title><rect x="40.8560%" y="853" width="0.0649%" height="15" fill="rgb(241,221,14)" fg:x="630" fg:w="1"/><text x="41.1060%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.06%)</title><rect x="40.8560%" y="837" width="0.0649%" height="15" fill="rgb(227,146,5)" fg:x="630" fg:w="1"/><text x="41.1060%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="40.8560%" y="821" width="0.0649%" height="15" fill="rgb(214,15,23)" fg:x="630" fg:w="1"/><text x="41.1060%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.06%)</title><rect x="40.8560%" y="805" width="0.0649%" height="15" fill="rgb(233,157,31)" fg:x="630" fg:w="1"/><text x="41.1060%" y="815.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="40.8560%" y="789" width="0.0649%" height="15" fill="rgb(211,27,52)" fg:x="630" fg:w="1"/><text x="41.1060%" y="799.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="40.8560%" y="773" width="0.0649%" height="15" fill="rgb(212,223,15)" fg:x="630" fg:w="1"/><text x="41.1060%" y="783.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="40.8560%" y="757" width="0.0649%" height="15" fill="rgb(254,211,0)" fg:x="630" fg:w="1"/><text x="41.1060%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.8560%" y="741" width="0.0649%" height="15" fill="rgb(205,43,38)" fg:x="630" fg:w="1"/><text x="41.1060%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.8560%" y="725" width="0.0649%" height="15" fill="rgb(242,206,46)" fg:x="630" fg:w="1"/><text x="41.1060%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.8560%" y="709" width="0.0649%" height="15" fill="rgb(220,221,12)" fg:x="630" fg:w="1"/><text x="41.1060%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="40.9209%" y="885" width="0.0649%" height="15" fill="rgb(217,156,35)" fg:x="631" fg:w="1"/><text x="41.1709%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="40.9209%" y="869" width="0.0649%" height="15" fill="rgb(207,181,49)" fg:x="631" fg:w="1"/><text x="41.1709%" y="879.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="40.9209%" y="853" width="0.0649%" height="15" fill="rgb(235,103,47)" fg:x="631" fg:w="1"/><text x="41.1709%" y="863.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (1 samples, 0.06%)</title><rect x="40.9209%" y="837" width="0.0649%" height="15" fill="rgb(222,63,28)" fg:x="631" fg:w="1"/><text x="41.1709%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.9209%" y="821" width="0.0649%" height="15" fill="rgb(244,137,21)" fg:x="631" fg:w="1"/><text x="41.1709%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.9209%" y="805" width="0.0649%" height="15" fill="rgb(228,35,27)" fg:x="631" fg:w="1"/><text x="41.1709%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.9209%" y="789" width="0.0649%" height="15" fill="rgb(226,191,41)" fg:x="631" fg:w="1"/><text x="41.1709%" y="799.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="40.9857%" y="853" width="0.0649%" height="15" fill="rgb(210,154,3)" fg:x="632" fg:w="1"/><text x="41.2357%" y="863.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="40.9857%" y="837" width="0.0649%" height="15" fill="rgb(216,60,49)" fg:x="632" fg:w="1"/><text x="41.2357%" y="847.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="40.9857%" y="821" width="0.0649%" height="15" fill="rgb(226,17,20)" fg:x="632" fg:w="1"/><text x="41.2357%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="40.9857%" y="805" width="0.0649%" height="15" fill="rgb(206,115,35)" fg:x="632" fg:w="1"/><text x="41.2357%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="40.9857%" y="789" width="0.0649%" height="15" fill="rgb(227,88,1)" fg:x="632" fg:w="1"/><text x="41.2357%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="40.9857%" y="773" width="0.0649%" height="15" fill="rgb(230,222,24)" fg:x="632" fg:w="1"/><text x="41.2357%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (3 samples, 0.19%)</title><rect x="40.9209%" y="901" width="0.1946%" height="15" fill="rgb(214,124,32)" fg:x="631" fg:w="3"/><text x="41.1709%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (2 samples, 0.13%)</title><rect x="40.9857%" y="885" width="0.1297%" height="15" fill="rgb(240,41,36)" fg:x="632" fg:w="2"/><text x="41.2357%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (2 samples, 0.13%)</title><rect x="40.9857%" y="869" width="0.1297%" height="15" fill="rgb(221,17,52)" fg:x="632" fg:w="2"/><text x="41.2357%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="41.0506%" y="853" width="0.0649%" height="15" fill="rgb(252,70,16)" fg:x="633" fg:w="1"/><text x="41.3006%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.0506%" y="837" width="0.0649%" height="15" fill="rgb(250,177,4)" fg:x="633" fg:w="1"/><text x="41.3006%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.0506%" y="821" width="0.0649%" height="15" fill="rgb(240,188,47)" fg:x="633" fg:w="1"/><text x="41.3006%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.0506%" y="805" width="0.0649%" height="15" fill="rgb(215,92,12)" fg:x="633" fg:w="1"/><text x="41.3006%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::push_all_except (4 samples, 0.26%)</title><rect x="40.9209%" y="917" width="0.2594%" height="15" fill="rgb(242,110,29)" fg:x="631" fg:w="4"/><text x="41.1709%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::push (1 samples, 0.06%)</title><rect x="41.1154%" y="901" width="0.0649%" height="15" fill="rgb(208,211,26)" fg:x="634" fg:w="1"/><text x="41.3654%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.06%)</title><rect x="41.1154%" y="885" width="0.0649%" height="15" fill="rgb(244,147,6)" fg:x="634" fg:w="1"/><text x="41.3654%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.1154%" y="869" width="0.0649%" height="15" fill="rgb(211,130,42)" fg:x="634" fg:w="1"/><text x="41.3654%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.1154%" y="853" width="0.0649%" height="15" fill="rgb(220,63,1)" fg:x="634" fg:w="1"/><text x="41.3654%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.1154%" y="837" width="0.0649%" height="15" fill="rgb(241,212,30)" fg:x="634" fg:w="1"/><text x="41.3654%" y="847.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="41.1803%" y="885" width="0.0649%" height="15" fill="rgb(233,153,17)" fg:x="635" fg:w="1"/><text x="41.4303%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.1803%" y="869" width="0.0649%" height="15" fill="rgb(236,3,10)" fg:x="635" fg:w="1"/><text x="41.4303%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.1803%" y="853" width="0.0649%" height="15" fill="rgb(232,41,21)" fg:x="635" fg:w="1"/><text x="41.4303%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.1803%" y="837" width="0.0649%" height="15" fill="rgb(206,63,51)" fg:x="635" fg:w="1"/><text x="41.4303%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.2451%" y="773" width="0.0649%" height="15" fill="rgb(250,214,3)" fg:x="636" fg:w="1"/><text x="41.4951%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.2451%" y="757" width="0.0649%" height="15" fill="rgb(254,89,27)" fg:x="636" fg:w="1"/><text x="41.4951%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.2451%" y="741" width="0.0649%" height="15" fill="rgb(249,41,14)" fg:x="636" fg:w="1"/><text x="41.4951%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="41.2451%" y="837" width="0.1297%" height="15" fill="rgb(221,196,51)" fg:x="636" fg:w="2"/><text x="41.4951%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="41.2451%" y="821" width="0.1297%" height="15" fill="rgb(214,116,26)" fg:x="636" fg:w="2"/><text x="41.4951%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="41.2451%" y="805" width="0.1297%" height="15" fill="rgb(236,67,7)" fg:x="636" fg:w="2"/><text x="41.4951%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="41.2451%" y="789" width="0.1297%" height="15" fill="rgb(253,179,32)" fg:x="636" fg:w="2"/><text x="41.4951%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="41.3100%" y="773" width="0.0649%" height="15" fill="rgb(218,33,15)" fg:x="637" fg:w="1"/><text x="41.5600%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="41.3100%" y="757" width="0.0649%" height="15" fill="rgb(217,202,41)" fg:x="637" fg:w="1"/><text x="41.5600%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.3100%" y="741" width="0.0649%" height="15" fill="rgb(234,133,5)" fg:x="637" fg:w="1"/><text x="41.5600%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.3100%" y="725" width="0.0649%" height="15" fill="rgb(240,47,40)" fg:x="637" fg:w="1"/><text x="41.5600%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.3100%" y="709" width="0.0649%" height="15" fill="rgb(234,166,26)" fg:x="637" fg:w="1"/><text x="41.5600%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="41.3748%" y="837" width="0.0649%" height="15" fill="rgb(244,125,51)" fg:x="638" fg:w="1"/><text x="41.6248%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="41.3748%" y="821" width="0.0649%" height="15" fill="rgb(229,171,11)" fg:x="638" fg:w="1"/><text x="41.6248%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="41.3748%" y="805" width="0.0649%" height="15" fill="rgb(224,38,45)" fg:x="638" fg:w="1"/><text x="41.6248%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="41.3748%" y="789" width="0.0649%" height="15" fill="rgb(237,27,7)" fg:x="638" fg:w="1"/><text x="41.6248%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="41.3748%" y="773" width="0.0649%" height="15" fill="rgb(216,52,7)" fg:x="638" fg:w="1"/><text x="41.6248%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="41.3748%" y="757" width="0.0649%" height="15" fill="rgb(243,11,11)" fg:x="638" fg:w="1"/><text x="41.6248%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.3748%" y="741" width="0.0649%" height="15" fill="rgb(253,167,20)" fg:x="638" fg:w="1"/><text x="41.6248%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.3748%" y="725" width="0.0649%" height="15" fill="rgb(215,207,5)" fg:x="638" fg:w="1"/><text x="41.6248%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.3748%" y="709" width="0.0649%" height="15" fill="rgb(252,127,31)" fg:x="638" fg:w="1"/><text x="41.6248%" y="719.50"></text></g><g><title>core::mem::drop (4 samples, 0.26%)</title><rect x="41.2451%" y="885" width="0.2594%" height="15" fill="rgb(209,106,27)" fg:x="636" fg:w="4"/><text x="41.4951%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (4 samples, 0.26%)</title><rect x="41.2451%" y="869" width="0.2594%" height="15" fill="rgb(214,220,18)" fg:x="636" fg:w="4"/><text x="41.4951%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (4 samples, 0.26%)</title><rect x="41.2451%" y="853" width="0.2594%" height="15" fill="rgb(237,89,12)" fg:x="636" fg:w="4"/><text x="41.4951%" y="863.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="41.4397%" y="837" width="0.0649%" height="15" fill="rgb(209,167,36)" fg:x="639" fg:w="1"/><text x="41.6897%" y="847.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="41.4397%" y="821" width="0.0649%" height="15" fill="rgb(243,45,22)" fg:x="639" fg:w="1"/><text x="41.6897%" y="831.50"></text></g><g><title>std::sync::poison::map_result (1 samples, 0.06%)</title><rect x="41.4397%" y="805" width="0.0649%" height="15" fill="rgb(239,2,46)" fg:x="639" fg:w="1"/><text x="41.6897%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.4397%" y="789" width="0.0649%" height="15" fill="rgb(241,101,0)" fg:x="639" fg:w="1"/><text x="41.6897%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.4397%" y="773" width="0.0649%" height="15" fill="rgb(244,34,31)" fg:x="639" fg:w="1"/><text x="41.6897%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.4397%" y="757" width="0.0649%" height="15" fill="rgb(248,23,22)" fg:x="639" fg:w="1"/><text x="41.6897%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="41.5045%" y="885" width="0.0649%" height="15" fill="rgb(218,27,48)" fg:x="640" fg:w="1"/><text x="41.7545%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="41.5045%" y="869" width="0.0649%" height="15" fill="rgb(232,78,1)" fg:x="640" fg:w="1"/><text x="41.7545%" y="879.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.06%)</title><rect x="41.5045%" y="853" width="0.0649%" height="15" fill="rgb(233,169,12)" fg:x="640" fg:w="1"/><text x="41.7545%" y="863.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="41.5045%" y="837" width="0.0649%" height="15" fill="rgb(225,222,54)" fg:x="640" fg:w="1"/><text x="41.7545%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="41.5045%" y="821" width="0.0649%" height="15" fill="rgb(245,126,29)" fg:x="640" fg:w="1"/><text x="41.7545%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="41.5045%" y="805" width="0.0649%" height="15" fill="rgb(241,63,48)" fg:x="640" fg:w="1"/><text x="41.7545%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="41.5045%" y="789" width="0.0649%" height="15" fill="rgb(235,126,38)" fg:x="640" fg:w="1"/><text x="41.7545%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="41.5045%" y="773" width="0.0649%" height="15" fill="rgb(232,96,49)" fg:x="640" fg:w="1"/><text x="41.7545%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="41.5045%" y="757" width="0.0649%" height="15" fill="rgb(211,146,40)" fg:x="640" fg:w="1"/><text x="41.7545%" y="767.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="41.5045%" y="741" width="0.0649%" height="15" fill="rgb(247,93,44)" fg:x="640" fg:w="1"/><text x="41.7545%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="41.5045%" y="725" width="0.0649%" height="15" fill="rgb(251,41,49)" fg:x="640" fg:w="1"/><text x="41.7545%" y="735.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="41.5045%" y="709" width="0.0649%" height="15" fill="rgb(218,155,12)" fg:x="640" fg:w="1"/><text x="41.7545%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="41.5045%" y="693" width="0.0649%" height="15" fill="rgb(221,161,30)" fg:x="640" fg:w="1"/><text x="41.7545%" y="703.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="41.5045%" y="677" width="0.0649%" height="15" fill="rgb(221,179,11)" fg:x="640" fg:w="1"/><text x="41.7545%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="41.5045%" y="661" width="0.0649%" height="15" fill="rgb(224,170,48)" fg:x="640" fg:w="1"/><text x="41.7545%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="41.5045%" y="645" width="0.0649%" height="15" fill="rgb(223,117,5)" fg:x="640" fg:w="1"/><text x="41.7545%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="41.5045%" y="629" width="0.0649%" height="15" fill="rgb(209,52,20)" fg:x="640" fg:w="1"/><text x="41.7545%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.5045%" y="613" width="0.0649%" height="15" fill="rgb(209,19,41)" fg:x="640" fg:w="1"/><text x="41.7545%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.5045%" y="597" width="0.0649%" height="15" fill="rgb(210,177,12)" fg:x="640" fg:w="1"/><text x="41.7545%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.5045%" y="581" width="0.0649%" height="15" fill="rgb(211,159,37)" fg:x="640" fg:w="1"/><text x="41.7545%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.5694%" y="869" width="0.0649%" height="15" fill="rgb(209,20,2)" fg:x="641" fg:w="1"/><text x="41.8194%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.5694%" y="853" width="0.0649%" height="15" fill="rgb(244,3,46)" fg:x="641" fg:w="1"/><text x="41.8194%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.5694%" y="837" width="0.0649%" height="15" fill="rgb(220,94,38)" fg:x="641" fg:w="1"/><text x="41.8194%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="41.6342%" y="869" width="0.1297%" height="15" fill="rgb(253,14,31)" fg:x="642" fg:w="2"/><text x="41.8842%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="41.6342%" y="853" width="0.1297%" height="15" fill="rgb(234,176,13)" fg:x="642" fg:w="2"/><text x="41.8842%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="41.6342%" y="837" width="0.1297%" height="15" fill="rgb(218,62,25)" fg:x="642" fg:w="2"/><text x="41.8842%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="41.6342%" y="821" width="0.1297%" height="15" fill="rgb(216,124,40)" fg:x="642" fg:w="2"/><text x="41.8842%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.7639%" y="853" width="0.0649%" height="15" fill="rgb(228,170,12)" fg:x="644" fg:w="1"/><text x="42.0139%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.7639%" y="837" width="0.0649%" height="15" fill="rgb(231,226,5)" fg:x="644" fg:w="1"/><text x="42.0139%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.7639%" y="821" width="0.0649%" height="15" fill="rgb(237,122,22)" fg:x="644" fg:w="1"/><text x="42.0139%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (2 samples, 0.13%)</title><rect x="41.7639%" y="869" width="0.1297%" height="15" fill="rgb(209,185,25)" fg:x="644" fg:w="2"/><text x="42.0139%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="41.8288%" y="853" width="0.0649%" height="15" fill="rgb(228,200,32)" fg:x="645" fg:w="1"/><text x="42.0788%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::num_pairs (1 samples, 0.06%)</title><rect x="41.8288%" y="837" width="0.0649%" height="15" fill="rgb(217,140,10)" fg:x="645" fg:w="1"/><text x="42.0788%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.8288%" y="821" width="0.0649%" height="15" fill="rgb(253,17,24)" fg:x="645" fg:w="1"/><text x="42.0788%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.8288%" y="805" width="0.0649%" height="15" fill="rgb(212,61,6)" fg:x="645" fg:w="1"/><text x="42.0788%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.8288%" y="789" width="0.0649%" height="15" fill="rgb(205,14,25)" fg:x="645" fg:w="1"/><text x="42.0788%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="41.8936%" y="869" width="0.0649%" height="15" fill="rgb(232,69,41)" fg:x="646" fg:w="1"/><text x="42.1436%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.8936%" y="853" width="0.0649%" height="15" fill="rgb(241,106,47)" fg:x="646" fg:w="1"/><text x="42.1436%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.8936%" y="837" width="0.0649%" height="15" fill="rgb(210,213,53)" fg:x="646" fg:w="1"/><text x="42.1436%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.8936%" y="821" width="0.0649%" height="15" fill="rgb(253,175,27)" fg:x="646" fg:w="1"/><text x="42.1436%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="41.9585%" y="853" width="0.0649%" height="15" fill="rgb(211,171,24)" fg:x="647" fg:w="1"/><text x="42.2085%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="41.9585%" y="837" width="0.0649%" height="15" fill="rgb(229,80,7)" fg:x="647" fg:w="1"/><text x="42.2085%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="41.9585%" y="821" width="0.0649%" height="15" fill="rgb(212,46,39)" fg:x="647" fg:w="1"/><text x="42.2085%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.0233%" y="837" width="0.0649%" height="15" fill="rgb(240,80,45)" fg:x="648" fg:w="1"/><text x="42.2733%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.0233%" y="821" width="0.0649%" height="15" fill="rgb(253,177,40)" fg:x="648" fg:w="1"/><text x="42.2733%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.0233%" y="805" width="0.0649%" height="15" fill="rgb(249,200,15)" fg:x="648" fg:w="1"/><text x="42.2733%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry (11 samples, 0.71%)</title><rect x="41.5694%" y="885" width="0.7134%" height="15" fill="rgb(217,78,26)" fg:x="641" fg:w="11"/><text x="41.8194%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (5 samples, 0.32%)</title><rect x="41.9585%" y="869" width="0.3243%" height="15" fill="rgb(254,151,32)" fg:x="647" fg:w="5"/><text x="42.2085%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (4 samples, 0.26%)</title><rect x="42.0233%" y="853" width="0.2594%" height="15" fill="rgb(226,165,27)" fg:x="648" fg:w="4"/><text x="42.2733%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (3 samples, 0.19%)</title><rect x="42.0882%" y="837" width="0.1946%" height="15" fill="rgb(250,206,4)" fg:x="649" fg:w="3"/><text x="42.3382%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="42.0882%" y="821" width="0.1946%" height="15" fill="rgb(231,229,27)" fg:x="649" fg:w="3"/><text x="42.3382%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="42.0882%" y="805" width="0.1946%" height="15" fill="rgb(239,217,8)" fg:x="649" fg:w="3"/><text x="42.3382%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="42.0882%" y="789" width="0.1946%" height="15" fill="rgb(225,204,27)" fg:x="649" fg:w="3"/><text x="42.3382%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.2827%" y="773" width="0.0649%" height="15" fill="rgb(230,56,32)" fg:x="652" fg:w="1"/><text x="42.5327%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.2827%" y="757" width="0.0649%" height="15" fill="rgb(222,56,27)" fg:x="652" fg:w="1"/><text x="42.5327%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.2827%" y="741" width="0.0649%" height="15" fill="rgb(253,108,27)" fg:x="652" fg:w="1"/><text x="42.5327%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.3476%" y="597" width="0.0649%" height="15" fill="rgb(212,87,36)" fg:x="653" fg:w="1"/><text x="42.5976%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.3476%" y="581" width="0.0649%" height="15" fill="rgb(247,82,36)" fg:x="653" fg:w="1"/><text x="42.5976%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.3476%" y="565" width="0.0649%" height="15" fill="rgb(222,143,9)" fg:x="653" fg:w="1"/><text x="42.5976%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.4125%" y="501" width="0.0649%" height="15" fill="rgb(238,162,48)" fg:x="654" fg:w="1"/><text x="42.6625%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.4125%" y="485" width="0.0649%" height="15" fill="rgb(221,59,43)" fg:x="654" fg:w="1"/><text x="42.6625%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.4125%" y="469" width="0.0649%" height="15" fill="rgb(205,166,41)" fg:x="654" fg:w="1"/><text x="42.6625%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="42.4125%" y="549" width="0.1297%" height="15" fill="rgb(241,186,40)" fg:x="654" fg:w="2"/><text x="42.6625%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="42.4125%" y="533" width="0.1297%" height="15" fill="rgb(216,119,35)" fg:x="654" fg:w="2"/><text x="42.6625%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="42.4125%" y="517" width="0.1297%" height="15" fill="rgb(208,68,38)" fg:x="654" fg:w="2"/><text x="42.6625%" y="527.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="42.4773%" y="501" width="0.0649%" height="15" fill="rgb(217,113,1)" fg:x="655" fg:w="1"/><text x="42.7273%" y="511.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="42.4773%" y="485" width="0.0649%" height="15" fill="rgb(242,153,3)" fg:x="655" fg:w="1"/><text x="42.7273%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="42.4773%" y="469" width="0.0649%" height="15" fill="rgb(229,76,35)" fg:x="655" fg:w="1"/><text x="42.7273%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.06%)</title><rect x="42.4773%" y="453" width="0.0649%" height="15" fill="rgb(229,125,34)" fg:x="655" fg:w="1"/><text x="42.7273%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.4773%" y="437" width="0.0649%" height="15" fill="rgb(238,179,36)" fg:x="655" fg:w="1"/><text x="42.7273%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.4773%" y="421" width="0.0649%" height="15" fill="rgb(244,183,19)" fg:x="655" fg:w="1"/><text x="42.7273%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.4773%" y="405" width="0.0649%" height="15" fill="rgb(216,85,49)" fg:x="655" fg:w="1"/><text x="42.7273%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4 samples, 0.26%)</title><rect x="42.4125%" y="565" width="0.2594%" height="15" fill="rgb(208,161,47)" fg:x="654" fg:w="4"/><text x="42.6625%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="42.5422%" y="549" width="0.1297%" height="15" fill="rgb(233,210,18)" fg:x="656" fg:w="2"/><text x="42.7922%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="42.5422%" y="533" width="0.1297%" height="15" fill="rgb(205,104,42)" fg:x="656" fg:w="2"/><text x="42.7922%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="42.5422%" y="517" width="0.1297%" height="15" fill="rgb(248,90,43)" fg:x="656" fg:w="2"/><text x="42.7922%" y="527.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="42.5422%" y="501" width="0.1297%" height="15" fill="rgb(206,198,11)" fg:x="656" fg:w="2"/><text x="42.7922%" y="511.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="42.5422%" y="485" width="0.1297%" height="15" fill="rgb(239,165,27)" fg:x="656" fg:w="2"/><text x="42.7922%" y="495.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="42.5422%" y="469" width="0.1297%" height="15" fill="rgb(246,44,32)" fg:x="656" fg:w="2"/><text x="42.7922%" y="479.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="42.5422%" y="453" width="0.1297%" height="15" fill="rgb(252,65,42)" fg:x="656" fg:w="2"/><text x="42.7922%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="42.5422%" y="437" width="0.1297%" height="15" fill="rgb(246,197,18)" fg:x="656" fg:w="2"/><text x="42.7922%" y="447.50"></text></g><g><title>core::fmt::Arguments::new_const (2 samples, 0.13%)</title><rect x="42.5422%" y="421" width="0.1297%" height="15" fill="rgb(216,192,4)" fg:x="656" fg:w="2"/><text x="42.7922%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="42.5422%" y="405" width="0.1297%" height="15" fill="rgb(208,117,10)" fg:x="656" fg:w="2"/><text x="42.7922%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="42.5422%" y="389" width="0.1297%" height="15" fill="rgb(240,61,47)" fg:x="656" fg:w="2"/><text x="42.7922%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="42.5422%" y="373" width="0.1297%" height="15" fill="rgb(228,178,21)" fg:x="656" fg:w="2"/><text x="42.7922%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (6 samples, 0.39%)</title><rect x="42.3476%" y="661" width="0.3891%" height="15" fill="rgb(219,96,54)" fg:x="653" fg:w="6"/><text x="42.5976%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (6 samples, 0.39%)</title><rect x="42.3476%" y="645" width="0.3891%" height="15" fill="rgb(250,177,24)" fg:x="653" fg:w="6"/><text x="42.5976%" y="655.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (6 samples, 0.39%)</title><rect x="42.3476%" y="629" width="0.3891%" height="15" fill="rgb(242,154,46)" fg:x="653" fg:w="6"/><text x="42.5976%" y="639.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (6 samples, 0.39%)</title><rect x="42.3476%" y="613" width="0.3891%" height="15" fill="rgb(226,176,29)" fg:x="653" fg:w="6"/><text x="42.5976%" y="623.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (5 samples, 0.32%)</title><rect x="42.4125%" y="597" width="0.3243%" height="15" fill="rgb(226,29,2)" fg:x="654" fg:w="5"/><text x="42.6625%" y="607.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (5 samples, 0.32%)</title><rect x="42.4125%" y="581" width="0.3243%" height="15" fill="rgb(237,104,14)" fg:x="654" fg:w="5"/><text x="42.6625%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="42.6719%" y="565" width="0.0649%" height="15" fill="rgb(245,207,31)" fg:x="658" fg:w="1"/><text x="42.9219%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.6719%" y="549" width="0.0649%" height="15" fill="rgb(229,211,45)" fg:x="658" fg:w="1"/><text x="42.9219%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.6719%" y="533" width="0.0649%" height="15" fill="rgb(229,113,15)" fg:x="658" fg:w="1"/><text x="42.9219%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.6719%" y="517" width="0.0649%" height="15" fill="rgb(237,147,15)" fg:x="658" fg:w="1"/><text x="42.9219%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="42.7367%" y="597" width="0.0649%" height="15" fill="rgb(244,120,12)" fg:x="659" fg:w="1"/><text x="42.9867%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.7367%" y="581" width="0.0649%" height="15" fill="rgb(205,120,12)" fg:x="659" fg:w="1"/><text x="42.9867%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.7367%" y="565" width="0.0649%" height="15" fill="rgb(231,26,45)" fg:x="659" fg:w="1"/><text x="42.9867%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.7367%" y="549" width="0.0649%" height="15" fill="rgb(246,98,1)" fg:x="659" fg:w="1"/><text x="42.9867%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.8016%" y="597" width="0.0649%" height="15" fill="rgb(207,68,45)" fg:x="660" fg:w="1"/><text x="43.0516%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.8016%" y="581" width="0.0649%" height="15" fill="rgb(231,27,38)" fg:x="660" fg:w="1"/><text x="43.0516%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.8016%" y="565" width="0.0649%" height="15" fill="rgb(214,223,3)" fg:x="660" fg:w="1"/><text x="43.0516%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.8664%" y="549" width="0.0649%" height="15" fill="rgb(228,195,46)" fg:x="661" fg:w="1"/><text x="43.1164%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.8664%" y="533" width="0.0649%" height="15" fill="rgb(231,100,42)" fg:x="661" fg:w="1"/><text x="43.1164%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.8664%" y="517" width="0.0649%" height="15" fill="rgb(236,53,4)" fg:x="661" fg:w="1"/><text x="43.1164%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="42.9313%" y="469" width="0.0649%" height="15" fill="rgb(230,152,12)" fg:x="662" fg:w="1"/><text x="43.1813%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="42.9313%" y="453" width="0.0649%" height="15" fill="rgb(226,101,19)" fg:x="662" fg:w="1"/><text x="43.1813%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="42.9313%" y="437" width="0.0649%" height="15" fill="rgb(250,149,32)" fg:x="662" fg:w="1"/><text x="43.1813%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="42.9313%" y="421" width="0.0649%" height="15" fill="rgb(232,178,12)" fg:x="662" fg:w="1"/><text x="43.1813%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="42.9313%" y="405" width="0.0649%" height="15" fill="rgb(246,151,17)" fg:x="662" fg:w="1"/><text x="43.1813%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.06%)</title><rect x="42.9313%" y="389" width="0.0649%" height="15" fill="rgb(252,17,51)" fg:x="662" fg:w="1"/><text x="43.1813%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.9313%" y="373" width="0.0649%" height="15" fill="rgb(250,207,23)" fg:x="662" fg:w="1"/><text x="43.1813%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.9313%" y="357" width="0.0649%" height="15" fill="rgb(205,27,5)" fg:x="662" fg:w="1"/><text x="43.1813%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.9313%" y="341" width="0.0649%" height="15" fill="rgb(224,32,19)" fg:x="662" fg:w="1"/><text x="43.1813%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="42.9313%" y="549" width="0.1297%" height="15" fill="rgb(247,214,40)" fg:x="662" fg:w="2"/><text x="43.1813%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="42.9313%" y="533" width="0.1297%" height="15" fill="rgb(239,199,17)" fg:x="662" fg:w="2"/><text x="43.1813%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="42.9313%" y="517" width="0.1297%" height="15" fill="rgb(251,159,9)" fg:x="662" fg:w="2"/><text x="43.1813%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="42.9313%" y="501" width="0.1297%" height="15" fill="rgb(225,78,32)" fg:x="662" fg:w="2"/><text x="43.1813%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="42.9313%" y="485" width="0.1297%" height="15" fill="rgb(206,97,47)" fg:x="662" fg:w="2"/><text x="43.1813%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="42.9961%" y="469" width="0.0649%" height="15" fill="rgb(227,107,4)" fg:x="663" fg:w="1"/><text x="43.2461%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="42.9961%" y="453" width="0.0649%" height="15" fill="rgb(241,146,50)" fg:x="663" fg:w="1"/><text x="43.2461%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="42.9961%" y="437" width="0.0649%" height="15" fill="rgb(232,92,30)" fg:x="663" fg:w="1"/><text x="43.2461%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="43.0610%" y="501" width="0.1297%" height="15" fill="rgb(222,0,40)" fg:x="664" fg:w="2"/><text x="43.3110%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="43.0610%" y="485" width="0.1297%" height="15" fill="rgb(219,54,33)" fg:x="664" fg:w="2"/><text x="43.3110%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="43.0610%" y="469" width="0.1297%" height="15" fill="rgb(226,209,28)" fg:x="664" fg:w="2"/><text x="43.3110%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.1907%" y="485" width="0.0649%" height="15" fill="rgb(254,205,35)" fg:x="666" fg:w="1"/><text x="43.4407%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.1907%" y="469" width="0.0649%" height="15" fill="rgb(230,159,3)" fg:x="666" fg:w="1"/><text x="43.4407%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.1907%" y="453" width="0.0649%" height="15" fill="rgb(232,190,24)" fg:x="666" fg:w="1"/><text x="43.4407%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.2555%" y="325" width="0.0649%" height="15" fill="rgb(217,227,44)" fg:x="667" fg:w="1"/><text x="43.5055%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.2555%" y="309" width="0.0649%" height="15" fill="rgb(236,211,1)" fg:x="667" fg:w="1"/><text x="43.5055%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.2555%" y="293" width="0.0649%" height="15" fill="rgb(250,127,46)" fg:x="667" fg:w="1"/><text x="43.5055%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="43.3204%" y="325" width="0.1297%" height="15" fill="rgb(229,213,6)" fg:x="668" fg:w="2"/><text x="43.5704%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="43.3204%" y="309" width="0.1297%" height="15" fill="rgb(237,15,36)" fg:x="668" fg:w="2"/><text x="43.5704%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="43.3204%" y="293" width="0.1297%" height="15" fill="rgb(213,131,41)" fg:x="668" fg:w="2"/><text x="43.5704%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="43.3204%" y="277" width="0.1297%" height="15" fill="rgb(225,82,44)" fg:x="668" fg:w="2"/><text x="43.5704%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="43.3204%" y="261" width="0.1297%" height="15" fill="rgb(249,42,11)" fg:x="668" fg:w="2"/><text x="43.5704%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="43.3204%" y="245" width="0.1297%" height="15" fill="rgb(253,11,29)" fg:x="668" fg:w="2"/><text x="43.5704%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (5 samples, 0.32%)</title><rect x="43.2555%" y="437" width="0.3243%" height="15" fill="rgb(206,8,54)" fg:x="667" fg:w="5"/><text x="43.5055%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="43.2555%" y="421" width="0.3243%" height="15" fill="rgb(222,186,2)" fg:x="667" fg:w="5"/><text x="43.5055%" y="431.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="43.2555%" y="405" width="0.3243%" height="15" fill="rgb(221,206,53)" fg:x="667" fg:w="5"/><text x="43.5055%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (5 samples, 0.32%)</title><rect x="43.2555%" y="389" width="0.3243%" height="15" fill="rgb(230,150,21)" fg:x="667" fg:w="5"/><text x="43.5055%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (5 samples, 0.32%)</title><rect x="43.2555%" y="373" width="0.3243%" height="15" fill="rgb(253,202,10)" fg:x="667" fg:w="5"/><text x="43.5055%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (5 samples, 0.32%)</title><rect x="43.2555%" y="357" width="0.3243%" height="15" fill="rgb(238,109,40)" fg:x="667" fg:w="5"/><text x="43.5055%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (5 samples, 0.32%)</title><rect x="43.2555%" y="341" width="0.3243%" height="15" fill="rgb(247,120,22)" fg:x="667" fg:w="5"/><text x="43.5055%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="43.4501%" y="325" width="0.1297%" height="15" fill="rgb(207,43,30)" fg:x="670" fg:w="2"/><text x="43.7001%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="43.4501%" y="309" width="0.1297%" height="15" fill="rgb(213,211,24)" fg:x="670" fg:w="2"/><text x="43.7001%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="43.4501%" y="293" width="0.1297%" height="15" fill="rgb(239,73,39)" fg:x="670" fg:w="2"/><text x="43.7001%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="43.4501%" y="277" width="0.1297%" height="15" fill="rgb(245,182,19)" fg:x="670" fg:w="2"/><text x="43.7001%" y="287.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="43.4501%" y="261" width="0.1297%" height="15" fill="rgb(247,143,26)" fg:x="670" fg:w="2"/><text x="43.7001%" y="271.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (2 samples, 0.13%)</title><rect x="43.4501%" y="245" width="0.1297%" height="15" fill="rgb(228,191,23)" fg:x="670" fg:w="2"/><text x="43.7001%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="43.4501%" y="229" width="0.1297%" height="15" fill="rgb(253,165,31)" fg:x="670" fg:w="2"/><text x="43.7001%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="43.4501%" y="213" width="0.1297%" height="15" fill="rgb(234,138,20)" fg:x="670" fg:w="2"/><text x="43.7001%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="43.4501%" y="197" width="0.1297%" height="15" fill="rgb(218,191,29)" fg:x="670" fg:w="2"/><text x="43.7001%" y="207.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="43.5798%" y="245" width="0.0649%" height="15" fill="rgb(221,157,19)" fg:x="672" fg:w="1"/><text x="43.8298%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="43.5798%" y="229" width="0.0649%" height="15" fill="rgb(237,26,42)" fg:x="672" fg:w="1"/><text x="43.8298%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="43.5798%" y="213" width="0.0649%" height="15" fill="rgb(220,163,24)" fg:x="672" fg:w="1"/><text x="43.8298%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="43.5798%" y="197" width="0.0649%" height="15" fill="rgb(242,115,20)" fg:x="672" fg:w="1"/><text x="43.8298%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="43.5798%" y="181" width="0.0649%" height="15" fill="rgb(210,206,9)" fg:x="672" fg:w="1"/><text x="43.8298%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="43.5798%" y="165" width="0.0649%" height="15" fill="rgb(208,71,17)" fg:x="672" fg:w="1"/><text x="43.8298%" y="175.50"></text></g><g><title>core::fmt::Arguments::new_const (1 samples, 0.06%)</title><rect x="43.5798%" y="149" width="0.0649%" height="15" fill="rgb(233,7,5)" fg:x="672" fg:w="1"/><text x="43.8298%" y="159.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.5798%" y="133" width="0.0649%" height="15" fill="rgb(207,92,33)" fg:x="672" fg:w="1"/><text x="43.8298%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.5798%" y="117" width="0.0649%" height="15" fill="rgb(218,87,9)" fg:x="672" fg:w="1"/><text x="43.8298%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.5798%" y="101" width="0.0649%" height="15" fill="rgb(219,47,37)" fg:x="672" fg:w="1"/><text x="43.8298%" y="111.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="43.6446%" y="165" width="0.0649%" height="15" fill="rgb(221,152,34)" fg:x="673" fg:w="1"/><text x="43.8946%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="43.6446%" y="149" width="0.0649%" height="15" fill="rgb(235,176,21)" fg:x="673" fg:w="1"/><text x="43.8946%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="43.6446%" y="133" width="0.0649%" height="15" fill="rgb(232,212,21)" fg:x="673" fg:w="1"/><text x="43.8946%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="43.6446%" y="117" width="0.0649%" height="15" fill="rgb(245,82,39)" fg:x="673" fg:w="1"/><text x="43.8946%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="43.6446%" y="101" width="0.0649%" height="15" fill="rgb(241,52,51)" fg:x="673" fg:w="1"/><text x="43.8946%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.6446%" y="85" width="0.0649%" height="15" fill="rgb(219,91,24)" fg:x="673" fg:w="1"/><text x="43.8946%" y="95.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.6446%" y="69" width="0.0649%" height="15" fill="rgb(241,142,12)" fg:x="673" fg:w="1"/><text x="43.8946%" y="79.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.6446%" y="53" width="0.0649%" height="15" fill="rgb(230,27,9)" fg:x="673" fg:w="1"/><text x="43.8946%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="43.6446%" y="213" width="0.1297%" height="15" fill="rgb(249,181,32)" fg:x="673" fg:w="2"/><text x="43.8946%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="43.6446%" y="197" width="0.1297%" height="15" fill="rgb(230,107,3)" fg:x="673" fg:w="2"/><text x="43.8946%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="43.6446%" y="181" width="0.1297%" height="15" fill="rgb(246,204,14)" fg:x="673" fg:w="2"/><text x="43.8946%" y="191.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="43.7095%" y="165" width="0.0649%" height="15" fill="rgb(213,192,47)" fg:x="674" fg:w="1"/><text x="43.9595%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="43.7095%" y="149" width="0.0649%" height="15" fill="rgb(240,44,36)" fg:x="674" fg:w="1"/><text x="43.9595%" y="159.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.7095%" y="133" width="0.0649%" height="15" fill="rgb(244,209,38)" fg:x="674" fg:w="1"/><text x="43.9595%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.7095%" y="117" width="0.0649%" height="15" fill="rgb(219,34,37)" fg:x="674" fg:w="1"/><text x="43.9595%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.7095%" y="101" width="0.0649%" height="15" fill="rgb(210,28,6)" fg:x="674" fg:w="1"/><text x="43.9595%" y="111.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="43.7743%" y="133" width="0.0649%" height="15" fill="rgb(244,110,52)" fg:x="675" fg:w="1"/><text x="44.0243%" y="143.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.7743%" y="117" width="0.0649%" height="15" fill="rgb(254,124,47)" fg:x="675" fg:w="1"/><text x="44.0243%" y="127.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.7743%" y="101" width="0.0649%" height="15" fill="rgb(254,110,13)" fg:x="675" fg:w="1"/><text x="44.0243%" y="111.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.7743%" y="85" width="0.0649%" height="15" fill="rgb(252,57,21)" fg:x="675" fg:w="1"/><text x="44.0243%" y="95.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (5 samples, 0.32%)</title><rect x="43.5798%" y="261" width="0.3243%" height="15" fill="rgb(242,60,45)" fg:x="672" fg:w="5"/><text x="43.8298%" y="271.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (4 samples, 0.26%)</title><rect x="43.6446%" y="245" width="0.2594%" height="15" fill="rgb(234,49,30)" fg:x="673" fg:w="4"/><text x="43.8946%" y="255.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4 samples, 0.26%)</title><rect x="43.6446%" y="229" width="0.2594%" height="15" fill="rgb(218,98,6)" fg:x="673" fg:w="4"/><text x="43.8946%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="43.7743%" y="213" width="0.1297%" height="15" fill="rgb(220,174,29)" fg:x="675" fg:w="2"/><text x="44.0243%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="43.7743%" y="197" width="0.1297%" height="15" fill="rgb(236,163,23)" fg:x="675" fg:w="2"/><text x="44.0243%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="43.7743%" y="181" width="0.1297%" height="15" fill="rgb(242,114,45)" fg:x="675" fg:w="2"/><text x="44.0243%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="43.7743%" y="165" width="0.1297%" height="15" fill="rgb(232,10,53)" fg:x="675" fg:w="2"/><text x="44.0243%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="43.7743%" y="149" width="0.1297%" height="15" fill="rgb(245,108,29)" fg:x="675" fg:w="2"/><text x="44.0243%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="43.8392%" y="133" width="0.0649%" height="15" fill="rgb(240,89,53)" fg:x="676" fg:w="1"/><text x="44.0892%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="43.8392%" y="117" width="0.0649%" height="15" fill="rgb(226,60,45)" fg:x="676" fg:w="1"/><text x="44.0892%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="43.8392%" y="101" width="0.0649%" height="15" fill="rgb(230,41,44)" fg:x="676" fg:w="1"/><text x="44.0892%" y="111.50"></text></g><g><title>core::fmt::Arguments::new_const (1 samples, 0.06%)</title><rect x="43.8392%" y="85" width="0.0649%" height="15" fill="rgb(230,26,20)" fg:x="676" fg:w="1"/><text x="44.0892%" y="95.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.8392%" y="69" width="0.0649%" height="15" fill="rgb(237,170,32)" fg:x="676" fg:w="1"/><text x="44.0892%" y="79.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.8392%" y="53" width="0.0649%" height="15" fill="rgb(212,35,42)" fg:x="676" fg:w="1"/><text x="44.0892%" y="63.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.8392%" y="37" width="0.0649%" height="15" fill="rgb(227,31,34)" fg:x="676" fg:w="1"/><text x="44.0892%" y="47.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="43.2555%" y="453" width="0.7134%" height="15" fill="rgb(216,19,18)" fg:x="667" fg:w="11"/><text x="43.5055%" y="463.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="43.5798%" y="437" width="0.3891%" height="15" fill="rgb(211,133,42)" fg:x="672" fg:w="6"/><text x="43.8298%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="43.5798%" y="421" width="0.3891%" height="15" fill="rgb(244,66,13)" fg:x="672" fg:w="6"/><text x="43.8298%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="43.5798%" y="405" width="0.3891%" height="15" fill="rgb(218,185,50)" fg:x="672" fg:w="6"/><text x="43.8298%" y="415.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.39%)</title><rect x="43.5798%" y="389" width="0.3891%" height="15" fill="rgb(219,149,13)" fg:x="672" fg:w="6"/><text x="43.8298%" y="399.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="43.5798%" y="373" width="0.3891%" height="15" fill="rgb(221,125,0)" fg:x="672" fg:w="6"/><text x="43.8298%" y="383.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="43.5798%" y="357" width="0.3891%" height="15" fill="rgb(247,126,27)" fg:x="672" fg:w="6"/><text x="43.8298%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="43.5798%" y="341" width="0.3891%" height="15" fill="rgb(250,138,30)" fg:x="672" fg:w="6"/><text x="43.8298%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (6 samples, 0.39%)</title><rect x="43.5798%" y="325" width="0.3891%" height="15" fill="rgb(230,151,9)" fg:x="672" fg:w="6"/><text x="43.8298%" y="335.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (6 samples, 0.39%)</title><rect x="43.5798%" y="309" width="0.3891%" height="15" fill="rgb(233,80,38)" fg:x="672" fg:w="6"/><text x="43.8298%" y="319.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (6 samples, 0.39%)</title><rect x="43.5798%" y="293" width="0.3891%" height="15" fill="rgb(232,68,43)" fg:x="672" fg:w="6"/><text x="43.8298%" y="303.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (6 samples, 0.39%)</title><rect x="43.5798%" y="277" width="0.3891%" height="15" fill="rgb(254,5,50)" fg:x="672" fg:w="6"/><text x="43.8298%" y="287.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="43.9040%" y="261" width="0.0649%" height="15" fill="rgb(225,45,5)" fg:x="677" fg:w="1"/><text x="44.1540%" y="271.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="43.9040%" y="245" width="0.0649%" height="15" fill="rgb(239,22,3)" fg:x="677" fg:w="1"/><text x="44.1540%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.9040%" y="229" width="0.0649%" height="15" fill="rgb(243,129,0)" fg:x="677" fg:w="1"/><text x="44.1540%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.9040%" y="213" width="0.0649%" height="15" fill="rgb(223,164,0)" fg:x="677" fg:w="1"/><text x="44.1540%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.9040%" y="197" width="0.0649%" height="15" fill="rgb(221,46,29)" fg:x="677" fg:w="1"/><text x="44.1540%" y="207.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (27 samples, 1.75%)</title><rect x="42.2827%" y="869" width="1.7510%" height="15" fill="rgb(205,97,47)" fg:x="652" fg:w="27"/><text x="42.5327%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (27 samples, 1.75%)</title><rect x="42.2827%" y="853" width="1.7510%" height="15" fill="rgb(249,14,8)" fg:x="652" fg:w="27"/><text x="42.5327%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (27 samples, 1.75%)</title><rect x="42.2827%" y="837" width="1.7510%" height="15" fill="rgb(216,77,3)" fg:x="652" fg:w="27"/><text x="42.5327%" y="847.50"></text></g><g><title>bincode::internal::deserialize (27 samples, 1.75%)</title><rect x="42.2827%" y="821" width="1.7510%" height="15" fill="rgb(206,168,54)" fg:x="652" fg:w="27"/><text x="42.5327%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (27 samples, 1.75%)</title><rect x="42.2827%" y="805" width="1.7510%" height="15" fill="rgb(236,3,41)" fg:x="652" fg:w="27"/><text x="42.5327%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (27 samples, 1.75%)</title><rect x="42.2827%" y="789" width="1.7510%" height="15" fill="rgb(231,132,24)" fg:x="652" fg:w="27"/><text x="42.5327%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (26 samples, 1.69%)</title><rect x="42.3476%" y="773" width="1.6861%" height="15" fill="rgb(227,221,40)" fg:x="653" fg:w="26"/><text x="42.5976%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (26 samples, 1.69%)</title><rect x="42.3476%" y="757" width="1.6861%" height="15" fill="rgb(233,151,11)" fg:x="653" fg:w="26"/><text x="42.5976%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (26 samples, 1.69%)</title><rect x="42.3476%" y="741" width="1.6861%" height="15" fill="rgb(247,81,35)" fg:x="653" fg:w="26"/><text x="42.5976%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (26 samples, 1.69%)</title><rect x="42.3476%" y="725" width="1.6861%" height="15" fill="rgb(243,128,48)" fg:x="653" fg:w="26"/><text x="42.5976%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (26 samples, 1.69%)</title><rect x="42.3476%" y="709" width="1.6861%" height="15" fill="rgb(253,16,10)" fg:x="653" fg:w="26"/><text x="42.5976%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (26 samples, 1.69%)</title><rect x="42.3476%" y="693" width="1.6861%" height="15" fill="rgb(228,67,27)" fg:x="653" fg:w="26"/><text x="42.5976%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (26 samples, 1.69%)</title><rect x="42.3476%" y="677" width="1.6861%" height="15" fill="rgb(231,105,25)" fg:x="653" fg:w="26"/><text x="42.5976%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (20 samples, 1.30%)</title><rect x="42.7367%" y="661" width="1.2970%" height="15" fill="rgb(213,166,47)" fg:x="659" fg:w="20"/><text x="42.9867%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (20 samples, 1.30%)</title><rect x="42.7367%" y="645" width="1.2970%" height="15" fill="rgb(209,27,10)" fg:x="659" fg:w="20"/><text x="42.9867%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (20 samples, 1.30%)</title><rect x="42.7367%" y="629" width="1.2970%" height="15" fill="rgb(241,44,30)" fg:x="659" fg:w="20"/><text x="42.9867%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (20 samples, 1.30%)</title><rect x="42.7367%" y="613" width="1.2970%" height="15" fill="rgb(223,216,15)" fg:x="659" fg:w="20"/><text x="42.9867%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 1.17%)</title><rect x="42.8664%" y="597" width="1.1673%" height="15" fill="rgb(227,14,7)" fg:x="661" fg:w="18"/><text x="43.1164%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 1.17%)</title><rect x="42.8664%" y="581" width="1.1673%" height="15" fill="rgb(237,14,5)" fg:x="661" fg:w="18"/><text x="43.1164%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 1.17%)</title><rect x="42.8664%" y="565" width="1.1673%" height="15" fill="rgb(232,14,36)" fg:x="661" fg:w="18"/><text x="43.1164%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (15 samples, 0.97%)</title><rect x="43.0610%" y="549" width="0.9728%" height="15" fill="rgb(234,0,38)" fg:x="664" fg:w="15"/><text x="43.3110%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 0.97%)</title><rect x="43.0610%" y="533" width="0.9728%" height="15" fill="rgb(207,170,14)" fg:x="664" fg:w="15"/><text x="43.3110%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (15 samples, 0.97%)</title><rect x="43.0610%" y="517" width="0.9728%" height="15" fill="rgb(252,45,13)" fg:x="664" fg:w="15"/><text x="43.3110%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (13 samples, 0.84%)</title><rect x="43.1907%" y="501" width="0.8431%" height="15" fill="rgb(213,142,7)" fg:x="666" fg:w="13"/><text x="43.4407%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 0.78%)</title><rect x="43.2555%" y="485" width="0.7782%" height="15" fill="rgb(216,157,23)" fg:x="667" fg:w="12"/><text x="43.5055%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.78%)</title><rect x="43.2555%" y="469" width="0.7782%" height="15" fill="rgb(212,145,33)" fg:x="667" fg:w="12"/><text x="43.5055%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="43.9689%" y="453" width="0.0649%" height="15" fill="rgb(233,26,13)" fg:x="678" fg:w="1"/><text x="44.2189%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="43.9689%" y="437" width="0.0649%" height="15" fill="rgb(219,196,19)" fg:x="678" fg:w="1"/><text x="44.2189%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="43.9689%" y="421" width="0.0649%" height="15" fill="rgb(246,56,21)" fg:x="678" fg:w="1"/><text x="44.2189%" y="431.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="44.0337%" y="853" width="0.0649%" height="15" fill="rgb(222,28,53)" fg:x="679" fg:w="1"/><text x="44.2837%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.0337%" y="837" width="0.0649%" height="15" fill="rgb(224,5,27)" fg:x="679" fg:w="1"/><text x="44.2837%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.0337%" y="821" width="0.0649%" height="15" fill="rgb(220,153,33)" fg:x="679" fg:w="1"/><text x="44.2837%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.0337%" y="805" width="0.0649%" height="15" fill="rgb(226,58,19)" fg:x="679" fg:w="1"/><text x="44.2837%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (29 samples, 1.88%)</title><rect x="42.2827%" y="885" width="1.8807%" height="15" fill="rgb(239,112,23)" fg:x="652" fg:w="29"/><text x="42.5327%" y="895.50">r..</text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (2 samples, 0.13%)</title><rect x="44.0337%" y="869" width="0.1297%" height="15" fill="rgb(251,213,20)" fg:x="679" fg:w="2"/><text x="44.2837%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="44.0986%" y="853" width="0.0649%" height="15" fill="rgb(215,181,21)" fg:x="680" fg:w="1"/><text x="44.3486%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="44.0986%" y="837" width="0.0649%" height="15" fill="rgb(240,8,35)" fg:x="680" fg:w="1"/><text x="44.3486%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.0986%" y="821" width="0.0649%" height="15" fill="rgb(232,203,3)" fg:x="680" fg:w="1"/><text x="44.3486%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.0986%" y="805" width="0.0649%" height="15" fill="rgb(214,202,43)" fg:x="680" fg:w="1"/><text x="44.3486%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.0986%" y="789" width="0.0649%" height="15" fill="rgb(254,35,11)" fg:x="680" fg:w="1"/><text x="44.3486%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.1634%" y="853" width="0.0649%" height="15" fill="rgb(239,173,13)" fg:x="681" fg:w="1"/><text x="44.4134%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.1634%" y="837" width="0.0649%" height="15" fill="rgb(220,141,0)" fg:x="681" fg:w="1"/><text x="44.4134%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.1634%" y="821" width="0.0649%" height="15" fill="rgb(210,98,12)" fg:x="681" fg:w="1"/><text x="44.4134%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.2283%" y="805" width="0.0649%" height="15" fill="rgb(254,153,22)" fg:x="682" fg:w="1"/><text x="44.4783%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.2283%" y="789" width="0.0649%" height="15" fill="rgb(247,223,17)" fg:x="682" fg:w="1"/><text x="44.4783%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.2283%" y="773" width="0.0649%" height="15" fill="rgb(246,56,7)" fg:x="682" fg:w="1"/><text x="44.4783%" y="783.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="44.2931%" y="805" width="0.0649%" height="15" fill="rgb(240,226,12)" fg:x="683" fg:w="1"/><text x="44.5431%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="44.2931%" y="789" width="0.0649%" height="15" fill="rgb(205,87,46)" fg:x="683" fg:w="1"/><text x="44.5431%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="44.2931%" y="773" width="0.0649%" height="15" fill="rgb(245,214,51)" fg:x="683" fg:w="1"/><text x="44.5431%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="44.2931%" y="757" width="0.0649%" height="15" fill="rgb(223,172,33)" fg:x="683" fg:w="1"/><text x="44.5431%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="44.2931%" y="741" width="0.0649%" height="15" fill="rgb(227,203,34)" fg:x="683" fg:w="1"/><text x="44.5431%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.2931%" y="725" width="0.0649%" height="15" fill="rgb(248,143,44)" fg:x="683" fg:w="1"/><text x="44.5431%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.2931%" y="709" width="0.0649%" height="15" fill="rgb(226,162,5)" fg:x="683" fg:w="1"/><text x="44.5431%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.2931%" y="693" width="0.0649%" height="15" fill="rgb(211,143,1)" fg:x="683" fg:w="1"/><text x="44.5431%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.3580%" y="789" width="0.0649%" height="15" fill="rgb(224,96,15)" fg:x="684" fg:w="1"/><text x="44.6080%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.3580%" y="773" width="0.0649%" height="15" fill="rgb(222,4,38)" fg:x="684" fg:w="1"/><text x="44.6080%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.3580%" y="757" width="0.0649%" height="15" fill="rgb(253,228,15)" fg:x="684" fg:w="1"/><text x="44.6080%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.26%)</title><rect x="44.2283%" y="853" width="0.2594%" height="15" fill="rgb(242,194,12)" fg:x="682" fg:w="4"/><text x="44.4783%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.26%)</title><rect x="44.2283%" y="837" width="0.2594%" height="15" fill="rgb(214,177,31)" fg:x="682" fg:w="4"/><text x="44.4783%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.26%)</title><rect x="44.2283%" y="821" width="0.2594%" height="15" fill="rgb(226,58,51)" fg:x="682" fg:w="4"/><text x="44.4783%" y="831.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (2 samples, 0.13%)</title><rect x="44.3580%" y="805" width="0.1297%" height="15" fill="rgb(250,119,16)" fg:x="684" fg:w="2"/><text x="44.6080%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="44.4228%" y="789" width="0.0649%" height="15" fill="rgb(223,128,53)" fg:x="685" fg:w="1"/><text x="44.6728%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="44.4228%" y="773" width="0.0649%" height="15" fill="rgb(251,199,15)" fg:x="685" fg:w="1"/><text x="44.6728%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.4228%" y="757" width="0.0649%" height="15" fill="rgb(235,168,42)" fg:x="685" fg:w="1"/><text x="44.6728%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.4228%" y="741" width="0.0649%" height="15" fill="rgb(250,210,17)" fg:x="685" fg:w="1"/><text x="44.6728%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.4228%" y="725" width="0.0649%" height="15" fill="rgb(226,36,41)" fg:x="685" fg:w="1"/><text x="44.6728%" y="735.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_end (1 samples, 0.06%)</title><rect x="44.4877%" y="853" width="0.0649%" height="15" fill="rgb(225,87,10)" fg:x="686" fg:w="1"/><text x="44.7377%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="44.4877%" y="837" width="0.0649%" height="15" fill="rgb(228,83,9)" fg:x="686" fg:w="1"/><text x="44.7377%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.4877%" y="821" width="0.0649%" height="15" fill="rgb(225,16,36)" fg:x="686" fg:w="1"/><text x="44.7377%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.4877%" y="805" width="0.0649%" height="15" fill="rgb(242,198,13)" fg:x="686" fg:w="1"/><text x="44.7377%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.4877%" y="789" width="0.0649%" height="15" fill="rgb(239,25,51)" fg:x="686" fg:w="1"/><text x="44.7377%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_section_start (1 samples, 0.06%)</title><rect x="44.5525%" y="853" width="0.0649%" height="15" fill="rgb(239,28,37)" fg:x="687" fg:w="1"/><text x="44.8025%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.5525%" y="837" width="0.0649%" height="15" fill="rgb(234,70,17)" fg:x="687" fg:w="1"/><text x="44.8025%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.5525%" y="821" width="0.0649%" height="15" fill="rgb(231,215,53)" fg:x="687" fg:w="1"/><text x="44.8025%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.5525%" y="805" width="0.0649%" height="15" fill="rgb(218,140,42)" fg:x="687" fg:w="1"/><text x="44.8025%" y="815.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="44.6174%" y="837" width="0.0649%" height="15" fill="rgb(233,227,45)" fg:x="688" fg:w="1"/><text x="44.8674%" y="847.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="44.6174%" y="821" width="0.0649%" height="15" fill="rgb(225,189,21)" fg:x="688" fg:w="1"/><text x="44.8674%" y="831.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="44.6174%" y="805" width="0.0649%" height="15" fill="rgb(237,176,54)" fg:x="688" fg:w="1"/><text x="44.8674%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.6174%" y="789" width="0.0649%" height="15" fill="rgb(215,131,46)" fg:x="688" fg:w="1"/><text x="44.8674%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.6174%" y="773" width="0.0649%" height="15" fill="rgb(218,95,20)" fg:x="688" fg:w="1"/><text x="44.8674%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.6174%" y="757" width="0.0649%" height="15" fill="rgb(208,198,12)" fg:x="688" fg:w="1"/><text x="44.8674%" y="767.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (9 samples, 0.58%)</title><rect x="44.1634%" y="869" width="0.5837%" height="15" fill="rgb(239,107,50)" fg:x="681" fg:w="9"/><text x="44.4134%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::value_end (2 samples, 0.13%)</title><rect x="44.6174%" y="853" width="0.1297%" height="15" fill="rgb(240,217,37)" fg:x="688" fg:w="2"/><text x="44.8674%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="44.6822%" y="837" width="0.0649%" height="15" fill="rgb(242,197,49)" fg:x="689" fg:w="1"/><text x="44.9322%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.6822%" y="821" width="0.0649%" height="15" fill="rgb(219,171,17)" fg:x="689" fg:w="1"/><text x="44.9322%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.6822%" y="805" width="0.0649%" height="15" fill="rgb(209,81,40)" fg:x="689" fg:w="1"/><text x="44.9322%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.6822%" y="789" width="0.0649%" height="15" fill="rgb(237,156,30)" fg:x="689" fg:w="1"/><text x="44.9322%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::new (1 samples, 0.06%)</title><rect x="44.7471%" y="869" width="0.0649%" height="15" fill="rgb(212,127,16)" fg:x="690" fg:w="1"/><text x="44.9971%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="44.7471%" y="853" width="0.0649%" height="15" fill="rgb(226,66,32)" fg:x="690" fg:w="1"/><text x="44.9971%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="44.7471%" y="837" width="0.0649%" height="15" fill="rgb(245,22,46)" fg:x="690" fg:w="1"/><text x="44.9971%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="44.7471%" y="821" width="0.0649%" height="15" fill="rgb(210,112,21)" fg:x="690" fg:w="1"/><text x="44.9971%" y="831.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (5 samples, 0.32%)</title><rect x="44.8119%" y="789" width="0.3243%" height="15" fill="rgb(207,118,39)" fg:x="691" fg:w="5"/><text x="45.0619%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_mut (5 samples, 0.32%)</title><rect x="44.8119%" y="773" width="0.3243%" height="15" fill="rgb(205,206,35)" fg:x="691" fg:w="5"/><text x="45.0619%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5 samples, 0.32%)</title><rect x="44.8119%" y="757" width="0.3243%" height="15" fill="rgb(222,120,2)" fg:x="691" fg:w="5"/><text x="45.0619%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (5 samples, 0.32%)</title><rect x="44.8119%" y="741" width="0.3243%" height="15" fill="rgb(205,38,18)" fg:x="691" fg:w="5"/><text x="45.0619%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (5 samples, 0.32%)</title><rect x="44.8119%" y="725" width="0.3243%" height="15" fill="rgb(226,61,2)" fg:x="691" fg:w="5"/><text x="45.0619%" y="735.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.52%)</title><rect x="44.8119%" y="805" width="0.5188%" height="15" fill="rgb(242,161,23)" fg:x="691" fg:w="8"/><text x="45.0619%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="45.1362%" y="789" width="0.1946%" height="15" fill="rgb(213,13,52)" fg:x="696" fg:w="3"/><text x="45.3862%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="45.1362%" y="773" width="0.1946%" height="15" fill="rgb(246,209,47)" fg:x="696" fg:w="3"/><text x="45.3862%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="45.1362%" y="757" width="0.1946%" height="15" fill="rgb(214,41,3)" fg:x="696" fg:w="3"/><text x="45.3862%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (18 samples, 1.17%)</title><rect x="44.8119%" y="837" width="1.1673%" height="15" fill="rgb(236,119,38)" fg:x="691" fg:w="18"/><text x="45.0619%" y="847.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (18 samples, 1.17%)</title><rect x="44.8119%" y="821" width="1.1673%" height="15" fill="rgb(218,50,11)" fg:x="691" fg:w="18"/><text x="45.0619%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (10 samples, 0.65%)</title><rect x="45.3307%" y="805" width="0.6485%" height="15" fill="rgb(228,38,11)" fg:x="699" fg:w="10"/><text x="45.5807%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (10 samples, 0.65%)</title><rect x="45.3307%" y="789" width="0.6485%" height="15" fill="rgb(212,13,9)" fg:x="699" fg:w="10"/><text x="45.5807%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (10 samples, 0.65%)</title><rect x="45.3307%" y="773" width="0.6485%" height="15" fill="rgb(208,211,9)" fg:x="699" fg:w="10"/><text x="45.5807%" y="783.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.06%)</title><rect x="45.9792%" y="821" width="0.0649%" height="15" fill="rgb(239,39,32)" fg:x="709" fg:w="1"/><text x="46.2292%" y="831.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.06%)</title><rect x="45.9792%" y="805" width="0.0649%" height="15" fill="rgb(254,179,26)" fg:x="709" fg:w="1"/><text x="46.2292%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.06%)</title><rect x="45.9792%" y="789" width="0.0649%" height="15" fill="rgb(249,165,28)" fg:x="709" fg:w="1"/><text x="46.2292%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1 samples, 0.06%)</title><rect x="45.9792%" y="773" width="0.0649%" height="15" fill="rgb(225,59,50)" fg:x="709" fg:w="1"/><text x="46.2292%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="45.9792%" y="757" width="0.0649%" height="15" fill="rgb(209,122,5)" fg:x="709" fg:w="1"/><text x="46.2292%" y="767.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.06%)</title><rect x="45.9792%" y="741" width="0.0649%" height="15" fill="rgb(214,65,34)" fg:x="709" fg:w="1"/><text x="46.2292%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="45.9792%" y="725" width="0.0649%" height="15" fill="rgb(249,183,32)" fg:x="709" fg:w="1"/><text x="46.2292%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="45.9792%" y="709" width="0.0649%" height="15" fill="rgb(218,122,24)" fg:x="709" fg:w="1"/><text x="46.2292%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="45.9792%" y="693" width="0.0649%" height="15" fill="rgb(224,109,18)" fg:x="709" fg:w="1"/><text x="46.2292%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (1 samples, 0.06%)</title><rect x="46.0441%" y="757" width="0.0649%" height="15" fill="rgb(210,68,50)" fg:x="710" fg:w="1"/><text x="46.2941%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.06%)</title><rect x="46.0441%" y="741" width="0.0649%" height="15" fill="rgb(212,184,34)" fg:x="710" fg:w="1"/><text x="46.2941%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.06%)</title><rect x="46.0441%" y="725" width="0.0649%" height="15" fill="rgb(238,105,48)" fg:x="710" fg:w="1"/><text x="46.2941%" y="735.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="46.0441%" y="709" width="0.0649%" height="15" fill="rgb(222,134,54)" fg:x="710" fg:w="1"/><text x="46.2941%" y="719.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="46.0441%" y="693" width="0.0649%" height="15" fill="rgb(246,24,43)" fg:x="710" fg:w="1"/><text x="46.2941%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="46.0441%" y="677" width="0.0649%" height="15" fill="rgb(227,169,22)" fg:x="710" fg:w="1"/><text x="46.2941%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.0441%" y="661" width="0.0649%" height="15" fill="rgb(253,152,4)" fg:x="710" fg:w="1"/><text x="46.2941%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.0441%" y="645" width="0.0649%" height="15" fill="rgb(219,158,36)" fg:x="710" fg:w="1"/><text x="46.2941%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.0441%" y="629" width="0.0649%" height="15" fill="rgb(251,128,40)" fg:x="710" fg:w="1"/><text x="46.2941%" y="639.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (3 samples, 0.19%)</title><rect x="45.9792%" y="837" width="0.1946%" height="15" fill="rgb(254,101,39)" fg:x="709" fg:w="3"/><text x="46.2292%" y="847.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::insert (2 samples, 0.13%)</title><rect x="46.0441%" y="821" width="0.1297%" height="15" fill="rgb(221,168,40)" fg:x="710" fg:w="2"/><text x="46.2941%" y="831.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::insert (2 samples, 0.13%)</title><rect x="46.0441%" y="805" width="0.1297%" height="15" fill="rgb(221,14,27)" fg:x="710" fg:w="2"/><text x="46.2941%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.13%)</title><rect x="46.0441%" y="789" width="0.1297%" height="15" fill="rgb(207,36,43)" fg:x="710" fg:w="2"/><text x="46.2941%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.13%)</title><rect x="46.0441%" y="773" width="0.1297%" height="15" fill="rgb(240,172,53)" fg:x="710" fg:w="2"/><text x="46.2941%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="46.1089%" y="757" width="0.0649%" height="15" fill="rgb(241,138,43)" fg:x="711" fg:w="1"/><text x="46.3589%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="46.1089%" y="741" width="0.0649%" height="15" fill="rgb(227,78,19)" fg:x="711" fg:w="1"/><text x="46.3589%" y="751.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="46.1089%" y="725" width="0.0649%" height="15" fill="rgb(215,127,44)" fg:x="711" fg:w="1"/><text x="46.3589%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="46.1089%" y="709" width="0.0649%" height="15" fill="rgb(227,13,10)" fg:x="711" fg:w="1"/><text x="46.3589%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.1089%" y="693" width="0.0649%" height="15" fill="rgb(249,177,6)" fg:x="711" fg:w="1"/><text x="46.3589%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.1089%" y="677" width="0.0649%" height="15" fill="rgb(215,154,26)" fg:x="711" fg:w="1"/><text x="46.3589%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.1089%" y="661" width="0.0649%" height="15" fill="rgb(250,168,20)" fg:x="711" fg:w="1"/><text x="46.3589%" y="671.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper_retry (1 samples, 0.06%)</title><rect x="46.1738%" y="837" width="0.0649%" height="15" fill="rgb(222,53,38)" fg:x="712" fg:w="1"/><text x="46.4238%" y="847.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc (1 samples, 0.06%)</title><rect x="46.1738%" y="821" width="0.0649%" height="15" fill="rgb(245,154,5)" fg:x="712" fg:w="1"/><text x="46.4238%" y="831.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::alloc_inner (1 samples, 0.06%)</title><rect x="46.1738%" y="805" width="0.0649%" height="15" fill="rgb(214,89,50)" fg:x="712" fg:w="1"/><text x="46.4238%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::alloc (1 samples, 0.06%)</title><rect x="46.1738%" y="789" width="0.0649%" height="15" fill="rgb(232,73,14)" fg:x="712" fg:w="1"/><text x="46.4238%" y="799.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::find_first_unset (1 samples, 0.06%)</title><rect x="46.1738%" y="773" width="0.0649%" height="15" fill="rgb(230,101,20)" fg:x="712" fg:w="1"/><text x="46.4238%" y="783.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::first_unset (1 samples, 0.06%)</title><rect x="46.1738%" y="757" width="0.0649%" height="15" fill="rgb(208,56,28)" fg:x="712" fg:w="1"/><text x="46.4238%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.1738%" y="741" width="0.0649%" height="15" fill="rgb(247,205,22)" fg:x="712" fg:w="1"/><text x="46.4238%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.1738%" y="725" width="0.0649%" height="15" fill="rgb(252,109,51)" fg:x="712" fg:w="1"/><text x="46.4238%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.1738%" y="709" width="0.0649%" height="15" fill="rgb(220,40,24)" fg:x="712" fg:w="1"/><text x="46.4238%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (33 samples, 2.14%)</title><rect x="44.1634%" y="885" width="2.1401%" height="15" fill="rgb(251,108,7)" fg:x="681" fg:w="33"/><text x="44.4134%" y="895.50">r..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (23 samples, 1.49%)</title><rect x="44.8119%" y="869" width="1.4916%" height="15" fill="rgb(238,102,51)" fg:x="691" fg:w="23"/><text x="45.0619%" y="879.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (23 samples, 1.49%)</title><rect x="44.8119%" y="853" width="1.4916%" height="15" fill="rgb(219,149,34)" fg:x="691" fg:w="23"/><text x="45.0619%" y="863.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.06%)</title><rect x="46.2387%" y="837" width="0.0649%" height="15" fill="rgb(239,70,0)" fg:x="713" fg:w="1"/><text x="46.4887%" y="847.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="46.2387%" y="821" width="0.0649%" height="15" fill="rgb(246,214,23)" fg:x="713" fg:w="1"/><text x="46.4887%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="46.2387%" y="805" width="0.0649%" height="15" fill="rgb(239,221,51)" fg:x="713" fg:w="1"/><text x="46.4887%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (1 samples, 0.06%)</title><rect x="46.2387%" y="789" width="0.0649%" height="15" fill="rgb(254,62,14)" fg:x="713" fg:w="1"/><text x="46.4887%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.06%)</title><rect x="46.2387%" y="773" width="0.0649%" height="15" fill="rgb(253,57,33)" fg:x="713" fg:w="1"/><text x="46.4887%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.06%)</title><rect x="46.2387%" y="757" width="0.0649%" height="15" fill="rgb(229,34,6)" fg:x="713" fg:w="1"/><text x="46.4887%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="46.2387%" y="741" width="0.0649%" height="15" fill="rgb(235,191,23)" fg:x="713" fg:w="1"/><text x="46.4887%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="46.2387%" y="725" width="0.0649%" height="15" fill="rgb(217,207,27)" fg:x="713" fg:w="1"/><text x="46.4887%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="46.2387%" y="709" width="0.0649%" height="15" fill="rgb(232,41,44)" fg:x="713" fg:w="1"/><text x="46.4887%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="46.2387%" y="693" width="0.0649%" height="15" fill="rgb(221,188,19)" fg:x="713" fg:w="1"/><text x="46.4887%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="46.2387%" y="677" width="0.0649%" height="15" fill="rgb(245,180,45)" fg:x="713" fg:w="1"/><text x="46.4887%" y="687.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="46.2387%" y="661" width="0.0649%" height="15" fill="rgb(250,220,42)" fg:x="713" fg:w="1"/><text x="46.4887%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.06%)</title><rect x="46.2387%" y="645" width="0.0649%" height="15" fill="rgb(234,16,34)" fg:x="713" fg:w="1"/><text x="46.4887%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime (1 samples, 0.06%)</title><rect x="46.2387%" y="629" width="0.0649%" height="15" fill="rgb(233,217,23)" fg:x="713" fg:w="1"/><text x="46.4887%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.2387%" y="613" width="0.0649%" height="15" fill="rgb(209,22,46)" fg:x="713" fg:w="1"/><text x="46.4887%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.2387%" y="597" width="0.0649%" height="15" fill="rgb(213,101,18)" fg:x="713" fg:w="1"/><text x="46.4887%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.2387%" y="581" width="0.0649%" height="15" fill="rgb(215,179,52)" fg:x="713" fg:w="1"/><text x="46.4887%" y="591.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free (1 samples, 0.06%)</title><rect x="46.3035%" y="885" width="0.0649%" height="15" fill="rgb(223,50,25)" fg:x="714" fg:w="1"/><text x="46.5535%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::free_helper (1 samples, 0.06%)</title><rect x="46.3035%" y="869" width="0.0649%" height="15" fill="rgb(224,51,44)" fg:x="714" fg:w="1"/><text x="46.5535%" y="879.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::invalidate_cache (1 samples, 0.06%)</title><rect x="46.3035%" y="853" width="0.0649%" height="15" fill="rgb(224,13,54)" fg:x="714" fg:w="1"/><text x="46.5535%" y="863.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="46.3035%" y="837" width="0.0649%" height="15" fill="rgb(219,58,47)" fg:x="714" fg:w="1"/><text x="46.5535%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="46.3035%" y="821" width="0.0649%" height="15" fill="rgb(246,124,34)" fg:x="714" fg:w="1"/><text x="46.5535%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="46.3035%" y="805" width="0.0649%" height="15" fill="rgb(245,109,25)" fg:x="714" fg:w="1"/><text x="46.5535%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="46.3035%" y="789" width="0.0649%" height="15" fill="rgb(235,48,23)" fg:x="714" fg:w="1"/><text x="46.5535%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="46.3035%" y="773" width="0.0649%" height="15" fill="rgb(229,203,36)" fg:x="714" fg:w="1"/><text x="46.5535%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="46.3035%" y="757" width="0.0649%" height="15" fill="rgb(234,180,9)" fg:x="714" fg:w="1"/><text x="46.5535%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="46.3035%" y="741" width="0.0649%" height="15" fill="rgb(228,98,45)" fg:x="714" fg:w="1"/><text x="46.5535%" y="751.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="46.3035%" y="725" width="0.0649%" height="15" fill="rgb(240,24,36)" fg:x="714" fg:w="1"/><text x="46.5535%" y="735.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="46.3035%" y="709" width="0.0649%" height="15" fill="rgb(227,154,19)" fg:x="714" fg:w="1"/><text x="46.5535%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="46.3035%" y="693" width="0.0649%" height="15" fill="rgb(231,2,48)" fg:x="714" fg:w="1"/><text x="46.5535%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.3035%" y="677" width="0.0649%" height="15" fill="rgb(219,216,0)" fg:x="714" fg:w="1"/><text x="46.5535%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.3035%" y="661" width="0.0649%" height="15" fill="rgb(251,88,0)" fg:x="714" fg:w="1"/><text x="46.5535%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.3035%" y="645" width="0.0649%" height="15" fill="rgb(242,45,45)" fg:x="714" fg:w="1"/><text x="46.5535%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="46.3684%" y="789" width="0.0649%" height="15" fill="rgb(218,149,45)" fg:x="715" fg:w="1"/><text x="46.6184%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="46.3684%" y="773" width="0.0649%" height="15" fill="rgb(247,194,10)" fg:x="715" fg:w="1"/><text x="46.6184%" y="783.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="46.3684%" y="757" width="0.0649%" height="15" fill="rgb(234,33,37)" fg:x="715" fg:w="1"/><text x="46.6184%" y="767.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="46.3684%" y="741" width="0.0649%" height="15" fill="rgb(218,61,13)" fg:x="715" fg:w="1"/><text x="46.6184%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="46.3684%" y="725" width="0.0649%" height="15" fill="rgb(210,80,52)" fg:x="715" fg:w="1"/><text x="46.6184%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.3684%" y="709" width="0.0649%" height="15" fill="rgb(218,203,27)" fg:x="715" fg:w="1"/><text x="46.6184%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.3684%" y="693" width="0.0649%" height="15" fill="rgb(209,126,33)" fg:x="715" fg:w="1"/><text x="46.6184%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.3684%" y="677" width="0.0649%" height="15" fill="rgb(234,173,41)" fg:x="715" fg:w="1"/><text x="46.6184%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.4332%" y="741" width="0.0649%" height="15" fill="rgb(228,166,9)" fg:x="716" fg:w="1"/><text x="46.6832%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.4332%" y="725" width="0.0649%" height="15" fill="rgb(208,124,43)" fg:x="716" fg:w="1"/><text x="46.6832%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.4332%" y="709" width="0.0649%" height="15" fill="rgb(212,154,38)" fg:x="716" fg:w="1"/><text x="46.6832%" y="719.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (3 samples, 0.19%)</title><rect x="46.3684%" y="869" width="0.1946%" height="15" fill="rgb(246,179,35)" fg:x="715" fg:w="3"/><text x="46.6184%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (3 samples, 0.19%)</title><rect x="46.3684%" y="853" width="0.1946%" height="15" fill="rgb(251,3,50)" fg:x="715" fg:w="3"/><text x="46.6184%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.19%)</title><rect x="46.3684%" y="837" width="0.1946%" height="15" fill="rgb(219,96,8)" fg:x="715" fg:w="3"/><text x="46.6184%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.19%)</title><rect x="46.3684%" y="821" width="0.1946%" height="15" fill="rgb(251,216,33)" fg:x="715" fg:w="3"/><text x="46.6184%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.19%)</title><rect x="46.3684%" y="805" width="0.1946%" height="15" fill="rgb(243,145,29)" fg:x="715" fg:w="3"/><text x="46.6184%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="46.4332%" y="789" width="0.1297%" height="15" fill="rgb(210,75,20)" fg:x="716" fg:w="2"/><text x="46.6832%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.13%)</title><rect x="46.4332%" y="773" width="0.1297%" height="15" fill="rgb(235,56,8)" fg:x="716" fg:w="2"/><text x="46.6832%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.13%)</title><rect x="46.4332%" y="757" width="0.1297%" height="15" fill="rgb(226,175,49)" fg:x="716" fg:w="2"/><text x="46.6832%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="46.4981%" y="741" width="0.0649%" height="15" fill="rgb(242,204,23)" fg:x="717" fg:w="1"/><text x="46.7481%" y="751.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="46.4981%" y="725" width="0.0649%" height="15" fill="rgb(225,104,24)" fg:x="717" fg:w="1"/><text x="46.7481%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="46.4981%" y="709" width="0.0649%" height="15" fill="rgb(253,34,1)" fg:x="717" fg:w="1"/><text x="46.7481%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.4981%" y="693" width="0.0649%" height="15" fill="rgb(233,199,23)" fg:x="717" fg:w="1"/><text x="46.7481%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.4981%" y="677" width="0.0649%" height="15" fill="rgb(247,7,51)" fg:x="717" fg:w="1"/><text x="46.7481%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.4981%" y="661" width="0.0649%" height="15" fill="rgb(214,146,12)" fg:x="717" fg:w="1"/><text x="46.7481%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.06%)</title><rect x="46.5629%" y="869" width="0.0649%" height="15" fill="rgb(234,181,43)" fg:x="718" fg:w="1"/><text x="46.8129%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="46.5629%" y="853" width="0.0649%" height="15" fill="rgb(239,148,6)" fg:x="718" fg:w="1"/><text x="46.8129%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="46.5629%" y="837" width="0.0649%" height="15" fill="rgb(206,151,17)" fg:x="718" fg:w="1"/><text x="46.8129%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="46.5629%" y="821" width="0.0649%" height="15" fill="rgb(213,215,10)" fg:x="718" fg:w="1"/><text x="46.8129%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="46.5629%" y="805" width="0.0649%" height="15" fill="rgb(215,220,44)" fg:x="718" fg:w="1"/><text x="46.8129%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="46.5629%" y="789" width="0.0649%" height="15" fill="rgb(245,205,37)" fg:x="718" fg:w="1"/><text x="46.8129%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="46.5629%" y="773" width="0.0649%" height="15" fill="rgb(245,130,43)" fg:x="718" fg:w="1"/><text x="46.8129%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="46.5629%" y="757" width="0.0649%" height="15" fill="rgb(231,227,38)" fg:x="718" fg:w="1"/><text x="46.8129%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="46.5629%" y="741" width="0.0649%" height="15" fill="rgb(233,185,4)" fg:x="718" fg:w="1"/><text x="46.8129%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.5629%" y="725" width="0.0649%" height="15" fill="rgb(224,154,43)" fg:x="718" fg:w="1"/><text x="46.8129%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.5629%" y="709" width="0.0649%" height="15" fill="rgb(235,156,15)" fg:x="718" fg:w="1"/><text x="46.8129%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.5629%" y="693" width="0.0649%" height="15" fill="rgb(211,55,43)" fg:x="718" fg:w="1"/><text x="46.8129%" y="703.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (5 samples, 0.32%)</title><rect x="46.3684%" y="885" width="0.3243%" height="15" fill="rgb(247,149,40)" fg:x="715" fg:w="5"/><text x="46.6184%" y="895.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.06%)</title><rect x="46.6278%" y="869" width="0.0649%" height="15" fill="rgb(232,171,16)" fg:x="719" fg:w="1"/><text x="46.8778%" y="879.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="46.6278%" y="853" width="0.0649%" height="15" fill="rgb(215,117,49)" fg:x="719" fg:w="1"/><text x="46.8778%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="46.6278%" y="837" width="0.0649%" height="15" fill="rgb(246,194,11)" fg:x="719" fg:w="1"/><text x="46.8778%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="46.6278%" y="821" width="0.0649%" height="15" fill="rgb(242,101,44)" fg:x="719" fg:w="1"/><text x="46.8778%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="46.6278%" y="805" width="0.0649%" height="15" fill="rgb(226,174,6)" fg:x="719" fg:w="1"/><text x="46.8778%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="46.6278%" y="789" width="0.0649%" height="15" fill="rgb(213,150,20)" fg:x="719" fg:w="1"/><text x="46.8778%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="46.6278%" y="773" width="0.0649%" height="15" fill="rgb(222,124,42)" fg:x="719" fg:w="1"/><text x="46.8778%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="46.6278%" y="757" width="0.0649%" height="15" fill="rgb(250,19,47)" fg:x="719" fg:w="1"/><text x="46.8778%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="46.6278%" y="741" width="0.0649%" height="15" fill="rgb(241,217,19)" fg:x="719" fg:w="1"/><text x="46.8778%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.6278%" y="725" width="0.0649%" height="15" fill="rgb(207,210,34)" fg:x="719" fg:w="1"/><text x="46.8778%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.6278%" y="709" width="0.0649%" height="15" fill="rgb(244,45,4)" fg:x="719" fg:w="1"/><text x="46.8778%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.6278%" y="693" width="0.0649%" height="15" fill="rgb(252,134,50)" fg:x="719" fg:w="1"/><text x="46.8778%" y="703.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (86 samples, 5.58%)</title><rect x="41.1803%" y="917" width="5.5772%" height="15" fill="rgb(238,74,2)" fg:x="635" fg:w="86"/><text x="41.4303%" y="927.50">redb::t..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (86 samples, 5.58%)</title><rect x="41.1803%" y="901" width="5.5772%" height="15" fill="rgb(226,58,46)" fg:x="635" fg:w="86"/><text x="41.4303%" y="911.50">redb::t..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::uncommitted (1 samples, 0.06%)</title><rect x="46.6926%" y="885" width="0.0649%" height="15" fill="rgb(232,83,35)" fg:x="720" fg:w="1"/><text x="46.9426%" y="895.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="46.6926%" y="869" width="0.0649%" height="15" fill="rgb(212,148,47)" fg:x="720" fg:w="1"/><text x="46.9426%" y="879.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="46.6926%" y="853" width="0.0649%" height="15" fill="rgb(235,29,1)" fg:x="720" fg:w="1"/><text x="46.9426%" y="863.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="46.6926%" y="837" width="0.0649%" height="15" fill="rgb(247,55,37)" fg:x="720" fg:w="1"/><text x="46.9426%" y="847.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.06%)</title><rect x="46.6926%" y="821" width="0.0649%" height="15" fill="rgb(222,48,3)" fg:x="720" fg:w="1"/><text x="46.9426%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.06%)</title><rect x="46.6926%" y="805" width="0.0649%" height="15" fill="rgb(234,21,33)" fg:x="720" fg:w="1"/><text x="46.9426%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="46.6926%" y="789" width="0.0649%" height="15" fill="rgb(247,178,53)" fg:x="720" fg:w="1"/><text x="46.9426%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.6926%" y="773" width="0.0649%" height="15" fill="rgb(225,75,7)" fg:x="720" fg:w="1"/><text x="46.9426%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.6926%" y="757" width="0.0649%" height="15" fill="rgb(219,199,7)" fg:x="720" fg:w="1"/><text x="46.9426%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.6926%" y="741" width="0.0649%" height="15" fill="rgb(209,93,42)" fg:x="720" fg:w="1"/><text x="46.9426%" y="751.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="46.7575%" y="885" width="0.0649%" height="15" fill="rgb(240,175,17)" fg:x="721" fg:w="1"/><text x="47.0075%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="46.7575%" y="869" width="0.0649%" height="15" fill="rgb(232,106,7)" fg:x="721" fg:w="1"/><text x="47.0075%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="46.7575%" y="853" width="0.0649%" height="15" fill="rgb(242,106,43)" fg:x="721" fg:w="1"/><text x="47.0075%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="46.7575%" y="837" width="0.0649%" height="15" fill="rgb(242,61,37)" fg:x="721" fg:w="1"/><text x="47.0075%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="46.7575%" y="821" width="0.0649%" height="15" fill="rgb(205,72,10)" fg:x="721" fg:w="1"/><text x="47.0075%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="46.7575%" y="805" width="0.0649%" height="15" fill="rgb(214,184,36)" fg:x="721" fg:w="1"/><text x="47.0075%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="46.7575%" y="789" width="0.0649%" height="15" fill="rgb(206,107,18)" fg:x="721" fg:w="1"/><text x="47.0075%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="46.7575%" y="773" width="0.0649%" height="15" fill="rgb(210,75,5)" fg:x="721" fg:w="1"/><text x="47.0075%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="46.7575%" y="757" width="0.0649%" height="15" fill="rgb(205,3,19)" fg:x="721" fg:w="1"/><text x="47.0075%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.06%)</title><rect x="46.7575%" y="741" width="0.0649%" height="15" fill="rgb(207,181,42)" fg:x="721" fg:w="1"/><text x="47.0075%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.7575%" y="725" width="0.0649%" height="15" fill="rgb(229,179,43)" fg:x="721" fg:w="1"/><text x="47.0075%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.7575%" y="709" width="0.0649%" height="15" fill="rgb(246,95,30)" fg:x="721" fg:w="1"/><text x="47.0075%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.7575%" y="693" width="0.0649%" height="15" fill="rgb(234,144,45)" fg:x="721" fg:w="1"/><text x="47.0075%" y="703.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (2 samples, 0.13%)</title><rect x="46.7575%" y="917" width="0.1297%" height="15" fill="rgb(250,54,25)" fg:x="721" fg:w="2"/><text x="47.0075%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="46.7575%" y="901" width="0.1297%" height="15" fill="rgb(215,195,40)" fg:x="721" fg:w="2"/><text x="47.0075%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="46.8223%" y="885" width="0.0649%" height="15" fill="rgb(233,188,42)" fg:x="722" fg:w="1"/><text x="47.0723%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="46.8223%" y="869" width="0.0649%" height="15" fill="rgb(247,227,35)" fg:x="722" fg:w="1"/><text x="47.0723%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="46.8223%" y="853" width="0.0649%" height="15" fill="rgb(249,124,27)" fg:x="722" fg:w="1"/><text x="47.0723%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="46.8223%" y="837" width="0.0649%" height="15" fill="rgb(219,207,25)" fg:x="722" fg:w="1"/><text x="47.0723%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="46.8223%" y="821" width="0.0649%" height="15" fill="rgb(241,216,47)" fg:x="722" fg:w="1"/><text x="47.0723%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="46.8223%" y="805" width="0.0649%" height="15" fill="rgb(233,82,50)" fg:x="722" fg:w="1"/><text x="47.0723%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="46.8223%" y="789" width="0.0649%" height="15" fill="rgb(232,63,2)" fg:x="722" fg:w="1"/><text x="47.0723%" y="799.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="46.8223%" y="773" width="0.0649%" height="15" fill="rgb(236,184,28)" fg:x="722" fg:w="1"/><text x="47.0723%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.8223%" y="757" width="0.0649%" height="15" fill="rgb(254,63,27)" fg:x="722" fg:w="1"/><text x="47.0723%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.8223%" y="741" width="0.0649%" height="15" fill="rgb(253,106,28)" fg:x="722" fg:w="1"/><text x="47.0723%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.8223%" y="725" width="0.0649%" height="15" fill="rgb(225,141,39)" fg:x="722" fg:w="1"/><text x="47.0723%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="46.8872%" y="901" width="0.0649%" height="15" fill="rgb(222,157,20)" fg:x="723" fg:w="1"/><text x="47.1372%" y="911.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="46.8872%" y="885" width="0.0649%" height="15" fill="rgb(210,190,9)" fg:x="723" fg:w="1"/><text x="47.1372%" y="895.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (1 samples, 0.06%)</title><rect x="46.8872%" y="869" width="0.0649%" height="15" fill="rgb(242,167,7)" fg:x="723" fg:w="1"/><text x="47.1372%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.06%)</title><rect x="46.8872%" y="853" width="0.0649%" height="15" fill="rgb(227,82,41)" fg:x="723" fg:w="1"/><text x="47.1372%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.06%)</title><rect x="46.8872%" y="837" width="0.0649%" height="15" fill="rgb(222,131,13)" fg:x="723" fg:w="1"/><text x="47.1372%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.8872%" y="821" width="0.0649%" height="15" fill="rgb(221,98,26)" fg:x="723" fg:w="1"/><text x="47.1372%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.8872%" y="805" width="0.0649%" height="15" fill="rgb(251,63,52)" fg:x="723" fg:w="1"/><text x="47.1372%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.8872%" y="789" width="0.0649%" height="15" fill="rgb(246,25,43)" fg:x="723" fg:w="1"/><text x="47.1372%" y="799.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="46.9520%" y="901" width="0.0649%" height="15" fill="rgb(247,167,15)" fg:x="724" fg:w="1"/><text x="47.2020%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="46.9520%" y="885" width="0.0649%" height="15" fill="rgb(240,104,42)" fg:x="724" fg:w="1"/><text x="47.2020%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="46.9520%" y="869" width="0.0649%" height="15" fill="rgb(224,54,6)" fg:x="724" fg:w="1"/><text x="47.2020%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="46.9520%" y="853" width="0.0649%" height="15" fill="rgb(244,108,35)" fg:x="724" fg:w="1"/><text x="47.2020%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="46.9520%" y="837" width="0.0649%" height="15" fill="rgb(216,154,2)" fg:x="724" fg:w="1"/><text x="47.2020%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="46.9520%" y="821" width="0.0649%" height="15" fill="rgb(222,8,47)" fg:x="724" fg:w="1"/><text x="47.2020%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="46.9520%" y="805" width="0.0649%" height="15" fill="rgb(252,93,1)" fg:x="724" fg:w="1"/><text x="47.2020%" y="815.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="46.9520%" y="789" width="0.0649%" height="15" fill="rgb(223,226,51)" fg:x="724" fg:w="1"/><text x="47.2020%" y="799.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="46.9520%" y="773" width="0.0649%" height="15" fill="rgb(206,147,9)" fg:x="724" fg:w="1"/><text x="47.2020%" y="783.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="46.9520%" y="757" width="0.0649%" height="15" fill="rgb(248,180,41)" fg:x="724" fg:w="1"/><text x="47.2020%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="46.9520%" y="741" width="0.0649%" height="15" fill="rgb(209,47,50)" fg:x="724" fg:w="1"/><text x="47.2020%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="46.9520%" y="725" width="0.0649%" height="15" fill="rgb(243,65,31)" fg:x="724" fg:w="1"/><text x="47.2020%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="46.9520%" y="709" width="0.0649%" height="15" fill="rgb(228,128,1)" fg:x="724" fg:w="1"/><text x="47.2020%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="46.9520%" y="693" width="0.0649%" height="15" fill="rgb(231,192,16)" fg:x="724" fg:w="1"/><text x="47.2020%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.06%)</title><rect x="47.0169%" y="901" width="0.0649%" height="15" fill="rgb(224,26,40)" fg:x="725" fg:w="1"/><text x="47.2669%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="47.0169%" y="885" width="0.0649%" height="15" fill="rgb(214,192,17)" fg:x="725" fg:w="1"/><text x="47.2669%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="47.0169%" y="869" width="0.0649%" height="15" fill="rgb(225,147,18)" fg:x="725" fg:w="1"/><text x="47.2669%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="47.0169%" y="853" width="0.0649%" height="15" fill="rgb(205,35,11)" fg:x="725" fg:w="1"/><text x="47.2669%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="47.0169%" y="837" width="0.0649%" height="15" fill="rgb(242,40,42)" fg:x="725" fg:w="1"/><text x="47.2669%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="47.0169%" y="821" width="0.0649%" height="15" fill="rgb(250,170,13)" fg:x="725" fg:w="1"/><text x="47.2669%" y="831.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="47.0169%" y="805" width="0.0649%" height="15" fill="rgb(240,161,28)" fg:x="725" fg:w="1"/><text x="47.2669%" y="815.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="47.0169%" y="789" width="0.0649%" height="15" fill="rgb(245,179,12)" fg:x="725" fg:w="1"/><text x="47.2669%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.0169%" y="773" width="0.0649%" height="15" fill="rgb(250,92,32)" fg:x="725" fg:w="1"/><text x="47.2669%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.0169%" y="757" width="0.0649%" height="15" fill="rgb(233,10,40)" fg:x="725" fg:w="1"/><text x="47.2669%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.0169%" y="741" width="0.0649%" height="15" fill="rgb(217,98,1)" fg:x="725" fg:w="1"/><text x="47.2669%" y="751.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_branch_helper (129 samples, 8.37%)</title><rect x="38.7808%" y="933" width="8.3658%" height="15" fill="rgb(238,202,7)" fg:x="598" fg:w="129"/><text x="39.0308%" y="943.50">redb::tree_s..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (4 samples, 0.26%)</title><rect x="46.8872%" y="917" width="0.2594%" height="15" fill="rgb(222,91,3)" fg:x="723" fg:w="4"/><text x="47.1372%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.06%)</title><rect x="47.0817%" y="901" width="0.0649%" height="15" fill="rgb(211,170,49)" fg:x="726" fg:w="1"/><text x="47.3317%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="47.0817%" y="885" width="0.0649%" height="15" fill="rgb(253,139,18)" fg:x="726" fg:w="1"/><text x="47.3317%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="47.0817%" y="869" width="0.0649%" height="15" fill="rgb(222,4,43)" fg:x="726" fg:w="1"/><text x="47.3317%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (1 samples, 0.06%)</title><rect x="47.0817%" y="853" width="0.0649%" height="15" fill="rgb(207,205,12)" fg:x="726" fg:w="1"/><text x="47.3317%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.06%)</title><rect x="47.0817%" y="837" width="0.0649%" height="15" fill="rgb(216,159,46)" fg:x="726" fg:w="1"/><text x="47.3317%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.06%)</title><rect x="47.0817%" y="821" width="0.0649%" height="15" fill="rgb(236,115,1)" fg:x="726" fg:w="1"/><text x="47.3317%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.06%)</title><rect x="47.0817%" y="805" width="0.0649%" height="15" fill="rgb(251,35,33)" fg:x="726" fg:w="1"/><text x="47.3317%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (1 samples, 0.06%)</title><rect x="47.0817%" y="789" width="0.0649%" height="15" fill="rgb(248,62,51)" fg:x="726" fg:w="1"/><text x="47.3317%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="47.0817%" y="773" width="0.0649%" height="15" fill="rgb(254,180,19)" fg:x="726" fg:w="1"/><text x="47.3317%" y="783.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="47.0817%" y="757" width="0.0649%" height="15" fill="rgb(217,100,32)" fg:x="726" fg:w="1"/><text x="47.3317%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.0817%" y="741" width="0.0649%" height="15" fill="rgb(224,71,22)" fg:x="726" fg:w="1"/><text x="47.3317%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.0817%" y="725" width="0.0649%" height="15" fill="rgb(251,185,33)" fg:x="726" fg:w="1"/><text x="47.3317%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.0817%" y="709" width="0.0649%" height="15" fill="rgb(209,75,48)" fg:x="726" fg:w="1"/><text x="47.3317%" y="719.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="47.1466%" y="917" width="0.0649%" height="15" fill="rgb(253,190,16)" fg:x="727" fg:w="1"/><text x="47.3966%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="47.1466%" y="901" width="0.0649%" height="15" fill="rgb(226,140,1)" fg:x="727" fg:w="1"/><text x="47.3966%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="47.1466%" y="885" width="0.0649%" height="15" fill="rgb(206,75,30)" fg:x="727" fg:w="1"/><text x="47.3966%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="869" width="0.0649%" height="15" fill="rgb(231,208,37)" fg:x="727" fg:w="1"/><text x="47.3966%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="853" width="0.0649%" height="15" fill="rgb(238,136,40)" fg:x="727" fg:w="1"/><text x="47.3966%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="47.1466%" y="837" width="0.0649%" height="15" fill="rgb(247,137,17)" fg:x="727" fg:w="1"/><text x="47.3966%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="821" width="0.0649%" height="15" fill="rgb(240,60,40)" fg:x="727" fg:w="1"/><text x="47.3966%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="805" width="0.0649%" height="15" fill="rgb(236,68,50)" fg:x="727" fg:w="1"/><text x="47.3966%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="47.1466%" y="789" width="0.0649%" height="15" fill="rgb(230,42,12)" fg:x="727" fg:w="1"/><text x="47.3966%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="47.1466%" y="773" width="0.0649%" height="15" fill="rgb(219,16,16)" fg:x="727" fg:w="1"/><text x="47.3966%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="47.1466%" y="757" width="0.0649%" height="15" fill="rgb(220,38,35)" fg:x="727" fg:w="1"/><text x="47.3966%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="47.1466%" y="741" width="0.0649%" height="15" fill="rgb(228,33,1)" fg:x="727" fg:w="1"/><text x="47.3966%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="47.1466%" y="725" width="0.0649%" height="15" fill="rgb(241,46,31)" fg:x="727" fg:w="1"/><text x="47.3966%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="709" width="0.0649%" height="15" fill="rgb(232,58,20)" fg:x="727" fg:w="1"/><text x="47.3966%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="693" width="0.0649%" height="15" fill="rgb(206,228,53)" fg:x="727" fg:w="1"/><text x="47.3966%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="47.1466%" y="677" width="0.0649%" height="15" fill="rgb(206,88,33)" fg:x="727" fg:w="1"/><text x="47.3966%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="47.1466%" y="661" width="0.0649%" height="15" fill="rgb(238,69,7)" fg:x="727" fg:w="1"/><text x="47.3966%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="47.1466%" y="645" width="0.0649%" height="15" fill="rgb(250,21,46)" fg:x="727" fg:w="1"/><text x="47.3966%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="47.1466%" y="629" width="0.0649%" height="15" fill="rgb(215,212,21)" fg:x="727" fg:w="1"/><text x="47.3966%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="47.1466%" y="613" width="0.0649%" height="15" fill="rgb(211,35,12)" fg:x="727" fg:w="1"/><text x="47.3966%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="597" width="0.0649%" height="15" fill="rgb(231,184,16)" fg:x="727" fg:w="1"/><text x="47.3966%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="581" width="0.0649%" height="15" fill="rgb(242,140,15)" fg:x="727" fg:w="1"/><text x="47.3966%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="47.1466%" y="565" width="0.0649%" height="15" fill="rgb(220,37,14)" fg:x="727" fg:w="1"/><text x="47.3966%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="47.1466%" y="549" width="0.0649%" height="15" fill="rgb(223,146,22)" fg:x="727" fg:w="1"/><text x="47.3966%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="47.1466%" y="533" width="0.0649%" height="15" fill="rgb(216,132,15)" fg:x="727" fg:w="1"/><text x="47.3966%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="47.1466%" y="517" width="0.0649%" height="15" fill="rgb(248,83,5)" fg:x="727" fg:w="1"/><text x="47.3966%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="47.1466%" y="501" width="0.0649%" height="15" fill="rgb(231,206,48)" fg:x="727" fg:w="1"/><text x="47.3966%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="485" width="0.0649%" height="15" fill="rgb(253,185,37)" fg:x="727" fg:w="1"/><text x="47.3966%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.1466%" y="469" width="0.0649%" height="15" fill="rgb(208,21,44)" fg:x="727" fg:w="1"/><text x="47.3966%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="47.1466%" y="453" width="0.0649%" height="15" fill="rgb(236,125,4)" fg:x="727" fg:w="1"/><text x="47.3966%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="47.1466%" y="437" width="0.0649%" height="15" fill="rgb(226,134,25)" fg:x="727" fg:w="1"/><text x="47.3966%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="47.1466%" y="421" width="0.0649%" height="15" fill="rgb(250,201,12)" fg:x="727" fg:w="1"/><text x="47.3966%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="47.1466%" y="405" width="0.0649%" height="15" fill="rgb(225,92,18)" fg:x="727" fg:w="1"/><text x="47.3966%" y="415.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="47.1466%" y="389" width="0.0649%" height="15" fill="rgb(227,35,22)" fg:x="727" fg:w="1"/><text x="47.3966%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="47.1466%" y="373" width="0.0649%" height="15" fill="rgb(214,180,52)" fg:x="727" fg:w="1"/><text x="47.3966%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="47.1466%" y="357" width="0.0649%" height="15" fill="rgb(233,55,38)" fg:x="727" fg:w="1"/><text x="47.3966%" y="367.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="47.1466%" y="341" width="0.0649%" height="15" fill="rgb(249,171,43)" fg:x="727" fg:w="1"/><text x="47.3966%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="47.1466%" y="325" width="0.0649%" height="15" fill="rgb(239,87,2)" fg:x="727" fg:w="1"/><text x="47.3966%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.1466%" y="309" width="0.0649%" height="15" fill="rgb(248,141,5)" fg:x="727" fg:w="1"/><text x="47.3966%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.1466%" y="293" width="0.0649%" height="15" fill="rgb(238,33,42)" fg:x="727" fg:w="1"/><text x="47.3966%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.1466%" y="277" width="0.0649%" height="15" fill="rgb(231,57,19)" fg:x="727" fg:w="1"/><text x="47.3966%" y="287.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_helper (131 samples, 8.50%)</title><rect x="38.7808%" y="949" width="8.4955%" height="15" fill="rgb(214,78,53)" fg:x="598" fg:w="131"/><text x="39.0308%" y="959.50">redb::tree_s..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete_leaf_helper (2 samples, 0.13%)</title><rect x="47.1466%" y="933" width="0.1297%" height="15" fill="rgb(206,132,29)" fg:x="727" fg:w="2"/><text x="47.3966%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (1 samples, 0.06%)</title><rect x="47.2114%" y="917" width="0.0649%" height="15" fill="rgb(248,174,31)" fg:x="728" fg:w="1"/><text x="47.4614%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="47.2114%" y="901" width="0.0649%" height="15" fill="rgb(221,87,13)" fg:x="728" fg:w="1"/><text x="47.4614%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_end (1 samples, 0.06%)</title><rect x="47.2114%" y="885" width="0.0649%" height="15" fill="rgb(223,197,17)" fg:x="728" fg:w="1"/><text x="47.4614%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.2114%" y="869" width="0.0649%" height="15" fill="rgb(220,144,50)" fg:x="728" fg:w="1"/><text x="47.4614%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.2114%" y="853" width="0.0649%" height="15" fill="rgb(244,201,11)" fg:x="728" fg:w="1"/><text x="47.4614%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.2114%" y="837" width="0.0649%" height="15" fill="rgb(249,81,34)" fg:x="728" fg:w="1"/><text x="47.4614%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="47.2763%" y="917" width="0.0649%" height="15" fill="rgb(205,161,12)" fg:x="729" fg:w="1"/><text x="47.5263%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.2763%" y="901" width="0.0649%" height="15" fill="rgb(252,139,50)" fg:x="729" fg:w="1"/><text x="47.5263%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.2763%" y="885" width="0.0649%" height="15" fill="rgb(205,169,14)" fg:x="729" fg:w="1"/><text x="47.5263%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.2763%" y="869" width="0.0649%" height="15" fill="rgb(248,198,33)" fg:x="729" fg:w="1"/><text x="47.5263%" y="879.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="47.3411%" y="917" width="0.0649%" height="15" fill="rgb(236,23,21)" fg:x="730" fg:w="1"/><text x="47.5911%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="47.3411%" y="901" width="0.0649%" height="15" fill="rgb(231,13,38)" fg:x="730" fg:w="1"/><text x="47.5911%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="47.3411%" y="885" width="0.0649%" height="15" fill="rgb(239,139,21)" fg:x="730" fg:w="1"/><text x="47.5911%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="47.3411%" y="869" width="0.0649%" height="15" fill="rgb(222,164,45)" fg:x="730" fg:w="1"/><text x="47.5911%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="47.3411%" y="853" width="0.0649%" height="15" fill="rgb(230,52,27)" fg:x="730" fg:w="1"/><text x="47.5911%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="47.3411%" y="837" width="0.0649%" height="15" fill="rgb(227,143,42)" fg:x="730" fg:w="1"/><text x="47.5911%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="47.3411%" y="821" width="0.0649%" height="15" fill="rgb(249,127,1)" fg:x="730" fg:w="1"/><text x="47.5911%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="47.3411%" y="805" width="0.0649%" height="15" fill="rgb(243,107,26)" fg:x="730" fg:w="1"/><text x="47.5911%" y="815.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="47.3411%" y="789" width="0.0649%" height="15" fill="rgb(225,7,45)" fg:x="730" fg:w="1"/><text x="47.5911%" y="799.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="47.3411%" y="773" width="0.0649%" height="15" fill="rgb(241,88,38)" fg:x="730" fg:w="1"/><text x="47.5911%" y="783.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="47.3411%" y="757" width="0.0649%" height="15" fill="rgb(226,121,9)" fg:x="730" fg:w="1"/><text x="47.5911%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="47.3411%" y="741" width="0.0649%" height="15" fill="rgb(253,60,29)" fg:x="730" fg:w="1"/><text x="47.5911%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.3411%" y="725" width="0.0649%" height="15" fill="rgb(244,181,39)" fg:x="730" fg:w="1"/><text x="47.5911%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.3411%" y="709" width="0.0649%" height="15" fill="rgb(252,203,31)" fg:x="730" fg:w="1"/><text x="47.5911%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.3411%" y="693" width="0.0649%" height="15" fill="rgb(224,120,8)" fg:x="730" fg:w="1"/><text x="47.5911%" y="703.50"></text></g><g><title>utxo::Asset::delete_many (315 samples, 20.43%)</title><rect x="27.0428%" y="1013" width="20.4280%" height="15" fill="rgb(205,171,54)" fg:x="417" fg:w="315"/><text x="27.2928%" y="1023.50">utxo::Asset::delete_many</text></g><g><title>redb::table::Table&lt;K,V&gt;::remove (139 samples, 9.01%)</title><rect x="38.4565%" y="997" width="9.0143%" height="15" fill="rgb(235,89,11)" fg:x="593" fg:w="139"/><text x="38.7065%" y="1007.50">redb::table::..</text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::remove (139 samples, 9.01%)</title><rect x="38.4565%" y="981" width="9.0143%" height="15" fill="rgb(212,180,28)" fg:x="593" fg:w="139"/><text x="38.7065%" y="991.50">redb::tree_st..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::delete (138 samples, 8.95%)</title><rect x="38.5214%" y="965" width="8.9494%" height="15" fill="rgb(247,84,49)" fg:x="594" fg:w="138"/><text x="38.7714%" y="975.50">redb::tree_st..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (3 samples, 0.19%)</title><rect x="47.2763%" y="949" width="0.1946%" height="15" fill="rgb(236,187,52)" fg:x="729" fg:w="3"/><text x="47.5263%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (3 samples, 0.19%)</title><rect x="47.2763%" y="933" width="0.1946%" height="15" fill="rgb(227,24,15)" fg:x="729" fg:w="3"/><text x="47.5263%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="47.4060%" y="917" width="0.0649%" height="15" fill="rgb(227,211,13)" fg:x="731" fg:w="1"/><text x="47.6560%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="47.4060%" y="901" width="0.0649%" height="15" fill="rgb(245,52,14)" fg:x="731" fg:w="1"/><text x="47.6560%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="47.4060%" y="885" width="0.0649%" height="15" fill="rgb(225,185,13)" fg:x="731" fg:w="1"/><text x="47.6560%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="47.4060%" y="869" width="0.0649%" height="15" fill="rgb(217,160,29)" fg:x="731" fg:w="1"/><text x="47.6560%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="47.4060%" y="853" width="0.0649%" height="15" fill="rgb(216,115,53)" fg:x="731" fg:w="1"/><text x="47.6560%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="47.4060%" y="837" width="0.0649%" height="15" fill="rgb(236,99,5)" fg:x="731" fg:w="1"/><text x="47.6560%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="47.4060%" y="821" width="0.0649%" height="15" fill="rgb(222,60,38)" fg:x="731" fg:w="1"/><text x="47.6560%" y="831.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="47.4060%" y="805" width="0.0649%" height="15" fill="rgb(212,82,22)" fg:x="731" fg:w="1"/><text x="47.6560%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.4060%" y="789" width="0.0649%" height="15" fill="rgb(214,48,28)" fg:x="731" fg:w="1"/><text x="47.6560%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.4060%" y="773" width="0.0649%" height="15" fill="rgb(245,196,50)" fg:x="731" fg:w="1"/><text x="47.6560%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.4060%" y="757" width="0.0649%" height="15" fill="rgb(225,159,46)" fg:x="731" fg:w="1"/><text x="47.6560%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="47.4708%" y="965" width="0.0649%" height="15" fill="rgb(207,195,48)" fg:x="732" fg:w="1"/><text x="47.7208%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.4708%" y="949" width="0.0649%" height="15" fill="rgb(240,73,3)" fg:x="732" fg:w="1"/><text x="47.7208%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.4708%" y="933" width="0.0649%" height="15" fill="rgb(245,57,23)" fg:x="732" fg:w="1"/><text x="47.7208%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.4708%" y="917" width="0.0649%" height="15" fill="rgb(240,75,18)" fg:x="732" fg:w="1"/><text x="47.7208%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.06%)</title><rect x="47.5357%" y="965" width="0.0649%" height="15" fill="rgb(238,168,12)" fg:x="733" fg:w="1"/><text x="47.7857%" y="975.50"></text></g><g><title>core::mem::replace (1 samples, 0.06%)</title><rect x="47.5357%" y="949" width="0.0649%" height="15" fill="rgb(226,20,40)" fg:x="733" fg:w="1"/><text x="47.7857%" y="959.50"></text></g><g><title>core::ptr::read (1 samples, 0.06%)</title><rect x="47.5357%" y="933" width="0.0649%" height="15" fill="rgb(224,130,35)" fg:x="733" fg:w="1"/><text x="47.7857%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="47.5357%" y="917" width="0.0649%" height="15" fill="rgb(225,63,41)" fg:x="733" fg:w="1"/><text x="47.7857%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.5357%" y="901" width="0.0649%" height="15" fill="rgb(219,3,3)" fg:x="733" fg:w="1"/><text x="47.7857%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.5357%" y="885" width="0.0649%" height="15" fill="rgb(218,157,4)" fg:x="733" fg:w="1"/><text x="47.7857%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.5357%" y="869" width="0.0649%" height="15" fill="rgb(232,76,36)" fg:x="733" fg:w="1"/><text x="47.7857%" y="879.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.19%)</title><rect x="47.4708%" y="981" width="0.1946%" height="15" fill="rgb(247,36,0)" fg:x="732" fg:w="3"/><text x="47.7208%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_iters::EntryGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,()&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="47.6005%" y="965" width="0.0649%" height="15" fill="rgb(205,2,34)" fg:x="734" fg:w="1"/><text x="47.8505%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::EntryGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,()&gt;&gt; (1 samples, 0.06%)</title><rect x="47.6005%" y="949" width="0.0649%" height="15" fill="rgb(239,136,13)" fg:x="734" fg:w="1"/><text x="47.8505%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="47.6005%" y="933" width="0.0649%" height="15" fill="rgb(253,122,12)" fg:x="734" fg:w="1"/><text x="47.8505%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="47.6005%" y="917" width="0.0649%" height="15" fill="rgb(222,174,7)" fg:x="734" fg:w="1"/><text x="47.8505%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="47.6005%" y="901" width="0.0649%" height="15" fill="rgb(208,191,42)" fg:x="734" fg:w="1"/><text x="47.8505%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="47.6005%" y="885" width="0.0649%" height="15" fill="rgb(237,212,15)" fg:x="734" fg:w="1"/><text x="47.8505%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="47.6005%" y="869" width="0.0649%" height="15" fill="rgb(215,65,20)" fg:x="734" fg:w="1"/><text x="47.8505%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="47.6005%" y="853" width="0.0649%" height="15" fill="rgb(232,103,11)" fg:x="734" fg:w="1"/><text x="47.8505%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="47.6005%" y="837" width="0.0649%" height="15" fill="rgb(235,148,18)" fg:x="734" fg:w="1"/><text x="47.8505%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="47.6005%" y="821" width="0.0649%" height="15" fill="rgb(240,173,7)" fg:x="734" fg:w="1"/><text x="47.8505%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="47.6005%" y="805" width="0.0649%" height="15" fill="rgb(228,182,25)" fg:x="734" fg:w="1"/><text x="47.8505%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="47.6005%" y="789" width="0.0649%" height="15" fill="rgb(247,3,52)" fg:x="734" fg:w="1"/><text x="47.8505%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (1 samples, 0.06%)</title><rect x="47.6005%" y="773" width="0.0649%" height="15" fill="rgb(226,155,8)" fg:x="734" fg:w="1"/><text x="47.8505%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.6005%" y="757" width="0.0649%" height="15" fill="rgb(243,195,38)" fg:x="734" fg:w="1"/><text x="47.8505%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.6005%" y="741" width="0.0649%" height="15" fill="rgb(254,181,33)" fg:x="734" fg:w="1"/><text x="47.8505%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.6005%" y="725" width="0.0649%" height="15" fill="rgb(232,98,23)" fg:x="734" fg:w="1"/><text x="47.8505%" y="735.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.26%)</title><rect x="47.4708%" y="997" width="0.2594%" height="15" fill="rgb(205,23,10)" fg:x="732" fg:w="4"/><text x="47.7208%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="47.6654%" y="981" width="0.0649%" height="15" fill="rgb(212,124,38)" fg:x="735" fg:w="1"/><text x="47.9154%" y="991.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="47.6654%" y="965" width="0.0649%" height="15" fill="rgb(228,207,2)" fg:x="735" fg:w="1"/><text x="47.9154%" y="975.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="47.6654%" y="949" width="0.0649%" height="15" fill="rgb(215,120,22)" fg:x="735" fg:w="1"/><text x="47.9154%" y="959.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}}::{{closure}} (1 samples, 0.06%)</title><rect x="47.6654%" y="933" width="0.0649%" height="15" fill="rgb(251,172,33)" fg:x="735" fg:w="1"/><text x="47.9154%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="47.6654%" y="917" width="0.0649%" height="15" fill="rgb(250,83,2)" fg:x="735" fg:w="1"/><text x="47.9154%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="47.6654%" y="901" width="0.0649%" height="15" fill="rgb(210,132,53)" fg:x="735" fg:w="1"/><text x="47.9154%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="47.6654%" y="885" width="0.0649%" height="15" fill="rgb(221,208,36)" fg:x="735" fg:w="1"/><text x="47.9154%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="47.6654%" y="869" width="0.0649%" height="15" fill="rgb(205,192,46)" fg:x="735" fg:w="1"/><text x="47.9154%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="47.6654%" y="853" width="0.0649%" height="15" fill="rgb(223,163,14)" fg:x="735" fg:w="1"/><text x="47.9154%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="47.6654%" y="837" width="0.0649%" height="15" fill="rgb(218,41,28)" fg:x="735" fg:w="1"/><text x="47.9154%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="47.6654%" y="821" width="0.0649%" height="15" fill="rgb(235,104,10)" fg:x="735" fg:w="1"/><text x="47.9154%" y="831.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="47.6654%" y="805" width="0.0649%" height="15" fill="rgb(246,17,4)" fg:x="735" fg:w="1"/><text x="47.9154%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="47.6654%" y="789" width="0.0649%" height="15" fill="rgb(240,7,16)" fg:x="735" fg:w="1"/><text x="47.9154%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="47.6654%" y="773" width="0.0649%" height="15" fill="rgb(213,160,23)" fg:x="735" fg:w="1"/><text x="47.9154%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="47.6654%" y="757" width="0.0649%" height="15" fill="rgb(251,179,49)" fg:x="735" fg:w="1"/><text x="47.9154%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="47.6654%" y="741" width="0.0649%" height="15" fill="rgb(247,198,10)" fg:x="735" fg:w="1"/><text x="47.9154%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="47.6654%" y="725" width="0.0649%" height="15" fill="rgb(220,65,29)" fg:x="735" fg:w="1"/><text x="47.9154%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="47.6654%" y="709" width="0.0649%" height="15" fill="rgb(237,171,28)" fg:x="735" fg:w="1"/><text x="47.9154%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="47.6654%" y="693" width="0.0649%" height="15" fill="rgb(228,44,26)" fg:x="735" fg:w="1"/><text x="47.9154%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="47.6654%" y="677" width="0.0649%" height="15" fill="rgb(216,210,27)" fg:x="735" fg:w="1"/><text x="47.9154%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="47.6654%" y="661" width="0.0649%" height="15" fill="rgb(252,10,17)" fg:x="735" fg:w="1"/><text x="47.9154%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.6654%" y="645" width="0.0649%" height="15" fill="rgb(214,172,30)" fg:x="735" fg:w="1"/><text x="47.9154%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.6654%" y="629" width="0.0649%" height="15" fill="rgb(253,130,48)" fg:x="735" fg:w="1"/><text x="47.9154%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.6654%" y="613" width="0.0649%" height="15" fill="rgb(226,99,43)" fg:x="735" fg:w="1"/><text x="47.9154%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.7302%" y="693" width="0.0649%" height="15" fill="rgb(239,111,26)" fg:x="736" fg:w="1"/><text x="47.9802%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="47.7302%" y="677" width="0.0649%" height="15" fill="rgb(240,27,53)" fg:x="736" fg:w="1"/><text x="47.9802%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="47.7302%" y="661" width="0.0649%" height="15" fill="rgb(254,163,12)" fg:x="736" fg:w="1"/><text x="47.9802%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="47.7302%" y="645" width="0.0649%" height="15" fill="rgb(225,51,48)" fg:x="736" fg:w="1"/><text x="47.9802%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="47.7302%" y="629" width="0.0649%" height="15" fill="rgb(205,19,32)" fg:x="736" fg:w="1"/><text x="47.9802%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="47.7302%" y="613" width="0.0649%" height="15" fill="rgb(218,119,26)" fg:x="736" fg:w="1"/><text x="47.9802%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="47.7302%" y="597" width="0.0649%" height="15" fill="rgb(231,173,33)" fg:x="736" fg:w="1"/><text x="47.9802%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.7302%" y="581" width="0.0649%" height="15" fill="rgb(241,100,29)" fg:x="736" fg:w="1"/><text x="47.9802%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.7302%" y="565" width="0.0649%" height="15" fill="rgb(250,194,34)" fg:x="736" fg:w="1"/><text x="47.9802%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.7302%" y="549" width="0.0649%" height="15" fill="rgb(215,23,50)" fg:x="736" fg:w="1"/><text x="47.9802%" y="559.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (2 samples, 0.13%)</title><rect x="47.7302%" y="917" width="0.1297%" height="15" fill="rgb(206,49,37)" fg:x="736" fg:w="2"/><text x="47.9802%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="47.7302%" y="901" width="0.1297%" height="15" fill="rgb(247,39,21)" fg:x="736" fg:w="2"/><text x="47.9802%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="47.7302%" y="885" width="0.1297%" height="15" fill="rgb(209,220,15)" fg:x="736" fg:w="2"/><text x="47.9802%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="47.7302%" y="869" width="0.1297%" height="15" fill="rgb(206,41,33)" fg:x="736" fg:w="2"/><text x="47.9802%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="47.7302%" y="853" width="0.1297%" height="15" fill="rgb(221,225,45)" fg:x="736" fg:w="2"/><text x="47.9802%" y="863.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="47.7302%" y="837" width="0.1297%" height="15" fill="rgb(216,27,18)" fg:x="736" fg:w="2"/><text x="47.9802%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="47.7302%" y="821" width="0.1297%" height="15" fill="rgb(250,193,34)" fg:x="736" fg:w="2"/><text x="47.9802%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="47.7302%" y="805" width="0.1297%" height="15" fill="rgb(227,215,20)" fg:x="736" fg:w="2"/><text x="47.9802%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="47.7302%" y="789" width="0.1297%" height="15" fill="rgb(242,211,27)" fg:x="736" fg:w="2"/><text x="47.9802%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="47.7302%" y="773" width="0.1297%" height="15" fill="rgb(229,190,30)" fg:x="736" fg:w="2"/><text x="47.9802%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="47.7302%" y="757" width="0.1297%" height="15" fill="rgb(253,31,29)" fg:x="736" fg:w="2"/><text x="47.9802%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="47.7302%" y="741" width="0.1297%" height="15" fill="rgb(229,177,52)" fg:x="736" fg:w="2"/><text x="47.9802%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="47.7302%" y="725" width="0.1297%" height="15" fill="rgb(226,88,8)" fg:x="736" fg:w="2"/><text x="47.9802%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="47.7302%" y="709" width="0.1297%" height="15" fill="rgb(214,55,27)" fg:x="736" fg:w="2"/><text x="47.9802%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="47.7951%" y="693" width="0.0649%" height="15" fill="rgb(233,202,5)" fg:x="737" fg:w="1"/><text x="48.0451%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.7951%" y="677" width="0.0649%" height="15" fill="rgb(251,49,30)" fg:x="737" fg:w="1"/><text x="48.0451%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.7951%" y="661" width="0.0649%" height="15" fill="rgb(235,18,52)" fg:x="737" fg:w="1"/><text x="48.0451%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.7951%" y="645" width="0.0649%" height="15" fill="rgb(250,111,51)" fg:x="737" fg:w="1"/><text x="48.0451%" y="655.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (3 samples, 0.19%)</title><rect x="47.7302%" y="933" width="0.1946%" height="15" fill="rgb(218,13,25)" fg:x="736" fg:w="3"/><text x="47.9802%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="47.8599%" y="917" width="0.0649%" height="15" fill="rgb(248,96,7)" fg:x="738" fg:w="1"/><text x="48.1099%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="47.8599%" y="901" width="0.0649%" height="15" fill="rgb(217,31,15)" fg:x="738" fg:w="1"/><text x="48.1099%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.8599%" y="885" width="0.0649%" height="15" fill="rgb(228,59,49)" fg:x="738" fg:w="1"/><text x="48.1099%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.8599%" y="869" width="0.0649%" height="15" fill="rgb(210,152,38)" fg:x="738" fg:w="1"/><text x="48.1099%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.8599%" y="853" width="0.0649%" height="15" fill="rgb(206,71,11)" fg:x="738" fg:w="1"/><text x="48.1099%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.9248%" y="613" width="0.0649%" height="15" fill="rgb(244,199,5)" fg:x="739" fg:w="1"/><text x="48.1748%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.9248%" y="597" width="0.0649%" height="15" fill="rgb(253,49,1)" fg:x="739" fg:w="1"/><text x="48.1748%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.9248%" y="581" width="0.0649%" height="15" fill="rgb(225,206,40)" fg:x="739" fg:w="1"/><text x="48.1748%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="47.9896%" y="517" width="0.0649%" height="15" fill="rgb(243,116,47)" fg:x="740" fg:w="1"/><text x="48.2396%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="47.9896%" y="501" width="0.0649%" height="15" fill="rgb(219,225,16)" fg:x="740" fg:w="1"/><text x="48.2396%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="47.9896%" y="485" width="0.0649%" height="15" fill="rgb(233,29,47)" fg:x="740" fg:w="1"/><text x="48.2396%" y="495.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (3 samples, 0.19%)</title><rect x="47.9248%" y="933" width="0.1946%" height="15" fill="rgb(250,179,18)" fg:x="739" fg:w="3"/><text x="48.1748%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (3 samples, 0.19%)</title><rect x="47.9248%" y="917" width="0.1946%" height="15" fill="rgb(215,176,6)" fg:x="739" fg:w="3"/><text x="48.1748%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="47.9248%" y="901" width="0.1946%" height="15" fill="rgb(214,117,39)" fg:x="739" fg:w="3"/><text x="48.1748%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="47.9248%" y="885" width="0.1946%" height="15" fill="rgb(247,183,36)" fg:x="739" fg:w="3"/><text x="48.1748%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="47.9248%" y="869" width="0.1946%" height="15" fill="rgb(237,200,3)" fg:x="739" fg:w="3"/><text x="48.1748%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="47.9248%" y="853" width="0.1946%" height="15" fill="rgb(212,220,24)" fg:x="739" fg:w="3"/><text x="48.1748%" y="863.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="47.9248%" y="837" width="0.1946%" height="15" fill="rgb(245,216,20)" fg:x="739" fg:w="3"/><text x="48.1748%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="47.9248%" y="821" width="0.1946%" height="15" fill="rgb(219,124,7)" fg:x="739" fg:w="3"/><text x="48.1748%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="47.9248%" y="805" width="0.1946%" height="15" fill="rgb(227,167,8)" fg:x="739" fg:w="3"/><text x="48.1748%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="47.9248%" y="789" width="0.1946%" height="15" fill="rgb(241,37,2)" fg:x="739" fg:w="3"/><text x="48.1748%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="47.9248%" y="773" width="0.1946%" height="15" fill="rgb(238,134,33)" fg:x="739" fg:w="3"/><text x="48.1748%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="47.9248%" y="757" width="0.1946%" height="15" fill="rgb(248,48,27)" fg:x="739" fg:w="3"/><text x="48.1748%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="47.9248%" y="741" width="0.1946%" height="15" fill="rgb(212,14,16)" fg:x="739" fg:w="3"/><text x="48.1748%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="47.9248%" y="725" width="0.1946%" height="15" fill="rgb(217,205,37)" fg:x="739" fg:w="3"/><text x="48.1748%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="47.9248%" y="709" width="0.1946%" height="15" fill="rgb(233,185,47)" fg:x="739" fg:w="3"/><text x="48.1748%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="47.9248%" y="693" width="0.1946%" height="15" fill="rgb(244,88,8)" fg:x="739" fg:w="3"/><text x="48.1748%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="47.9248%" y="677" width="0.1946%" height="15" fill="rgb(213,0,20)" fg:x="739" fg:w="3"/><text x="48.1748%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="47.9248%" y="661" width="0.1946%" height="15" fill="rgb(238,159,36)" fg:x="739" fg:w="3"/><text x="48.1748%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="47.9248%" y="645" width="0.1946%" height="15" fill="rgb(253,173,17)" fg:x="739" fg:w="3"/><text x="48.1748%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="47.9248%" y="629" width="0.1946%" height="15" fill="rgb(221,23,28)" fg:x="739" fg:w="3"/><text x="48.1748%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="47.9896%" y="613" width="0.1297%" height="15" fill="rgb(218,113,15)" fg:x="740" fg:w="2"/><text x="48.2396%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="47.9896%" y="597" width="0.1297%" height="15" fill="rgb(233,58,3)" fg:x="740" fg:w="2"/><text x="48.2396%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="47.9896%" y="581" width="0.1297%" height="15" fill="rgb(250,46,35)" fg:x="740" fg:w="2"/><text x="48.2396%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="47.9896%" y="565" width="0.1297%" height="15" fill="rgb(210,169,11)" fg:x="740" fg:w="2"/><text x="48.2396%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="47.9896%" y="549" width="0.1297%" height="15" fill="rgb(246,88,19)" fg:x="740" fg:w="2"/><text x="48.2396%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="47.9896%" y="533" width="0.1297%" height="15" fill="rgb(206,81,49)" fg:x="740" fg:w="2"/><text x="48.2396%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.0545%" y="517" width="0.0649%" height="15" fill="rgb(232,144,18)" fg:x="741" fg:w="1"/><text x="48.3045%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.0545%" y="501" width="0.0649%" height="15" fill="rgb(235,2,27)" fg:x="741" fg:w="1"/><text x="48.3045%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.0545%" y="485" width="0.0649%" height="15" fill="rgb(239,157,39)" fg:x="741" fg:w="1"/><text x="48.3045%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.0545%" y="469" width="0.0649%" height="15" fill="rgb(220,11,17)" fg:x="741" fg:w="1"/><text x="48.3045%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.0545%" y="453" width="0.0649%" height="15" fill="rgb(243,94,50)" fg:x="741" fg:w="1"/><text x="48.3045%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.0545%" y="437" width="0.0649%" height="15" fill="rgb(218,22,0)" fg:x="741" fg:w="1"/><text x="48.3045%" y="447.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.0545%" y="421" width="0.0649%" height="15" fill="rgb(249,70,21)" fg:x="741" fg:w="1"/><text x="48.3045%" y="431.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="48.0545%" y="405" width="0.0649%" height="15" fill="rgb(245,111,46)" fg:x="741" fg:w="1"/><text x="48.3045%" y="415.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="48.0545%" y="389" width="0.0649%" height="15" fill="rgb(244,183,12)" fg:x="741" fg:w="1"/><text x="48.3045%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="48.0545%" y="373" width="0.0649%" height="15" fill="rgb(207,117,0)" fg:x="741" fg:w="1"/><text x="48.3045%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="48.0545%" y="357" width="0.0649%" height="15" fill="rgb(206,20,43)" fg:x="741" fg:w="1"/><text x="48.3045%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="48.0545%" y="341" width="0.0649%" height="15" fill="rgb(221,104,11)" fg:x="741" fg:w="1"/><text x="48.3045%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="48.0545%" y="325" width="0.0649%" height="15" fill="rgb(254,36,50)" fg:x="741" fg:w="1"/><text x="48.3045%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="48.0545%" y="309" width="0.0649%" height="15" fill="rgb(252,17,15)" fg:x="741" fg:w="1"/><text x="48.3045%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.06%)</title><rect x="48.0545%" y="293" width="0.0649%" height="15" fill="rgb(219,129,43)" fg:x="741" fg:w="1"/><text x="48.3045%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.0545%" y="277" width="0.0649%" height="15" fill="rgb(205,34,45)" fg:x="741" fg:w="1"/><text x="48.3045%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.0545%" y="261" width="0.0649%" height="15" fill="rgb(251,201,32)" fg:x="741" fg:w="1"/><text x="48.3045%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.0545%" y="245" width="0.0649%" height="15" fill="rgb(205,56,0)" fg:x="741" fg:w="1"/><text x="48.3045%" y="255.50"></text></g><g><title>&lt;redb::table::Table&lt;K,V&gt; as redb::table::ReadableTable&lt;K,V&gt;&gt;::range (7 samples, 0.45%)</title><rect x="47.7302%" y="997" width="0.4540%" height="15" fill="rgb(211,193,27)" fg:x="736" fg:w="7"/><text x="47.9802%" y="1007.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::range (7 samples, 0.45%)</title><rect x="47.7302%" y="981" width="0.4540%" height="15" fill="rgb(231,100,42)" fg:x="736" fg:w="7"/><text x="47.9802%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (7 samples, 0.45%)</title><rect x="47.7302%" y="965" width="0.4540%" height="15" fill="rgb(245,85,27)" fg:x="736" fg:w="7"/><text x="47.9802%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (7 samples, 0.45%)</title><rect x="47.7302%" y="949" width="0.4540%" height="15" fill="rgb(241,76,24)" fg:x="736" fg:w="7"/><text x="47.9802%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="48.1193%" y="933" width="0.0649%" height="15" fill="rgb(249,157,15)" fg:x="742" fg:w="1"/><text x="48.3693%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="48.1193%" y="917" width="0.0649%" height="15" fill="rgb(222,218,25)" fg:x="742" fg:w="1"/><text x="48.3693%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="48.1193%" y="901" width="0.0649%" height="15" fill="rgb(252,156,52)" fg:x="742" fg:w="1"/><text x="48.3693%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="48.1193%" y="885" width="0.0649%" height="15" fill="rgb(211,185,7)" fg:x="742" fg:w="1"/><text x="48.3693%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="48.1193%" y="869" width="0.0649%" height="15" fill="rgb(234,108,24)" fg:x="742" fg:w="1"/><text x="48.3693%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="48.1193%" y="853" width="0.0649%" height="15" fill="rgb(227,218,2)" fg:x="742" fg:w="1"/><text x="48.3693%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="48.1193%" y="837" width="0.0649%" height="15" fill="rgb(224,0,36)" fg:x="742" fg:w="1"/><text x="48.3693%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="48.1193%" y="821" width="0.0649%" height="15" fill="rgb(233,201,10)" fg:x="742" fg:w="1"/><text x="48.3693%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="48.1193%" y="805" width="0.0649%" height="15" fill="rgb(252,209,14)" fg:x="742" fg:w="1"/><text x="48.3693%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="48.1193%" y="789" width="0.0649%" height="15" fill="rgb(205,93,49)" fg:x="742" fg:w="1"/><text x="48.3693%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="48.1193%" y="773" width="0.0649%" height="15" fill="rgb(234,116,45)" fg:x="742" fg:w="1"/><text x="48.3693%" y="783.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="48.1193%" y="757" width="0.0649%" height="15" fill="rgb(248,89,35)" fg:x="742" fg:w="1"/><text x="48.3693%" y="767.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.06%)</title><rect x="48.1193%" y="741" width="0.0649%" height="15" fill="rgb(233,167,45)" fg:x="742" fg:w="1"/><text x="48.3693%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.06%)</title><rect x="48.1193%" y="725" width="0.0649%" height="15" fill="rgb(248,228,14)" fg:x="742" fg:w="1"/><text x="48.3693%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.06%)</title><rect x="48.1193%" y="709" width="0.0649%" height="15" fill="rgb(246,91,14)" fg:x="742" fg:w="1"/><text x="48.3693%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.1193%" y="693" width="0.0649%" height="15" fill="rgb(227,142,5)" fg:x="742" fg:w="1"/><text x="48.3693%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.1193%" y="677" width="0.0649%" height="15" fill="rgb(221,63,33)" fg:x="742" fg:w="1"/><text x="48.3693%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.1193%" y="661" width="0.0649%" height="15" fill="rgb(233,49,0)" fg:x="742" fg:w="1"/><text x="48.3693%" y="671.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="48.1842%" y="869" width="0.0649%" height="15" fill="rgb(251,115,38)" fg:x="743" fg:w="1"/><text x="48.4342%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.1842%" y="853" width="0.0649%" height="15" fill="rgb(231,214,32)" fg:x="743" fg:w="1"/><text x="48.4342%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.1842%" y="837" width="0.0649%" height="15" fill="rgb(248,73,46)" fg:x="743" fg:w="1"/><text x="48.4342%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="48.1842%" y="821" width="0.0649%" height="15" fill="rgb(237,156,4)" fg:x="743" fg:w="1"/><text x="48.4342%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="48.1842%" y="805" width="0.0649%" height="15" fill="rgb(227,132,2)" fg:x="743" fg:w="1"/><text x="48.4342%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="48.1842%" y="789" width="0.0649%" height="15" fill="rgb(248,161,9)" fg:x="743" fg:w="1"/><text x="48.4342%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="48.1842%" y="773" width="0.0649%" height="15" fill="rgb(238,77,38)" fg:x="743" fg:w="1"/><text x="48.4342%" y="783.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="48.1842%" y="757" width="0.0649%" height="15" fill="rgb(222,166,40)" fg:x="743" fg:w="1"/><text x="48.4342%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="48.1842%" y="741" width="0.0649%" height="15" fill="rgb(214,168,45)" fg:x="743" fg:w="1"/><text x="48.4342%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="48.1842%" y="725" width="0.0649%" height="15" fill="rgb(226,64,37)" fg:x="743" fg:w="1"/><text x="48.4342%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="48.1842%" y="709" width="0.0649%" height="15" fill="rgb(232,210,43)" fg:x="743" fg:w="1"/><text x="48.4342%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="48.1842%" y="693" width="0.0649%" height="15" fill="rgb(214,76,33)" fg:x="743" fg:w="1"/><text x="48.4342%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="48.1842%" y="677" width="0.0649%" height="15" fill="rgb(210,78,5)" fg:x="743" fg:w="1"/><text x="48.4342%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="48.1842%" y="661" width="0.0649%" height="15" fill="rgb(211,107,37)" fg:x="743" fg:w="1"/><text x="48.4342%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="48.1842%" y="645" width="0.0649%" height="15" fill="rgb(249,67,16)" fg:x="743" fg:w="1"/><text x="48.4342%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="48.1842%" y="629" width="0.0649%" height="15" fill="rgb(222,114,31)" fg:x="743" fg:w="1"/><text x="48.4342%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.1842%" y="613" width="0.0649%" height="15" fill="rgb(242,118,19)" fg:x="743" fg:w="1"/><text x="48.4342%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.1842%" y="597" width="0.0649%" height="15" fill="rgb(223,115,1)" fg:x="743" fg:w="1"/><text x="48.4342%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.1842%" y="581" width="0.0649%" height="15" fill="rgb(241,182,54)" fg:x="743" fg:w="1"/><text x="48.4342%" y="591.50"></text></g><g><title>utxo::Utxo::delete_many (423 samples, 27.43%)</title><rect x="20.8820%" y="1029" width="27.4319%" height="15" fill="rgb(244,166,36)" fg:x="322" fg:w="423"/><text x="21.1320%" y="1039.50">utxo::Utxo::delete_many</text></g><g><title>utxo::Asset::pk_range (13 samples, 0.84%)</title><rect x="47.4708%" y="1013" width="0.8431%" height="15" fill="rgb(241,52,43)" fg:x="732" fg:w="13"/><text x="47.7208%" y="1023.50"></text></g><g><title>redb::transactions::WriteTransaction::open_table (2 samples, 0.13%)</title><rect x="48.1842%" y="997" width="0.1297%" height="15" fill="rgb(236,82,9)" fg:x="743" fg:w="2"/><text x="48.4342%" y="1007.50"></text></g><g><title>redb::transactions::TableNamespace::open_table (2 samples, 0.13%)</title><rect x="48.1842%" y="981" width="0.1297%" height="15" fill="rgb(241,119,0)" fg:x="743" fg:w="2"/><text x="48.4342%" y="991.50"></text></g><g><title>redb::transactions::TableNamespace::inner_open (2 samples, 0.13%)</title><rect x="48.1842%" y="965" width="0.1297%" height="15" fill="rgb(221,19,22)" fg:x="743" fg:w="2"/><text x="48.4342%" y="975.50"></text></g><g><title>redb::tree_store::table_tree::TableTreeMut::get_or_create_table (2 samples, 0.13%)</title><rect x="48.1842%" y="949" width="0.1297%" height="15" fill="rgb(254,144,35)" fg:x="743" fg:w="2"/><text x="48.4342%" y="959.50"></text></g><g><title>redb::tree_store::table_tree::TableTreeMut::get_table (2 samples, 0.13%)</title><rect x="48.1842%" y="933" width="0.1297%" height="15" fill="rgb(246,132,30)" fg:x="743" fg:w="2"/><text x="48.4342%" y="943.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (2 samples, 0.13%)</title><rect x="48.1842%" y="917" width="0.1297%" height="15" fill="rgb(234,69,28)" fg:x="743" fg:w="2"/><text x="48.4342%" y="927.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (2 samples, 0.13%)</title><rect x="48.1842%" y="901" width="0.1297%" height="15" fill="rgb(219,106,47)" fg:x="743" fg:w="2"/><text x="48.4342%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="48.1842%" y="885" width="0.1297%" height="15" fill="rgb(218,79,24)" fg:x="743" fg:w="2"/><text x="48.4342%" y="895.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="48.2490%" y="869" width="0.0649%" height="15" fill="rgb(225,26,21)" fg:x="744" fg:w="1"/><text x="48.4990%" y="879.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="48.2490%" y="853" width="0.0649%" height="15" fill="rgb(217,68,49)" fg:x="744" fg:w="1"/><text x="48.4990%" y="863.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="48.2490%" y="837" width="0.0649%" height="15" fill="rgb(220,204,28)" fg:x="744" fg:w="1"/><text x="48.4990%" y="847.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="48.2490%" y="821" width="0.0649%" height="15" fill="rgb(237,208,43)" fg:x="744" fg:w="1"/><text x="48.4990%" y="831.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="48.2490%" y="805" width="0.0649%" height="15" fill="rgb(213,97,42)" fg:x="744" fg:w="1"/><text x="48.4990%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="48.2490%" y="789" width="0.0649%" height="15" fill="rgb(238,96,52)" fg:x="744" fg:w="1"/><text x="48.4990%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="48.2490%" y="773" width="0.0649%" height="15" fill="rgb(228,14,13)" fg:x="744" fg:w="1"/><text x="48.4990%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="48.2490%" y="757" width="0.0649%" height="15" fill="rgb(219,123,13)" fg:x="744" fg:w="1"/><text x="48.4990%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="48.2490%" y="741" width="0.0649%" height="15" fill="rgb(216,144,17)" fg:x="744" fg:w="1"/><text x="48.4990%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="48.2490%" y="725" width="0.0649%" height="15" fill="rgb(230,228,29)" fg:x="744" fg:w="1"/><text x="48.4990%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="48.2490%" y="709" width="0.0649%" height="15" fill="rgb(233,18,5)" fg:x="744" fg:w="1"/><text x="48.4990%" y="719.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="48.2490%" y="693" width="0.0649%" height="15" fill="rgb(233,197,12)" fg:x="744" fg:w="1"/><text x="48.4990%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="48.2490%" y="677" width="0.0649%" height="15" fill="rgb(234,140,29)" fg:x="744" fg:w="1"/><text x="48.4990%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="48.2490%" y="661" width="0.0649%" height="15" fill="rgb(233,113,19)" fg:x="744" fg:w="1"/><text x="48.4990%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="48.2490%" y="645" width="0.0649%" height="15" fill="rgb(246,209,13)" fg:x="744" fg:w="1"/><text x="48.4990%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.2490%" y="629" width="0.0649%" height="15" fill="rgb(242,79,54)" fg:x="744" fg:w="1"/><text x="48.4990%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.2490%" y="613" width="0.0649%" height="15" fill="rgb(219,73,16)" fg:x="744" fg:w="1"/><text x="48.4990%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.2490%" y="597" width="0.0649%" height="15" fill="rgb(224,52,10)" fg:x="744" fg:w="1"/><text x="48.4990%" y="607.50"></text></g><g><title>utxo::Block::delete_and_commit (426 samples, 27.63%)</title><rect x="20.7523%" y="1061" width="27.6265%" height="15" fill="rgb(237,179,5)" fg:x="320" fg:w="426"/><text x="21.0023%" y="1071.50">utxo::Block::delete_and_commit</text></g><g><title>utxo::Transaction::delete_many (424 samples, 27.50%)</title><rect x="20.8820%" y="1045" width="27.4968%" height="15" fill="rgb(231,20,6)" fg:x="322" fg:w="424"/><text x="21.1320%" y="1055.50">utxo::Transaction::delete_many</text></g><g><title>utxo::Utxo::pk_range (1 samples, 0.06%)</title><rect x="48.3139%" y="1029" width="0.0649%" height="15" fill="rgb(253,171,45)" fg:x="745" fg:w="1"/><text x="48.5639%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;(redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;,redb::tree_store::btree_base::AccessGuard&lt;()&gt;)&gt; (1 samples, 0.06%)</title><rect x="48.3139%" y="1013" width="0.0649%" height="15" fill="rgb(230,75,49)" fg:x="745" fg:w="1"/><text x="48.5639%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="48.3139%" y="997" width="0.0649%" height="15" fill="rgb(216,83,46)" fg:x="745" fg:w="1"/><text x="48.5639%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="48.3139%" y="981" width="0.0649%" height="15" fill="rgb(236,56,9)" fg:x="745" fg:w="1"/><text x="48.5639%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="48.3139%" y="965" width="0.0649%" height="15" fill="rgb(215,28,34)" fg:x="745" fg:w="1"/><text x="48.5639%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="48.3139%" y="949" width="0.0649%" height="15" fill="rgb(230,222,20)" fg:x="745" fg:w="1"/><text x="48.5639%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.3139%" y="933" width="0.0649%" height="15" fill="rgb(235,209,51)" fg:x="745" fg:w="1"/><text x="48.5639%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.3139%" y="917" width="0.0649%" height="15" fill="rgb(235,167,1)" fg:x="745" fg:w="1"/><text x="48.5639%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="48.3139%" y="901" width="0.0649%" height="15" fill="rgb(248,220,0)" fg:x="745" fg:w="1"/><text x="48.5639%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="48.3139%" y="885" width="0.0649%" height="15" fill="rgb(239,0,18)" fg:x="745" fg:w="1"/><text x="48.5639%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="48.3139%" y="869" width="0.0649%" height="15" fill="rgb(229,179,11)" fg:x="745" fg:w="1"/><text x="48.5639%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="48.3139%" y="853" width="0.0649%" height="15" fill="rgb(226,116,53)" fg:x="745" fg:w="1"/><text x="48.5639%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="48.3139%" y="837" width="0.0649%" height="15" fill="rgb(218,1,49)" fg:x="745" fg:w="1"/><text x="48.5639%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="48.3139%" y="821" width="0.0649%" height="15" fill="rgb(208,184,47)" fg:x="745" fg:w="1"/><text x="48.5639%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.3139%" y="805" width="0.0649%" height="15" fill="rgb(238,174,3)" fg:x="745" fg:w="1"/><text x="48.5639%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.3139%" y="789" width="0.0649%" height="15" fill="rgb(247,188,6)" fg:x="745" fg:w="1"/><text x="48.5639%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.3139%" y="773" width="0.0649%" height="15" fill="rgb(211,165,46)" fg:x="745" fg:w="1"/><text x="48.5639%" y="783.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="48.3787%" y="965" width="0.0649%" height="15" fill="rgb(222,190,10)" fg:x="746" fg:w="1"/><text x="48.6287%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="48.3787%" y="949" width="0.0649%" height="15" fill="rgb(206,185,3)" fg:x="746" fg:w="1"/><text x="48.6287%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="48.3787%" y="933" width="0.0649%" height="15" fill="rgb(244,125,37)" fg:x="746" fg:w="1"/><text x="48.6287%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="48.3787%" y="917" width="0.0649%" height="15" fill="rgb(211,43,7)" fg:x="746" fg:w="1"/><text x="48.6287%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="48.3787%" y="901" width="0.0649%" height="15" fill="rgb(250,41,42)" fg:x="746" fg:w="1"/><text x="48.6287%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="48.3787%" y="885" width="0.0649%" height="15" fill="rgb(254,54,42)" fg:x="746" fg:w="1"/><text x="48.6287%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="869" width="0.0649%" height="15" fill="rgb(213,71,43)" fg:x="746" fg:w="1"/><text x="48.6287%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="853" width="0.0649%" height="15" fill="rgb(249,3,44)" fg:x="746" fg:w="1"/><text x="48.6287%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="48.3787%" y="837" width="0.0649%" height="15" fill="rgb(229,80,41)" fg:x="746" fg:w="1"/><text x="48.6287%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="821" width="0.0649%" height="15" fill="rgb(231,25,28)" fg:x="746" fg:w="1"/><text x="48.6287%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="805" width="0.0649%" height="15" fill="rgb(208,79,48)" fg:x="746" fg:w="1"/><text x="48.6287%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.3787%" y="789" width="0.0649%" height="15" fill="rgb(207,196,38)" fg:x="746" fg:w="1"/><text x="48.6287%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.3787%" y="773" width="0.0649%" height="15" fill="rgb(228,105,49)" fg:x="746" fg:w="1"/><text x="48.6287%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.3787%" y="757" width="0.0649%" height="15" fill="rgb(237,99,15)" fg:x="746" fg:w="1"/><text x="48.6287%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.3787%" y="741" width="0.0649%" height="15" fill="rgb(224,207,46)" fg:x="746" fg:w="1"/><text x="48.6287%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.3787%" y="725" width="0.0649%" height="15" fill="rgb(249,117,50)" fg:x="746" fg:w="1"/><text x="48.6287%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="709" width="0.0649%" height="15" fill="rgb(248,17,13)" fg:x="746" fg:w="1"/><text x="48.6287%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="693" width="0.0649%" height="15" fill="rgb(228,187,36)" fg:x="746" fg:w="1"/><text x="48.6287%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.3787%" y="677" width="0.0649%" height="15" fill="rgb(234,132,20)" fg:x="746" fg:w="1"/><text x="48.6287%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.3787%" y="661" width="0.0649%" height="15" fill="rgb(209,170,46)" fg:x="746" fg:w="1"/><text x="48.6287%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.3787%" y="645" width="0.0649%" height="15" fill="rgb(237,23,19)" fg:x="746" fg:w="1"/><text x="48.6287%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.3787%" y="629" width="0.0649%" height="15" fill="rgb(227,21,26)" fg:x="746" fg:w="1"/><text x="48.6287%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.3787%" y="613" width="0.0649%" height="15" fill="rgb(222,220,48)" fg:x="746" fg:w="1"/><text x="48.6287%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="597" width="0.0649%" height="15" fill="rgb(214,9,16)" fg:x="746" fg:w="1"/><text x="48.6287%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="581" width="0.0649%" height="15" fill="rgb(209,73,30)" fg:x="746" fg:w="1"/><text x="48.6287%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.3787%" y="565" width="0.0649%" height="15" fill="rgb(207,20,33)" fg:x="746" fg:w="1"/><text x="48.6287%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.3787%" y="549" width="0.0649%" height="15" fill="rgb(219,153,12)" fg:x="746" fg:w="1"/><text x="48.6287%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.3787%" y="533" width="0.0649%" height="15" fill="rgb(235,97,25)" fg:x="746" fg:w="1"/><text x="48.6287%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.3787%" y="517" width="0.0649%" height="15" fill="rgb(244,30,34)" fg:x="746" fg:w="1"/><text x="48.6287%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.3787%" y="501" width="0.0649%" height="15" fill="rgb(214,106,45)" fg:x="746" fg:w="1"/><text x="48.6287%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="485" width="0.0649%" height="15" fill="rgb(226,41,9)" fg:x="746" fg:w="1"/><text x="48.6287%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.3787%" y="469" width="0.0649%" height="15" fill="rgb(253,139,29)" fg:x="746" fg:w="1"/><text x="48.6287%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.3787%" y="453" width="0.0649%" height="15" fill="rgb(213,205,39)" fg:x="746" fg:w="1"/><text x="48.6287%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.3787%" y="437" width="0.0649%" height="15" fill="rgb(209,27,10)" fg:x="746" fg:w="1"/><text x="48.6287%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.3787%" y="421" width="0.0649%" height="15" fill="rgb(249,142,16)" fg:x="746" fg:w="1"/><text x="48.6287%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="48.4436%" y="917" width="0.0649%" height="15" fill="rgb(242,65,12)" fg:x="747" fg:w="1"/><text x="48.6936%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.06%)</title><rect x="48.4436%" y="901" width="0.0649%" height="15" fill="rgb(232,48,10)" fg:x="747" fg:w="1"/><text x="48.6936%" y="911.50"></text></g><g><title>core::result::Result::Ok (1 samples, 0.06%)</title><rect x="48.4436%" y="885" width="0.0649%" height="15" fill="rgb(253,67,19)" fg:x="747" fg:w="1"/><text x="48.6936%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="48.4436%" y="869" width="0.0649%" height="15" fill="rgb(227,93,29)" fg:x="747" fg:w="1"/><text x="48.6936%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.4436%" y="853" width="0.0649%" height="15" fill="rgb(226,189,53)" fg:x="747" fg:w="1"/><text x="48.6936%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.4436%" y="837" width="0.0649%" height="15" fill="rgb(223,224,1)" fg:x="747" fg:w="1"/><text x="48.6936%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.4436%" y="821" width="0.0649%" height="15" fill="rgb(221,84,32)" fg:x="747" fg:w="1"/><text x="48.6936%" y="831.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="48.4436%" y="949" width="0.1297%" height="15" fill="rgb(214,189,28)" fg:x="747" fg:w="2"/><text x="48.6936%" y="959.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="48.4436%" y="933" width="0.1297%" height="15" fill="rgb(234,7,52)" fg:x="747" fg:w="2"/><text x="48.6936%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="48.5084%" y="917" width="0.0649%" height="15" fill="rgb(249,73,31)" fg:x="748" fg:w="1"/><text x="48.7584%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="48.5084%" y="901" width="0.0649%" height="15" fill="rgb(253,153,41)" fg:x="748" fg:w="1"/><text x="48.7584%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.5084%" y="885" width="0.0649%" height="15" fill="rgb(249,52,34)" fg:x="748" fg:w="1"/><text x="48.7584%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.5084%" y="869" width="0.0649%" height="15" fill="rgb(236,177,47)" fg:x="748" fg:w="1"/><text x="48.7584%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="48.5084%" y="853" width="0.0649%" height="15" fill="rgb(252,185,45)" fg:x="748" fg:w="1"/><text x="48.7584%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="48.5084%" y="837" width="0.0649%" height="15" fill="rgb(251,15,30)" fg:x="748" fg:w="1"/><text x="48.7584%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="48.5084%" y="821" width="0.0649%" height="15" fill="rgb(233,31,4)" fg:x="748" fg:w="1"/><text x="48.7584%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="48.5084%" y="805" width="0.0649%" height="15" fill="rgb(254,44,24)" fg:x="748" fg:w="1"/><text x="48.7584%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="48.5084%" y="789" width="0.0649%" height="15" fill="rgb(218,54,1)" fg:x="748" fg:w="1"/><text x="48.7584%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="48.5084%" y="773" width="0.0649%" height="15" fill="rgb(243,209,39)" fg:x="748" fg:w="1"/><text x="48.7584%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="48.5084%" y="757" width="0.0649%" height="15" fill="rgb(206,75,33)" fg:x="748" fg:w="1"/><text x="48.7584%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="48.5084%" y="741" width="0.0649%" height="15" fill="rgb(223,108,18)" fg:x="748" fg:w="1"/><text x="48.7584%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="48.5084%" y="725" width="0.0649%" height="15" fill="rgb(244,89,31)" fg:x="748" fg:w="1"/><text x="48.7584%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="48.5084%" y="709" width="0.0649%" height="15" fill="rgb(222,167,27)" fg:x="748" fg:w="1"/><text x="48.7584%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="48.5084%" y="693" width="0.0649%" height="15" fill="rgb(247,41,16)" fg:x="748" fg:w="1"/><text x="48.7584%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.5084%" y="677" width="0.0649%" height="15" fill="rgb(233,168,40)" fg:x="748" fg:w="1"/><text x="48.7584%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.5084%" y="661" width="0.0649%" height="15" fill="rgb(205,211,8)" fg:x="748" fg:w="1"/><text x="48.7584%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.5084%" y="645" width="0.0649%" height="15" fill="rgb(238,105,11)" fg:x="748" fg:w="1"/><text x="48.7584%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="48.5733%" y="933" width="0.0649%" height="15" fill="rgb(223,142,52)" fg:x="749" fg:w="1"/><text x="48.8233%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="48.5733%" y="917" width="0.0649%" height="15" fill="rgb(238,51,33)" fg:x="749" fg:w="1"/><text x="48.8233%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="48.5733%" y="901" width="0.0649%" height="15" fill="rgb(231,188,43)" fg:x="749" fg:w="1"/><text x="48.8233%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="48.5733%" y="885" width="0.0649%" height="15" fill="rgb(216,92,17)" fg:x="749" fg:w="1"/><text x="48.8233%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="48.5733%" y="869" width="0.0649%" height="15" fill="rgb(228,2,40)" fg:x="749" fg:w="1"/><text x="48.8233%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="48.5733%" y="853" width="0.0649%" height="15" fill="rgb(226,73,15)" fg:x="749" fg:w="1"/><text x="48.8233%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="48.5733%" y="837" width="0.0649%" height="15" fill="rgb(227,66,46)" fg:x="749" fg:w="1"/><text x="48.8233%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="48.5733%" y="821" width="0.0649%" height="15" fill="rgb(209,71,6)" fg:x="749" fg:w="1"/><text x="48.8233%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="48.5733%" y="805" width="0.0649%" height="15" fill="rgb(246,100,25)" fg:x="749" fg:w="1"/><text x="48.8233%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="48.5733%" y="789" width="0.0649%" height="15" fill="rgb(248,185,27)" fg:x="749" fg:w="1"/><text x="48.8233%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="48.5733%" y="773" width="0.0649%" height="15" fill="rgb(225,118,47)" fg:x="749" fg:w="1"/><text x="48.8233%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="48.5733%" y="757" width="0.0649%" height="15" fill="rgb(220,185,44)" fg:x="749" fg:w="1"/><text x="48.8233%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="48.5733%" y="741" width="0.0649%" height="15" fill="rgb(227,95,24)" fg:x="749" fg:w="1"/><text x="48.8233%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="48.5733%" y="725" width="0.0649%" height="15" fill="rgb(252,84,24)" fg:x="749" fg:w="1"/><text x="48.8233%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.5733%" y="709" width="0.0649%" height="15" fill="rgb(240,34,44)" fg:x="749" fg:w="1"/><text x="48.8233%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.5733%" y="693" width="0.0649%" height="15" fill="rgb(209,72,54)" fg:x="749" fg:w="1"/><text x="48.8233%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.5733%" y="677" width="0.0649%" height="15" fill="rgb(226,19,45)" fg:x="749" fg:w="1"/><text x="48.8233%" y="687.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="48.6381%" y="885" width="0.0649%" height="15" fill="rgb(246,7,45)" fg:x="750" fg:w="1"/><text x="48.8881%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="48.6381%" y="869" width="0.0649%" height="15" fill="rgb(225,45,2)" fg:x="750" fg:w="1"/><text x="48.8881%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="48.6381%" y="853" width="0.0649%" height="15" fill="rgb(221,80,29)" fg:x="750" fg:w="1"/><text x="48.8881%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="48.6381%" y="837" width="0.0649%" height="15" fill="rgb(228,11,19)" fg:x="750" fg:w="1"/><text x="48.8881%" y="847.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="48.6381%" y="821" width="0.0649%" height="15" fill="rgb(243,17,21)" fg:x="750" fg:w="1"/><text x="48.8881%" y="831.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="805" width="0.0649%" height="15" fill="rgb(243,88,8)" fg:x="750" fg:w="1"/><text x="48.8881%" y="815.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="789" width="0.0649%" height="15" fill="rgb(214,17,9)" fg:x="750" fg:w="1"/><text x="48.8881%" y="799.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="48.6381%" y="773" width="0.0649%" height="15" fill="rgb(232,169,15)" fg:x="750" fg:w="1"/><text x="48.8881%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="757" width="0.0649%" height="15" fill="rgb(232,86,53)" fg:x="750" fg:w="1"/><text x="48.8881%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="741" width="0.0649%" height="15" fill="rgb(222,100,4)" fg:x="750" fg:w="1"/><text x="48.8881%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.6381%" y="725" width="0.0649%" height="15" fill="rgb(253,151,38)" fg:x="750" fg:w="1"/><text x="48.8881%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.6381%" y="709" width="0.0649%" height="15" fill="rgb(238,215,29)" fg:x="750" fg:w="1"/><text x="48.8881%" y="719.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.6381%" y="693" width="0.0649%" height="15" fill="rgb(205,128,53)" fg:x="750" fg:w="1"/><text x="48.8881%" y="703.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.6381%" y="677" width="0.0649%" height="15" fill="rgb(248,183,14)" fg:x="750" fg:w="1"/><text x="48.8881%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.6381%" y="661" width="0.0649%" height="15" fill="rgb(244,172,35)" fg:x="750" fg:w="1"/><text x="48.8881%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="645" width="0.0649%" height="15" fill="rgb(234,93,19)" fg:x="750" fg:w="1"/><text x="48.8881%" y="655.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="629" width="0.0649%" height="15" fill="rgb(227,109,7)" fg:x="750" fg:w="1"/><text x="48.8881%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.6381%" y="613" width="0.0649%" height="15" fill="rgb(233,136,54)" fg:x="750" fg:w="1"/><text x="48.8881%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.6381%" y="597" width="0.0649%" height="15" fill="rgb(233,19,40)" fg:x="750" fg:w="1"/><text x="48.8881%" y="607.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.6381%" y="581" width="0.0649%" height="15" fill="rgb(247,41,18)" fg:x="750" fg:w="1"/><text x="48.8881%" y="591.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.6381%" y="565" width="0.0649%" height="15" fill="rgb(220,34,34)" fg:x="750" fg:w="1"/><text x="48.8881%" y="575.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.6381%" y="549" width="0.0649%" height="15" fill="rgb(222,135,32)" fg:x="750" fg:w="1"/><text x="48.8881%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="533" width="0.0649%" height="15" fill="rgb(214,80,19)" fg:x="750" fg:w="1"/><text x="48.8881%" y="543.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="517" width="0.0649%" height="15" fill="rgb(234,54,46)" fg:x="750" fg:w="1"/><text x="48.8881%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.6381%" y="501" width="0.0649%" height="15" fill="rgb(251,48,23)" fg:x="750" fg:w="1"/><text x="48.8881%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.6381%" y="485" width="0.0649%" height="15" fill="rgb(254,109,52)" fg:x="750" fg:w="1"/><text x="48.8881%" y="495.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.6381%" y="469" width="0.0649%" height="15" fill="rgb(240,186,19)" fg:x="750" fg:w="1"/><text x="48.8881%" y="479.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.6381%" y="453" width="0.0649%" height="15" fill="rgb(246,187,17)" fg:x="750" fg:w="1"/><text x="48.8881%" y="463.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.6381%" y="437" width="0.0649%" height="15" fill="rgb(212,21,5)" fg:x="750" fg:w="1"/><text x="48.8881%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="421" width="0.0649%" height="15" fill="rgb(225,185,18)" fg:x="750" fg:w="1"/><text x="48.8881%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.6381%" y="405" width="0.0649%" height="15" fill="rgb(245,114,17)" fg:x="750" fg:w="1"/><text x="48.8881%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.6381%" y="389" width="0.0649%" height="15" fill="rgb(223,164,24)" fg:x="750" fg:w="1"/><text x="48.8881%" y="399.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.6381%" y="373" width="0.0649%" height="15" fill="rgb(211,228,3)" fg:x="750" fg:w="1"/><text x="48.8881%" y="383.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="48.6381%" y="357" width="0.0649%" height="15" fill="rgb(223,16,38)" fg:x="750" fg:w="1"/><text x="48.8881%" y="367.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="48.6381%" y="341" width="0.0649%" height="15" fill="rgb(207,31,54)" fg:x="750" fg:w="1"/><text x="48.8881%" y="351.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="48.6381%" y="325" width="0.0649%" height="15" fill="rgb(220,39,11)" fg:x="750" fg:w="1"/><text x="48.8881%" y="335.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="48.6381%" y="309" width="0.0649%" height="15" fill="rgb(235,185,0)" fg:x="750" fg:w="1"/><text x="48.8881%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="48.6381%" y="293" width="0.0649%" height="15" fill="rgb(249,39,18)" fg:x="750" fg:w="1"/><text x="48.8881%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.6381%" y="277" width="0.0649%" height="15" fill="rgb(240,110,33)" fg:x="750" fg:w="1"/><text x="48.8881%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.6381%" y="261" width="0.0649%" height="15" fill="rgb(210,92,42)" fg:x="750" fg:w="1"/><text x="48.8881%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.6381%" y="245" width="0.0649%" height="15" fill="rgb(218,215,28)" fg:x="750" fg:w="1"/><text x="48.8881%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.7030%" y="869" width="0.0649%" height="15" fill="rgb(238,215,36)" fg:x="751" fg:w="1"/><text x="48.9530%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.7030%" y="853" width="0.0649%" height="15" fill="rgb(220,31,10)" fg:x="751" fg:w="1"/><text x="48.9530%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.7030%" y="837" width="0.0649%" height="15" fill="rgb(212,93,14)" fg:x="751" fg:w="1"/><text x="48.9530%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="48.7030%" y="885" width="0.1297%" height="15" fill="rgb(254,207,2)" fg:x="751" fg:w="2"/><text x="48.9530%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="48.7678%" y="869" width="0.0649%" height="15" fill="rgb(205,57,44)" fg:x="752" fg:w="1"/><text x="49.0178%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="48.7678%" y="853" width="0.0649%" height="15" fill="rgb(226,151,19)" fg:x="752" fg:w="1"/><text x="49.0178%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="48.7678%" y="837" width="0.0649%" height="15" fill="rgb(230,72,30)" fg:x="752" fg:w="1"/><text x="49.0178%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="48.7678%" y="821" width="0.0649%" height="15" fill="rgb(244,0,8)" fg:x="752" fg:w="1"/><text x="49.0178%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="48.7678%" y="805" width="0.0649%" height="15" fill="rgb(230,192,6)" fg:x="752" fg:w="1"/><text x="49.0178%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.7678%" y="789" width="0.0649%" height="15" fill="rgb(233,207,13)" fg:x="752" fg:w="1"/><text x="49.0178%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.7678%" y="773" width="0.0649%" height="15" fill="rgb(206,227,7)" fg:x="752" fg:w="1"/><text x="49.0178%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="48.7678%" y="757" width="0.0649%" height="15" fill="rgb(213,217,25)" fg:x="752" fg:w="1"/><text x="49.0178%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="48.7678%" y="741" width="0.0649%" height="15" fill="rgb(249,75,4)" fg:x="752" fg:w="1"/><text x="49.0178%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="48.7678%" y="725" width="0.0649%" height="15" fill="rgb(225,114,18)" fg:x="752" fg:w="1"/><text x="49.0178%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="48.7678%" y="709" width="0.0649%" height="15" fill="rgb(211,162,40)" fg:x="752" fg:w="1"/><text x="49.0178%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="48.7678%" y="693" width="0.0649%" height="15" fill="rgb(206,49,29)" fg:x="752" fg:w="1"/><text x="49.0178%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.7678%" y="677" width="0.0649%" height="15" fill="rgb(244,8,6)" fg:x="752" fg:w="1"/><text x="49.0178%" y="687.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.7678%" y="661" width="0.0649%" height="15" fill="rgb(231,194,28)" fg:x="752" fg:w="1"/><text x="49.0178%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.7678%" y="645" width="0.0649%" height="15" fill="rgb(210,69,5)" fg:x="752" fg:w="1"/><text x="49.0178%" y="655.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.7678%" y="629" width="0.0649%" height="15" fill="rgb(216,186,12)" fg:x="752" fg:w="1"/><text x="49.0178%" y="639.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="48.7678%" y="613" width="0.0649%" height="15" fill="rgb(238,61,15)" fg:x="752" fg:w="1"/><text x="49.0178%" y="623.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="48.7678%" y="597" width="0.0649%" height="15" fill="rgb(226,104,1)" fg:x="752" fg:w="1"/><text x="49.0178%" y="607.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="48.7678%" y="581" width="0.0649%" height="15" fill="rgb(229,128,15)" fg:x="752" fg:w="1"/><text x="49.0178%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="48.7678%" y="565" width="0.0649%" height="15" fill="rgb(247,110,15)" fg:x="752" fg:w="1"/><text x="49.0178%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="48.7678%" y="549" width="0.0649%" height="15" fill="rgb(210,74,48)" fg:x="752" fg:w="1"/><text x="49.0178%" y="559.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="48.7678%" y="533" width="0.0649%" height="15" fill="rgb(246,121,10)" fg:x="752" fg:w="1"/><text x="49.0178%" y="543.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="48.7678%" y="517" width="0.0649%" height="15" fill="rgb(214,156,37)" fg:x="752" fg:w="1"/><text x="49.0178%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.7678%" y="501" width="0.0649%" height="15" fill="rgb(214,210,34)" fg:x="752" fg:w="1"/><text x="49.0178%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.7678%" y="485" width="0.0649%" height="15" fill="rgb(237,93,35)" fg:x="752" fg:w="1"/><text x="49.0178%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.7678%" y="469" width="0.0649%" height="15" fill="rgb(206,36,8)" fg:x="752" fg:w="1"/><text x="49.0178%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.8327%" y="549" width="0.0649%" height="15" fill="rgb(208,151,12)" fg:x="753" fg:w="1"/><text x="49.0827%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="48.8327%" y="533" width="0.0649%" height="15" fill="rgb(225,133,52)" fg:x="753" fg:w="1"/><text x="49.0827%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.8327%" y="517" width="0.0649%" height="15" fill="rgb(231,71,53)" fg:x="753" fg:w="1"/><text x="49.0827%" y="527.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="48.8327%" y="501" width="0.0649%" height="15" fill="rgb(243,76,21)" fg:x="753" fg:w="1"/><text x="49.0827%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="48.8327%" y="485" width="0.0649%" height="15" fill="rgb(252,144,3)" fg:x="753" fg:w="1"/><text x="49.0827%" y="495.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="48.8327%" y="469" width="0.0649%" height="15" fill="rgb(231,199,10)" fg:x="753" fg:w="1"/><text x="49.0827%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.8327%" y="453" width="0.0649%" height="15" fill="rgb(215,18,11)" fg:x="753" fg:w="1"/><text x="49.0827%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.8327%" y="437" width="0.0649%" height="15" fill="rgb(241,65,24)" fg:x="753" fg:w="1"/><text x="49.0827%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.8327%" y="421" width="0.0649%" height="15" fill="rgb(251,192,38)" fg:x="753" fg:w="1"/><text x="49.0827%" y="431.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (5 samples, 0.32%)</title><rect x="48.6381%" y="933" width="0.3243%" height="15" fill="rgb(205,9,35)" fg:x="750" fg:w="5"/><text x="48.8881%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (5 samples, 0.32%)</title><rect x="48.6381%" y="917" width="0.3243%" height="15" fill="rgb(229,225,49)" fg:x="750" fg:w="5"/><text x="48.8881%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (5 samples, 0.32%)</title><rect x="48.6381%" y="901" width="0.3243%" height="15" fill="rgb(207,125,39)" fg:x="750" fg:w="5"/><text x="48.8881%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="48.8327%" y="885" width="0.1297%" height="15" fill="rgb(222,78,19)" fg:x="753" fg:w="2"/><text x="49.0827%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="48.8327%" y="869" width="0.1297%" height="15" fill="rgb(248,207,20)" fg:x="753" fg:w="2"/><text x="49.0827%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="48.8327%" y="853" width="0.1297%" height="15" fill="rgb(205,103,49)" fg:x="753" fg:w="2"/><text x="49.0827%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="48.8327%" y="837" width="0.1297%" height="15" fill="rgb(216,42,28)" fg:x="753" fg:w="2"/><text x="49.0827%" y="847.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="48.8327%" y="821" width="0.1297%" height="15" fill="rgb(213,205,53)" fg:x="753" fg:w="2"/><text x="49.0827%" y="831.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="48.8327%" y="805" width="0.1297%" height="15" fill="rgb(239,140,53)" fg:x="753" fg:w="2"/><text x="49.0827%" y="815.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="48.8327%" y="789" width="0.1297%" height="15" fill="rgb(248,95,9)" fg:x="753" fg:w="2"/><text x="49.0827%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="48.8327%" y="773" width="0.1297%" height="15" fill="rgb(254,58,47)" fg:x="753" fg:w="2"/><text x="49.0827%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="48.8327%" y="757" width="0.1297%" height="15" fill="rgb(234,227,14)" fg:x="753" fg:w="2"/><text x="49.0827%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="48.8327%" y="741" width="0.1297%" height="15" fill="rgb(205,192,45)" fg:x="753" fg:w="2"/><text x="49.0827%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="48.8327%" y="725" width="0.1297%" height="15" fill="rgb(253,187,31)" fg:x="753" fg:w="2"/><text x="49.0827%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="48.8327%" y="709" width="0.1297%" height="15" fill="rgb(222,6,32)" fg:x="753" fg:w="2"/><text x="49.0827%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="48.8327%" y="693" width="0.1297%" height="15" fill="rgb(249,190,19)" fg:x="753" fg:w="2"/><text x="49.0827%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="48.8327%" y="677" width="0.1297%" height="15" fill="rgb(251,28,20)" fg:x="753" fg:w="2"/><text x="49.0827%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="48.8327%" y="661" width="0.1297%" height="15" fill="rgb(210,223,40)" fg:x="753" fg:w="2"/><text x="49.0827%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="48.8327%" y="645" width="0.1297%" height="15" fill="rgb(216,137,22)" fg:x="753" fg:w="2"/><text x="49.0827%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="48.8327%" y="629" width="0.1297%" height="15" fill="rgb(247,39,34)" fg:x="753" fg:w="2"/><text x="49.0827%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="48.8327%" y="613" width="0.1297%" height="15" fill="rgb(239,43,50)" fg:x="753" fg:w="2"/><text x="49.0827%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="48.8327%" y="597" width="0.1297%" height="15" fill="rgb(241,212,9)" fg:x="753" fg:w="2"/><text x="49.0827%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="48.8327%" y="581" width="0.1297%" height="15" fill="rgb(205,8,2)" fg:x="753" fg:w="2"/><text x="49.0827%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="48.8327%" y="565" width="0.1297%" height="15" fill="rgb(217,173,54)" fg:x="753" fg:w="2"/><text x="49.0827%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.8975%" y="549" width="0.0649%" height="15" fill="rgb(208,149,52)" fg:x="754" fg:w="1"/><text x="49.1475%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.8975%" y="533" width="0.0649%" height="15" fill="rgb(239,99,40)" fg:x="754" fg:w="1"/><text x="49.1475%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.8975%" y="517" width="0.0649%" height="15" fill="rgb(233,214,26)" fg:x="754" fg:w="1"/><text x="49.1475%" y="527.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="48.9624%" y="869" width="0.0649%" height="15" fill="rgb(231,225,37)" fg:x="755" fg:w="1"/><text x="49.2124%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.9624%" y="853" width="0.0649%" height="15" fill="rgb(252,55,35)" fg:x="755" fg:w="1"/><text x="49.2124%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.9624%" y="837" width="0.0649%" height="15" fill="rgb(239,43,18)" fg:x="755" fg:w="1"/><text x="49.2124%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="48.9624%" y="821" width="0.0649%" height="15" fill="rgb(251,125,49)" fg:x="755" fg:w="1"/><text x="49.2124%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="48.9624%" y="805" width="0.0649%" height="15" fill="rgb(212,83,54)" fg:x="755" fg:w="1"/><text x="49.2124%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="48.9624%" y="789" width="0.0649%" height="15" fill="rgb(250,75,6)" fg:x="755" fg:w="1"/><text x="49.2124%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="48.9624%" y="773" width="0.0649%" height="15" fill="rgb(252,36,40)" fg:x="755" fg:w="1"/><text x="49.2124%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="48.9624%" y="757" width="0.0649%" height="15" fill="rgb(230,91,51)" fg:x="755" fg:w="1"/><text x="49.2124%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="48.9624%" y="741" width="0.0649%" height="15" fill="rgb(212,92,28)" fg:x="755" fg:w="1"/><text x="49.2124%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="48.9624%" y="725" width="0.0649%" height="15" fill="rgb(227,13,22)" fg:x="755" fg:w="1"/><text x="49.2124%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="48.9624%" y="709" width="0.0649%" height="15" fill="rgb(239,204,32)" fg:x="755" fg:w="1"/><text x="49.2124%" y="719.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="48.9624%" y="693" width="0.0649%" height="15" fill="rgb(228,49,41)" fg:x="755" fg:w="1"/><text x="49.2124%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="48.9624%" y="677" width="0.0649%" height="15" fill="rgb(206,95,6)" fg:x="755" fg:w="1"/><text x="49.2124%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="48.9624%" y="661" width="0.0649%" height="15" fill="rgb(251,20,14)" fg:x="755" fg:w="1"/><text x="49.2124%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="48.9624%" y="645" width="0.0649%" height="15" fill="rgb(214,99,28)" fg:x="755" fg:w="1"/><text x="49.2124%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="48.9624%" y="629" width="0.0649%" height="15" fill="rgb(239,122,54)" fg:x="755" fg:w="1"/><text x="49.2124%" y="639.50"></text></g><g><title>utxo::Block::first (11 samples, 0.71%)</title><rect x="48.3787%" y="1061" width="0.7134%" height="15" fill="rgb(218,217,46)" fg:x="746" fg:w="11"/><text x="48.6287%" y="1071.50"></text></g><g><title>utxo::Block::compose (11 samples, 0.71%)</title><rect x="48.3787%" y="1045" width="0.7134%" height="15" fill="rgb(249,106,28)" fg:x="746" fg:w="11"/><text x="48.6287%" y="1055.50"></text></g><g><title>utxo::Transaction::range (11 samples, 0.71%)</title><rect x="48.3787%" y="1029" width="0.7134%" height="15" fill="rgb(250,158,18)" fg:x="746" fg:w="11"/><text x="48.6287%" y="1039.50"></text></g><g><title>utxo::Transaction::compose (11 samples, 0.71%)</title><rect x="48.3787%" y="1013" width="0.7134%" height="15" fill="rgb(226,137,29)" fg:x="746" fg:w="11"/><text x="48.6287%" y="1023.50"></text></g><g><title>utxo::Utxo::range (11 samples, 0.71%)</title><rect x="48.3787%" y="997" width="0.7134%" height="15" fill="rgb(210,188,1)" fg:x="746" fg:w="11"/><text x="48.6287%" y="1007.50"></text></g><g><title>utxo::Utxo::compose (11 samples, 0.71%)</title><rect x="48.3787%" y="981" width="0.7134%" height="15" fill="rgb(227,84,42)" fg:x="746" fg:w="11"/><text x="48.6287%" y="991.50"></text></g><g><title>utxo::Asset::range (10 samples, 0.65%)</title><rect x="48.4436%" y="965" width="0.6485%" height="15" fill="rgb(222,147,48)" fg:x="747" fg:w="10"/><text x="48.6936%" y="975.50"></text></g><g><title>utxo::Asset::compose (8 samples, 0.52%)</title><rect x="48.5733%" y="949" width="0.5188%" height="15" fill="rgb(241,150,43)" fg:x="749" fg:w="8"/><text x="48.8233%" y="959.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (2 samples, 0.13%)</title><rect x="48.9624%" y="933" width="0.1297%" height="15" fill="rgb(206,139,52)" fg:x="755" fg:w="2"/><text x="49.2124%" y="943.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (2 samples, 0.13%)</title><rect x="48.9624%" y="917" width="0.1297%" height="15" fill="rgb(230,63,14)" fg:x="755" fg:w="2"/><text x="49.2124%" y="927.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (2 samples, 0.13%)</title><rect x="48.9624%" y="901" width="0.1297%" height="15" fill="rgb(247,8,20)" fg:x="755" fg:w="2"/><text x="49.2124%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="48.9624%" y="885" width="0.1297%" height="15" fill="rgb(213,115,4)" fg:x="755" fg:w="2"/><text x="49.2124%" y="895.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="49.0272%" y="869" width="0.0649%" height="15" fill="rgb(241,79,49)" fg:x="756" fg:w="1"/><text x="49.2772%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="49.0272%" y="853" width="0.0649%" height="15" fill="rgb(222,42,35)" fg:x="756" fg:w="1"/><text x="49.2772%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="49.0272%" y="837" width="0.0649%" height="15" fill="rgb(247,59,23)" fg:x="756" fg:w="1"/><text x="49.2772%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="49.0272%" y="821" width="0.0649%" height="15" fill="rgb(247,93,18)" fg:x="756" fg:w="1"/><text x="49.2772%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.0272%" y="805" width="0.0649%" height="15" fill="rgb(249,107,47)" fg:x="756" fg:w="1"/><text x="49.2772%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.0272%" y="789" width="0.0649%" height="15" fill="rgb(219,27,1)" fg:x="756" fg:w="1"/><text x="49.2772%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.0272%" y="773" width="0.0649%" height="15" fill="rgb(217,82,32)" fg:x="756" fg:w="1"/><text x="49.2772%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="49.0921%" y="917" width="0.0649%" height="15" fill="rgb(250,129,47)" fg:x="757" fg:w="1"/><text x="49.3421%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="49.0921%" y="901" width="0.0649%" height="15" fill="rgb(253,88,35)" fg:x="757" fg:w="1"/><text x="49.3421%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="49.0921%" y="885" width="0.0649%" height="15" fill="rgb(245,221,14)" fg:x="757" fg:w="1"/><text x="49.3421%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.06%)</title><rect x="49.0921%" y="869" width="0.0649%" height="15" fill="rgb(217,119,54)" fg:x="757" fg:w="1"/><text x="49.3421%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.0921%" y="853" width="0.0649%" height="15" fill="rgb(247,128,31)" fg:x="757" fg:w="1"/><text x="49.3421%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.0921%" y="837" width="0.0649%" height="15" fill="rgb(211,99,22)" fg:x="757" fg:w="1"/><text x="49.3421%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.0921%" y="821" width="0.0649%" height="15" fill="rgb(212,20,17)" fg:x="757" fg:w="1"/><text x="49.3421%" y="831.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="49.0921%" y="965" width="0.1297%" height="15" fill="rgb(209,159,29)" fg:x="757" fg:w="2"/><text x="49.3421%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="49.0921%" y="949" width="0.1297%" height="15" fill="rgb(222,177,53)" fg:x="757" fg:w="2"/><text x="49.3421%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="49.0921%" y="933" width="0.1297%" height="15" fill="rgb(234,46,43)" fg:x="757" fg:w="2"/><text x="49.3421%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="49.1569%" y="917" width="0.0649%" height="15" fill="rgb(208,108,14)" fg:x="758" fg:w="1"/><text x="49.4069%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="49.1569%" y="901" width="0.0649%" height="15" fill="rgb(226,78,53)" fg:x="758" fg:w="1"/><text x="49.4069%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="49.1569%" y="885" width="0.0649%" height="15" fill="rgb(230,20,41)" fg:x="758" fg:w="1"/><text x="49.4069%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.1569%" y="869" width="0.0649%" height="15" fill="rgb(213,195,35)" fg:x="758" fg:w="1"/><text x="49.4069%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.1569%" y="853" width="0.0649%" height="15" fill="rgb(242,62,36)" fg:x="758" fg:w="1"/><text x="49.4069%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.1569%" y="837" width="0.0649%" height="15" fill="rgb(222,210,37)" fg:x="758" fg:w="1"/><text x="49.4069%" y="847.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="49.2218%" y="949" width="0.0649%" height="15" fill="rgb(232,107,19)" fg:x="759" fg:w="1"/><text x="49.4718%" y="959.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="49.2218%" y="933" width="0.0649%" height="15" fill="rgb(235,85,17)" fg:x="759" fg:w="1"/><text x="49.4718%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="49.2218%" y="917" width="0.0649%" height="15" fill="rgb(219,195,31)" fg:x="759" fg:w="1"/><text x="49.4718%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="49.2218%" y="901" width="0.0649%" height="15" fill="rgb(231,183,30)" fg:x="759" fg:w="1"/><text x="49.4718%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="49.2218%" y="885" width="0.0649%" height="15" fill="rgb(212,0,11)" fg:x="759" fg:w="1"/><text x="49.4718%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="49.2218%" y="869" width="0.0649%" height="15" fill="rgb(249,53,54)" fg:x="759" fg:w="1"/><text x="49.4718%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="49.2218%" y="853" width="0.0649%" height="15" fill="rgb(211,118,13)" fg:x="759" fg:w="1"/><text x="49.4718%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="49.2218%" y="837" width="0.0649%" height="15" fill="rgb(237,42,9)" fg:x="759" fg:w="1"/><text x="49.4718%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="49.2218%" y="821" width="0.0649%" height="15" fill="rgb(227,68,32)" fg:x="759" fg:w="1"/><text x="49.4718%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="49.2218%" y="805" width="0.0649%" height="15" fill="rgb(238,10,7)" fg:x="759" fg:w="1"/><text x="49.4718%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="49.2218%" y="789" width="0.0649%" height="15" fill="rgb(224,42,12)" fg:x="759" fg:w="1"/><text x="49.4718%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="49.2218%" y="773" width="0.0649%" height="15" fill="rgb(252,190,5)" fg:x="759" fg:w="1"/><text x="49.4718%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="49.2218%" y="757" width="0.0649%" height="15" fill="rgb(220,214,39)" fg:x="759" fg:w="1"/><text x="49.4718%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="49.2218%" y="741" width="0.0649%" height="15" fill="rgb(247,98,4)" fg:x="759" fg:w="1"/><text x="49.4718%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="49.2218%" y="725" width="0.0649%" height="15" fill="rgb(211,60,12)" fg:x="759" fg:w="1"/><text x="49.4718%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="49.2218%" y="709" width="0.0649%" height="15" fill="rgb(224,42,10)" fg:x="759" fg:w="1"/><text x="49.4718%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="49.2218%" y="693" width="0.0649%" height="15" fill="rgb(217,167,4)" fg:x="759" fg:w="1"/><text x="49.4718%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.2218%" y="677" width="0.0649%" height="15" fill="rgb(253,18,17)" fg:x="759" fg:w="1"/><text x="49.4718%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.2218%" y="661" width="0.0649%" height="15" fill="rgb(249,186,44)" fg:x="759" fg:w="1"/><text x="49.4718%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.2218%" y="645" width="0.0649%" height="15" fill="rgb(254,124,54)" fg:x="759" fg:w="1"/><text x="49.4718%" y="655.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="49.2866%" y="885" width="0.0649%" height="15" fill="rgb(220,124,39)" fg:x="760" fg:w="1"/><text x="49.5366%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="49.2866%" y="869" width="0.0649%" height="15" fill="rgb(225,96,46)" fg:x="760" fg:w="1"/><text x="49.5366%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="49.2866%" y="853" width="0.0649%" height="15" fill="rgb(221,106,12)" fg:x="760" fg:w="1"/><text x="49.5366%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="49.2866%" y="837" width="0.0649%" height="15" fill="rgb(227,133,23)" fg:x="760" fg:w="1"/><text x="49.5366%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="49.2866%" y="821" width="0.0649%" height="15" fill="rgb(216,44,52)" fg:x="760" fg:w="1"/><text x="49.5366%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="49.2866%" y="805" width="0.0649%" height="15" fill="rgb(239,149,7)" fg:x="760" fg:w="1"/><text x="49.5366%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.2866%" y="789" width="0.0649%" height="15" fill="rgb(211,157,31)" fg:x="760" fg:w="1"/><text x="49.5366%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.2866%" y="773" width="0.0649%" height="15" fill="rgb(206,215,22)" fg:x="760" fg:w="1"/><text x="49.5366%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="49.2866%" y="757" width="0.0649%" height="15" fill="rgb(208,113,15)" fg:x="760" fg:w="1"/><text x="49.5366%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="49.2866%" y="741" width="0.0649%" height="15" fill="rgb(207,189,15)" fg:x="760" fg:w="1"/><text x="49.5366%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="49.2866%" y="725" width="0.0649%" height="15" fill="rgb(231,115,4)" fg:x="760" fg:w="1"/><text x="49.5366%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="49.2866%" y="709" width="0.0649%" height="15" fill="rgb(253,117,2)" fg:x="760" fg:w="1"/><text x="49.5366%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="49.2866%" y="693" width="0.0649%" height="15" fill="rgb(248,48,24)" fg:x="760" fg:w="1"/><text x="49.5366%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.2866%" y="677" width="0.0649%" height="15" fill="rgb(241,28,46)" fg:x="760" fg:w="1"/><text x="49.5366%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.2866%" y="661" width="0.0649%" height="15" fill="rgb(216,165,52)" fg:x="760" fg:w="1"/><text x="49.5366%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="49.2866%" y="645" width="0.0649%" height="15" fill="rgb(220,222,34)" fg:x="760" fg:w="1"/><text x="49.5366%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="49.2866%" y="629" width="0.0649%" height="15" fill="rgb(247,222,49)" fg:x="760" fg:w="1"/><text x="49.5366%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="49.2866%" y="613" width="0.0649%" height="15" fill="rgb(240,10,31)" fg:x="760" fg:w="1"/><text x="49.5366%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="49.2866%" y="597" width="0.0649%" height="15" fill="rgb(221,199,35)" fg:x="760" fg:w="1"/><text x="49.5366%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="49.2866%" y="581" width="0.0649%" height="15" fill="rgb(230,223,11)" fg:x="760" fg:w="1"/><text x="49.5366%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.2866%" y="565" width="0.0649%" height="15" fill="rgb(218,82,45)" fg:x="760" fg:w="1"/><text x="49.5366%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.2866%" y="549" width="0.0649%" height="15" fill="rgb(233,213,33)" fg:x="760" fg:w="1"/><text x="49.5366%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.2866%" y="533" width="0.0649%" height="15" fill="rgb(210,143,52)" fg:x="760" fg:w="1"/><text x="49.5366%" y="543.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (2 samples, 0.13%)</title><rect x="49.2866%" y="949" width="0.1297%" height="15" fill="rgb(206,95,4)" fg:x="760" fg:w="2"/><text x="49.5366%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (2 samples, 0.13%)</title><rect x="49.2866%" y="933" width="0.1297%" height="15" fill="rgb(246,164,46)" fg:x="760" fg:w="2"/><text x="49.5366%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (2 samples, 0.13%)</title><rect x="49.2866%" y="917" width="0.1297%" height="15" fill="rgb(213,210,47)" fg:x="760" fg:w="2"/><text x="49.5366%" y="927.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (2 samples, 0.13%)</title><rect x="49.2866%" y="901" width="0.1297%" height="15" fill="rgb(210,12,38)" fg:x="760" fg:w="2"/><text x="49.5366%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="49.3515%" y="885" width="0.0649%" height="15" fill="rgb(252,192,54)" fg:x="761" fg:w="1"/><text x="49.6015%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="49.3515%" y="869" width="0.0649%" height="15" fill="rgb(242,92,6)" fg:x="761" fg:w="1"/><text x="49.6015%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="49.3515%" y="853" width="0.0649%" height="15" fill="rgb(253,154,15)" fg:x="761" fg:w="1"/><text x="49.6015%" y="863.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="49.3515%" y="837" width="0.0649%" height="15" fill="rgb(209,20,43)" fg:x="761" fg:w="1"/><text x="49.6015%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="49.3515%" y="821" width="0.0649%" height="15" fill="rgb(232,28,49)" fg:x="761" fg:w="1"/><text x="49.6015%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="49.3515%" y="805" width="0.0649%" height="15" fill="rgb(248,131,53)" fg:x="761" fg:w="1"/><text x="49.6015%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="49.3515%" y="789" width="0.0649%" height="15" fill="rgb(214,16,30)" fg:x="761" fg:w="1"/><text x="49.6015%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="49.3515%" y="773" width="0.0649%" height="15" fill="rgb(245,16,0)" fg:x="761" fg:w="1"/><text x="49.6015%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="49.3515%" y="757" width="0.0649%" height="15" fill="rgb(245,17,35)" fg:x="761" fg:w="1"/><text x="49.6015%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.3515%" y="741" width="0.0649%" height="15" fill="rgb(249,27,53)" fg:x="761" fg:w="1"/><text x="49.6015%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.3515%" y="725" width="0.0649%" height="15" fill="rgb(214,73,24)" fg:x="761" fg:w="1"/><text x="49.6015%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.3515%" y="709" width="0.0649%" height="15" fill="rgb(223,84,37)" fg:x="761" fg:w="1"/><text x="49.6015%" y="719.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4163%" y="629" width="0.0649%" height="15" fill="rgb(210,109,28)" fg:x="762" fg:w="1"/><text x="49.6663%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="49.4163%" y="613" width="0.0649%" height="15" fill="rgb(208,186,6)" fg:x="762" fg:w="1"/><text x="49.6663%" y="623.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="49.4163%" y="597" width="0.0649%" height="15" fill="rgb(235,201,30)" fg:x="762" fg:w="1"/><text x="49.6663%" y="607.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="49.4163%" y="581" width="0.0649%" height="15" fill="rgb(216,198,48)" fg:x="762" fg:w="1"/><text x="49.6663%" y="591.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="49.4163%" y="565" width="0.0649%" height="15" fill="rgb(254,186,25)" fg:x="762" fg:w="1"/><text x="49.6663%" y="575.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="49.4163%" y="549" width="0.0649%" height="15" fill="rgb(227,87,5)" fg:x="762" fg:w="1"/><text x="49.6663%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="49.4163%" y="533" width="0.0649%" height="15" fill="rgb(236,205,25)" fg:x="762" fg:w="1"/><text x="49.6663%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="49.4163%" y="517" width="0.0649%" height="15" fill="rgb(229,99,32)" fg:x="762" fg:w="1"/><text x="49.6663%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.4163%" y="501" width="0.0649%" height="15" fill="rgb(231,177,31)" fg:x="762" fg:w="1"/><text x="49.6663%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.4163%" y="485" width="0.0649%" height="15" fill="rgb(246,15,2)" fg:x="762" fg:w="1"/><text x="49.6663%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.4163%" y="469" width="0.0649%" height="15" fill="rgb(207,39,15)" fg:x="762" fg:w="1"/><text x="49.6663%" y="479.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="49.4163%" y="885" width="0.1297%" height="15" fill="rgb(207,44,9)" fg:x="762" fg:w="2"/><text x="49.6663%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="49.4163%" y="869" width="0.1297%" height="15" fill="rgb(225,224,33)" fg:x="762" fg:w="2"/><text x="49.6663%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="49.4163%" y="853" width="0.1297%" height="15" fill="rgb(252,151,3)" fg:x="762" fg:w="2"/><text x="49.6663%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="49.4163%" y="837" width="0.1297%" height="15" fill="rgb(211,140,13)" fg:x="762" fg:w="2"/><text x="49.6663%" y="847.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="49.4163%" y="821" width="0.1297%" height="15" fill="rgb(239,225,17)" fg:x="762" fg:w="2"/><text x="49.6663%" y="831.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="49.4163%" y="805" width="0.1297%" height="15" fill="rgb(223,170,52)" fg:x="762" fg:w="2"/><text x="49.6663%" y="815.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="49.4163%" y="789" width="0.1297%" height="15" fill="rgb(212,64,21)" fg:x="762" fg:w="2"/><text x="49.6663%" y="799.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="49.4163%" y="773" width="0.1297%" height="15" fill="rgb(236,126,48)" fg:x="762" fg:w="2"/><text x="49.6663%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.4163%" y="757" width="0.1297%" height="15" fill="rgb(209,135,11)" fg:x="762" fg:w="2"/><text x="49.6663%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.4163%" y="741" width="0.1297%" height="15" fill="rgb(228,126,40)" fg:x="762" fg:w="2"/><text x="49.6663%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="49.4163%" y="725" width="0.1297%" height="15" fill="rgb(205,196,36)" fg:x="762" fg:w="2"/><text x="49.6663%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="49.4163%" y="709" width="0.1297%" height="15" fill="rgb(243,160,33)" fg:x="762" fg:w="2"/><text x="49.6663%" y="719.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="49.4163%" y="693" width="0.1297%" height="15" fill="rgb(210,84,20)" fg:x="762" fg:w="2"/><text x="49.6663%" y="703.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="49.4163%" y="677" width="0.1297%" height="15" fill="rgb(228,213,30)" fg:x="762" fg:w="2"/><text x="49.6663%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="49.4163%" y="661" width="0.1297%" height="15" fill="rgb(252,33,45)" fg:x="762" fg:w="2"/><text x="49.6663%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.4163%" y="645" width="0.1297%" height="15" fill="rgb(254,227,20)" fg:x="762" fg:w="2"/><text x="49.6663%" y="655.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="629" width="0.0649%" height="15" fill="rgb(228,192,2)" fg:x="763" fg:w="1"/><text x="49.7312%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="49.4812%" y="613" width="0.0649%" height="15" fill="rgb(233,32,8)" fg:x="763" fg:w="1"/><text x="49.7312%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="49.4812%" y="597" width="0.0649%" height="15" fill="rgb(220,146,47)" fg:x="763" fg:w="1"/><text x="49.7312%" y="607.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="49.4812%" y="581" width="0.0649%" height="15" fill="rgb(246,194,1)" fg:x="763" fg:w="1"/><text x="49.7312%" y="591.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="49.4812%" y="565" width="0.0649%" height="15" fill="rgb(218,203,9)" fg:x="763" fg:w="1"/><text x="49.7312%" y="575.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="49.4812%" y="549" width="0.0649%" height="15" fill="rgb(237,97,14)" fg:x="763" fg:w="1"/><text x="49.7312%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="533" width="0.0649%" height="15" fill="rgb(239,76,15)" fg:x="763" fg:w="1"/><text x="49.7312%" y="543.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="517" width="0.0649%" height="15" fill="rgb(222,53,45)" fg:x="763" fg:w="1"/><text x="49.7312%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="49.4812%" y="501" width="0.0649%" height="15" fill="rgb(237,88,5)" fg:x="763" fg:w="1"/><text x="49.7312%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="49.4812%" y="485" width="0.0649%" height="15" fill="rgb(218,223,35)" fg:x="763" fg:w="1"/><text x="49.7312%" y="495.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="49.4812%" y="469" width="0.0649%" height="15" fill="rgb(243,229,38)" fg:x="763" fg:w="1"/><text x="49.7312%" y="479.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="49.4812%" y="453" width="0.0649%" height="15" fill="rgb(240,75,41)" fg:x="763" fg:w="1"/><text x="49.7312%" y="463.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="49.4812%" y="437" width="0.0649%" height="15" fill="rgb(209,110,37)" fg:x="763" fg:w="1"/><text x="49.7312%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="421" width="0.0649%" height="15" fill="rgb(221,130,46)" fg:x="763" fg:w="1"/><text x="49.7312%" y="431.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="405" width="0.0649%" height="15" fill="rgb(237,160,20)" fg:x="763" fg:w="1"/><text x="49.7312%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="49.4812%" y="389" width="0.0649%" height="15" fill="rgb(234,126,24)" fg:x="763" fg:w="1"/><text x="49.7312%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="49.4812%" y="373" width="0.0649%" height="15" fill="rgb(207,177,9)" fg:x="763" fg:w="1"/><text x="49.7312%" y="383.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="49.4812%" y="357" width="0.0649%" height="15" fill="rgb(231,191,33)" fg:x="763" fg:w="1"/><text x="49.7312%" y="367.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="49.4812%" y="341" width="0.0649%" height="15" fill="rgb(207,42,1)" fg:x="763" fg:w="1"/><text x="49.7312%" y="351.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="49.4812%" y="325" width="0.0649%" height="15" fill="rgb(218,34,50)" fg:x="763" fg:w="1"/><text x="49.7312%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="309" width="0.0649%" height="15" fill="rgb(254,126,39)" fg:x="763" fg:w="1"/><text x="49.7312%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.4812%" y="293" width="0.0649%" height="15" fill="rgb(251,17,26)" fg:x="763" fg:w="1"/><text x="49.7312%" y="303.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="49.4812%" y="277" width="0.0649%" height="15" fill="rgb(252,215,34)" fg:x="763" fg:w="1"/><text x="49.7312%" y="287.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="49.4812%" y="261" width="0.0649%" height="15" fill="rgb(217,120,44)" fg:x="763" fg:w="1"/><text x="49.7312%" y="271.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="49.4812%" y="245" width="0.0649%" height="15" fill="rgb(211,31,11)" fg:x="763" fg:w="1"/><text x="49.7312%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="49.4812%" y="229" width="0.0649%" height="15" fill="rgb(222,69,51)" fg:x="763" fg:w="1"/><text x="49.7312%" y="239.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="49.4812%" y="213" width="0.0649%" height="15" fill="rgb(215,229,42)" fg:x="763" fg:w="1"/><text x="49.7312%" y="223.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="49.4812%" y="197" width="0.0649%" height="15" fill="rgb(212,102,15)" fg:x="763" fg:w="1"/><text x="49.7312%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="49.4812%" y="181" width="0.0649%" height="15" fill="rgb(205,179,41)" fg:x="763" fg:w="1"/><text x="49.7312%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="49.4812%" y="165" width="0.0649%" height="15" fill="rgb(219,148,46)" fg:x="763" fg:w="1"/><text x="49.7312%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="49.4812%" y="149" width="0.0649%" height="15" fill="rgb(243,40,19)" fg:x="763" fg:w="1"/><text x="49.7312%" y="159.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="49.4812%" y="133" width="0.0649%" height="15" fill="rgb(208,206,34)" fg:x="763" fg:w="1"/><text x="49.7312%" y="143.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="49.4812%" y="117" width="0.0649%" height="15" fill="rgb(244,184,38)" fg:x="763" fg:w="1"/><text x="49.7312%" y="127.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="49.4812%" y="101" width="0.0649%" height="15" fill="rgb(244,151,47)" fg:x="763" fg:w="1"/><text x="49.7312%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.4812%" y="85" width="0.0649%" height="15" fill="rgb(236,134,42)" fg:x="763" fg:w="1"/><text x="49.7312%" y="95.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.4812%" y="69" width="0.0649%" height="15" fill="rgb(233,93,22)" fg:x="763" fg:w="1"/><text x="49.7312%" y="79.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.4812%" y="53" width="0.0649%" height="15" fill="rgb(211,202,10)" fg:x="763" fg:w="1"/><text x="49.7312%" y="63.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.5460%" y="549" width="0.0649%" height="15" fill="rgb(240,63,8)" fg:x="764" fg:w="1"/><text x="49.7960%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="49.5460%" y="533" width="0.0649%" height="15" fill="rgb(214,9,4)" fg:x="764" fg:w="1"/><text x="49.7960%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="49.5460%" y="517" width="0.0649%" height="15" fill="rgb(243,66,45)" fg:x="764" fg:w="1"/><text x="49.7960%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="49.5460%" y="501" width="0.0649%" height="15" fill="rgb(220,50,42)" fg:x="764" fg:w="1"/><text x="49.7960%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="49.5460%" y="485" width="0.0649%" height="15" fill="rgb(220,134,27)" fg:x="764" fg:w="1"/><text x="49.7960%" y="495.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="49.5460%" y="469" width="0.0649%" height="15" fill="rgb(246,151,50)" fg:x="764" fg:w="1"/><text x="49.7960%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="49.5460%" y="453" width="0.0649%" height="15" fill="rgb(238,216,27)" fg:x="764" fg:w="1"/><text x="49.7960%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="49.5460%" y="437" width="0.0649%" height="15" fill="rgb(250,92,11)" fg:x="764" fg:w="1"/><text x="49.7960%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="49.5460%" y="421" width="0.0649%" height="15" fill="rgb(248,183,6)" fg:x="764" fg:w="1"/><text x="49.7960%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="49.5460%" y="405" width="0.0649%" height="15" fill="rgb(211,204,50)" fg:x="764" fg:w="1"/><text x="49.7960%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.5460%" y="389" width="0.0649%" height="15" fill="rgb(252,55,47)" fg:x="764" fg:w="1"/><text x="49.7960%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.5460%" y="373" width="0.0649%" height="15" fill="rgb(240,198,32)" fg:x="764" fg:w="1"/><text x="49.7960%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.5460%" y="357" width="0.0649%" height="15" fill="rgb(224,203,19)" fg:x="764" fg:w="1"/><text x="49.7960%" y="367.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="49.4163%" y="933" width="0.2594%" height="15" fill="rgb(205,27,16)" fg:x="762" fg:w="4"/><text x="49.6663%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="49.4163%" y="917" width="0.2594%" height="15" fill="rgb(224,226,17)" fg:x="762" fg:w="4"/><text x="49.6663%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="49.4163%" y="901" width="0.2594%" height="15" fill="rgb(205,216,54)" fg:x="762" fg:w="4"/><text x="49.6663%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="49.5460%" y="885" width="0.1297%" height="15" fill="rgb(248,168,46)" fg:x="764" fg:w="2"/><text x="49.7960%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="49.5460%" y="869" width="0.1297%" height="15" fill="rgb(226,111,45)" fg:x="764" fg:w="2"/><text x="49.7960%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="49.5460%" y="853" width="0.1297%" height="15" fill="rgb(231,15,9)" fg:x="764" fg:w="2"/><text x="49.7960%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="837" width="0.1297%" height="15" fill="rgb(243,168,3)" fg:x="764" fg:w="2"/><text x="49.7960%" y="847.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="821" width="0.1297%" height="15" fill="rgb(221,220,54)" fg:x="764" fg:w="2"/><text x="49.7960%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="49.5460%" y="805" width="0.1297%" height="15" fill="rgb(232,174,38)" fg:x="764" fg:w="2"/><text x="49.7960%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="789" width="0.1297%" height="15" fill="rgb(205,14,38)" fg:x="764" fg:w="2"/><text x="49.7960%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="773" width="0.1297%" height="15" fill="rgb(234,89,19)" fg:x="764" fg:w="2"/><text x="49.7960%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="49.5460%" y="757" width="0.1297%" height="15" fill="rgb(216,68,51)" fg:x="764" fg:w="2"/><text x="49.7960%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="49.5460%" y="741" width="0.1297%" height="15" fill="rgb(213,49,2)" fg:x="764" fg:w="2"/><text x="49.7960%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="49.5460%" y="725" width="0.1297%" height="15" fill="rgb(242,146,30)" fg:x="764" fg:w="2"/><text x="49.7960%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="49.5460%" y="709" width="0.1297%" height="15" fill="rgb(224,188,11)" fg:x="764" fg:w="2"/><text x="49.7960%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="49.5460%" y="693" width="0.1297%" height="15" fill="rgb(213,159,11)" fg:x="764" fg:w="2"/><text x="49.7960%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="677" width="0.1297%" height="15" fill="rgb(229,13,31)" fg:x="764" fg:w="2"/><text x="49.7960%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="661" width="0.1297%" height="15" fill="rgb(209,103,11)" fg:x="764" fg:w="2"/><text x="49.7960%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="49.5460%" y="645" width="0.1297%" height="15" fill="rgb(206,3,4)" fg:x="764" fg:w="2"/><text x="49.7960%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="49.5460%" y="629" width="0.1297%" height="15" fill="rgb(252,10,49)" fg:x="764" fg:w="2"/><text x="49.7960%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="49.5460%" y="613" width="0.1297%" height="15" fill="rgb(217,160,32)" fg:x="764" fg:w="2"/><text x="49.7960%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="49.5460%" y="597" width="0.1297%" height="15" fill="rgb(249,196,0)" fg:x="764" fg:w="2"/><text x="49.7960%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="49.5460%" y="581" width="0.1297%" height="15" fill="rgb(213,17,48)" fg:x="764" fg:w="2"/><text x="49.7960%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="49.5460%" y="565" width="0.1297%" height="15" fill="rgb(206,42,46)" fg:x="764" fg:w="2"/><text x="49.7960%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.6109%" y="549" width="0.0649%" height="15" fill="rgb(212,105,24)" fg:x="765" fg:w="1"/><text x="49.8609%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="49.6109%" y="533" width="0.0649%" height="15" fill="rgb(243,216,30)" fg:x="765" fg:w="1"/><text x="49.8609%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="49.6109%" y="517" width="0.0649%" height="15" fill="rgb(207,121,3)" fg:x="765" fg:w="1"/><text x="49.8609%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="49.6109%" y="501" width="0.0649%" height="15" fill="rgb(249,78,0)" fg:x="765" fg:w="1"/><text x="49.8609%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="49.6109%" y="485" width="0.0649%" height="15" fill="rgb(244,151,32)" fg:x="765" fg:w="1"/><text x="49.8609%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="49.6109%" y="469" width="0.0649%" height="15" fill="rgb(228,63,25)" fg:x="765" fg:w="1"/><text x="49.8609%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.6109%" y="453" width="0.0649%" height="15" fill="rgb(231,158,23)" fg:x="765" fg:w="1"/><text x="49.8609%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.6109%" y="437" width="0.0649%" height="15" fill="rgb(248,107,23)" fg:x="765" fg:w="1"/><text x="49.8609%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="49.6109%" y="421" width="0.0649%" height="15" fill="rgb(215,168,21)" fg:x="765" fg:w="1"/><text x="49.8609%" y="431.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="49.6109%" y="405" width="0.0649%" height="15" fill="rgb(227,83,22)" fg:x="765" fg:w="1"/><text x="49.8609%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="49.6109%" y="389" width="0.0649%" height="15" fill="rgb(217,118,43)" fg:x="765" fg:w="1"/><text x="49.8609%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="49.6109%" y="373" width="0.0649%" height="15" fill="rgb(229,220,41)" fg:x="765" fg:w="1"/><text x="49.8609%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="49.6109%" y="357" width="0.0649%" height="15" fill="rgb(254,146,46)" fg:x="765" fg:w="1"/><text x="49.8609%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="49.6109%" y="341" width="0.0649%" height="15" fill="rgb(233,208,31)" fg:x="765" fg:w="1"/><text x="49.8609%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="49.6109%" y="325" width="0.0649%" height="15" fill="rgb(222,162,7)" fg:x="765" fg:w="1"/><text x="49.8609%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="49.6109%" y="309" width="0.0649%" height="15" fill="rgb(230,117,45)" fg:x="765" fg:w="1"/><text x="49.8609%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="49.6109%" y="293" width="0.0649%" height="15" fill="rgb(239,163,6)" fg:x="765" fg:w="1"/><text x="49.8609%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="49.6109%" y="277" width="0.0649%" height="15" fill="rgb(246,130,17)" fg:x="765" fg:w="1"/><text x="49.8609%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.6109%" y="261" width="0.0649%" height="15" fill="rgb(216,84,5)" fg:x="765" fg:w="1"/><text x="49.8609%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.6109%" y="245" width="0.0649%" height="15" fill="rgb(230,200,21)" fg:x="765" fg:w="1"/><text x="49.8609%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.6109%" y="229" width="0.0649%" height="15" fill="rgb(224,2,8)" fg:x="765" fg:w="1"/><text x="49.8609%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="49.6757%" y="757" width="0.0649%" height="15" fill="rgb(238,178,10)" fg:x="766" fg:w="1"/><text x="49.9257%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.6757%" y="741" width="0.0649%" height="15" fill="rgb(242,153,24)" fg:x="766" fg:w="1"/><text x="49.9257%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.6757%" y="725" width="0.0649%" height="15" fill="rgb(242,32,48)" fg:x="766" fg:w="1"/><text x="49.9257%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.6757%" y="709" width="0.0649%" height="15" fill="rgb(227,36,0)" fg:x="766" fg:w="1"/><text x="49.9257%" y="719.50"></text></g><g><title>utxo::Block::get (11 samples, 0.71%)</title><rect x="49.0921%" y="1061" width="0.7134%" height="15" fill="rgb(251,33,35)" fg:x="757" fg:w="11"/><text x="49.3421%" y="1071.50"></text></g><g><title>utxo::Block::compose (11 samples, 0.71%)</title><rect x="49.0921%" y="1045" width="0.7134%" height="15" fill="rgb(232,168,51)" fg:x="757" fg:w="11"/><text x="49.3421%" y="1055.50"></text></g><g><title>utxo::Transaction::range (11 samples, 0.71%)</title><rect x="49.0921%" y="1029" width="0.7134%" height="15" fill="rgb(228,56,10)" fg:x="757" fg:w="11"/><text x="49.3421%" y="1039.50"></text></g><g><title>utxo::Transaction::compose (11 samples, 0.71%)</title><rect x="49.0921%" y="1013" width="0.7134%" height="15" fill="rgb(231,10,26)" fg:x="757" fg:w="11"/><text x="49.3421%" y="1023.50"></text></g><g><title>utxo::Utxo::range (11 samples, 0.71%)</title><rect x="49.0921%" y="997" width="0.7134%" height="15" fill="rgb(226,202,12)" fg:x="757" fg:w="11"/><text x="49.3421%" y="1007.50"></text></g><g><title>utxo::Utxo::compose (11 samples, 0.71%)</title><rect x="49.0921%" y="981" width="0.7134%" height="15" fill="rgb(251,49,21)" fg:x="757" fg:w="11"/><text x="49.3421%" y="991.50"></text></g><g><title>utxo::Asset::range (9 samples, 0.58%)</title><rect x="49.2218%" y="965" width="0.5837%" height="15" fill="rgb(206,228,28)" fg:x="759" fg:w="9"/><text x="49.4718%" y="975.50"></text></g><g><title>utxo::Asset::compose (6 samples, 0.39%)</title><rect x="49.4163%" y="949" width="0.3891%" height="15" fill="rgb(205,198,31)" fg:x="762" fg:w="6"/><text x="49.6663%" y="959.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (2 samples, 0.13%)</title><rect x="49.6757%" y="933" width="0.1297%" height="15" fill="rgb(213,69,1)" fg:x="766" fg:w="2"/><text x="49.9257%" y="943.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (2 samples, 0.13%)</title><rect x="49.6757%" y="917" width="0.1297%" height="15" fill="rgb(209,177,9)" fg:x="766" fg:w="2"/><text x="49.9257%" y="927.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (2 samples, 0.13%)</title><rect x="49.6757%" y="901" width="0.1297%" height="15" fill="rgb(227,119,30)" fg:x="766" fg:w="2"/><text x="49.9257%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="49.6757%" y="885" width="0.1297%" height="15" fill="rgb(234,106,41)" fg:x="766" fg:w="2"/><text x="49.9257%" y="895.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="49.6757%" y="869" width="0.1297%" height="15" fill="rgb(244,103,47)" fg:x="766" fg:w="2"/><text x="49.9257%" y="879.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="49.6757%" y="853" width="0.1297%" height="15" fill="rgb(212,211,25)" fg:x="766" fg:w="2"/><text x="49.9257%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="49.6757%" y="837" width="0.1297%" height="15" fill="rgb(208,63,53)" fg:x="766" fg:w="2"/><text x="49.9257%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="49.6757%" y="821" width="0.1297%" height="15" fill="rgb(213,176,21)" fg:x="766" fg:w="2"/><text x="49.9257%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (2 samples, 0.13%)</title><rect x="49.6757%" y="805" width="0.1297%" height="15" fill="rgb(243,124,12)" fg:x="766" fg:w="2"/><text x="49.9257%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (2 samples, 0.13%)</title><rect x="49.6757%" y="789" width="0.1297%" height="15" fill="rgb(239,2,35)" fg:x="766" fg:w="2"/><text x="49.9257%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="49.6757%" y="773" width="0.1297%" height="15" fill="rgb(253,169,22)" fg:x="766" fg:w="2"/><text x="49.9257%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="49.7406%" y="757" width="0.0649%" height="15" fill="rgb(254,51,12)" fg:x="767" fg:w="1"/><text x="49.9906%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.7406%" y="741" width="0.0649%" height="15" fill="rgb(244,17,47)" fg:x="767" fg:w="1"/><text x="49.9906%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.7406%" y="725" width="0.0649%" height="15" fill="rgb(251,45,46)" fg:x="767" fg:w="1"/><text x="49.9906%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.7406%" y="709" width="0.0649%" height="15" fill="rgb(223,87,43)" fg:x="767" fg:w="1"/><text x="49.9906%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.8054%" y="965" width="0.0649%" height="15" fill="rgb(230,132,31)" fg:x="768" fg:w="1"/><text x="50.0554%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.8054%" y="949" width="0.0649%" height="15" fill="rgb(206,99,1)" fg:x="768" fg:w="1"/><text x="50.0554%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.8054%" y="933" width="0.0649%" height="15" fill="rgb(227,110,25)" fg:x="768" fg:w="1"/><text x="50.0554%" y="943.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="49.8054%" y="981" width="0.1297%" height="15" fill="rgb(217,182,7)" fg:x="768" fg:w="2"/><text x="50.0554%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="49.8703%" y="965" width="0.0649%" height="15" fill="rgb(250,176,4)" fg:x="769" fg:w="1"/><text x="50.1203%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="49.8703%" y="949" width="0.0649%" height="15" fill="rgb(244,98,30)" fg:x="769" fg:w="1"/><text x="50.1203%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="49.8703%" y="933" width="0.0649%" height="15" fill="rgb(228,150,42)" fg:x="769" fg:w="1"/><text x="50.1203%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="49.8703%" y="917" width="0.0649%" height="15" fill="rgb(231,91,46)" fg:x="769" fg:w="1"/><text x="50.1203%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="49.8703%" y="901" width="0.0649%" height="15" fill="rgb(252,161,32)" fg:x="769" fg:w="1"/><text x="50.1203%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="49.8703%" y="885" width="0.0649%" height="15" fill="rgb(236,69,41)" fg:x="769" fg:w="1"/><text x="50.1203%" y="895.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="49.8703%" y="869" width="0.0649%" height="15" fill="rgb(212,160,3)" fg:x="769" fg:w="1"/><text x="50.1203%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.8703%" y="853" width="0.0649%" height="15" fill="rgb(216,5,50)" fg:x="769" fg:w="1"/><text x="50.1203%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.8703%" y="837" width="0.0649%" height="15" fill="rgb(241,138,25)" fg:x="769" fg:w="1"/><text x="50.1203%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.8703%" y="821" width="0.0649%" height="15" fill="rgb(239,42,18)" fg:x="769" fg:w="1"/><text x="50.1203%" y="831.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="49.9351%" y="965" width="0.0649%" height="15" fill="rgb(239,40,7)" fg:x="770" fg:w="1"/><text x="50.1851%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="49.9351%" y="949" width="0.0649%" height="15" fill="rgb(239,11,31)" fg:x="770" fg:w="1"/><text x="50.1851%" y="959.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="49.9351%" y="933" width="0.0649%" height="15" fill="rgb(224,77,40)" fg:x="770" fg:w="1"/><text x="50.1851%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (1 samples, 0.06%)</title><rect x="49.9351%" y="917" width="0.0649%" height="15" fill="rgb(226,15,5)" fg:x="770" fg:w="1"/><text x="50.1851%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="49.9351%" y="901" width="0.0649%" height="15" fill="rgb(254,188,5)" fg:x="770" fg:w="1"/><text x="50.1851%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="49.9351%" y="885" width="0.0649%" height="15" fill="rgb(241,148,52)" fg:x="770" fg:w="1"/><text x="50.1851%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="49.9351%" y="869" width="0.0649%" height="15" fill="rgb(251,48,36)" fg:x="770" fg:w="1"/><text x="50.1851%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="49.9351%" y="853" width="0.0649%" height="15" fill="rgb(243,83,13)" fg:x="770" fg:w="1"/><text x="50.1851%" y="863.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="49.9351%" y="837" width="0.0649%" height="15" fill="rgb(210,105,0)" fg:x="770" fg:w="1"/><text x="50.1851%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="49.9351%" y="821" width="0.0649%" height="15" fill="rgb(239,60,36)" fg:x="770" fg:w="1"/><text x="50.1851%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="49.9351%" y="805" width="0.0649%" height="15" fill="rgb(210,20,0)" fg:x="770" fg:w="1"/><text x="50.1851%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="49.9351%" y="789" width="0.0649%" height="15" fill="rgb(244,26,53)" fg:x="770" fg:w="1"/><text x="50.1851%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="49.9351%" y="773" width="0.0649%" height="15" fill="rgb(240,100,49)" fg:x="770" fg:w="1"/><text x="50.1851%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="49.9351%" y="757" width="0.0649%" height="15" fill="rgb(250,46,45)" fg:x="770" fg:w="1"/><text x="50.1851%" y="767.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (1 samples, 0.06%)</title><rect x="50.0000%" y="965" width="0.0649%" height="15" fill="rgb(220,181,29)" fg:x="771" fg:w="1"/><text x="50.2500%" y="975.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (1 samples, 0.06%)</title><rect x="50.0000%" y="949" width="0.0649%" height="15" fill="rgb(213,137,33)" fg:x="771" fg:w="1"/><text x="50.2500%" y="959.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (1 samples, 0.06%)</title><rect x="50.0000%" y="933" width="0.0649%" height="15" fill="rgb(213,27,48)" fg:x="771" fg:w="1"/><text x="50.2500%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="50.0000%" y="917" width="0.0649%" height="15" fill="rgb(245,180,39)" fg:x="771" fg:w="1"/><text x="50.2500%" y="927.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="50.0000%" y="901" width="0.0649%" height="15" fill="rgb(212,158,42)" fg:x="771" fg:w="1"/><text x="50.2500%" y="911.50"></text></g><g><title>redb::types::TypeName::from_bytes (1 samples, 0.06%)</title><rect x="50.0000%" y="885" width="0.0649%" height="15" fill="rgb(228,193,18)" fg:x="771" fg:w="1"/><text x="50.2500%" y="895.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.06%)</title><rect x="50.0000%" y="869" width="0.0649%" height="15" fill="rgb(245,172,29)" fg:x="771" fg:w="1"/><text x="50.2500%" y="879.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.06%)</title><rect x="50.0000%" y="853" width="0.0649%" height="15" fill="rgb(207,98,24)" fg:x="771" fg:w="1"/><text x="50.2500%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.06%)</title><rect x="50.0000%" y="837" width="0.0649%" height="15" fill="rgb(249,92,26)" fg:x="771" fg:w="1"/><text x="50.2500%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.06%)</title><rect x="50.0000%" y="821" width="0.0649%" height="15" fill="rgb(217,176,26)" fg:x="771" fg:w="1"/><text x="50.2500%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.06%)</title><rect x="50.0000%" y="805" width="0.0649%" height="15" fill="rgb(221,8,39)" fg:x="771" fg:w="1"/><text x="50.2500%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="50.0000%" y="789" width="0.0649%" height="15" fill="rgb(208,90,18)" fg:x="771" fg:w="1"/><text x="50.2500%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="50.0000%" y="773" width="0.0649%" height="15" fill="rgb(207,202,30)" fg:x="771" fg:w="1"/><text x="50.2500%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="50.0000%" y="757" width="0.0649%" height="15" fill="rgb(231,124,22)" fg:x="771" fg:w="1"/><text x="50.2500%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="50.0000%" y="741" width="0.0649%" height="15" fill="rgb(206,15,5)" fg:x="771" fg:w="1"/><text x="50.2500%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.06%)</title><rect x="50.0000%" y="725" width="0.0649%" height="15" fill="rgb(239,16,52)" fg:x="771" fg:w="1"/><text x="50.2500%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="50.0000%" y="709" width="0.0649%" height="15" fill="rgb(245,213,29)" fg:x="771" fg:w="1"/><text x="50.2500%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="50.0000%" y="693" width="0.0649%" height="15" fill="rgb(213,203,36)" fg:x="771" fg:w="1"/><text x="50.2500%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="50.0000%" y="677" width="0.0649%" height="15" fill="rgb(209,55,18)" fg:x="771" fg:w="1"/><text x="50.2500%" y="687.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="50.0000%" y="661" width="0.0649%" height="15" fill="rgb(207,133,49)" fg:x="771" fg:w="1"/><text x="50.2500%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="50.0000%" y="645" width="0.0649%" height="15" fill="rgb(240,33,46)" fg:x="771" fg:w="1"/><text x="50.2500%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.0000%" y="629" width="0.0649%" height="15" fill="rgb(212,35,2)" fg:x="771" fg:w="1"/><text x="50.2500%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.0000%" y="613" width="0.0649%" height="15" fill="rgb(231,119,28)" fg:x="771" fg:w="1"/><text x="50.2500%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.0000%" y="597" width="0.0649%" height="15" fill="rgb(252,178,7)" fg:x="771" fg:w="1"/><text x="50.2500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="50.0649%" y="949" width="0.0649%" height="15" fill="rgb(251,91,4)" fg:x="772" fg:w="1"/><text x="50.3149%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="50.0649%" y="933" width="0.0649%" height="15" fill="rgb(233,122,19)" fg:x="772" fg:w="1"/><text x="50.3149%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="50.0649%" y="917" width="0.0649%" height="15" fill="rgb(231,208,46)" fg:x="772" fg:w="1"/><text x="50.3149%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="50.0649%" y="901" width="0.0649%" height="15" fill="rgb(243,15,41)" fg:x="772" fg:w="1"/><text x="50.3149%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="50.0649%" y="885" width="0.0649%" height="15" fill="rgb(210,32,43)" fg:x="772" fg:w="1"/><text x="50.3149%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="50.0649%" y="869" width="0.0649%" height="15" fill="rgb(222,177,15)" fg:x="772" fg:w="1"/><text x="50.3149%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="50.0649%" y="853" width="0.0649%" height="15" fill="rgb(244,121,34)" fg:x="772" fg:w="1"/><text x="50.3149%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="50.0649%" y="837" width="0.0649%" height="15" fill="rgb(234,138,4)" fg:x="772" fg:w="1"/><text x="50.3149%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="50.0649%" y="821" width="0.0649%" height="15" fill="rgb(240,97,48)" fg:x="772" fg:w="1"/><text x="50.3149%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="50.0649%" y="805" width="0.0649%" height="15" fill="rgb(237,65,54)" fg:x="772" fg:w="1"/><text x="50.3149%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="50.0649%" y="789" width="0.0649%" height="15" fill="rgb(214,25,24)" fg:x="772" fg:w="1"/><text x="50.3149%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="50.0649%" y="773" width="0.0649%" height="15" fill="rgb(213,5,3)" fg:x="772" fg:w="1"/><text x="50.3149%" y="783.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="50.0649%" y="757" width="0.0649%" height="15" fill="rgb(219,81,29)" fg:x="772" fg:w="1"/><text x="50.3149%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.0649%" y="741" width="0.0649%" height="15" fill="rgb(220,43,48)" fg:x="772" fg:w="1"/><text x="50.3149%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.0649%" y="725" width="0.0649%" height="15" fill="rgb(239,157,2)" fg:x="772" fg:w="1"/><text x="50.3149%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.0649%" y="709" width="0.0649%" height="15" fill="rgb(213,104,43)" fg:x="772" fg:w="1"/><text x="50.3149%" y="719.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="50.1297%" y="917" width="0.0649%" height="15" fill="rgb(237,84,9)" fg:x="773" fg:w="1"/><text x="50.3797%" y="927.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="50.1297%" y="901" width="0.0649%" height="15" fill="rgb(252,6,33)" fg:x="773" fg:w="1"/><text x="50.3797%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.1297%" y="885" width="0.0649%" height="15" fill="rgb(251,172,22)" fg:x="773" fg:w="1"/><text x="50.3797%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.1297%" y="869" width="0.0649%" height="15" fill="rgb(244,91,53)" fg:x="773" fg:w="1"/><text x="50.3797%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.1297%" y="853" width="0.0649%" height="15" fill="rgb(219,29,30)" fg:x="773" fg:w="1"/><text x="50.3797%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="50.1946%" y="901" width="0.0649%" height="15" fill="rgb(213,3,15)" fg:x="774" fg:w="1"/><text x="50.4446%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="50.1946%" y="885" width="0.0649%" height="15" fill="rgb(208,25,28)" fg:x="774" fg:w="1"/><text x="50.4446%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="50.1946%" y="869" width="0.0649%" height="15" fill="rgb(252,144,25)" fg:x="774" fg:w="1"/><text x="50.4446%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="50.1946%" y="853" width="0.0649%" height="15" fill="rgb(226,220,25)" fg:x="774" fg:w="1"/><text x="50.4446%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="50.1946%" y="837" width="0.0649%" height="15" fill="rgb(212,131,28)" fg:x="774" fg:w="1"/><text x="50.4446%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="50.1946%" y="821" width="0.0649%" height="15" fill="rgb(219,143,52)" fg:x="774" fg:w="1"/><text x="50.4446%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="50.1946%" y="805" width="0.0649%" height="15" fill="rgb(215,56,7)" fg:x="774" fg:w="1"/><text x="50.4446%" y="815.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="50.1946%" y="789" width="0.0649%" height="15" fill="rgb(239,59,51)" fg:x="774" fg:w="1"/><text x="50.4446%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="50.1946%" y="773" width="0.0649%" height="15" fill="rgb(209,215,4)" fg:x="774" fg:w="1"/><text x="50.4446%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.1946%" y="757" width="0.0649%" height="15" fill="rgb(221,118,39)" fg:x="774" fg:w="1"/><text x="50.4446%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.1946%" y="741" width="0.0649%" height="15" fill="rgb(236,6,44)" fg:x="774" fg:w="1"/><text x="50.4446%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.1946%" y="725" width="0.0649%" height="15" fill="rgb(216,122,9)" fg:x="774" fg:w="1"/><text x="50.4446%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.2594%" y="485" width="0.0649%" height="15" fill="rgb(244,134,42)" fg:x="775" fg:w="1"/><text x="50.5094%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.2594%" y="469" width="0.0649%" height="15" fill="rgb(209,189,35)" fg:x="775" fg:w="1"/><text x="50.5094%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.2594%" y="453" width="0.0649%" height="15" fill="rgb(250,47,36)" fg:x="775" fg:w="1"/><text x="50.5094%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.2594%" y="661" width="0.1297%" height="15" fill="rgb(252,112,4)" fg:x="775" fg:w="2"/><text x="50.5094%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.2594%" y="645" width="0.1297%" height="15" fill="rgb(221,79,51)" fg:x="775" fg:w="2"/><text x="50.5094%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="50.2594%" y="629" width="0.1297%" height="15" fill="rgb(232,65,53)" fg:x="775" fg:w="2"/><text x="50.5094%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="50.2594%" y="613" width="0.1297%" height="15" fill="rgb(211,37,7)" fg:x="775" fg:w="2"/><text x="50.5094%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="50.2594%" y="597" width="0.1297%" height="15" fill="rgb(234,221,18)" fg:x="775" fg:w="2"/><text x="50.5094%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="50.2594%" y="581" width="0.1297%" height="15" fill="rgb(220,158,26)" fg:x="775" fg:w="2"/><text x="50.5094%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="50.2594%" y="565" width="0.1297%" height="15" fill="rgb(220,70,6)" fg:x="775" fg:w="2"/><text x="50.5094%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.2594%" y="549" width="0.1297%" height="15" fill="rgb(250,39,48)" fg:x="775" fg:w="2"/><text x="50.5094%" y="559.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.2594%" y="533" width="0.1297%" height="15" fill="rgb(206,40,27)" fg:x="775" fg:w="2"/><text x="50.5094%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="50.2594%" y="517" width="0.1297%" height="15" fill="rgb(247,80,36)" fg:x="775" fg:w="2"/><text x="50.5094%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="50.2594%" y="501" width="0.1297%" height="15" fill="rgb(222,9,20)" fg:x="775" fg:w="2"/><text x="50.5094%" y="511.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.3243%" y="485" width="0.0649%" height="15" fill="rgb(217,26,45)" fg:x="776" fg:w="1"/><text x="50.5743%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.3243%" y="469" width="0.0649%" height="15" fill="rgb(221,67,14)" fg:x="776" fg:w="1"/><text x="50.5743%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.3243%" y="453" width="0.0649%" height="15" fill="rgb(248,100,24)" fg:x="776" fg:w="1"/><text x="50.5743%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="50.3243%" y="437" width="0.0649%" height="15" fill="rgb(230,187,16)" fg:x="776" fg:w="1"/><text x="50.5743%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.3243%" y="421" width="0.0649%" height="15" fill="rgb(205,108,13)" fg:x="776" fg:w="1"/><text x="50.5743%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.3243%" y="405" width="0.0649%" height="15" fill="rgb(235,71,51)" fg:x="776" fg:w="1"/><text x="50.5743%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.3243%" y="389" width="0.0649%" height="15" fill="rgb(251,172,48)" fg:x="776" fg:w="1"/><text x="50.5743%" y="399.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="50.2594%" y="901" width="0.1946%" height="15" fill="rgb(240,96,49)" fg:x="775" fg:w="3"/><text x="50.5094%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (3 samples, 0.19%)</title><rect x="50.2594%" y="885" width="0.1946%" height="15" fill="rgb(235,46,36)" fg:x="775" fg:w="3"/><text x="50.5094%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="50.2594%" y="869" width="0.1946%" height="15" fill="rgb(244,3,49)" fg:x="775" fg:w="3"/><text x="50.5094%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="50.2594%" y="853" width="0.1946%" height="15" fill="rgb(206,78,54)" fg:x="775" fg:w="3"/><text x="50.5094%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="50.2594%" y="837" width="0.1946%" height="15" fill="rgb(208,85,42)" fg:x="775" fg:w="3"/><text x="50.5094%" y="847.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="50.2594%" y="821" width="0.1946%" height="15" fill="rgb(219,196,21)" fg:x="775" fg:w="3"/><text x="50.5094%" y="831.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="50.2594%" y="805" width="0.1946%" height="15" fill="rgb(238,19,9)" fg:x="775" fg:w="3"/><text x="50.5094%" y="815.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="50.2594%" y="789" width="0.1946%" height="15" fill="rgb(206,86,13)" fg:x="775" fg:w="3"/><text x="50.5094%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="50.2594%" y="773" width="0.1946%" height="15" fill="rgb(214,123,40)" fg:x="775" fg:w="3"/><text x="50.5094%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="50.2594%" y="757" width="0.1946%" height="15" fill="rgb(243,53,5)" fg:x="775" fg:w="3"/><text x="50.5094%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="50.2594%" y="741" width="0.1946%" height="15" fill="rgb(254,186,31)" fg:x="775" fg:w="3"/><text x="50.5094%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="50.2594%" y="725" width="0.1946%" height="15" fill="rgb(221,216,25)" fg:x="775" fg:w="3"/><text x="50.5094%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="50.2594%" y="709" width="0.1946%" height="15" fill="rgb(248,107,42)" fg:x="775" fg:w="3"/><text x="50.5094%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="50.2594%" y="693" width="0.1946%" height="15" fill="rgb(221,85,43)" fg:x="775" fg:w="3"/><text x="50.5094%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="50.2594%" y="677" width="0.1946%" height="15" fill="rgb(225,34,24)" fg:x="775" fg:w="3"/><text x="50.5094%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="50.3891%" y="661" width="0.0649%" height="15" fill="rgb(211,119,1)" fg:x="777" fg:w="1"/><text x="50.6391%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.3891%" y="645" width="0.0649%" height="15" fill="rgb(254,216,46)" fg:x="777" fg:w="1"/><text x="50.6391%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.3891%" y="629" width="0.0649%" height="15" fill="rgb(238,11,38)" fg:x="777" fg:w="1"/><text x="50.6391%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.3891%" y="613" width="0.0649%" height="15" fill="rgb(233,50,15)" fg:x="777" fg:w="1"/><text x="50.6391%" y="623.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="50.4540%" y="885" width="0.0649%" height="15" fill="rgb(217,181,29)" fg:x="778" fg:w="1"/><text x="50.7040%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="50.4540%" y="869" width="0.0649%" height="15" fill="rgb(214,56,3)" fg:x="778" fg:w="1"/><text x="50.7040%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="853" width="0.0649%" height="15" fill="rgb(230,69,45)" fg:x="778" fg:w="1"/><text x="50.7040%" y="863.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="837" width="0.0649%" height="15" fill="rgb(224,201,50)" fg:x="778" fg:w="1"/><text x="50.7040%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="50.4540%" y="821" width="0.0649%" height="15" fill="rgb(217,228,18)" fg:x="778" fg:w="1"/><text x="50.7040%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="805" width="0.0649%" height="15" fill="rgb(239,33,44)" fg:x="778" fg:w="1"/><text x="50.7040%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="789" width="0.0649%" height="15" fill="rgb(248,210,23)" fg:x="778" fg:w="1"/><text x="50.7040%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.4540%" y="773" width="0.0649%" height="15" fill="rgb(253,135,8)" fg:x="778" fg:w="1"/><text x="50.7040%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.4540%" y="757" width="0.0649%" height="15" fill="rgb(217,98,21)" fg:x="778" fg:w="1"/><text x="50.7040%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.4540%" y="741" width="0.0649%" height="15" fill="rgb(253,130,21)" fg:x="778" fg:w="1"/><text x="50.7040%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.4540%" y="725" width="0.0649%" height="15" fill="rgb(207,81,54)" fg:x="778" fg:w="1"/><text x="50.7040%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.4540%" y="709" width="0.0649%" height="15" fill="rgb(232,48,33)" fg:x="778" fg:w="1"/><text x="50.7040%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="693" width="0.0649%" height="15" fill="rgb(211,9,35)" fg:x="778" fg:w="1"/><text x="50.7040%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="677" width="0.0649%" height="15" fill="rgb(205,152,21)" fg:x="778" fg:w="1"/><text x="50.7040%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.4540%" y="661" width="0.0649%" height="15" fill="rgb(249,21,27)" fg:x="778" fg:w="1"/><text x="50.7040%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.4540%" y="645" width="0.0649%" height="15" fill="rgb(252,29,24)" fg:x="778" fg:w="1"/><text x="50.7040%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.4540%" y="629" width="0.0649%" height="15" fill="rgb(230,130,50)" fg:x="778" fg:w="1"/><text x="50.7040%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.4540%" y="613" width="0.0649%" height="15" fill="rgb(239,144,14)" fg:x="778" fg:w="1"/><text x="50.7040%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.4540%" y="597" width="0.0649%" height="15" fill="rgb(227,111,50)" fg:x="778" fg:w="1"/><text x="50.7040%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="581" width="0.0649%" height="15" fill="rgb(254,84,20)" fg:x="778" fg:w="1"/><text x="50.7040%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="565" width="0.0649%" height="15" fill="rgb(232,90,48)" fg:x="778" fg:w="1"/><text x="50.7040%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.4540%" y="549" width="0.0649%" height="15" fill="rgb(253,63,47)" fg:x="778" fg:w="1"/><text x="50.7040%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.4540%" y="533" width="0.0649%" height="15" fill="rgb(251,146,35)" fg:x="778" fg:w="1"/><text x="50.7040%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.4540%" y="517" width="0.0649%" height="15" fill="rgb(229,192,35)" fg:x="778" fg:w="1"/><text x="50.7040%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.4540%" y="501" width="0.0649%" height="15" fill="rgb(225,68,9)" fg:x="778" fg:w="1"/><text x="50.7040%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.4540%" y="485" width="0.0649%" height="15" fill="rgb(214,97,34)" fg:x="778" fg:w="1"/><text x="50.7040%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="469" width="0.0649%" height="15" fill="rgb(253,31,26)" fg:x="778" fg:w="1"/><text x="50.7040%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.4540%" y="453" width="0.0649%" height="15" fill="rgb(225,151,47)" fg:x="778" fg:w="1"/><text x="50.7040%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="50.4540%" y="437" width="0.0649%" height="15" fill="rgb(206,185,9)" fg:x="778" fg:w="1"/><text x="50.7040%" y="447.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="50.4540%" y="421" width="0.0649%" height="15" fill="rgb(249,65,17)" fg:x="778" fg:w="1"/><text x="50.7040%" y="431.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="50.4540%" y="405" width="0.0649%" height="15" fill="rgb(220,110,10)" fg:x="778" fg:w="1"/><text x="50.7040%" y="415.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="50.4540%" y="389" width="0.0649%" height="15" fill="rgb(222,198,49)" fg:x="778" fg:w="1"/><text x="50.7040%" y="399.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="50.4540%" y="373" width="0.0649%" height="15" fill="rgb(239,81,13)" fg:x="778" fg:w="1"/><text x="50.7040%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="50.4540%" y="357" width="0.0649%" height="15" fill="rgb(216,128,11)" fg:x="778" fg:w="1"/><text x="50.7040%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="50.4540%" y="341" width="0.0649%" height="15" fill="rgb(247,156,8)" fg:x="778" fg:w="1"/><text x="50.7040%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="50.4540%" y="325" width="0.0649%" height="15" fill="rgb(219,173,1)" fg:x="778" fg:w="1"/><text x="50.7040%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="50.4540%" y="309" width="0.0649%" height="15" fill="rgb(227,42,24)" fg:x="778" fg:w="1"/><text x="50.7040%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="50.4540%" y="293" width="0.0649%" height="15" fill="rgb(253,219,50)" fg:x="778" fg:w="1"/><text x="50.7040%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.4540%" y="277" width="0.0649%" height="15" fill="rgb(215,191,54)" fg:x="778" fg:w="1"/><text x="50.7040%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.4540%" y="261" width="0.0649%" height="15" fill="rgb(238,83,12)" fg:x="778" fg:w="1"/><text x="50.7040%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.4540%" y="245" width="0.0649%" height="15" fill="rgb(205,124,9)" fg:x="778" fg:w="1"/><text x="50.7040%" y="255.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (7 samples, 0.45%)</title><rect x="50.1297%" y="949" width="0.4540%" height="15" fill="rgb(253,174,7)" fg:x="773" fg:w="7"/><text x="50.3797%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (7 samples, 0.45%)</title><rect x="50.1297%" y="933" width="0.4540%" height="15" fill="rgb(206,134,49)" fg:x="773" fg:w="7"/><text x="50.3797%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (6 samples, 0.39%)</title><rect x="50.1946%" y="917" width="0.3891%" height="15" fill="rgb(221,89,20)" fg:x="774" fg:w="6"/><text x="50.4446%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="50.4540%" y="901" width="0.1297%" height="15" fill="rgb(240,205,13)" fg:x="778" fg:w="2"/><text x="50.7040%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="50.5188%" y="885" width="0.0649%" height="15" fill="rgb(237,174,32)" fg:x="779" fg:w="1"/><text x="50.7688%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="50.5188%" y="869" width="0.0649%" height="15" fill="rgb(226,12,15)" fg:x="779" fg:w="1"/><text x="50.7688%" y="879.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="50.5188%" y="853" width="0.0649%" height="15" fill="rgb(245,160,52)" fg:x="779" fg:w="1"/><text x="50.7688%" y="863.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="50.5188%" y="837" width="0.0649%" height="15" fill="rgb(253,80,21)" fg:x="779" fg:w="1"/><text x="50.7688%" y="847.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="50.5188%" y="821" width="0.0649%" height="15" fill="rgb(231,225,22)" fg:x="779" fg:w="1"/><text x="50.7688%" y="831.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="50.5188%" y="805" width="0.0649%" height="15" fill="rgb(253,185,12)" fg:x="779" fg:w="1"/><text x="50.7688%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.5188%" y="789" width="0.0649%" height="15" fill="rgb(234,197,21)" fg:x="779" fg:w="1"/><text x="50.7688%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.5188%" y="773" width="0.0649%" height="15" fill="rgb(210,47,30)" fg:x="779" fg:w="1"/><text x="50.7688%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.5188%" y="757" width="0.0649%" height="15" fill="rgb(246,139,27)" fg:x="779" fg:w="1"/><text x="50.7688%" y="767.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="50.5837%" y="933" width="0.0649%" height="15" fill="rgb(226,130,16)" fg:x="780" fg:w="1"/><text x="50.8337%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="50.5837%" y="917" width="0.0649%" height="15" fill="rgb(237,208,20)" fg:x="780" fg:w="1"/><text x="50.8337%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="50.5837%" y="901" width="0.0649%" height="15" fill="rgb(245,186,28)" fg:x="780" fg:w="1"/><text x="50.8337%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="50.5837%" y="885" width="0.0649%" height="15" fill="rgb(238,105,39)" fg:x="780" fg:w="1"/><text x="50.8337%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="50.5837%" y="869" width="0.0649%" height="15" fill="rgb(253,228,11)" fg:x="780" fg:w="1"/><text x="50.8337%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="50.5837%" y="853" width="0.0649%" height="15" fill="rgb(224,136,38)" fg:x="780" fg:w="1"/><text x="50.8337%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="50.5837%" y="837" width="0.0649%" height="15" fill="rgb(211,3,25)" fg:x="780" fg:w="1"/><text x="50.8337%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="50.5837%" y="821" width="0.0649%" height="15" fill="rgb(238,66,34)" fg:x="780" fg:w="1"/><text x="50.8337%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="50.5837%" y="805" width="0.0649%" height="15" fill="rgb(223,188,11)" fg:x="780" fg:w="1"/><text x="50.8337%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="50.5837%" y="789" width="0.0649%" height="15" fill="rgb(221,10,35)" fg:x="780" fg:w="1"/><text x="50.8337%" y="799.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="50.5837%" y="773" width="0.0649%" height="15" fill="rgb(223,18,44)" fg:x="780" fg:w="1"/><text x="50.8337%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.5837%" y="757" width="0.0649%" height="15" fill="rgb(220,97,41)" fg:x="780" fg:w="1"/><text x="50.8337%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.5837%" y="741" width="0.0649%" height="15" fill="rgb(206,95,45)" fg:x="780" fg:w="1"/><text x="50.8337%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.5837%" y="725" width="0.0649%" height="15" fill="rgb(209,96,13)" fg:x="780" fg:w="1"/><text x="50.8337%" y="735.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (2 samples, 0.13%)</title><rect x="50.5837%" y="949" width="0.1297%" height="15" fill="rgb(237,39,34)" fg:x="780" fg:w="2"/><text x="50.8337%" y="959.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (1 samples, 0.06%)</title><rect x="50.6485%" y="933" width="0.0649%" height="15" fill="rgb(213,49,47)" fg:x="781" fg:w="1"/><text x="50.8985%" y="943.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (1 samples, 0.06%)</title><rect x="50.6485%" y="917" width="0.0649%" height="15" fill="rgb(205,107,27)" fg:x="781" fg:w="1"/><text x="50.8985%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="50.6485%" y="901" width="0.0649%" height="15" fill="rgb(212,142,9)" fg:x="781" fg:w="1"/><text x="50.8985%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="50.6485%" y="885" width="0.0649%" height="15" fill="rgb(226,182,0)" fg:x="781" fg:w="1"/><text x="50.8985%" y="895.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="50.6485%" y="869" width="0.0649%" height="15" fill="rgb(231,3,53)" fg:x="781" fg:w="1"/><text x="50.8985%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="50.6485%" y="853" width="0.0649%" height="15" fill="rgb(246,111,28)" fg:x="781" fg:w="1"/><text x="50.8985%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="50.6485%" y="837" width="0.0649%" height="15" fill="rgb(254,183,7)" fg:x="781" fg:w="1"/><text x="50.8985%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="50.6485%" y="821" width="0.0649%" height="15" fill="rgb(247,177,28)" fg:x="781" fg:w="1"/><text x="50.8985%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="50.6485%" y="805" width="0.0649%" height="15" fill="rgb(244,43,1)" fg:x="781" fg:w="1"/><text x="50.8985%" y="815.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="50.6485%" y="789" width="0.0649%" height="15" fill="rgb(207,2,35)" fg:x="781" fg:w="1"/><text x="50.8985%" y="799.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="50.6485%" y="773" width="0.0649%" height="15" fill="rgb(213,83,22)" fg:x="781" fg:w="1"/><text x="50.8985%" y="783.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="50.6485%" y="757" width="0.0649%" height="15" fill="rgb(246,212,13)" fg:x="781" fg:w="1"/><text x="50.8985%" y="767.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="50.6485%" y="741" width="0.0649%" height="15" fill="rgb(213,127,46)" fg:x="781" fg:w="1"/><text x="50.8985%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.6485%" y="725" width="0.0649%" height="15" fill="rgb(219,215,39)" fg:x="781" fg:w="1"/><text x="50.8985%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.6485%" y="709" width="0.0649%" height="15" fill="rgb(227,99,17)" fg:x="781" fg:w="1"/><text x="50.8985%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.6485%" y="693" width="0.0649%" height="15" fill="rgb(208,155,18)" fg:x="781" fg:w="1"/><text x="50.8985%" y="703.50"></text></g><g><title>utxo::Block::get_transactions (15 samples, 0.97%)</title><rect x="49.8054%" y="1061" width="0.9728%" height="15" fill="rgb(223,204,38)" fg:x="768" fg:w="15"/><text x="50.0554%" y="1071.50"></text></g><g><title>utxo::Transaction::range (15 samples, 0.97%)</title><rect x="49.8054%" y="1045" width="0.9728%" height="15" fill="rgb(212,114,21)" fg:x="768" fg:w="15"/><text x="50.0554%" y="1055.50"></text></g><g><title>utxo::Transaction::compose (15 samples, 0.97%)</title><rect x="49.8054%" y="1029" width="0.9728%" height="15" fill="rgb(250,74,13)" fg:x="768" fg:w="15"/><text x="50.0554%" y="1039.50"></text></g><g><title>utxo::Utxo::range (15 samples, 0.97%)</title><rect x="49.8054%" y="1013" width="0.9728%" height="15" fill="rgb(234,7,1)" fg:x="768" fg:w="15"/><text x="50.0554%" y="1023.50"></text></g><g><title>utxo::Utxo::compose (15 samples, 0.97%)</title><rect x="49.8054%" y="997" width="0.9728%" height="15" fill="rgb(207,138,31)" fg:x="768" fg:w="15"/><text x="50.0554%" y="1007.50"></text></g><g><title>utxo::Asset::range (13 samples, 0.84%)</title><rect x="49.9351%" y="981" width="0.8431%" height="15" fill="rgb(215,186,42)" fg:x="770" fg:w="13"/><text x="50.1851%" y="991.50"></text></g><g><title>utxo::Asset::compose (11 samples, 0.71%)</title><rect x="50.0649%" y="965" width="0.7134%" height="15" fill="rgb(229,205,49)" fg:x="772" fg:w="11"/><text x="50.3149%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="50.7134%" y="949" width="0.0649%" height="15" fill="rgb(216,156,32)" fg:x="782" fg:w="1"/><text x="50.9634%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="50.7134%" y="933" width="0.0649%" height="15" fill="rgb(238,7,21)" fg:x="782" fg:w="1"/><text x="50.9634%" y="943.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="917" width="0.0649%" height="15" fill="rgb(249,190,22)" fg:x="782" fg:w="1"/><text x="50.9634%" y="927.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="901" width="0.0649%" height="15" fill="rgb(253,51,31)" fg:x="782" fg:w="1"/><text x="50.9634%" y="911.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="50.7134%" y="885" width="0.0649%" height="15" fill="rgb(237,90,54)" fg:x="782" fg:w="1"/><text x="50.9634%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="869" width="0.0649%" height="15" fill="rgb(250,214,33)" fg:x="782" fg:w="1"/><text x="50.9634%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="853" width="0.0649%" height="15" fill="rgb(237,10,49)" fg:x="782" fg:w="1"/><text x="50.9634%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.7134%" y="837" width="0.0649%" height="15" fill="rgb(241,56,36)" fg:x="782" fg:w="1"/><text x="50.9634%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.7134%" y="821" width="0.0649%" height="15" fill="rgb(227,164,12)" fg:x="782" fg:w="1"/><text x="50.9634%" y="831.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.7134%" y="805" width="0.0649%" height="15" fill="rgb(249,149,35)" fg:x="782" fg:w="1"/><text x="50.9634%" y="815.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.7134%" y="789" width="0.0649%" height="15" fill="rgb(238,227,50)" fg:x="782" fg:w="1"/><text x="50.9634%" y="799.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.7134%" y="773" width="0.0649%" height="15" fill="rgb(235,102,45)" fg:x="782" fg:w="1"/><text x="50.9634%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="757" width="0.0649%" height="15" fill="rgb(211,10,38)" fg:x="782" fg:w="1"/><text x="50.9634%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="741" width="0.0649%" height="15" fill="rgb(219,77,48)" fg:x="782" fg:w="1"/><text x="50.9634%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.7134%" y="725" width="0.0649%" height="15" fill="rgb(246,6,15)" fg:x="782" fg:w="1"/><text x="50.9634%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.7134%" y="709" width="0.0649%" height="15" fill="rgb(207,220,2)" fg:x="782" fg:w="1"/><text x="50.9634%" y="719.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.7134%" y="693" width="0.0649%" height="15" fill="rgb(242,48,14)" fg:x="782" fg:w="1"/><text x="50.9634%" y="703.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.7134%" y="677" width="0.0649%" height="15" fill="rgb(218,19,27)" fg:x="782" fg:w="1"/><text x="50.9634%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.7134%" y="661" width="0.0649%" height="15" fill="rgb(228,0,35)" fg:x="782" fg:w="1"/><text x="50.9634%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="645" width="0.0649%" height="15" fill="rgb(244,142,54)" fg:x="782" fg:w="1"/><text x="50.9634%" y="655.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="629" width="0.0649%" height="15" fill="rgb(243,217,40)" fg:x="782" fg:w="1"/><text x="50.9634%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.7134%" y="613" width="0.0649%" height="15" fill="rgb(207,114,16)" fg:x="782" fg:w="1"/><text x="50.9634%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.7134%" y="597" width="0.0649%" height="15" fill="rgb(224,33,25)" fg:x="782" fg:w="1"/><text x="50.9634%" y="607.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.7134%" y="581" width="0.0649%" height="15" fill="rgb(230,93,54)" fg:x="782" fg:w="1"/><text x="50.9634%" y="591.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.7134%" y="565" width="0.0649%" height="15" fill="rgb(224,56,24)" fg:x="782" fg:w="1"/><text x="50.9634%" y="575.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.7134%" y="549" width="0.0649%" height="15" fill="rgb(235,189,50)" fg:x="782" fg:w="1"/><text x="50.9634%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="533" width="0.0649%" height="15" fill="rgb(242,173,8)" fg:x="782" fg:w="1"/><text x="50.9634%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.7134%" y="517" width="0.0649%" height="15" fill="rgb(209,206,10)" fg:x="782" fg:w="1"/><text x="50.9634%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="50.7134%" y="501" width="0.0649%" height="15" fill="rgb(213,182,44)" fg:x="782" fg:w="1"/><text x="50.9634%" y="511.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="50.7134%" y="485" width="0.0649%" height="15" fill="rgb(243,51,15)" fg:x="782" fg:w="1"/><text x="50.9634%" y="495.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="50.7134%" y="469" width="0.0649%" height="15" fill="rgb(241,13,14)" fg:x="782" fg:w="1"/><text x="50.9634%" y="479.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="50.7134%" y="453" width="0.0649%" height="15" fill="rgb(239,147,24)" fg:x="782" fg:w="1"/><text x="50.9634%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="50.7134%" y="437" width="0.0649%" height="15" fill="rgb(223,129,16)" fg:x="782" fg:w="1"/><text x="50.9634%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="50.7134%" y="421" width="0.0649%" height="15" fill="rgb(209,169,13)" fg:x="782" fg:w="1"/><text x="50.9634%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="50.7134%" y="405" width="0.0649%" height="15" fill="rgb(235,159,41)" fg:x="782" fg:w="1"/><text x="50.9634%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="50.7134%" y="389" width="0.0649%" height="15" fill="rgb(223,219,48)" fg:x="782" fg:w="1"/><text x="50.9634%" y="399.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="50.7134%" y="373" width="0.0649%" height="15" fill="rgb(236,80,13)" fg:x="782" fg:w="1"/><text x="50.9634%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.7134%" y="357" width="0.0649%" height="15" fill="rgb(213,5,6)" fg:x="782" fg:w="1"/><text x="50.9634%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.7134%" y="341" width="0.0649%" height="15" fill="rgb(205,59,21)" fg:x="782" fg:w="1"/><text x="50.9634%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.7134%" y="325" width="0.0649%" height="15" fill="rgb(247,137,35)" fg:x="782" fg:w="1"/><text x="50.9634%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="50.7782%" y="325" width="0.0649%" height="15" fill="rgb(242,208,28)" fg:x="783" fg:w="1"/><text x="51.0282%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="50.7782%" y="309" width="0.0649%" height="15" fill="rgb(245,62,25)" fg:x="783" fg:w="1"/><text x="51.0282%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="50.7782%" y="293" width="0.0649%" height="15" fill="rgb(233,99,54)" fg:x="783" fg:w="1"/><text x="51.0282%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.7782%" y="277" width="0.0649%" height="15" fill="rgb(213,10,37)" fg:x="783" fg:w="1"/><text x="51.0282%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.7782%" y="261" width="0.0649%" height="15" fill="rgb(235,143,30)" fg:x="783" fg:w="1"/><text x="51.0282%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.7782%" y="245" width="0.0649%" height="15" fill="rgb(250,146,33)" fg:x="783" fg:w="1"/><text x="51.0282%" y="255.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="50.7782%" y="917" width="0.1297%" height="15" fill="rgb(226,198,42)" fg:x="783" fg:w="2"/><text x="51.0282%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="50.7782%" y="901" width="0.1297%" height="15" fill="rgb(222,55,6)" fg:x="783" fg:w="2"/><text x="51.0282%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="50.7782%" y="885" width="0.1297%" height="15" fill="rgb(213,224,31)" fg:x="783" fg:w="2"/><text x="51.0282%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="50.7782%" y="869" width="0.1297%" height="15" fill="rgb(226,103,35)" fg:x="783" fg:w="2"/><text x="51.0282%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="50.7782%" y="853" width="0.1297%" height="15" fill="rgb(205,66,45)" fg:x="783" fg:w="2"/><text x="51.0282%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="837" width="0.1297%" height="15" fill="rgb(226,51,42)" fg:x="783" fg:w="2"/><text x="51.0282%" y="847.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="821" width="0.1297%" height="15" fill="rgb(206,69,1)" fg:x="783" fg:w="2"/><text x="51.0282%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="50.7782%" y="805" width="0.1297%" height="15" fill="rgb(213,228,47)" fg:x="783" fg:w="2"/><text x="51.0282%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="789" width="0.1297%" height="15" fill="rgb(224,204,18)" fg:x="783" fg:w="2"/><text x="51.0282%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="773" width="0.1297%" height="15" fill="rgb(253,187,47)" fg:x="783" fg:w="2"/><text x="51.0282%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="50.7782%" y="757" width="0.1297%" height="15" fill="rgb(232,61,2)" fg:x="783" fg:w="2"/><text x="51.0282%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="50.7782%" y="741" width="0.1297%" height="15" fill="rgb(213,132,35)" fg:x="783" fg:w="2"/><text x="51.0282%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="50.7782%" y="725" width="0.1297%" height="15" fill="rgb(247,33,21)" fg:x="783" fg:w="2"/><text x="51.0282%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="50.7782%" y="709" width="0.1297%" height="15" fill="rgb(233,71,46)" fg:x="783" fg:w="2"/><text x="51.0282%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="50.7782%" y="693" width="0.1297%" height="15" fill="rgb(222,173,43)" fg:x="783" fg:w="2"/><text x="51.0282%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="677" width="0.1297%" height="15" fill="rgb(249,218,47)" fg:x="783" fg:w="2"/><text x="51.0282%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="661" width="0.1297%" height="15" fill="rgb(254,185,48)" fg:x="783" fg:w="2"/><text x="51.0282%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="50.7782%" y="645" width="0.1297%" height="15" fill="rgb(252,165,50)" fg:x="783" fg:w="2"/><text x="51.0282%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="50.7782%" y="629" width="0.1297%" height="15" fill="rgb(206,219,6)" fg:x="783" fg:w="2"/><text x="51.0282%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="50.7782%" y="613" width="0.1297%" height="15" fill="rgb(212,212,45)" fg:x="783" fg:w="2"/><text x="51.0282%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="50.7782%" y="597" width="0.1297%" height="15" fill="rgb(221,31,9)" fg:x="783" fg:w="2"/><text x="51.0282%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="50.7782%" y="581" width="0.1297%" height="15" fill="rgb(234,198,39)" fg:x="783" fg:w="2"/><text x="51.0282%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="565" width="0.1297%" height="15" fill="rgb(252,145,46)" fg:x="783" fg:w="2"/><text x="51.0282%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="549" width="0.1297%" height="15" fill="rgb(237,149,0)" fg:x="783" fg:w="2"/><text x="51.0282%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="50.7782%" y="533" width="0.1297%" height="15" fill="rgb(229,65,5)" fg:x="783" fg:w="2"/><text x="51.0282%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="50.7782%" y="517" width="0.1297%" height="15" fill="rgb(235,60,36)" fg:x="783" fg:w="2"/><text x="51.0282%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="50.7782%" y="501" width="0.1297%" height="15" fill="rgb(222,47,18)" fg:x="783" fg:w="2"/><text x="51.0282%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="50.7782%" y="485" width="0.1297%" height="15" fill="rgb(235,114,22)" fg:x="783" fg:w="2"/><text x="51.0282%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="50.7782%" y="469" width="0.1297%" height="15" fill="rgb(209,167,11)" fg:x="783" fg:w="2"/><text x="51.0282%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="453" width="0.1297%" height="15" fill="rgb(251,73,18)" fg:x="783" fg:w="2"/><text x="51.0282%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="50.7782%" y="437" width="0.1297%" height="15" fill="rgb(217,60,17)" fg:x="783" fg:w="2"/><text x="51.0282%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="50.7782%" y="421" width="0.1297%" height="15" fill="rgb(224,36,37)" fg:x="783" fg:w="2"/><text x="51.0282%" y="431.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="50.7782%" y="405" width="0.1297%" height="15" fill="rgb(211,21,32)" fg:x="783" fg:w="2"/><text x="51.0282%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="50.7782%" y="389" width="0.1297%" height="15" fill="rgb(231,55,48)" fg:x="783" fg:w="2"/><text x="51.0282%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="50.7782%" y="373" width="0.1297%" height="15" fill="rgb(227,42,18)" fg:x="783" fg:w="2"/><text x="51.0282%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="50.7782%" y="357" width="0.1297%" height="15" fill="rgb(217,2,27)" fg:x="783" fg:w="2"/><text x="51.0282%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="50.7782%" y="341" width="0.1297%" height="15" fill="rgb(251,138,23)" fg:x="783" fg:w="2"/><text x="51.0282%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="50.8431%" y="325" width="0.0649%" height="15" fill="rgb(226,184,11)" fg:x="784" fg:w="1"/><text x="51.0931%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="50.8431%" y="309" width="0.0649%" height="15" fill="rgb(242,142,12)" fg:x="784" fg:w="1"/><text x="51.0931%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="50.8431%" y="293" width="0.0649%" height="15" fill="rgb(234,187,18)" fg:x="784" fg:w="1"/><text x="51.0931%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="50.8431%" y="277" width="0.0649%" height="15" fill="rgb(237,44,42)" fg:x="784" fg:w="1"/><text x="51.0931%" y="287.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="50.8431%" y="261" width="0.0649%" height="15" fill="rgb(211,90,23)" fg:x="784" fg:w="1"/><text x="51.0931%" y="271.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="50.8431%" y="245" width="0.0649%" height="15" fill="rgb(207,81,18)" fg:x="784" fg:w="1"/><text x="51.0931%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.8431%" y="229" width="0.0649%" height="15" fill="rgb(222,107,28)" fg:x="784" fg:w="1"/><text x="51.0931%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.8431%" y="213" width="0.0649%" height="15" fill="rgb(237,83,52)" fg:x="784" fg:w="1"/><text x="51.0931%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.8431%" y="197" width="0.0649%" height="15" fill="rgb(208,67,11)" fg:x="784" fg:w="1"/><text x="51.0931%" y="207.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (3 samples, 0.19%)</title><rect x="50.7782%" y="965" width="0.1946%" height="15" fill="rgb(249,157,49)" fg:x="783" fg:w="3"/><text x="51.0282%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (3 samples, 0.19%)</title><rect x="50.7782%" y="949" width="0.1946%" height="15" fill="rgb(243,200,1)" fg:x="783" fg:w="3"/><text x="51.0282%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="50.7782%" y="933" width="0.1946%" height="15" fill="rgb(225,162,37)" fg:x="783" fg:w="3"/><text x="51.0282%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="50.9079%" y="917" width="0.0649%" height="15" fill="rgb(242,92,13)" fg:x="785" fg:w="1"/><text x="51.1579%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="50.9079%" y="901" width="0.0649%" height="15" fill="rgb(220,43,36)" fg:x="785" fg:w="1"/><text x="51.1579%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="50.9079%" y="885" width="0.0649%" height="15" fill="rgb(213,165,48)" fg:x="785" fg:w="1"/><text x="51.1579%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="50.9079%" y="869" width="0.0649%" height="15" fill="rgb(227,200,9)" fg:x="785" fg:w="1"/><text x="51.1579%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="50.9079%" y="853" width="0.0649%" height="15" fill="rgb(221,222,28)" fg:x="785" fg:w="1"/><text x="51.1579%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="50.9079%" y="837" width="0.0649%" height="15" fill="rgb(223,142,26)" fg:x="785" fg:w="1"/><text x="51.1579%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.9079%" y="821" width="0.0649%" height="15" fill="rgb(243,46,9)" fg:x="785" fg:w="1"/><text x="51.1579%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="50.9079%" y="805" width="0.0649%" height="15" fill="rgb(250,56,11)" fg:x="785" fg:w="1"/><text x="51.1579%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="50.9079%" y="789" width="0.0649%" height="15" fill="rgb(229,113,5)" fg:x="785" fg:w="1"/><text x="51.1579%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="50.9079%" y="773" width="0.0649%" height="15" fill="rgb(244,108,28)" fg:x="785" fg:w="1"/><text x="51.1579%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="50.9079%" y="757" width="0.0649%" height="15" fill="rgb(242,119,50)" fg:x="785" fg:w="1"/><text x="51.1579%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="50.9079%" y="741" width="0.0649%" height="15" fill="rgb(224,164,23)" fg:x="785" fg:w="1"/><text x="51.1579%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="50.9079%" y="725" width="0.0649%" height="15" fill="rgb(214,227,44)" fg:x="785" fg:w="1"/><text x="51.1579%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.9079%" y="709" width="0.0649%" height="15" fill="rgb(238,202,4)" fg:x="785" fg:w="1"/><text x="51.1579%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.9079%" y="693" width="0.0649%" height="15" fill="rgb(213,190,30)" fg:x="785" fg:w="1"/><text x="51.1579%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.9079%" y="677" width="0.0649%" height="15" fill="rgb(239,15,2)" fg:x="785" fg:w="1"/><text x="51.1579%" y="687.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="50.9728%" y="949" width="0.0649%" height="15" fill="rgb(249,229,4)" fg:x="786" fg:w="1"/><text x="51.2228%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="50.9728%" y="933" width="0.0649%" height="15" fill="rgb(239,75,44)" fg:x="786" fg:w="1"/><text x="51.2228%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="50.9728%" y="917" width="0.0649%" height="15" fill="rgb(251,206,23)" fg:x="786" fg:w="1"/><text x="51.2228%" y="927.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (1 samples, 0.06%)</title><rect x="50.9728%" y="901" width="0.0649%" height="15" fill="rgb(215,208,0)" fg:x="786" fg:w="1"/><text x="51.2228%" y="911.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="50.9728%" y="885" width="0.0649%" height="15" fill="rgb(230,75,50)" fg:x="786" fg:w="1"/><text x="51.2228%" y="895.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.06%)</title><rect x="50.9728%" y="869" width="0.0649%" height="15" fill="rgb(246,180,39)" fg:x="786" fg:w="1"/><text x="51.2228%" y="879.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.06%)</title><rect x="50.9728%" y="853" width="0.0649%" height="15" fill="rgb(249,175,24)" fg:x="786" fg:w="1"/><text x="51.2228%" y="863.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="50.9728%" y="837" width="0.0649%" height="15" fill="rgb(247,176,22)" fg:x="786" fg:w="1"/><text x="51.2228%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="50.9728%" y="821" width="0.0649%" height="15" fill="rgb(241,100,24)" fg:x="786" fg:w="1"/><text x="51.2228%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="50.9728%" y="805" width="0.0649%" height="15" fill="rgb(233,4,35)" fg:x="786" fg:w="1"/><text x="51.2228%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="50.9728%" y="789" width="0.0649%" height="15" fill="rgb(211,164,46)" fg:x="786" fg:w="1"/><text x="51.2228%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.0376%" y="885" width="0.0649%" height="15" fill="rgb(242,99,53)" fg:x="787" fg:w="1"/><text x="51.2876%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.0376%" y="869" width="0.0649%" height="15" fill="rgb(243,45,33)" fg:x="787" fg:w="1"/><text x="51.2876%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.0376%" y="853" width="0.0649%" height="15" fill="rgb(217,55,21)" fg:x="787" fg:w="1"/><text x="51.2876%" y="863.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.1025%" y="629" width="0.0649%" height="15" fill="rgb(245,145,46)" fg:x="788" fg:w="1"/><text x="51.3525%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="51.1025%" y="613" width="0.0649%" height="15" fill="rgb(215,112,45)" fg:x="788" fg:w="1"/><text x="51.3525%" y="623.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="51.1025%" y="597" width="0.0649%" height="15" fill="rgb(228,104,16)" fg:x="788" fg:w="1"/><text x="51.3525%" y="607.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="51.1025%" y="581" width="0.0649%" height="15" fill="rgb(239,186,38)" fg:x="788" fg:w="1"/><text x="51.3525%" y="591.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="51.1025%" y="565" width="0.0649%" height="15" fill="rgb(228,38,35)" fg:x="788" fg:w="1"/><text x="51.3525%" y="575.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="51.1025%" y="549" width="0.0649%" height="15" fill="rgb(251,42,40)" fg:x="788" fg:w="1"/><text x="51.3525%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="51.1025%" y="533" width="0.0649%" height="15" fill="rgb(210,51,19)" fg:x="788" fg:w="1"/><text x="51.3525%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="51.1025%" y="517" width="0.0649%" height="15" fill="rgb(236,94,42)" fg:x="788" fg:w="1"/><text x="51.3525%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="51.1025%" y="501" width="0.0649%" height="15" fill="rgb(239,167,16)" fg:x="788" fg:w="1"/><text x="51.3525%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="51.1025%" y="485" width="0.0649%" height="15" fill="rgb(252,175,31)" fg:x="788" fg:w="1"/><text x="51.3525%" y="495.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="51.1025%" y="469" width="0.0649%" height="15" fill="rgb(206,166,30)" fg:x="788" fg:w="1"/><text x="51.3525%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="51.1025%" y="453" width="0.0649%" height="15" fill="rgb(206,209,37)" fg:x="788" fg:w="1"/><text x="51.3525%" y="463.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="51.1025%" y="437" width="0.0649%" height="15" fill="rgb(226,91,4)" fg:x="788" fg:w="1"/><text x="51.3525%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.1025%" y="421" width="0.0649%" height="15" fill="rgb(222,167,0)" fg:x="788" fg:w="1"/><text x="51.3525%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.1025%" y="405" width="0.0649%" height="15" fill="rgb(211,70,14)" fg:x="788" fg:w="1"/><text x="51.3525%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.1025%" y="389" width="0.0649%" height="15" fill="rgb(214,84,42)" fg:x="788" fg:w="1"/><text x="51.3525%" y="399.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="51.1025%" y="885" width="0.1297%" height="15" fill="rgb(235,157,37)" fg:x="788" fg:w="2"/><text x="51.3525%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="51.1025%" y="869" width="0.1297%" height="15" fill="rgb(225,13,6)" fg:x="788" fg:w="2"/><text x="51.3525%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="51.1025%" y="853" width="0.1297%" height="15" fill="rgb(205,202,1)" fg:x="788" fg:w="2"/><text x="51.3525%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="51.1025%" y="837" width="0.1297%" height="15" fill="rgb(232,195,26)" fg:x="788" fg:w="2"/><text x="51.3525%" y="847.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="51.1025%" y="821" width="0.1297%" height="15" fill="rgb(208,102,26)" fg:x="788" fg:w="2"/><text x="51.3525%" y="831.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="51.1025%" y="805" width="0.1297%" height="15" fill="rgb(215,41,39)" fg:x="788" fg:w="2"/><text x="51.3525%" y="815.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="51.1025%" y="789" width="0.1297%" height="15" fill="rgb(247,139,11)" fg:x="788" fg:w="2"/><text x="51.3525%" y="799.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="51.1025%" y="773" width="0.1297%" height="15" fill="rgb(243,99,6)" fg:x="788" fg:w="2"/><text x="51.3525%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="51.1025%" y="757" width="0.1297%" height="15" fill="rgb(230,168,48)" fg:x="788" fg:w="2"/><text x="51.3525%" y="767.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="51.1025%" y="741" width="0.1297%" height="15" fill="rgb(238,227,13)" fg:x="788" fg:w="2"/><text x="51.3525%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="51.1025%" y="725" width="0.1297%" height="15" fill="rgb(209,109,13)" fg:x="788" fg:w="2"/><text x="51.3525%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="51.1025%" y="709" width="0.1297%" height="15" fill="rgb(228,195,1)" fg:x="788" fg:w="2"/><text x="51.3525%" y="719.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="51.1025%" y="693" width="0.1297%" height="15" fill="rgb(230,218,0)" fg:x="788" fg:w="2"/><text x="51.3525%" y="703.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="51.1025%" y="677" width="0.1297%" height="15" fill="rgb(206,1,45)" fg:x="788" fg:w="2"/><text x="51.3525%" y="687.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="51.1025%" y="661" width="0.1297%" height="15" fill="rgb(209,124,26)" fg:x="788" fg:w="2"/><text x="51.3525%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="51.1025%" y="645" width="0.1297%" height="15" fill="rgb(220,59,8)" fg:x="788" fg:w="2"/><text x="51.3525%" y="655.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.1673%" y="629" width="0.0649%" height="15" fill="rgb(251,41,37)" fg:x="789" fg:w="1"/><text x="51.4173%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.1673%" y="613" width="0.0649%" height="15" fill="rgb(239,152,21)" fg:x="789" fg:w="1"/><text x="51.4173%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.1673%" y="597" width="0.0649%" height="15" fill="rgb(226,32,1)" fg:x="789" fg:w="1"/><text x="51.4173%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.1673%" y="581" width="0.0649%" height="15" fill="rgb(230,154,36)" fg:x="789" fg:w="1"/><text x="51.4173%" y="591.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="51.0376%" y="933" width="0.2594%" height="15" fill="rgb(208,228,43)" fg:x="787" fg:w="4"/><text x="51.2876%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="51.0376%" y="917" width="0.2594%" height="15" fill="rgb(214,203,3)" fg:x="787" fg:w="4"/><text x="51.2876%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="51.0376%" y="901" width="0.2594%" height="15" fill="rgb(207,149,29)" fg:x="787" fg:w="4"/><text x="51.2876%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="51.2322%" y="885" width="0.0649%" height="15" fill="rgb(250,105,7)" fg:x="790" fg:w="1"/><text x="51.4822%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="51.2322%" y="869" width="0.0649%" height="15" fill="rgb(232,222,16)" fg:x="790" fg:w="1"/><text x="51.4822%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="51.2322%" y="853" width="0.0649%" height="15" fill="rgb(209,32,24)" fg:x="790" fg:w="1"/><text x="51.4822%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="837" width="0.0649%" height="15" fill="rgb(225,13,6)" fg:x="790" fg:w="1"/><text x="51.4822%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="821" width="0.0649%" height="15" fill="rgb(245,226,26)" fg:x="790" fg:w="1"/><text x="51.4822%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="51.2322%" y="805" width="0.0649%" height="15" fill="rgb(229,178,27)" fg:x="790" fg:w="1"/><text x="51.4822%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="789" width="0.0649%" height="15" fill="rgb(205,227,28)" fg:x="790" fg:w="1"/><text x="51.4822%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="773" width="0.0649%" height="15" fill="rgb(210,191,45)" fg:x="790" fg:w="1"/><text x="51.4822%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="51.2322%" y="757" width="0.0649%" height="15" fill="rgb(206,124,16)" fg:x="790" fg:w="1"/><text x="51.4822%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="51.2322%" y="741" width="0.0649%" height="15" fill="rgb(210,162,0)" fg:x="790" fg:w="1"/><text x="51.4822%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="51.2322%" y="725" width="0.0649%" height="15" fill="rgb(211,54,38)" fg:x="790" fg:w="1"/><text x="51.4822%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="51.2322%" y="709" width="0.0649%" height="15" fill="rgb(248,192,3)" fg:x="790" fg:w="1"/><text x="51.4822%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="51.2322%" y="693" width="0.0649%" height="15" fill="rgb(233,187,18)" fg:x="790" fg:w="1"/><text x="51.4822%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="677" width="0.0649%" height="15" fill="rgb(237,208,14)" fg:x="790" fg:w="1"/><text x="51.4822%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="661" width="0.0649%" height="15" fill="rgb(212,77,1)" fg:x="790" fg:w="1"/><text x="51.4822%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="51.2322%" y="645" width="0.0649%" height="15" fill="rgb(210,163,22)" fg:x="790" fg:w="1"/><text x="51.4822%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="51.2322%" y="629" width="0.0649%" height="15" fill="rgb(250,58,28)" fg:x="790" fg:w="1"/><text x="51.4822%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="51.2322%" y="613" width="0.0649%" height="15" fill="rgb(254,28,41)" fg:x="790" fg:w="1"/><text x="51.4822%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="51.2322%" y="597" width="0.0649%" height="15" fill="rgb(237,162,36)" fg:x="790" fg:w="1"/><text x="51.4822%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="51.2322%" y="581" width="0.0649%" height="15" fill="rgb(232,56,6)" fg:x="790" fg:w="1"/><text x="51.4822%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="565" width="0.0649%" height="15" fill="rgb(216,127,42)" fg:x="790" fg:w="1"/><text x="51.4822%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="51.2322%" y="549" width="0.0649%" height="15" fill="rgb(241,69,15)" fg:x="790" fg:w="1"/><text x="51.4822%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="51.2322%" y="533" width="0.0649%" height="15" fill="rgb(227,180,19)" fg:x="790" fg:w="1"/><text x="51.4822%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="51.2322%" y="517" width="0.0649%" height="15" fill="rgb(231,188,29)" fg:x="790" fg:w="1"/><text x="51.4822%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="51.2322%" y="501" width="0.0649%" height="15" fill="rgb(224,176,27)" fg:x="790" fg:w="1"/><text x="51.4822%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="51.2322%" y="485" width="0.0649%" height="15" fill="rgb(249,214,19)" fg:x="790" fg:w="1"/><text x="51.4822%" y="495.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="51.2322%" y="469" width="0.0649%" height="15" fill="rgb(240,0,4)" fg:x="790" fg:w="1"/><text x="51.4822%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="51.2322%" y="453" width="0.0649%" height="15" fill="rgb(233,28,41)" fg:x="790" fg:w="1"/><text x="51.4822%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="51.2322%" y="437" width="0.0649%" height="15" fill="rgb(220,90,51)" fg:x="790" fg:w="1"/><text x="51.4822%" y="447.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="51.2322%" y="421" width="0.0649%" height="15" fill="rgb(250,52,22)" fg:x="790" fg:w="1"/><text x="51.4822%" y="431.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="51.2322%" y="405" width="0.0649%" height="15" fill="rgb(231,152,36)" fg:x="790" fg:w="1"/><text x="51.4822%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.2322%" y="389" width="0.0649%" height="15" fill="rgb(250,218,4)" fg:x="790" fg:w="1"/><text x="51.4822%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.2322%" y="373" width="0.0649%" height="15" fill="rgb(210,38,21)" fg:x="790" fg:w="1"/><text x="51.4822%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.2322%" y="357" width="0.0649%" height="15" fill="rgb(230,75,13)" fg:x="790" fg:w="1"/><text x="51.4822%" y="367.50"></text></g><g><title>utxo::Block::last (9 samples, 0.58%)</title><rect x="50.7782%" y="1061" width="0.5837%" height="15" fill="rgb(250,68,53)" fg:x="783" fg:w="9"/><text x="51.0282%" y="1071.50"></text></g><g><title>utxo::Block::compose (9 samples, 0.58%)</title><rect x="50.7782%" y="1045" width="0.5837%" height="15" fill="rgb(250,210,16)" fg:x="783" fg:w="9"/><text x="51.0282%" y="1055.50"></text></g><g><title>utxo::Transaction::range (9 samples, 0.58%)</title><rect x="50.7782%" y="1029" width="0.5837%" height="15" fill="rgb(240,132,5)" fg:x="783" fg:w="9"/><text x="51.0282%" y="1039.50"></text></g><g><title>utxo::Transaction::compose (9 samples, 0.58%)</title><rect x="50.7782%" y="1013" width="0.5837%" height="15" fill="rgb(222,148,48)" fg:x="783" fg:w="9"/><text x="51.0282%" y="1023.50"></text></g><g><title>utxo::Utxo::range (9 samples, 0.58%)</title><rect x="50.7782%" y="997" width="0.5837%" height="15" fill="rgb(247,181,24)" fg:x="783" fg:w="9"/><text x="51.0282%" y="1007.50"></text></g><g><title>utxo::Utxo::compose (9 samples, 0.58%)</title><rect x="50.7782%" y="981" width="0.5837%" height="15" fill="rgb(239,5,31)" fg:x="783" fg:w="9"/><text x="51.0282%" y="991.50"></text></g><g><title>utxo::Asset::range (6 samples, 0.39%)</title><rect x="50.9728%" y="965" width="0.3891%" height="15" fill="rgb(241,152,38)" fg:x="786" fg:w="6"/><text x="51.2228%" y="975.50"></text></g><g><title>utxo::Asset::compose (5 samples, 0.32%)</title><rect x="51.0376%" y="949" width="0.3243%" height="15" fill="rgb(246,200,37)" fg:x="787" fg:w="5"/><text x="51.2876%" y="959.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (1 samples, 0.06%)</title><rect x="51.2970%" y="933" width="0.0649%" height="15" fill="rgb(243,210,26)" fg:x="791" fg:w="1"/><text x="51.5470%" y="943.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="51.2970%" y="917" width="0.0649%" height="15" fill="rgb(222,22,22)" fg:x="791" fg:w="1"/><text x="51.5470%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="51.2970%" y="901" width="0.0649%" height="15" fill="rgb(208,129,28)" fg:x="791" fg:w="1"/><text x="51.5470%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="51.2970%" y="885" width="0.0649%" height="15" fill="rgb(254,169,28)" fg:x="791" fg:w="1"/><text x="51.5470%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="51.2970%" y="869" width="0.0649%" height="15" fill="rgb(225,45,17)" fg:x="791" fg:w="1"/><text x="51.5470%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="51.2970%" y="853" width="0.0649%" height="15" fill="rgb(232,199,2)" fg:x="791" fg:w="1"/><text x="51.5470%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="51.2970%" y="837" width="0.0649%" height="15" fill="rgb(235,33,40)" fg:x="791" fg:w="1"/><text x="51.5470%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="51.2970%" y="821" width="0.0649%" height="15" fill="rgb(237,89,50)" fg:x="791" fg:w="1"/><text x="51.5470%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="51.2970%" y="805" width="0.0649%" height="15" fill="rgb(238,126,5)" fg:x="791" fg:w="1"/><text x="51.5470%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="51.2970%" y="789" width="0.0649%" height="15" fill="rgb(247,214,42)" fg:x="791" fg:w="1"/><text x="51.5470%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="51.2970%" y="773" width="0.0649%" height="15" fill="rgb(238,60,45)" fg:x="791" fg:w="1"/><text x="51.5470%" y="783.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="51.2970%" y="757" width="0.0649%" height="15" fill="rgb(225,69,44)" fg:x="791" fg:w="1"/><text x="51.5470%" y="767.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="51.2970%" y="741" width="0.0649%" height="15" fill="rgb(241,13,44)" fg:x="791" fg:w="1"/><text x="51.5470%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="51.2970%" y="725" width="0.0649%" height="15" fill="rgb(227,121,22)" fg:x="791" fg:w="1"/><text x="51.5470%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.2970%" y="709" width="0.0649%" height="15" fill="rgb(231,160,23)" fg:x="791" fg:w="1"/><text x="51.5470%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.2970%" y="693" width="0.0649%" height="15" fill="rgb(250,179,43)" fg:x="791" fg:w="1"/><text x="51.5470%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.2970%" y="677" width="0.0649%" height="15" fill="rgb(233,54,46)" fg:x="791" fg:w="1"/><text x="51.5470%" y="687.50"></text></g><g><title>redb::transactions::WriteTransaction::store_freed_pages (1 samples, 0.06%)</title><rect x="51.3619%" y="997" width="0.0649%" height="15" fill="rgb(247,120,42)" fg:x="792" fg:w="1"/><text x="51.6119%" y="1007.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert_reserve (1 samples, 0.06%)</title><rect x="51.3619%" y="981" width="0.0649%" height="15" fill="rgb(221,219,12)" fg:x="792" fg:w="1"/><text x="51.6119%" y="991.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="51.3619%" y="965" width="0.0649%" height="15" fill="rgb(211,126,8)" fg:x="792" fg:w="1"/><text x="51.6119%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (1 samples, 0.06%)</title><rect x="51.3619%" y="949" width="0.0649%" height="15" fill="rgb(218,154,33)" fg:x="792" fg:w="1"/><text x="51.6119%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (1 samples, 0.06%)</title><rect x="51.3619%" y="933" width="0.0649%" height="15" fill="rgb(212,199,16)" fg:x="792" fg:w="1"/><text x="51.6119%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (1 samples, 0.06%)</title><rect x="51.3619%" y="917" width="0.0649%" height="15" fill="rgb(236,215,46)" fg:x="792" fg:w="1"/><text x="51.6119%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="51.3619%" y="901" width="0.0649%" height="15" fill="rgb(232,32,22)" fg:x="792" fg:w="1"/><text x="51.6119%" y="911.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="51.3619%" y="885" width="0.0649%" height="15" fill="rgb(234,79,15)" fg:x="792" fg:w="1"/><text x="51.6119%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.3619%" y="869" width="0.0649%" height="15" fill="rgb(235,187,47)" fg:x="792" fg:w="1"/><text x="51.6119%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.3619%" y="853" width="0.0649%" height="15" fill="rgb(244,69,37)" fg:x="792" fg:w="1"/><text x="51.6119%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.3619%" y="837" width="0.0649%" height="15" fill="rgb(249,140,25)" fg:x="792" fg:w="1"/><text x="51.6119%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::BranchMutator::write_child_page (1 samples, 0.06%)</title><rect x="51.4267%" y="933" width="0.0649%" height="15" fill="rgb(213,69,8)" fg:x="793" fg:w="1"/><text x="51.6767%" y="943.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="51.4267%" y="917" width="0.0649%" height="15" fill="rgb(220,136,2)" fg:x="793" fg:w="1"/><text x="51.6767%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="51.4267%" y="901" width="0.0649%" height="15" fill="rgb(237,50,36)" fg:x="793" fg:w="1"/><text x="51.6767%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="51.4267%" y="885" width="0.0649%" height="15" fill="rgb(226,18,11)" fg:x="793" fg:w="1"/><text x="51.6767%" y="895.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="51.4267%" y="869" width="0.0649%" height="15" fill="rgb(243,156,2)" fg:x="793" fg:w="1"/><text x="51.6767%" y="879.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="51.4267%" y="853" width="0.0649%" height="15" fill="rgb(218,8,34)" fg:x="793" fg:w="1"/><text x="51.6767%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="51.4267%" y="837" width="0.0649%" height="15" fill="rgb(250,94,35)" fg:x="793" fg:w="1"/><text x="51.6767%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="51.4267%" y="821" width="0.0649%" height="15" fill="rgb(229,127,21)" fg:x="793" fg:w="1"/><text x="51.6767%" y="831.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="51.4267%" y="805" width="0.0649%" height="15" fill="rgb(234,49,5)" fg:x="793" fg:w="1"/><text x="51.6767%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.4267%" y="789" width="0.0649%" height="15" fill="rgb(248,12,16)" fg:x="793" fg:w="1"/><text x="51.6767%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.4267%" y="773" width="0.0649%" height="15" fill="rgb(208,220,31)" fg:x="793" fg:w="1"/><text x="51.6767%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.4267%" y="757" width="0.0649%" height="15" fill="rgb(243,184,0)" fg:x="793" fg:w="1"/><text x="51.6767%" y="767.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (2 samples, 0.13%)</title><rect x="51.4267%" y="981" width="0.1297%" height="15" fill="rgb(217,38,21)" fg:x="793" fg:w="2"/><text x="51.6767%" y="991.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (2 samples, 0.13%)</title><rect x="51.4267%" y="965" width="0.1297%" height="15" fill="rgb(239,120,45)" fg:x="793" fg:w="2"/><text x="51.6767%" y="975.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (2 samples, 0.13%)</title><rect x="51.4267%" y="949" width="0.1297%" height="15" fill="rgb(235,33,2)" fg:x="793" fg:w="2"/><text x="51.6767%" y="959.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (1 samples, 0.06%)</title><rect x="51.4916%" y="933" width="0.0649%" height="15" fill="rgb(249,161,5)" fg:x="794" fg:w="1"/><text x="51.7416%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="51.4916%" y="917" width="0.0649%" height="15" fill="rgb(250,165,48)" fg:x="794" fg:w="1"/><text x="51.7416%" y="927.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="51.4916%" y="901" width="0.0649%" height="15" fill="rgb(221,23,45)" fg:x="794" fg:w="1"/><text x="51.7416%" y="911.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="51.4916%" y="885" width="0.0649%" height="15" fill="rgb(217,108,46)" fg:x="794" fg:w="1"/><text x="51.7416%" y="895.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="51.4916%" y="869" width="0.0649%" height="15" fill="rgb(254,26,35)" fg:x="794" fg:w="1"/><text x="51.7416%" y="879.50"></text></g><g><title>std::thread::panicking (1 samples, 0.06%)</title><rect x="51.4916%" y="853" width="0.0649%" height="15" fill="rgb(218,223,28)" fg:x="794" fg:w="1"/><text x="51.7416%" y="863.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.06%)</title><rect x="51.4916%" y="837" width="0.0649%" height="15" fill="rgb(242,27,47)" fg:x="794" fg:w="1"/><text x="51.7416%" y="847.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.06%)</title><rect x="51.4916%" y="821" width="0.0649%" height="15" fill="rgb(218,39,35)" fg:x="794" fg:w="1"/><text x="51.7416%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="51.4916%" y="805" width="0.0649%" height="15" fill="rgb(232,127,16)" fg:x="794" fg:w="1"/><text x="51.7416%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="51.4916%" y="789" width="0.0649%" height="15" fill="rgb(231,219,51)" fg:x="794" fg:w="1"/><text x="51.7416%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.4916%" y="773" width="0.0649%" height="15" fill="rgb(217,220,46)" fg:x="794" fg:w="1"/><text x="51.7416%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.4916%" y="757" width="0.0649%" height="15" fill="rgb(230,75,1)" fg:x="794" fg:w="1"/><text x="51.7416%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.4916%" y="741" width="0.0649%" height="15" fill="rgb(218,2,8)" fg:x="794" fg:w="1"/><text x="51.7416%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi64 (1 samples, 0.06%)</title><rect x="51.5564%" y="805" width="0.0649%" height="15" fill="rgb(206,111,30)" fg:x="795" fg:w="1"/><text x="51.8064%" y="815.50"></text></g><g><title>core::core_arch::x86::m256iExt::as_i64x4 (1 samples, 0.06%)</title><rect x="51.5564%" y="789" width="0.0649%" height="15" fill="rgb(209,135,6)" fg:x="795" fg:w="1"/><text x="51.8064%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.5564%" y="773" width="0.0649%" height="15" fill="rgb(205,169,10)" fg:x="795" fg:w="1"/><text x="51.8064%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.5564%" y="757" width="0.0649%" height="15" fill="rgb(212,204,38)" fg:x="795" fg:w="1"/><text x="51.8064%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.5564%" y="741" width="0.0649%" height="15" fill="rgb(205,199,14)" fg:x="795" fg:w="1"/><text x="51.8064%" y="751.50"></text></g><g><title>redb::transactions::WriteTransaction::commit (5 samples, 0.32%)</title><rect x="51.3619%" y="1045" width="0.3243%" height="15" fill="rgb(212,4,6)" fg:x="792" fg:w="5"/><text x="51.6119%" y="1055.50"></text></g><g><title>redb::transactions::WriteTransaction::commit_inner (5 samples, 0.32%)</title><rect x="51.3619%" y="1029" width="0.3243%" height="15" fill="rgb(250,15,10)" fg:x="792" fg:w="5"/><text x="51.6119%" y="1039.50"></text></g><g><title>redb::transactions::WriteTransaction::durable_commit (5 samples, 0.32%)</title><rect x="51.3619%" y="1013" width="0.3243%" height="15" fill="rgb(212,49,51)" fg:x="792" fg:w="5"/><text x="51.6119%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree::TableTreeMut::flush_table_root_updates (4 samples, 0.26%)</title><rect x="51.4267%" y="997" width="0.2594%" height="15" fill="rgb(235,21,9)" fg:x="793" fg:w="4"/><text x="51.6767%" y="1007.50"></text></g><g><title>redb::tree_store::btree::UntypedBtreeMut::finalize_dirty_checksums (2 samples, 0.13%)</title><rect x="51.5564%" y="981" width="0.1297%" height="15" fill="rgb(251,31,32)" fg:x="795" fg:w="2"/><text x="51.8064%" y="991.50"></text></g><g><title>redb::tree_store::btree::UntypedBtreeMut::finalize_dirty_checksums_helper (2 samples, 0.13%)</title><rect x="51.5564%" y="965" width="0.1297%" height="15" fill="rgb(246,23,9)" fg:x="795" fg:w="2"/><text x="51.8064%" y="975.50"></text></g><g><title>redb::tree_store::btree::UntypedBtreeMut::finalize_dirty_checksums_helper (2 samples, 0.13%)</title><rect x="51.5564%" y="949" width="0.1297%" height="15" fill="rgb(225,216,14)" fg:x="795" fg:w="2"/><text x="51.8064%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::leaf_checksum (2 samples, 0.13%)</title><rect x="51.5564%" y="933" width="0.1297%" height="15" fill="rgb(215,200,26)" fg:x="795" fg:w="2"/><text x="51.8064%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::xxh3_checksum (2 samples, 0.13%)</title><rect x="51.5564%" y="917" width="0.1297%" height="15" fill="rgb(237,130,47)" fg:x="795" fg:w="2"/><text x="51.8064%" y="927.50"></text></g><g><title>redb::tree_store::page_store::xxh3::hash128_with_seed (2 samples, 0.13%)</title><rect x="51.5564%" y="901" width="0.1297%" height="15" fill="rgb(247,74,14)" fg:x="795" fg:w="2"/><text x="51.8064%" y="911.50"></text></g><g><title>redb::tree_store::page_store::xxh3::hash128_large_avx2 (2 samples, 0.13%)</title><rect x="51.5564%" y="885" width="0.1297%" height="15" fill="rgb(254,97,46)" fg:x="795" fg:w="2"/><text x="51.8064%" y="895.50"></text></g><g><title>redb::tree_store::page_store::xxh3::hash128_large_generic (2 samples, 0.13%)</title><rect x="51.5564%" y="869" width="0.1297%" height="15" fill="rgb(234,191,1)" fg:x="795" fg:w="2"/><text x="51.8064%" y="879.50"></text></g><g><title>redb::tree_store::page_store::xxh3::hash_large_helper (2 samples, 0.13%)</title><rect x="51.5564%" y="853" width="0.1297%" height="15" fill="rgb(215,165,14)" fg:x="795" fg:w="2"/><text x="51.8064%" y="863.50"></text></g><g><title>redb::tree_store::page_store::xxh3::accumulate_block (2 samples, 0.13%)</title><rect x="51.5564%" y="837" width="0.1297%" height="15" fill="rgb(230,182,6)" fg:x="795" fg:w="2"/><text x="51.8064%" y="847.50"></text></g><g><title>redb::tree_store::page_store::xxh3::accumulate_stripe_avx2 (2 samples, 0.13%)</title><rect x="51.5564%" y="821" width="0.1297%" height="15" fill="rgb(210,127,39)" fg:x="795" fg:w="2"/><text x="51.8064%" y="831.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (1 samples, 0.06%)</title><rect x="51.6213%" y="805" width="0.0649%" height="15" fill="rgb(223,212,51)" fg:x="796" fg:w="1"/><text x="51.8713%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="51.6213%" y="789" width="0.0649%" height="15" fill="rgb(226,176,43)" fg:x="796" fg:w="1"/><text x="51.8713%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="51.6213%" y="773" width="0.0649%" height="15" fill="rgb(222,155,4)" fg:x="796" fg:w="1"/><text x="51.8713%" y="783.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="51.6213%" y="757" width="0.0649%" height="15" fill="rgb(215,149,7)" fg:x="796" fg:w="1"/><text x="51.8713%" y="767.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="51.6213%" y="741" width="0.0649%" height="15" fill="rgb(252,199,23)" fg:x="796" fg:w="1"/><text x="51.8713%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.6213%" y="725" width="0.0649%" height="15" fill="rgb(245,52,29)" fg:x="796" fg:w="1"/><text x="51.8713%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.6213%" y="709" width="0.0649%" height="15" fill="rgb(221,228,19)" fg:x="796" fg:w="1"/><text x="51.8713%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.6213%" y="693" width="0.0649%" height="15" fill="rgb(253,101,6)" fg:x="796" fg:w="1"/><text x="51.8713%" y="703.50"></text></g><g><title>redb::multimap_table::MultimapTable&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="51.6861%" y="1029" width="0.0649%" height="15" fill="rgb(211,130,8)" fg:x="797" fg:w="1"/><text x="51.9361%" y="1039.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="51.6861%" y="1013" width="0.0649%" height="15" fill="rgb(238,37,53)" fg:x="797" fg:w="1"/><text x="51.9361%" y="1023.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::read_tree (1 samples, 0.06%)</title><rect x="51.6861%" y="997" width="0.0649%" height="15" fill="rgb(235,145,5)" fg:x="797" fg:w="1"/><text x="51.9361%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="51.6861%" y="981" width="0.0649%" height="15" fill="rgb(244,12,43)" fg:x="797" fg:w="1"/><text x="51.9361%" y="991.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="51.6861%" y="965" width="0.0649%" height="15" fill="rgb(246,195,24)" fg:x="797" fg:w="1"/><text x="51.9361%" y="975.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="51.6861%" y="949" width="0.0649%" height="15" fill="rgb(235,163,6)" fg:x="797" fg:w="1"/><text x="51.9361%" y="959.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="51.6861%" y="933" width="0.0649%" height="15" fill="rgb(236,218,17)" fg:x="797" fg:w="1"/><text x="51.9361%" y="943.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="51.6861%" y="917" width="0.0649%" height="15" fill="rgb(235,12,38)" fg:x="797" fg:w="1"/><text x="51.9361%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="51.6861%" y="901" width="0.0649%" height="15" fill="rgb(225,195,33)" fg:x="797" fg:w="1"/><text x="51.9361%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="51.6861%" y="885" width="0.0649%" height="15" fill="rgb(238,54,35)" fg:x="797" fg:w="1"/><text x="51.9361%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="51.6861%" y="869" width="0.0649%" height="15" fill="rgb(238,33,7)" fg:x="797" fg:w="1"/><text x="51.9361%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="51.6861%" y="853" width="0.0649%" height="15" fill="rgb(245,5,14)" fg:x="797" fg:w="1"/><text x="51.9361%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="51.6861%" y="837" width="0.0649%" height="15" fill="rgb(251,95,31)" fg:x="797" fg:w="1"/><text x="51.9361%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="51.6861%" y="821" width="0.0649%" height="15" fill="rgb(222,15,46)" fg:x="797" fg:w="1"/><text x="51.9361%" y="831.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="51.6861%" y="805" width="0.0649%" height="15" fill="rgb(226,182,24)" fg:x="797" fg:w="1"/><text x="51.9361%" y="815.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="51.6861%" y="789" width="0.0649%" height="15" fill="rgb(229,105,41)" fg:x="797" fg:w="1"/><text x="51.9361%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.6861%" y="773" width="0.0649%" height="15" fill="rgb(216,99,53)" fg:x="797" fg:w="1"/><text x="51.9361%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.6861%" y="757" width="0.0649%" height="15" fill="rgb(253,26,20)" fg:x="797" fg:w="1"/><text x="51.9361%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.6861%" y="741" width="0.0649%" height="15" fill="rgb(249,155,28)" fg:x="797" fg:w="1"/><text x="51.9361%" y="751.50"></text></g><g><title>redb::table::Table&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="51.7510%" y="1029" width="0.0649%" height="15" fill="rgb(241,221,2)" fg:x="798" fg:w="1"/><text x="52.0010%" y="1039.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="51.7510%" y="1013" width="0.0649%" height="15" fill="rgb(219,124,6)" fg:x="798" fg:w="1"/><text x="52.0010%" y="1023.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="51.7510%" y="997" width="0.0649%" height="15" fill="rgb(233,37,6)" fg:x="798" fg:w="1"/><text x="52.0010%" y="1007.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (1 samples, 0.06%)</title><rect x="51.7510%" y="981" width="0.0649%" height="15" fill="rgb(238,20,14)" fg:x="798" fg:w="1"/><text x="52.0010%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (1 samples, 0.06%)</title><rect x="51.7510%" y="965" width="0.0649%" height="15" fill="rgb(232,106,27)" fg:x="798" fg:w="1"/><text x="52.0010%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (1 samples, 0.06%)</title><rect x="51.7510%" y="949" width="0.0649%" height="15" fill="rgb(246,157,24)" fg:x="798" fg:w="1"/><text x="52.0010%" y="959.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="51.7510%" y="933" width="0.0649%" height="15" fill="rgb(214,153,10)" fg:x="798" fg:w="1"/><text x="52.0010%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="51.7510%" y="917" width="0.0649%" height="15" fill="rgb(212,94,6)" fg:x="798" fg:w="1"/><text x="52.0010%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="51.7510%" y="901" width="0.0649%" height="15" fill="rgb(254,25,27)" fg:x="798" fg:w="1"/><text x="52.0010%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="51.7510%" y="885" width="0.0649%" height="15" fill="rgb(250,43,52)" fg:x="798" fg:w="1"/><text x="52.0010%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.7510%" y="869" width="0.0649%" height="15" fill="rgb(221,226,40)" fg:x="798" fg:w="1"/><text x="52.0010%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.7510%" y="853" width="0.0649%" height="15" fill="rgb(235,162,34)" fg:x="798" fg:w="1"/><text x="52.0010%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.7510%" y="837" width="0.0649%" height="15" fill="rgb(239,24,26)" fg:x="798" fg:w="1"/><text x="52.0010%" y="847.50"></text></g><g><title>&lt;redb::table::Table&lt;K,V&gt; as redb::table::ReadableTable&lt;K,V&gt;&gt;::get (1 samples, 0.06%)</title><rect x="51.8158%" y="1013" width="0.0649%" height="15" fill="rgb(244,226,11)" fg:x="799" fg:w="1"/><text x="52.0658%" y="1023.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="51.8158%" y="997" width="0.0649%" height="15" fill="rgb(225,23,10)" fg:x="799" fg:w="1"/><text x="52.0658%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="51.8158%" y="981" width="0.0649%" height="15" fill="rgb(249,125,6)" fg:x="799" fg:w="1"/><text x="52.0658%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="51.8158%" y="965" width="0.0649%" height="15" fill="rgb(246,212,12)" fg:x="799" fg:w="1"/><text x="52.0658%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="51.8158%" y="949" width="0.0649%" height="15" fill="rgb(230,43,32)" fg:x="799" fg:w="1"/><text x="52.0658%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="51.8158%" y="933" width="0.0649%" height="15" fill="rgb(210,95,23)" fg:x="799" fg:w="1"/><text x="52.0658%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="51.8158%" y="917" width="0.0649%" height="15" fill="rgb(229,103,33)" fg:x="799" fg:w="1"/><text x="52.0658%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="51.8158%" y="901" width="0.0649%" height="15" fill="rgb(222,104,27)" fg:x="799" fg:w="1"/><text x="52.0658%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="51.8158%" y="885" width="0.0649%" height="15" fill="rgb(239,221,23)" fg:x="799" fg:w="1"/><text x="52.0658%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="51.8158%" y="869" width="0.0649%" height="15" fill="rgb(222,98,21)" fg:x="799" fg:w="1"/><text x="52.0658%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.06%)</title><rect x="51.8158%" y="853" width="0.0649%" height="15" fill="rgb(231,101,20)" fg:x="799" fg:w="1"/><text x="52.0658%" y="863.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="51.8158%" y="837" width="0.0649%" height="15" fill="rgb(215,150,22)" fg:x="799" fg:w="1"/><text x="52.0658%" y="847.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="51.8158%" y="821" width="0.0649%" height="15" fill="rgb(248,3,34)" fg:x="799" fg:w="1"/><text x="52.0658%" y="831.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="51.8158%" y="805" width="0.0649%" height="15" fill="rgb(220,141,21)" fg:x="799" fg:w="1"/><text x="52.0658%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="51.8158%" y="789" width="0.0649%" height="15" fill="rgb(223,41,48)" fg:x="799" fg:w="1"/><text x="52.0658%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="51.8158%" y="773" width="0.0649%" height="15" fill="rgb(247,12,5)" fg:x="799" fg:w="1"/><text x="52.0658%" y="783.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="51.8158%" y="757" width="0.0649%" height="15" fill="rgb(206,173,10)" fg:x="799" fg:w="1"/><text x="52.0658%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="51.8158%" y="741" width="0.0649%" height="15" fill="rgb(233,214,37)" fg:x="799" fg:w="1"/><text x="52.0658%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.8158%" y="725" width="0.0649%" height="15" fill="rgb(238,86,43)" fg:x="799" fg:w="1"/><text x="52.0658%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.8158%" y="709" width="0.0649%" height="15" fill="rgb(212,182,8)" fg:x="799" fg:w="1"/><text x="52.0658%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.8158%" y="693" width="0.0649%" height="15" fill="rgb(240,91,47)" fg:x="799" fg:w="1"/><text x="52.0658%" y="703.50"></text></g><g><title>redb::multimap_table::DynamicCollection&lt;V&gt;::make_subtree_data (1 samples, 0.06%)</title><rect x="51.8807%" y="997" width="0.0649%" height="15" fill="rgb(209,138,26)" fg:x="800" fg:w="1"/><text x="52.1307%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="51.8807%" y="981" width="0.0649%" height="15" fill="rgb(231,163,20)" fg:x="800" fg:w="1"/><text x="52.1307%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="51.8807%" y="965" width="0.0649%" height="15" fill="rgb(214,91,54)" fg:x="800" fg:w="1"/><text x="52.1307%" y="975.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.06%)</title><rect x="51.8807%" y="949" width="0.0649%" height="15" fill="rgb(230,32,17)" fg:x="800" fg:w="1"/><text x="52.1307%" y="959.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.06%)</title><rect x="51.8807%" y="933" width="0.0649%" height="15" fill="rgb(231,34,34)" fg:x="800" fg:w="1"/><text x="52.1307%" y="943.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="51.8807%" y="917" width="0.0649%" height="15" fill="rgb(224,228,27)" fg:x="800" fg:w="1"/><text x="52.1307%" y="927.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="51.8807%" y="901" width="0.0649%" height="15" fill="rgb(219,35,40)" fg:x="800" fg:w="1"/><text x="52.1307%" y="911.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="51.8807%" y="885" width="0.0649%" height="15" fill="rgb(234,42,8)" fg:x="800" fg:w="1"/><text x="52.1307%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.8807%" y="869" width="0.0649%" height="15" fill="rgb(226,75,22)" fg:x="800" fg:w="1"/><text x="52.1307%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.8807%" y="853" width="0.0649%" height="15" fill="rgb(242,203,28)" fg:x="800" fg:w="1"/><text x="52.1307%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.8807%" y="837" width="0.0649%" height="15" fill="rgb(221,3,9)" fg:x="800" fg:w="1"/><text x="52.1307%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,&amp;redb::multimap_table::DynamicCollection&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="51.9455%" y="981" width="0.0649%" height="15" fill="rgb(214,34,31)" fg:x="801" fg:w="1"/><text x="52.1955%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="51.9455%" y="965" width="0.0649%" height="15" fill="rgb(252,119,15)" fg:x="801" fg:w="1"/><text x="52.1955%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="51.9455%" y="949" width="0.0649%" height="15" fill="rgb(244,224,31)" fg:x="801" fg:w="1"/><text x="52.1955%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="51.9455%" y="933" width="0.0649%" height="15" fill="rgb(215,8,51)" fg:x="801" fg:w="1"/><text x="52.1955%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="51.9455%" y="917" width="0.0649%" height="15" fill="rgb(207,24,1)" fg:x="801" fg:w="1"/><text x="52.1955%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="51.9455%" y="901" width="0.0649%" height="15" fill="rgb(245,90,0)" fg:x="801" fg:w="1"/><text x="52.1955%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="51.9455%" y="885" width="0.0649%" height="15" fill="rgb(246,43,48)" fg:x="801" fg:w="1"/><text x="52.1955%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="51.9455%" y="869" width="0.0649%" height="15" fill="rgb(252,218,10)" fg:x="801" fg:w="1"/><text x="52.1955%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="51.9455%" y="853" width="0.0649%" height="15" fill="rgb(231,24,35)" fg:x="801" fg:w="1"/><text x="52.1955%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="51.9455%" y="837" width="0.0649%" height="15" fill="rgb(225,66,19)" fg:x="801" fg:w="1"/><text x="52.1955%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="51.9455%" y="821" width="0.0649%" height="15" fill="rgb(214,96,51)" fg:x="801" fg:w="1"/><text x="52.1955%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="51.9455%" y="805" width="0.0649%" height="15" fill="rgb(251,151,47)" fg:x="801" fg:w="1"/><text x="52.1955%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="51.9455%" y="789" width="0.0649%" height="15" fill="rgb(236,79,14)" fg:x="801" fg:w="1"/><text x="52.1955%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="51.9455%" y="773" width="0.0649%" height="15" fill="rgb(210,205,11)" fg:x="801" fg:w="1"/><text x="52.1955%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="51.9455%" y="757" width="0.0649%" height="15" fill="rgb(233,142,53)" fg:x="801" fg:w="1"/><text x="52.1955%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="51.9455%" y="741" width="0.0649%" height="15" fill="rgb(212,116,48)" fg:x="801" fg:w="1"/><text x="52.1955%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="51.9455%" y="725" width="0.0649%" height="15" fill="rgb(234,55,33)" fg:x="801" fg:w="1"/><text x="52.1955%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="51.9455%" y="709" width="0.0649%" height="15" fill="rgb(253,92,27)" fg:x="801" fg:w="1"/><text x="52.1955%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="51.9455%" y="693" width="0.0649%" height="15" fill="rgb(220,7,35)" fg:x="801" fg:w="1"/><text x="52.1955%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="51.9455%" y="677" width="0.0649%" height="15" fill="rgb(246,124,6)" fg:x="801" fg:w="1"/><text x="52.1955%" y="687.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="51.9455%" y="997" width="0.1297%" height="15" fill="rgb(212,111,51)" fg:x="801" fg:w="2"/><text x="52.1955%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="52.0104%" y="981" width="0.0649%" height="15" fill="rgb(253,116,7)" fg:x="802" fg:w="1"/><text x="52.2604%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="52.0104%" y="965" width="0.0649%" height="15" fill="rgb(213,145,18)" fg:x="802" fg:w="1"/><text x="52.2604%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.0104%" y="949" width="0.0649%" height="15" fill="rgb(219,149,7)" fg:x="802" fg:w="1"/><text x="52.2604%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.0104%" y="933" width="0.0649%" height="15" fill="rgb(225,156,20)" fg:x="802" fg:w="1"/><text x="52.2604%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.0104%" y="917" width="0.0649%" height="15" fill="rgb(211,98,19)" fg:x="802" fg:w="1"/><text x="52.2604%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuardMut&lt;()&gt;&gt; (1 samples, 0.06%)</title><rect x="52.0752%" y="981" width="0.0649%" height="15" fill="rgb(231,192,31)" fg:x="803" fg:w="1"/><text x="52.3252%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="52.0752%" y="965" width="0.0649%" height="15" fill="rgb(249,95,19)" fg:x="803" fg:w="1"/><text x="52.3252%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="52.0752%" y="949" width="0.0649%" height="15" fill="rgb(247,101,36)" fg:x="803" fg:w="1"/><text x="52.3252%" y="959.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.06%)</title><rect x="52.0752%" y="933" width="0.0649%" height="15" fill="rgb(221,45,43)" fg:x="803" fg:w="1"/><text x="52.3252%" y="943.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="52.0752%" y="917" width="0.0649%" height="15" fill="rgb(220,42,1)" fg:x="803" fg:w="1"/><text x="52.3252%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="52.0752%" y="901" width="0.0649%" height="15" fill="rgb(236,19,24)" fg:x="803" fg:w="1"/><text x="52.3252%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="52.0752%" y="885" width="0.0649%" height="15" fill="rgb(225,192,6)" fg:x="803" fg:w="1"/><text x="52.3252%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="52.0752%" y="869" width="0.0649%" height="15" fill="rgb(242,30,19)" fg:x="803" fg:w="1"/><text x="52.3252%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="52.0752%" y="853" width="0.0649%" height="15" fill="rgb(240,36,6)" fg:x="803" fg:w="1"/><text x="52.3252%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="52.0752%" y="837" width="0.0649%" height="15" fill="rgb(246,40,28)" fg:x="803" fg:w="1"/><text x="52.3252%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="52.0752%" y="821" width="0.0649%" height="15" fill="rgb(225,155,33)" fg:x="803" fg:w="1"/><text x="52.3252%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="52.0752%" y="805" width="0.0649%" height="15" fill="rgb(240,65,18)" fg:x="803" fg:w="1"/><text x="52.3252%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="52.0752%" y="789" width="0.0649%" height="15" fill="rgb(217,0,48)" fg:x="803" fg:w="1"/><text x="52.3252%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="52.0752%" y="773" width="0.0649%" height="15" fill="rgb(217,80,15)" fg:x="803" fg:w="1"/><text x="52.3252%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="52.0752%" y="757" width="0.0649%" height="15" fill="rgb(253,43,51)" fg:x="803" fg:w="1"/><text x="52.3252%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.0752%" y="741" width="0.0649%" height="15" fill="rgb(246,60,4)" fg:x="803" fg:w="1"/><text x="52.3252%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.0752%" y="725" width="0.0649%" height="15" fill="rgb(230,40,54)" fg:x="803" fg:w="1"/><text x="52.3252%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.0752%" y="709" width="0.0649%" height="15" fill="rgb(208,20,44)" fg:x="803" fg:w="1"/><text x="52.3252%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_mutator::MutateHelper&lt;redbit::Bincode&lt;alloc::string::String&gt;,&amp;redb::multimap_table::DynamicCollection&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="52.1401%" y="981" width="0.0649%" height="15" fill="rgb(230,22,22)" fg:x="804" fg:w="1"/><text x="52.3901%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;redb::tree_store::page_store::page_manager::TransactionalMemory&gt;&gt; (1 samples, 0.06%)</title><rect x="52.1401%" y="965" width="0.0649%" height="15" fill="rgb(207,57,4)" fg:x="804" fg:w="1"/><text x="52.3901%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="52.1401%" y="949" width="0.0649%" height="15" fill="rgb(242,130,33)" fg:x="804" fg:w="1"/><text x="52.3901%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="52.1401%" y="933" width="0.0649%" height="15" fill="rgb(218,66,43)" fg:x="804" fg:w="1"/><text x="52.3901%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="52.1401%" y="917" width="0.0649%" height="15" fill="rgb(236,105,16)" fg:x="804" fg:w="1"/><text x="52.3901%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.1401%" y="901" width="0.0649%" height="15" fill="rgb(230,46,15)" fg:x="804" fg:w="1"/><text x="52.3901%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.1401%" y="885" width="0.0649%" height="15" fill="rgb(251,172,40)" fg:x="804" fg:w="1"/><text x="52.3901%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.1401%" y="869" width="0.0649%" height="15" fill="rgb(225,217,32)" fg:x="804" fg:w="1"/><text x="52.3901%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="52.2049%" y="965" width="0.0649%" height="15" fill="rgb(243,10,29)" fg:x="805" fg:w="1"/><text x="52.4549%" y="975.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="52.2049%" y="949" width="0.0649%" height="15" fill="rgb(207,102,10)" fg:x="805" fg:w="1"/><text x="52.4549%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.2049%" y="933" width="0.0649%" height="15" fill="rgb(241,125,5)" fg:x="805" fg:w="1"/><text x="52.4549%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.2049%" y="917" width="0.0649%" height="15" fill="rgb(230,125,29)" fg:x="805" fg:w="1"/><text x="52.4549%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.2049%" y="901" width="0.0649%" height="15" fill="rgb(223,65,44)" fg:x="805" fg:w="1"/><text x="52.4549%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="52.2698%" y="965" width="0.1297%" height="15" fill="rgb(224,188,28)" fg:x="806" fg:w="2"/><text x="52.5198%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="52.2698%" y="949" width="0.1297%" height="15" fill="rgb(254,197,27)" fg:x="806" fg:w="2"/><text x="52.5198%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="52.2698%" y="933" width="0.1297%" height="15" fill="rgb(220,200,25)" fg:x="806" fg:w="2"/><text x="52.5198%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="52.3995%" y="965" width="0.0649%" height="15" fill="rgb(239,225,54)" fg:x="808" fg:w="1"/><text x="52.6495%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="52.3995%" y="949" width="0.0649%" height="15" fill="rgb(211,59,40)" fg:x="808" fg:w="1"/><text x="52.6495%" y="959.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="52.3995%" y="933" width="0.0649%" height="15" fill="rgb(213,176,46)" fg:x="808" fg:w="1"/><text x="52.6495%" y="943.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="52.3995%" y="917" width="0.0649%" height="15" fill="rgb(226,99,4)" fg:x="808" fg:w="1"/><text x="52.6495%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="52.3995%" y="901" width="0.0649%" height="15" fill="rgb(239,203,43)" fg:x="808" fg:w="1"/><text x="52.6495%" y="911.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="52.3995%" y="885" width="0.0649%" height="15" fill="rgb(246,1,45)" fg:x="808" fg:w="1"/><text x="52.6495%" y="895.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="52.3995%" y="869" width="0.0649%" height="15" fill="rgb(231,42,52)" fg:x="808" fg:w="1"/><text x="52.6495%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::ser::SizeChecker&lt;O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="52.3995%" y="853" width="0.0649%" height="15" fill="rgb(240,13,50)" fg:x="808" fg:w="1"/><text x="52.6495%" y="863.50"></text></g><g><title>bincode::ser::SizeChecker&lt;O&gt;::add_raw (1 samples, 0.06%)</title><rect x="52.3995%" y="837" width="0.0649%" height="15" fill="rgb(225,81,14)" fg:x="808" fg:w="1"/><text x="52.6495%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="52.3995%" y="821" width="0.0649%" height="15" fill="rgb(216,182,23)" fg:x="808" fg:w="1"/><text x="52.6495%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.3995%" y="805" width="0.0649%" height="15" fill="rgb(233,137,19)" fg:x="808" fg:w="1"/><text x="52.6495%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.3995%" y="789" width="0.0649%" height="15" fill="rgb(242,61,46)" fg:x="808" fg:w="1"/><text x="52.6495%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.3995%" y="773" width="0.0649%" height="15" fill="rgb(221,168,51)" fg:x="808" fg:w="1"/><text x="52.6495%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.4643%" y="949" width="0.0649%" height="15" fill="rgb(238,48,15)" fg:x="809" fg:w="1"/><text x="52.7143%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.4643%" y="933" width="0.0649%" height="15" fill="rgb(216,13,16)" fg:x="809" fg:w="1"/><text x="52.7143%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.4643%" y="917" width="0.0649%" height="15" fill="rgb(223,185,34)" fg:x="809" fg:w="1"/><text x="52.7143%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.5292%" y="933" width="0.0649%" height="15" fill="rgb(228,94,42)" fg:x="810" fg:w="1"/><text x="52.7792%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.5292%" y="917" width="0.0649%" height="15" fill="rgb(218,166,43)" fg:x="810" fg:w="1"/><text x="52.7792%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.5292%" y="901" width="0.0649%" height="15" fill="rgb(232,30,50)" fg:x="810" fg:w="1"/><text x="52.7792%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="52.5292%" y="949" width="0.1297%" height="15" fill="rgb(245,206,45)" fg:x="810" fg:w="2"/><text x="52.7792%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="52.5940%" y="933" width="0.0649%" height="15" fill="rgb(220,56,22)" fg:x="811" fg:w="1"/><text x="52.8440%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="52.5940%" y="917" width="0.0649%" height="15" fill="rgb(239,129,38)" fg:x="811" fg:w="1"/><text x="52.8440%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="901" width="0.0649%" height="15" fill="rgb(207,68,41)" fg:x="811" fg:w="1"/><text x="52.8440%" y="911.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="885" width="0.0649%" height="15" fill="rgb(221,21,7)" fg:x="811" fg:w="1"/><text x="52.8440%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="52.5940%" y="869" width="0.0649%" height="15" fill="rgb(240,33,25)" fg:x="811" fg:w="1"/><text x="52.8440%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="853" width="0.0649%" height="15" fill="rgb(242,119,10)" fg:x="811" fg:w="1"/><text x="52.8440%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="837" width="0.0649%" height="15" fill="rgb(214,149,40)" fg:x="811" fg:w="1"/><text x="52.8440%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="52.5940%" y="821" width="0.0649%" height="15" fill="rgb(228,25,36)" fg:x="811" fg:w="1"/><text x="52.8440%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="52.5940%" y="805" width="0.0649%" height="15" fill="rgb(222,59,15)" fg:x="811" fg:w="1"/><text x="52.8440%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="52.5940%" y="789" width="0.0649%" height="15" fill="rgb(218,170,0)" fg:x="811" fg:w="1"/><text x="52.8440%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="52.5940%" y="773" width="0.0649%" height="15" fill="rgb(232,173,23)" fg:x="811" fg:w="1"/><text x="52.8440%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="52.5940%" y="757" width="0.0649%" height="15" fill="rgb(218,116,1)" fg:x="811" fg:w="1"/><text x="52.8440%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="741" width="0.0649%" height="15" fill="rgb(207,34,4)" fg:x="811" fg:w="1"/><text x="52.8440%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="725" width="0.0649%" height="15" fill="rgb(229,54,52)" fg:x="811" fg:w="1"/><text x="52.8440%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="52.5940%" y="709" width="0.0649%" height="15" fill="rgb(211,86,23)" fg:x="811" fg:w="1"/><text x="52.8440%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="52.5940%" y="693" width="0.0649%" height="15" fill="rgb(254,153,34)" fg:x="811" fg:w="1"/><text x="52.8440%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="52.5940%" y="677" width="0.0649%" height="15" fill="rgb(219,220,14)" fg:x="811" fg:w="1"/><text x="52.8440%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="52.5940%" y="661" width="0.0649%" height="15" fill="rgb(247,8,26)" fg:x="811" fg:w="1"/><text x="52.8440%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="52.5940%" y="645" width="0.0649%" height="15" fill="rgb(213,129,42)" fg:x="811" fg:w="1"/><text x="52.8440%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="629" width="0.0649%" height="15" fill="rgb(225,95,41)" fg:x="811" fg:w="1"/><text x="52.8440%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.5940%" y="613" width="0.0649%" height="15" fill="rgb(215,134,24)" fg:x="811" fg:w="1"/><text x="52.8440%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="52.5940%" y="597" width="0.0649%" height="15" fill="rgb(235,23,54)" fg:x="811" fg:w="1"/><text x="52.8440%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="52.5940%" y="581" width="0.0649%" height="15" fill="rgb(229,96,31)" fg:x="811" fg:w="1"/><text x="52.8440%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="52.5940%" y="565" width="0.0649%" height="15" fill="rgb(206,111,12)" fg:x="811" fg:w="1"/><text x="52.8440%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="52.5940%" y="549" width="0.0649%" height="15" fill="rgb(222,177,8)" fg:x="811" fg:w="1"/><text x="52.8440%" y="559.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="52.5940%" y="533" width="0.0649%" height="15" fill="rgb(251,36,52)" fg:x="811" fg:w="1"/><text x="52.8440%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="52.5940%" y="517" width="0.0649%" height="15" fill="rgb(216,182,29)" fg:x="811" fg:w="1"/><text x="52.8440%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="52.5940%" y="501" width="0.0649%" height="15" fill="rgb(241,145,50)" fg:x="811" fg:w="1"/><text x="52.8440%" y="511.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="52.5940%" y="485" width="0.0649%" height="15" fill="rgb(231,71,35)" fg:x="811" fg:w="1"/><text x="52.8440%" y="495.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="52.5940%" y="469" width="0.0649%" height="15" fill="rgb(218,22,17)" fg:x="811" fg:w="1"/><text x="52.8440%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (1 samples, 0.06%)</title><rect x="52.5940%" y="453" width="0.0649%" height="15" fill="rgb(225,227,6)" fg:x="811" fg:w="1"/><text x="52.8440%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.5940%" y="437" width="0.0649%" height="15" fill="rgb(224,204,17)" fg:x="811" fg:w="1"/><text x="52.8440%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.5940%" y="421" width="0.0649%" height="15" fill="rgb(227,61,28)" fg:x="811" fg:w="1"/><text x="52.8440%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.5940%" y="405" width="0.0649%" height="15" fill="rgb(242,148,23)" fg:x="811" fg:w="1"/><text x="52.8440%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.6589%" y="661" width="0.0649%" height="15" fill="rgb(237,105,33)" fg:x="812" fg:w="1"/><text x="52.9089%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.6589%" y="645" width="0.0649%" height="15" fill="rgb(238,218,40)" fg:x="812" fg:w="1"/><text x="52.9089%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.6589%" y="629" width="0.0649%" height="15" fill="rgb(209,126,11)" fg:x="812" fg:w="1"/><text x="52.9089%" y="639.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="52.6589%" y="949" width="0.1297%" height="15" fill="rgb(245,90,11)" fg:x="812" fg:w="2"/><text x="52.9089%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="52.6589%" y="933" width="0.1297%" height="15" fill="rgb(211,195,10)" fg:x="812" fg:w="2"/><text x="52.9089%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="52.6589%" y="917" width="0.1297%" height="15" fill="rgb(231,45,45)" fg:x="812" fg:w="2"/><text x="52.9089%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="52.6589%" y="901" width="0.1297%" height="15" fill="rgb(246,100,43)" fg:x="812" fg:w="2"/><text x="52.9089%" y="911.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="52.6589%" y="885" width="0.1297%" height="15" fill="rgb(241,193,8)" fg:x="812" fg:w="2"/><text x="52.9089%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="52.6589%" y="869" width="0.1297%" height="15" fill="rgb(208,76,19)" fg:x="812" fg:w="2"/><text x="52.9089%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.6589%" y="853" width="0.1297%" height="15" fill="rgb(223,69,40)" fg:x="812" fg:w="2"/><text x="52.9089%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.6589%" y="837" width="0.1297%" height="15" fill="rgb(207,120,39)" fg:x="812" fg:w="2"/><text x="52.9089%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="52.6589%" y="821" width="0.1297%" height="15" fill="rgb(212,209,28)" fg:x="812" fg:w="2"/><text x="52.9089%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="52.6589%" y="805" width="0.1297%" height="15" fill="rgb(246,82,29)" fg:x="812" fg:w="2"/><text x="52.9089%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="52.6589%" y="789" width="0.1297%" height="15" fill="rgb(239,6,40)" fg:x="812" fg:w="2"/><text x="52.9089%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="52.6589%" y="773" width="0.1297%" height="15" fill="rgb(228,181,35)" fg:x="812" fg:w="2"/><text x="52.9089%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="52.6589%" y="757" width="0.1297%" height="15" fill="rgb(238,151,2)" fg:x="812" fg:w="2"/><text x="52.9089%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.6589%" y="741" width="0.1297%" height="15" fill="rgb(236,94,18)" fg:x="812" fg:w="2"/><text x="52.9089%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.6589%" y="725" width="0.1297%" height="15" fill="rgb(208,38,14)" fg:x="812" fg:w="2"/><text x="52.9089%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="52.6589%" y="709" width="0.1297%" height="15" fill="rgb(234,215,27)" fg:x="812" fg:w="2"/><text x="52.9089%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="52.6589%" y="693" width="0.1297%" height="15" fill="rgb(254,211,53)" fg:x="812" fg:w="2"/><text x="52.9089%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="52.6589%" y="677" width="0.1297%" height="15" fill="rgb(216,175,11)" fg:x="812" fg:w="2"/><text x="52.9089%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="52.7237%" y="661" width="0.0649%" height="15" fill="rgb(246,179,26)" fg:x="813" fg:w="1"/><text x="52.9737%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="52.7237%" y="645" width="0.0649%" height="15" fill="rgb(249,19,52)" fg:x="813" fg:w="1"/><text x="52.9737%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.7237%" y="629" width="0.0649%" height="15" fill="rgb(230,42,52)" fg:x="813" fg:w="1"/><text x="52.9737%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="52.7237%" y="613" width="0.0649%" height="15" fill="rgb(221,171,0)" fg:x="813" fg:w="1"/><text x="52.9737%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="52.7237%" y="597" width="0.0649%" height="15" fill="rgb(222,177,40)" fg:x="813" fg:w="1"/><text x="52.9737%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="52.7237%" y="581" width="0.0649%" height="15" fill="rgb(247,34,16)" fg:x="813" fg:w="1"/><text x="52.9737%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="52.7237%" y="565" width="0.0649%" height="15" fill="rgb(213,217,37)" fg:x="813" fg:w="1"/><text x="52.9737%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="52.7237%" y="549" width="0.0649%" height="15" fill="rgb(231,189,24)" fg:x="813" fg:w="1"/><text x="52.9737%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="52.7237%" y="533" width="0.0649%" height="15" fill="rgb(214,22,9)" fg:x="813" fg:w="1"/><text x="52.9737%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="52.7237%" y="517" width="0.0649%" height="15" fill="rgb(212,70,22)" fg:x="813" fg:w="1"/><text x="52.9737%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="52.7237%" y="501" width="0.0649%" height="15" fill="rgb(249,64,51)" fg:x="813" fg:w="1"/><text x="52.9737%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="52.7237%" y="485" width="0.0649%" height="15" fill="rgb(249,148,20)" fg:x="813" fg:w="1"/><text x="52.9737%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="52.7237%" y="469" width="0.0649%" height="15" fill="rgb(246,46,48)" fg:x="813" fg:w="1"/><text x="52.9737%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="52.7237%" y="453" width="0.0649%" height="15" fill="rgb(217,34,48)" fg:x="813" fg:w="1"/><text x="52.9737%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="52.7237%" y="437" width="0.0649%" height="15" fill="rgb(222,45,26)" fg:x="813" fg:w="1"/><text x="52.9737%" y="447.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="52.7237%" y="421" width="0.0649%" height="15" fill="rgb(230,201,36)" fg:x="813" fg:w="1"/><text x="52.9737%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.7237%" y="405" width="0.0649%" height="15" fill="rgb(217,30,43)" fg:x="813" fg:w="1"/><text x="52.9737%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.7237%" y="389" width="0.0649%" height="15" fill="rgb(230,197,40)" fg:x="813" fg:w="1"/><text x="52.9737%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.7237%" y="373" width="0.0649%" height="15" fill="rgb(239,181,18)" fg:x="813" fg:w="1"/><text x="52.9737%" y="383.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::total_length (1 samples, 0.06%)</title><rect x="52.7886%" y="933" width="0.0649%" height="15" fill="rgb(222,60,39)" fg:x="814" fg:w="1"/><text x="53.0386%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="52.7886%" y="917" width="0.0649%" height="15" fill="rgb(210,60,22)" fg:x="814" fg:w="1"/><text x="53.0386%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.7886%" y="901" width="0.0649%" height="15" fill="rgb(239,213,48)" fg:x="814" fg:w="1"/><text x="53.0386%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.7886%" y="885" width="0.0649%" height="15" fill="rgb(253,214,23)" fg:x="814" fg:w="1"/><text x="53.0386%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.7886%" y="869" width="0.0649%" height="15" fill="rgb(211,98,45)" fg:x="814" fg:w="1"/><text x="53.0386%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (2 samples, 0.13%)</title><rect x="52.7886%" y="949" width="0.1297%" height="15" fill="rgb(239,130,44)" fg:x="814" fg:w="2"/><text x="53.0386%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (1 samples, 0.06%)</title><rect x="52.8534%" y="933" width="0.0649%" height="15" fill="rgb(222,181,35)" fg:x="815" fg:w="1"/><text x="53.1034%" y="943.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="52.8534%" y="917" width="0.0649%" height="15" fill="rgb(219,219,49)" fg:x="815" fg:w="1"/><text x="53.1034%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="52.8534%" y="901" width="0.0649%" height="15" fill="rgb(227,161,51)" fg:x="815" fg:w="1"/><text x="53.1034%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="52.8534%" y="885" width="0.0649%" height="15" fill="rgb(239,112,27)" fg:x="815" fg:w="1"/><text x="53.1034%" y="895.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="52.8534%" y="869" width="0.0649%" height="15" fill="rgb(248,122,18)" fg:x="815" fg:w="1"/><text x="53.1034%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.8534%" y="853" width="0.0649%" height="15" fill="rgb(245,130,23)" fg:x="815" fg:w="1"/><text x="53.1034%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.8534%" y="837" width="0.0649%" height="15" fill="rgb(211,225,28)" fg:x="815" fg:w="1"/><text x="53.1034%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.8534%" y="821" width="0.0649%" height="15" fill="rgb(242,105,44)" fg:x="815" fg:w="1"/><text x="53.1034%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::sufficient_insert_inplace_space (1 samples, 0.06%)</title><rect x="52.9183%" y="949" width="0.0649%" height="15" fill="rgb(216,183,46)" fg:x="816" fg:w="1"/><text x="53.1683%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_pairs (1 samples, 0.06%)</title><rect x="52.9183%" y="933" width="0.0649%" height="15" fill="rgb(227,112,9)" fg:x="816" fg:w="1"/><text x="53.1683%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::length_of_values (1 samples, 0.06%)</title><rect x="52.9183%" y="917" width="0.0649%" height="15" fill="rgb(244,21,0)" fg:x="816" fg:w="1"/><text x="53.1683%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="52.9183%" y="901" width="0.0649%" height="15" fill="rgb(236,185,14)" fg:x="816" fg:w="1"/><text x="53.1683%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="52.9183%" y="885" width="0.0649%" height="15" fill="rgb(236,170,30)" fg:x="816" fg:w="1"/><text x="53.1683%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.9183%" y="869" width="0.0649%" height="15" fill="rgb(209,198,51)" fg:x="816" fg:w="1"/><text x="53.1683%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.9183%" y="853" width="0.0649%" height="15" fill="rgb(205,171,26)" fg:x="816" fg:w="1"/><text x="53.1683%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.9183%" y="837" width="0.0649%" height="15" fill="rgb(246,41,49)" fg:x="816" fg:w="1"/><text x="53.1683%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="52.9831%" y="597" width="0.0649%" height="15" fill="rgb(240,229,12)" fg:x="817" fg:w="1"/><text x="53.2331%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="52.9831%" y="581" width="0.0649%" height="15" fill="rgb(212,8,54)" fg:x="817" fg:w="1"/><text x="53.2331%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="52.9831%" y="565" width="0.0649%" height="15" fill="rgb(230,114,13)" fg:x="817" fg:w="1"/><text x="53.2331%" y="575.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="52.9831%" y="933" width="0.1297%" height="15" fill="rgb(229,130,28)" fg:x="817" fg:w="2"/><text x="53.2331%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="52.9831%" y="917" width="0.1297%" height="15" fill="rgb(206,139,15)" fg:x="817" fg:w="2"/><text x="53.2331%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="52.9831%" y="901" width="0.1297%" height="15" fill="rgb(241,188,35)" fg:x="817" fg:w="2"/><text x="53.2331%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="52.9831%" y="885" width="0.1297%" height="15" fill="rgb(208,224,26)" fg:x="817" fg:w="2"/><text x="53.2331%" y="895.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="52.9831%" y="869" width="0.1297%" height="15" fill="rgb(251,131,28)" fg:x="817" fg:w="2"/><text x="53.2331%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="52.9831%" y="853" width="0.1297%" height="15" fill="rgb(208,153,1)" fg:x="817" fg:w="2"/><text x="53.2331%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.9831%" y="837" width="0.1297%" height="15" fill="rgb(234,33,36)" fg:x="817" fg:w="2"/><text x="53.2331%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.9831%" y="821" width="0.1297%" height="15" fill="rgb(246,42,29)" fg:x="817" fg:w="2"/><text x="53.2331%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="52.9831%" y="805" width="0.1297%" height="15" fill="rgb(251,114,16)" fg:x="817" fg:w="2"/><text x="53.2331%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="52.9831%" y="789" width="0.1297%" height="15" fill="rgb(233,13,38)" fg:x="817" fg:w="2"/><text x="53.2331%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="52.9831%" y="773" width="0.1297%" height="15" fill="rgb(247,120,19)" fg:x="817" fg:w="2"/><text x="53.2331%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="52.9831%" y="757" width="0.1297%" height="15" fill="rgb(205,11,16)" fg:x="817" fg:w="2"/><text x="53.2331%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="52.9831%" y="741" width="0.1297%" height="15" fill="rgb(228,185,19)" fg:x="817" fg:w="2"/><text x="53.2331%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.9831%" y="725" width="0.1297%" height="15" fill="rgb(239,88,52)" fg:x="817" fg:w="2"/><text x="53.2331%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="52.9831%" y="709" width="0.1297%" height="15" fill="rgb(219,23,1)" fg:x="817" fg:w="2"/><text x="53.2331%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="52.9831%" y="693" width="0.1297%" height="15" fill="rgb(253,177,16)" fg:x="817" fg:w="2"/><text x="53.2331%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="52.9831%" y="677" width="0.1297%" height="15" fill="rgb(225,150,40)" fg:x="817" fg:w="2"/><text x="53.2331%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="52.9831%" y="661" width="0.1297%" height="15" fill="rgb(208,108,30)" fg:x="817" fg:w="2"/><text x="53.2331%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="52.9831%" y="645" width="0.1297%" height="15" fill="rgb(214,122,4)" fg:x="817" fg:w="2"/><text x="53.2331%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="52.9831%" y="629" width="0.1297%" height="15" fill="rgb(229,74,37)" fg:x="817" fg:w="2"/><text x="53.2331%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="52.9831%" y="613" width="0.1297%" height="15" fill="rgb(233,61,41)" fg:x="817" fg:w="2"/><text x="53.2331%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="53.0480%" y="597" width="0.0649%" height="15" fill="rgb(238,191,5)" fg:x="818" fg:w="1"/><text x="53.2980%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="53.0480%" y="581" width="0.0649%" height="15" fill="rgb(233,78,24)" fg:x="818" fg:w="1"/><text x="53.2980%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="53.0480%" y="565" width="0.0649%" height="15" fill="rgb(211,142,8)" fg:x="818" fg:w="1"/><text x="53.2980%" y="575.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="53.0480%" y="549" width="0.0649%" height="15" fill="rgb(253,38,53)" fg:x="818" fg:w="1"/><text x="53.2980%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.0480%" y="533" width="0.0649%" height="15" fill="rgb(234,63,51)" fg:x="818" fg:w="1"/><text x="53.2980%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.0480%" y="517" width="0.0649%" height="15" fill="rgb(205,23,31)" fg:x="818" fg:w="1"/><text x="53.2980%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.0480%" y="501" width="0.0649%" height="15" fill="rgb(210,184,50)" fg:x="818" fg:w="1"/><text x="53.2980%" y="511.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="53.1128%" y="901" width="0.0649%" height="15" fill="rgb(222,112,26)" fg:x="819" fg:w="1"/><text x="53.3628%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="53.1128%" y="885" width="0.0649%" height="15" fill="rgb(250,98,18)" fg:x="819" fg:w="1"/><text x="53.3628%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="53.1128%" y="869" width="0.0649%" height="15" fill="rgb(250,34,12)" fg:x="819" fg:w="1"/><text x="53.3628%" y="879.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="53.1128%" y="853" width="0.0649%" height="15" fill="rgb(236,141,30)" fg:x="819" fg:w="1"/><text x="53.3628%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.1128%" y="837" width="0.0649%" height="15" fill="rgb(246,134,38)" fg:x="819" fg:w="1"/><text x="53.3628%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.1128%" y="821" width="0.0649%" height="15" fill="rgb(240,114,4)" fg:x="819" fg:w="1"/><text x="53.3628%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.1128%" y="805" width="0.0649%" height="15" fill="rgb(243,113,39)" fg:x="819" fg:w="1"/><text x="53.3628%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.1777%" y="901" width="0.0649%" height="15" fill="rgb(239,215,4)" fg:x="820" fg:w="1"/><text x="53.4277%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.1777%" y="885" width="0.0649%" height="15" fill="rgb(236,229,45)" fg:x="820" fg:w="1"/><text x="53.4277%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.1777%" y="869" width="0.0649%" height="15" fill="rgb(242,2,6)" fg:x="820" fg:w="1"/><text x="53.4277%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.2425%" y="885" width="0.0649%" height="15" fill="rgb(239,108,21)" fg:x="821" fg:w="1"/><text x="53.4925%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.2425%" y="869" width="0.0649%" height="15" fill="rgb(215,168,34)" fg:x="821" fg:w="1"/><text x="53.4925%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.2425%" y="853" width="0.0649%" height="15" fill="rgb(238,31,17)" fg:x="821" fg:w="1"/><text x="53.4925%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="53.2425%" y="901" width="0.1297%" height="15" fill="rgb(220,133,11)" fg:x="821" fg:w="2"/><text x="53.4925%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="53.3074%" y="885" width="0.0649%" height="15" fill="rgb(212,158,23)" fg:x="822" fg:w="1"/><text x="53.5574%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="53.3074%" y="869" width="0.0649%" height="15" fill="rgb(223,172,7)" fg:x="822" fg:w="1"/><text x="53.5574%" y="879.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="53.3074%" y="853" width="0.0649%" height="15" fill="rgb(244,3,52)" fg:x="822" fg:w="1"/><text x="53.5574%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="53.3074%" y="837" width="0.0649%" height="15" fill="rgb(207,69,27)" fg:x="822" fg:w="1"/><text x="53.5574%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.3074%" y="821" width="0.0649%" height="15" fill="rgb(213,136,45)" fg:x="822" fg:w="1"/><text x="53.5574%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.3074%" y="805" width="0.0649%" height="15" fill="rgb(218,79,17)" fg:x="822" fg:w="1"/><text x="53.5574%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.3074%" y="789" width="0.0649%" height="15" fill="rgb(216,106,36)" fg:x="822" fg:w="1"/><text x="53.5574%" y="799.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (7 samples, 0.45%)</title><rect x="52.9831%" y="949" width="0.4540%" height="15" fill="rgb(251,27,45)" fg:x="817" fg:w="7"/><text x="53.2331%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (5 samples, 0.32%)</title><rect x="53.1128%" y="933" width="0.3243%" height="15" fill="rgb(232,21,34)" fg:x="819" fg:w="5"/><text x="53.3628%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (5 samples, 0.32%)</title><rect x="53.1128%" y="917" width="0.3243%" height="15" fill="rgb(249,191,16)" fg:x="819" fg:w="5"/><text x="53.3628%" y="927.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="53.3722%" y="901" width="0.0649%" height="15" fill="rgb(224,88,20)" fg:x="823" fg:w="1"/><text x="53.6222%" y="911.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="53.3722%" y="885" width="0.0649%" height="15" fill="rgb(237,93,27)" fg:x="823" fg:w="1"/><text x="53.6222%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.3722%" y="869" width="0.0649%" height="15" fill="rgb(226,198,48)" fg:x="823" fg:w="1"/><text x="53.6222%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.3722%" y="853" width="0.0649%" height="15" fill="rgb(207,162,53)" fg:x="823" fg:w="1"/><text x="53.6222%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.3722%" y="837" width="0.0649%" height="15" fill="rgb(207,169,9)" fg:x="823" fg:w="1"/><text x="53.6222%" y="847.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (22 samples, 1.43%)</title><rect x="52.0752%" y="997" width="1.4267%" height="15" fill="rgb(224,166,46)" fg:x="803" fg:w="22"/><text x="52.3252%" y="1007.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (20 samples, 1.30%)</title><rect x="52.2049%" y="981" width="1.2970%" height="15" fill="rgb(233,26,6)" fg:x="805" fg:w="20"/><text x="52.4549%" y="991.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (16 samples, 1.04%)</title><rect x="52.4643%" y="965" width="1.0376%" height="15" fill="rgb(218,106,45)" fg:x="809" fg:w="16"/><text x="52.7143%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (1 samples, 0.06%)</title><rect x="53.4371%" y="949" width="0.0649%" height="15" fill="rgb(240,217,4)" fg:x="824" fg:w="1"/><text x="53.6871%" y="959.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="53.4371%" y="933" width="0.0649%" height="15" fill="rgb(246,171,10)" fg:x="824" fg:w="1"/><text x="53.6871%" y="943.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="53.4371%" y="917" width="0.0649%" height="15" fill="rgb(223,197,30)" fg:x="824" fg:w="1"/><text x="53.6871%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="53.4371%" y="901" width="0.0649%" height="15" fill="rgb(207,92,16)" fg:x="824" fg:w="1"/><text x="53.6871%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="53.4371%" y="885" width="0.0649%" height="15" fill="rgb(211,6,44)" fg:x="824" fg:w="1"/><text x="53.6871%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="53.4371%" y="869" width="0.0649%" height="15" fill="rgb(219,139,2)" fg:x="824" fg:w="1"/><text x="53.6871%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="53.4371%" y="853" width="0.0649%" height="15" fill="rgb(224,103,21)" fg:x="824" fg:w="1"/><text x="53.6871%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="53.4371%" y="837" width="0.0649%" height="15" fill="rgb(254,110,48)" fg:x="824" fg:w="1"/><text x="53.6871%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="53.4371%" y="821" width="0.0649%" height="15" fill="rgb(212,88,19)" fg:x="824" fg:w="1"/><text x="53.6871%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="53.4371%" y="805" width="0.0649%" height="15" fill="rgb(248,103,6)" fg:x="824" fg:w="1"/><text x="53.6871%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="53.4371%" y="789" width="0.0649%" height="15" fill="rgb(214,53,46)" fg:x="824" fg:w="1"/><text x="53.6871%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="53.4371%" y="773" width="0.0649%" height="15" fill="rgb(236,190,24)" fg:x="824" fg:w="1"/><text x="53.6871%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="53.4371%" y="757" width="0.0649%" height="15" fill="rgb(254,58,28)" fg:x="824" fg:w="1"/><text x="53.6871%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="53.4371%" y="741" width="0.0649%" height="15" fill="rgb(243,63,27)" fg:x="824" fg:w="1"/><text x="53.6871%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="53.4371%" y="725" width="0.0649%" height="15" fill="rgb(206,81,20)" fg:x="824" fg:w="1"/><text x="53.6871%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="53.4371%" y="709" width="0.0649%" height="15" fill="rgb(252,69,51)" fg:x="824" fg:w="1"/><text x="53.6871%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.4371%" y="693" width="0.0649%" height="15" fill="rgb(222,213,4)" fg:x="824" fg:w="1"/><text x="53.6871%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.4371%" y="677" width="0.0649%" height="15" fill="rgb(226,198,12)" fg:x="824" fg:w="1"/><text x="53.6871%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.4371%" y="661" width="0.0649%" height="15" fill="rgb(248,115,11)" fg:x="824" fg:w="1"/><text x="53.6871%" y="671.50"></text></g><g><title>redb::multimap_table::MultimapTable&lt;K,V&gt;::insert (26 samples, 1.69%)</title><rect x="51.8807%" y="1013" width="1.6861%" height="15" fill="rgb(221,148,54)" fg:x="800" fg:w="26"/><text x="52.1307%" y="1023.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="53.5019%" y="997" width="0.0649%" height="15" fill="rgb(214,209,51)" fg:x="825" fg:w="1"/><text x="53.7519%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="53.5019%" y="981" width="0.0649%" height="15" fill="rgb(249,116,53)" fg:x="825" fg:w="1"/><text x="53.7519%" y="991.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="53.5019%" y="965" width="0.0649%" height="15" fill="rgb(248,170,1)" fg:x="825" fg:w="1"/><text x="53.7519%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.5019%" y="949" width="0.0649%" height="15" fill="rgb(244,105,10)" fg:x="825" fg:w="1"/><text x="53.7519%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.5019%" y="933" width="0.0649%" height="15" fill="rgb(229,100,5)" fg:x="825" fg:w="1"/><text x="53.7519%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.5019%" y="917" width="0.0649%" height="15" fill="rgb(233,221,39)" fg:x="825" fg:w="1"/><text x="53.7519%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="53.5668%" y="997" width="0.0649%" height="15" fill="rgb(233,88,21)" fg:x="826" fg:w="1"/><text x="53.8168%" y="1007.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="53.5668%" y="981" width="0.0649%" height="15" fill="rgb(206,13,0)" fg:x="826" fg:w="1"/><text x="53.8168%" y="991.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="53.5668%" y="965" width="0.0649%" height="15" fill="rgb(242,15,35)" fg:x="826" fg:w="1"/><text x="53.8168%" y="975.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="53.5668%" y="949" width="0.0649%" height="15" fill="rgb(247,142,41)" fg:x="826" fg:w="1"/><text x="53.8168%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="53.5668%" y="933" width="0.0649%" height="15" fill="rgb(245,51,29)" fg:x="826" fg:w="1"/><text x="53.8168%" y="943.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="53.5668%" y="917" width="0.0649%" height="15" fill="rgb(228,209,43)" fg:x="826" fg:w="1"/><text x="53.8168%" y="927.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="53.5668%" y="901" width="0.0649%" height="15" fill="rgb(233,185,9)" fg:x="826" fg:w="1"/><text x="53.8168%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="53.5668%" y="885" width="0.0649%" height="15" fill="rgb(226,93,0)" fg:x="826" fg:w="1"/><text x="53.8168%" y="895.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="53.5668%" y="869" width="0.0649%" height="15" fill="rgb(245,194,43)" fg:x="826" fg:w="1"/><text x="53.8168%" y="879.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="53.5668%" y="853" width="0.0649%" height="15" fill="rgb(211,145,34)" fg:x="826" fg:w="1"/><text x="53.8168%" y="863.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="53.5668%" y="837" width="0.0649%" height="15" fill="rgb(231,228,28)" fg:x="826" fg:w="1"/><text x="53.8168%" y="847.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u16 (1 samples, 0.06%)</title><rect x="53.5668%" y="821" width="0.0649%" height="15" fill="rgb(236,149,4)" fg:x="826" fg:w="1"/><text x="53.8168%" y="831.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_be (1 samples, 0.06%)</title><rect x="53.5668%" y="805" width="0.0649%" height="15" fill="rgb(234,114,38)" fg:x="826" fg:w="1"/><text x="53.8168%" y="815.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (1 samples, 0.06%)</title><rect x="53.5668%" y="789" width="0.0649%" height="15" fill="rgb(246,132,51)" fg:x="826" fg:w="1"/><text x="53.8168%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.5668%" y="773" width="0.0649%" height="15" fill="rgb(251,137,22)" fg:x="826" fg:w="1"/><text x="53.8168%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.5668%" y="757" width="0.0649%" height="15" fill="rgb(243,59,52)" fg:x="826" fg:w="1"/><text x="53.8168%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.5668%" y="741" width="0.0649%" height="15" fill="rgb(239,56,28)" fg:x="826" fg:w="1"/><text x="53.8168%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuardMut&lt;()&gt;&gt; (1 samples, 0.06%)</title><rect x="53.6316%" y="981" width="0.0649%" height="15" fill="rgb(218,168,27)" fg:x="827" fg:w="1"/><text x="53.8816%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="53.6316%" y="965" width="0.0649%" height="15" fill="rgb(232,165,11)" fg:x="827" fg:w="1"/><text x="53.8816%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="53.6316%" y="949" width="0.0649%" height="15" fill="rgb(253,55,41)" fg:x="827" fg:w="1"/><text x="53.8816%" y="959.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.06%)</title><rect x="53.6316%" y="933" width="0.0649%" height="15" fill="rgb(233,206,24)" fg:x="827" fg:w="1"/><text x="53.8816%" y="943.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="53.6316%" y="917" width="0.0649%" height="15" fill="rgb(220,199,8)" fg:x="827" fg:w="1"/><text x="53.8816%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="53.6316%" y="901" width="0.0649%" height="15" fill="rgb(254,65,26)" fg:x="827" fg:w="1"/><text x="53.8816%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="53.6316%" y="885" width="0.0649%" height="15" fill="rgb(253,102,23)" fg:x="827" fg:w="1"/><text x="53.8816%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="53.6316%" y="869" width="0.0649%" height="15" fill="rgb(231,103,35)" fg:x="827" fg:w="1"/><text x="53.8816%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="53.6316%" y="853" width="0.0649%" height="15" fill="rgb(238,26,10)" fg:x="827" fg:w="1"/><text x="53.8816%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="53.6316%" y="837" width="0.0649%" height="15" fill="rgb(234,191,34)" fg:x="827" fg:w="1"/><text x="53.8816%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (1 samples, 0.06%)</title><rect x="53.6316%" y="821" width="0.0649%" height="15" fill="rgb(206,210,9)" fg:x="827" fg:w="1"/><text x="53.8816%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::to_base_index (1 samples, 0.06%)</title><rect x="53.6316%" y="805" width="0.0649%" height="15" fill="rgb(219,155,3)" fg:x="827" fg:w="1"/><text x="53.8816%" y="815.50"></text></g><g><title>hashbrown::raw::offset_from (1 samples, 0.06%)</title><rect x="53.6316%" y="789" width="0.0649%" height="15" fill="rgb(221,62,52)" fg:x="827" fg:w="1"/><text x="53.8816%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.06%)</title><rect x="53.6316%" y="773" width="0.0649%" height="15" fill="rgb(215,197,36)" fg:x="827" fg:w="1"/><text x="53.8816%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.6316%" y="757" width="0.0649%" height="15" fill="rgb(226,222,6)" fg:x="827" fg:w="1"/><text x="53.8816%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.6316%" y="741" width="0.0649%" height="15" fill="rgb(215,58,28)" fg:x="827" fg:w="1"/><text x="53.8816%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.6316%" y="725" width="0.0649%" height="15" fill="rgb(212,148,2)" fg:x="827" fg:w="1"/><text x="53.8816%" y="735.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="53.6965%" y="965" width="0.0649%" height="15" fill="rgb(208,21,42)" fg:x="828" fg:w="1"/><text x="53.9465%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="53.6965%" y="949" width="0.0649%" height="15" fill="rgb(209,107,26)" fg:x="828" fg:w="1"/><text x="53.9465%" y="959.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="53.6965%" y="933" width="0.0649%" height="15" fill="rgb(254,60,47)" fg:x="828" fg:w="1"/><text x="53.9465%" y="943.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="53.6965%" y="917" width="0.0649%" height="15" fill="rgb(207,226,45)" fg:x="828" fg:w="1"/><text x="53.9465%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="53.6965%" y="901" width="0.0649%" height="15" fill="rgb(223,124,22)" fg:x="828" fg:w="1"/><text x="53.9465%" y="911.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="53.6965%" y="885" width="0.0649%" height="15" fill="rgb(240,162,13)" fg:x="828" fg:w="1"/><text x="53.9465%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="53.6965%" y="869" width="0.0649%" height="15" fill="rgb(244,199,31)" fg:x="828" fg:w="1"/><text x="53.9465%" y="879.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="53.6965%" y="853" width="0.0649%" height="15" fill="rgb(207,92,16)" fg:x="828" fg:w="1"/><text x="53.9465%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.6965%" y="837" width="0.0649%" height="15" fill="rgb(215,31,19)" fg:x="828" fg:w="1"/><text x="53.9465%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.6965%" y="821" width="0.0649%" height="15" fill="rgb(245,118,14)" fg:x="828" fg:w="1"/><text x="53.9465%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.6965%" y="805" width="0.0649%" height="15" fill="rgb(248,12,46)" fg:x="828" fg:w="1"/><text x="53.9465%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.7613%" y="565" width="0.0649%" height="15" fill="rgb(209,119,0)" fg:x="829" fg:w="1"/><text x="54.0113%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.7613%" y="549" width="0.0649%" height="15" fill="rgb(254,51,44)" fg:x="829" fg:w="1"/><text x="54.0113%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.7613%" y="533" width="0.0649%" height="15" fill="rgb(253,182,35)" fg:x="829" fg:w="1"/><text x="54.0113%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="53.7613%" y="725" width="0.1297%" height="15" fill="rgb(205,198,39)" fg:x="829" fg:w="2"/><text x="54.0113%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="53.7613%" y="709" width="0.1297%" height="15" fill="rgb(251,175,48)" fg:x="829" fg:w="2"/><text x="54.0113%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="53.7613%" y="693" width="0.1297%" height="15" fill="rgb(239,38,17)" fg:x="829" fg:w="2"/><text x="54.0113%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="53.7613%" y="677" width="0.1297%" height="15" fill="rgb(212,101,8)" fg:x="829" fg:w="2"/><text x="54.0113%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="53.7613%" y="661" width="0.1297%" height="15" fill="rgb(228,35,17)" fg:x="829" fg:w="2"/><text x="54.0113%" y="671.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (2 samples, 0.13%)</title><rect x="53.7613%" y="645" width="0.1297%" height="15" fill="rgb(214,95,8)" fg:x="829" fg:w="2"/><text x="54.0113%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="53.7613%" y="629" width="0.1297%" height="15" fill="rgb(210,176,35)" fg:x="829" fg:w="2"/><text x="54.0113%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="53.7613%" y="613" width="0.1297%" height="15" fill="rgb(226,4,3)" fg:x="829" fg:w="2"/><text x="54.0113%" y="623.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (2 samples, 0.13%)</title><rect x="53.7613%" y="597" width="0.1297%" height="15" fill="rgb(232,133,14)" fg:x="829" fg:w="2"/><text x="54.0113%" y="607.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (2 samples, 0.13%)</title><rect x="53.7613%" y="581" width="0.1297%" height="15" fill="rgb(250,191,8)" fg:x="829" fg:w="2"/><text x="54.0113%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (1 samples, 0.06%)</title><rect x="53.8262%" y="565" width="0.0649%" height="15" fill="rgb(213,12,45)" fg:x="830" fg:w="1"/><text x="54.0762%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.8262%" y="549" width="0.0649%" height="15" fill="rgb(233,78,26)" fg:x="830" fg:w="1"/><text x="54.0762%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.8262%" y="533" width="0.0649%" height="15" fill="rgb(245,222,11)" fg:x="830" fg:w="1"/><text x="54.0762%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.8262%" y="517" width="0.0649%" height="15" fill="rgb(216,174,12)" fg:x="830" fg:w="1"/><text x="54.0762%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="53.8911%" y="661" width="0.0649%" height="15" fill="rgb(213,15,9)" fg:x="831" fg:w="1"/><text x="54.1411%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.8911%" y="645" width="0.0649%" height="15" fill="rgb(238,103,32)" fg:x="831" fg:w="1"/><text x="54.1411%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.8911%" y="629" width="0.0649%" height="15" fill="rgb(245,85,15)" fg:x="831" fg:w="1"/><text x="54.1411%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.8911%" y="613" width="0.0649%" height="15" fill="rgb(254,204,5)" fg:x="831" fg:w="1"/><text x="54.1411%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="53.9559%" y="501" width="0.0649%" height="15" fill="rgb(231,178,15)" fg:x="832" fg:w="1"/><text x="54.2059%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="53.9559%" y="485" width="0.0649%" height="15" fill="rgb(248,151,3)" fg:x="832" fg:w="1"/><text x="54.2059%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="53.9559%" y="469" width="0.0649%" height="15" fill="rgb(250,139,13)" fg:x="832" fg:w="1"/><text x="54.2059%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="53.9559%" y="453" width="0.0649%" height="15" fill="rgb(243,107,53)" fg:x="832" fg:w="1"/><text x="54.2059%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="53.9559%" y="437" width="0.0649%" height="15" fill="rgb(232,81,15)" fg:x="832" fg:w="1"/><text x="54.2059%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="53.9559%" y="421" width="0.0649%" height="15" fill="rgb(225,187,48)" fg:x="832" fg:w="1"/><text x="54.2059%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="53.8911%" y="693" width="0.1946%" height="15" fill="rgb(205,116,12)" fg:x="831" fg:w="3"/><text x="54.1411%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="53.8911%" y="677" width="0.1946%" height="15" fill="rgb(220,222,31)" fg:x="831" fg:w="3"/><text x="54.1411%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="53.9559%" y="661" width="0.1297%" height="15" fill="rgb(233,187,49)" fg:x="832" fg:w="2"/><text x="54.2059%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="53.9559%" y="645" width="0.1297%" height="15" fill="rgb(211,168,53)" fg:x="832" fg:w="2"/><text x="54.2059%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="53.9559%" y="629" width="0.1297%" height="15" fill="rgb(206,160,16)" fg:x="832" fg:w="2"/><text x="54.2059%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="53.9559%" y="613" width="0.1297%" height="15" fill="rgb(254,164,13)" fg:x="832" fg:w="2"/><text x="54.2059%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="53.9559%" y="597" width="0.1297%" height="15" fill="rgb(229,45,30)" fg:x="832" fg:w="2"/><text x="54.2059%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="53.9559%" y="581" width="0.1297%" height="15" fill="rgb(237,32,10)" fg:x="832" fg:w="2"/><text x="54.2059%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="53.9559%" y="565" width="0.1297%" height="15" fill="rgb(251,20,47)" fg:x="832" fg:w="2"/><text x="54.2059%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="53.9559%" y="549" width="0.1297%" height="15" fill="rgb(251,116,12)" fg:x="832" fg:w="2"/><text x="54.2059%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="53.9559%" y="533" width="0.1297%" height="15" fill="rgb(214,227,27)" fg:x="832" fg:w="2"/><text x="54.2059%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="53.9559%" y="517" width="0.1297%" height="15" fill="rgb(248,10,53)" fg:x="832" fg:w="2"/><text x="54.2059%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="54.0208%" y="501" width="0.0649%" height="15" fill="rgb(221,176,25)" fg:x="833" fg:w="1"/><text x="54.2708%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="54.0208%" y="485" width="0.0649%" height="15" fill="rgb(205,70,46)" fg:x="833" fg:w="1"/><text x="54.2708%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="54.0208%" y="469" width="0.0649%" height="15" fill="rgb(217,45,38)" fg:x="833" fg:w="1"/><text x="54.2708%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.0208%" y="453" width="0.0649%" height="15" fill="rgb(243,6,54)" fg:x="833" fg:w="1"/><text x="54.2708%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.0208%" y="437" width="0.0649%" height="15" fill="rgb(242,76,23)" fg:x="833" fg:w="1"/><text x="54.2708%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.0208%" y="421" width="0.0649%" height="15" fill="rgb(239,166,0)" fg:x="833" fg:w="1"/><text x="54.2708%" y="431.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (6 samples, 0.39%)</title><rect x="53.7613%" y="949" width="0.3891%" height="15" fill="rgb(238,174,32)" fg:x="829" fg:w="6"/><text x="54.0113%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (6 samples, 0.39%)</title><rect x="53.7613%" y="933" width="0.3891%" height="15" fill="rgb(238,124,44)" fg:x="829" fg:w="6"/><text x="54.0113%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (6 samples, 0.39%)</title><rect x="53.7613%" y="917" width="0.3891%" height="15" fill="rgb(206,185,9)" fg:x="829" fg:w="6"/><text x="54.0113%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (6 samples, 0.39%)</title><rect x="53.7613%" y="901" width="0.3891%" height="15" fill="rgb(215,157,17)" fg:x="829" fg:w="6"/><text x="54.0113%" y="911.50"></text></g><g><title>bincode::internal::deserialize (6 samples, 0.39%)</title><rect x="53.7613%" y="885" width="0.3891%" height="15" fill="rgb(251,17,29)" fg:x="829" fg:w="6"/><text x="54.0113%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (6 samples, 0.39%)</title><rect x="53.7613%" y="869" width="0.3891%" height="15" fill="rgb(227,113,27)" fg:x="829" fg:w="6"/><text x="54.0113%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="53.7613%" y="853" width="0.3891%" height="15" fill="rgb(217,226,24)" fg:x="829" fg:w="6"/><text x="54.0113%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="53.7613%" y="837" width="0.3891%" height="15" fill="rgb(251,99,38)" fg:x="829" fg:w="6"/><text x="54.0113%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="53.7613%" y="821" width="0.3891%" height="15" fill="rgb(231,147,19)" fg:x="829" fg:w="6"/><text x="54.0113%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="53.7613%" y="805" width="0.3891%" height="15" fill="rgb(230,86,8)" fg:x="829" fg:w="6"/><text x="54.0113%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.39%)</title><rect x="53.7613%" y="789" width="0.3891%" height="15" fill="rgb(237,159,39)" fg:x="829" fg:w="6"/><text x="54.0113%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="53.7613%" y="773" width="0.3891%" height="15" fill="rgb(247,179,47)" fg:x="829" fg:w="6"/><text x="54.0113%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="53.7613%" y="757" width="0.3891%" height="15" fill="rgb(253,152,26)" fg:x="829" fg:w="6"/><text x="54.0113%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="53.7613%" y="741" width="0.3891%" height="15" fill="rgb(222,211,15)" fg:x="829" fg:w="6"/><text x="54.0113%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="53.8911%" y="725" width="0.2594%" height="15" fill="rgb(236,193,6)" fg:x="831" fg:w="4"/><text x="54.1411%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="53.8911%" y="709" width="0.2594%" height="15" fill="rgb(226,206,10)" fg:x="831" fg:w="4"/><text x="54.1411%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.0856%" y="693" width="0.0649%" height="15" fill="rgb(213,125,22)" fg:x="834" fg:w="1"/><text x="54.3356%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.0856%" y="677" width="0.0649%" height="15" fill="rgb(221,66,28)" fg:x="834" fg:w="1"/><text x="54.3356%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.0856%" y="661" width="0.0649%" height="15" fill="rgb(222,84,53)" fg:x="834" fg:w="1"/><text x="54.3356%" y="671.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="54.1505%" y="949" width="0.0649%" height="15" fill="rgb(243,50,15)" fg:x="835" fg:w="1"/><text x="54.4005%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="54.1505%" y="933" width="0.0649%" height="15" fill="rgb(208,184,23)" fg:x="835" fg:w="1"/><text x="54.4005%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_section_start (1 samples, 0.06%)</title><rect x="54.1505%" y="917" width="0.0649%" height="15" fill="rgb(221,83,2)" fg:x="835" fg:w="1"/><text x="54.4005%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.06%)</title><rect x="54.1505%" y="901" width="0.0649%" height="15" fill="rgb(236,53,24)" fg:x="835" fg:w="1"/><text x="54.4005%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.06%)</title><rect x="54.1505%" y="885" width="0.0649%" height="15" fill="rgb(244,171,29)" fg:x="835" fg:w="1"/><text x="54.4005%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.1505%" y="869" width="0.0649%" height="15" fill="rgb(205,19,11)" fg:x="835" fg:w="1"/><text x="54.4005%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.1505%" y="853" width="0.0649%" height="15" fill="rgb(207,108,29)" fg:x="835" fg:w="1"/><text x="54.4005%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.1505%" y="837" width="0.0649%" height="15" fill="rgb(236,215,43)" fg:x="835" fg:w="1"/><text x="54.4005%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.2153%" y="741" width="0.0649%" height="15" fill="rgb(213,58,35)" fg:x="836" fg:w="1"/><text x="54.4653%" y="751.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.2153%" y="725" width="0.0649%" height="15" fill="rgb(220,211,46)" fg:x="836" fg:w="1"/><text x="54.4653%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="54.2153%" y="709" width="0.0649%" height="15" fill="rgb(212,134,16)" fg:x="836" fg:w="1"/><text x="54.4653%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="54.2153%" y="693" width="0.0649%" height="15" fill="rgb(232,90,44)" fg:x="836" fg:w="1"/><text x="54.4653%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="54.2153%" y="677" width="0.0649%" height="15" fill="rgb(212,18,36)" fg:x="836" fg:w="1"/><text x="54.4653%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="54.2153%" y="661" width="0.0649%" height="15" fill="rgb(206,112,24)" fg:x="836" fg:w="1"/><text x="54.4653%" y="671.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="54.2153%" y="645" width="0.0649%" height="15" fill="rgb(238,223,40)" fg:x="836" fg:w="1"/><text x="54.4653%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="54.2153%" y="629" width="0.0649%" height="15" fill="rgb(226,169,20)" fg:x="836" fg:w="1"/><text x="54.4653%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="54.2153%" y="613" width="0.0649%" height="15" fill="rgb(241,64,52)" fg:x="836" fg:w="1"/><text x="54.4653%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="54.2153%" y="597" width="0.0649%" height="15" fill="rgb(228,120,25)" fg:x="836" fg:w="1"/><text x="54.4653%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="54.2153%" y="581" width="0.0649%" height="15" fill="rgb(234,108,19)" fg:x="836" fg:w="1"/><text x="54.4653%" y="591.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="54.2153%" y="565" width="0.0649%" height="15" fill="rgb(236,133,29)" fg:x="836" fg:w="1"/><text x="54.4653%" y="575.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="54.2153%" y="549" width="0.0649%" height="15" fill="rgb(246,174,53)" fg:x="836" fg:w="1"/><text x="54.4653%" y="559.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="54.2153%" y="533" width="0.0649%" height="15" fill="rgb(210,105,35)" fg:x="836" fg:w="1"/><text x="54.4653%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.2153%" y="517" width="0.0649%" height="15" fill="rgb(225,27,26)" fg:x="836" fg:w="1"/><text x="54.4653%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.2153%" y="501" width="0.0649%" height="15" fill="rgb(233,2,39)" fg:x="836" fg:w="1"/><text x="54.4653%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.2153%" y="485" width="0.0649%" height="15" fill="rgb(219,164,26)" fg:x="836" fg:w="1"/><text x="54.4653%" y="495.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="54.2153%" y="949" width="0.1297%" height="15" fill="rgb(236,211,5)" fg:x="836" fg:w="2"/><text x="54.4653%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="54.2153%" y="933" width="0.1297%" height="15" fill="rgb(244,227,23)" fg:x="836" fg:w="2"/><text x="54.4653%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="54.2153%" y="917" width="0.1297%" height="15" fill="rgb(230,184,8)" fg:x="836" fg:w="2"/><text x="54.4653%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="54.2153%" y="901" width="0.1297%" height="15" fill="rgb(217,125,48)" fg:x="836" fg:w="2"/><text x="54.4653%" y="911.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="54.2153%" y="885" width="0.1297%" height="15" fill="rgb(223,192,47)" fg:x="836" fg:w="2"/><text x="54.4653%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="54.2153%" y="869" width="0.1297%" height="15" fill="rgb(226,119,10)" fg:x="836" fg:w="2"/><text x="54.4653%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="54.2153%" y="853" width="0.1297%" height="15" fill="rgb(221,49,29)" fg:x="836" fg:w="2"/><text x="54.4653%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="54.2153%" y="837" width="0.1297%" height="15" fill="rgb(217,205,19)" fg:x="836" fg:w="2"/><text x="54.4653%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="54.2153%" y="821" width="0.1297%" height="15" fill="rgb(242,104,7)" fg:x="836" fg:w="2"/><text x="54.4653%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="54.2153%" y="805" width="0.1297%" height="15" fill="rgb(209,154,48)" fg:x="836" fg:w="2"/><text x="54.4653%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="54.2153%" y="789" width="0.1297%" height="15" fill="rgb(219,213,46)" fg:x="836" fg:w="2"/><text x="54.4653%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="54.2153%" y="773" width="0.1297%" height="15" fill="rgb(229,105,38)" fg:x="836" fg:w="2"/><text x="54.4653%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="54.2153%" y="757" width="0.1297%" height="15" fill="rgb(205,151,5)" fg:x="836" fg:w="2"/><text x="54.4653%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="54.2802%" y="741" width="0.0649%" height="15" fill="rgb(248,115,40)" fg:x="837" fg:w="1"/><text x="54.5302%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.2802%" y="725" width="0.0649%" height="15" fill="rgb(206,179,2)" fg:x="837" fg:w="1"/><text x="54.5302%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.2802%" y="709" width="0.0649%" height="15" fill="rgb(230,103,24)" fg:x="837" fg:w="1"/><text x="54.5302%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.2802%" y="693" width="0.0649%" height="15" fill="rgb(218,152,4)" fg:x="837" fg:w="1"/><text x="54.5302%" y="703.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (1 samples, 0.06%)</title><rect x="54.3450%" y="949" width="0.0649%" height="15" fill="rgb(236,161,54)" fg:x="838" fg:w="1"/><text x="54.5950%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (1 samples, 0.06%)</title><rect x="54.3450%" y="933" width="0.0649%" height="15" fill="rgb(226,65,17)" fg:x="838" fg:w="1"/><text x="54.5950%" y="943.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;u32&gt; for isize&gt;::try_from (1 samples, 0.06%)</title><rect x="54.3450%" y="917" width="0.0649%" height="15" fill="rgb(221,134,44)" fg:x="838" fg:w="1"/><text x="54.5950%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.3450%" y="901" width="0.0649%" height="15" fill="rgb(251,129,4)" fg:x="838" fg:w="1"/><text x="54.5950%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.3450%" y="885" width="0.0649%" height="15" fill="rgb(244,32,34)" fg:x="838" fg:w="1"/><text x="54.5950%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.3450%" y="869" width="0.0649%" height="15" fill="rgb(251,224,37)" fg:x="838" fg:w="1"/><text x="54.5950%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.4099%" y="709" width="0.0649%" height="15" fill="rgb(248,117,31)" fg:x="839" fg:w="1"/><text x="54.6599%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.4099%" y="693" width="0.0649%" height="15" fill="rgb(222,208,37)" fg:x="839" fg:w="1"/><text x="54.6599%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.4099%" y="677" width="0.0649%" height="15" fill="rgb(234,211,25)" fg:x="839" fg:w="1"/><text x="54.6599%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.4747%" y="581" width="0.0649%" height="15" fill="rgb(211,72,6)" fg:x="840" fg:w="1"/><text x="54.7247%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.4747%" y="565" width="0.0649%" height="15" fill="rgb(249,198,38)" fg:x="840" fg:w="1"/><text x="54.7247%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.4747%" y="549" width="0.0649%" height="15" fill="rgb(221,86,51)" fg:x="840" fg:w="1"/><text x="54.7247%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="54.4747%" y="709" width="0.1297%" height="15" fill="rgb(226,178,43)" fg:x="840" fg:w="2"/><text x="54.7247%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="54.4747%" y="693" width="0.1297%" height="15" fill="rgb(215,145,7)" fg:x="840" fg:w="2"/><text x="54.7247%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="54.4747%" y="677" width="0.1297%" height="15" fill="rgb(250,202,36)" fg:x="840" fg:w="2"/><text x="54.7247%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="54.4747%" y="661" width="0.1297%" height="15" fill="rgb(215,86,13)" fg:x="840" fg:w="2"/><text x="54.7247%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="54.4747%" y="645" width="0.1297%" height="15" fill="rgb(221,134,12)" fg:x="840" fg:w="2"/><text x="54.7247%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="54.4747%" y="629" width="0.1297%" height="15" fill="rgb(213,82,10)" fg:x="840" fg:w="2"/><text x="54.7247%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="54.4747%" y="613" width="0.1297%" height="15" fill="rgb(214,142,0)" fg:x="840" fg:w="2"/><text x="54.7247%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="54.4747%" y="597" width="0.1297%" height="15" fill="rgb(205,145,9)" fg:x="840" fg:w="2"/><text x="54.7247%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="54.5396%" y="581" width="0.0649%" height="15" fill="rgb(244,214,8)" fg:x="841" fg:w="1"/><text x="54.7896%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="54.5396%" y="565" width="0.0649%" height="15" fill="rgb(224,72,51)" fg:x="841" fg:w="1"/><text x="54.7896%" y="575.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="54.5396%" y="549" width="0.0649%" height="15" fill="rgb(233,137,37)" fg:x="841" fg:w="1"/><text x="54.7896%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="54.5396%" y="533" width="0.0649%" height="15" fill="rgb(208,71,28)" fg:x="841" fg:w="1"/><text x="54.7896%" y="543.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="54.5396%" y="517" width="0.0649%" height="15" fill="rgb(226,31,7)" fg:x="841" fg:w="1"/><text x="54.7896%" y="527.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="54.5396%" y="501" width="0.0649%" height="15" fill="rgb(229,62,18)" fg:x="841" fg:w="1"/><text x="54.7896%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="54.5396%" y="485" width="0.0649%" height="15" fill="rgb(226,74,28)" fg:x="841" fg:w="1"/><text x="54.7896%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.5396%" y="469" width="0.0649%" height="15" fill="rgb(214,170,18)" fg:x="841" fg:w="1"/><text x="54.7896%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.5396%" y="453" width="0.0649%" height="15" fill="rgb(227,229,35)" fg:x="841" fg:w="1"/><text x="54.7896%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.5396%" y="437" width="0.0649%" height="15" fill="rgb(225,181,39)" fg:x="841" fg:w="1"/><text x="54.7896%" y="447.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="54.4099%" y="917" width="0.2594%" height="15" fill="rgb(253,124,44)" fg:x="839" fg:w="4"/><text x="54.6599%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="54.4099%" y="901" width="0.2594%" height="15" fill="rgb(220,75,18)" fg:x="839" fg:w="4"/><text x="54.6599%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="54.4099%" y="885" width="0.2594%" height="15" fill="rgb(239,175,43)" fg:x="839" fg:w="4"/><text x="54.6599%" y="895.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="54.4099%" y="869" width="0.2594%" height="15" fill="rgb(228,112,50)" fg:x="839" fg:w="4"/><text x="54.6599%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="54.4099%" y="853" width="0.2594%" height="15" fill="rgb(232,105,36)" fg:x="839" fg:w="4"/><text x="54.6599%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="54.4099%" y="837" width="0.2594%" height="15" fill="rgb(227,137,47)" fg:x="839" fg:w="4"/><text x="54.6599%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="54.4099%" y="821" width="0.2594%" height="15" fill="rgb(217,51,9)" fg:x="839" fg:w="4"/><text x="54.6599%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="54.4099%" y="805" width="0.2594%" height="15" fill="rgb(245,117,0)" fg:x="839" fg:w="4"/><text x="54.6599%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="54.4099%" y="789" width="0.2594%" height="15" fill="rgb(252,52,30)" fg:x="839" fg:w="4"/><text x="54.6599%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="54.4099%" y="773" width="0.2594%" height="15" fill="rgb(227,85,33)" fg:x="839" fg:w="4"/><text x="54.6599%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="54.4099%" y="757" width="0.2594%" height="15" fill="rgb(220,157,20)" fg:x="839" fg:w="4"/><text x="54.6599%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="54.4099%" y="741" width="0.2594%" height="15" fill="rgb(254,14,34)" fg:x="839" fg:w="4"/><text x="54.6599%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="54.4099%" y="725" width="0.2594%" height="15" fill="rgb(216,103,41)" fg:x="839" fg:w="4"/><text x="54.6599%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.6044%" y="709" width="0.0649%" height="15" fill="rgb(245,221,9)" fg:x="842" fg:w="1"/><text x="54.8544%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="54.6044%" y="693" width="0.0649%" height="15" fill="rgb(254,136,47)" fg:x="842" fg:w="1"/><text x="54.8544%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="54.6044%" y="677" width="0.0649%" height="15" fill="rgb(235,71,46)" fg:x="842" fg:w="1"/><text x="54.8544%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="54.6044%" y="661" width="0.0649%" height="15" fill="rgb(242,154,29)" fg:x="842" fg:w="1"/><text x="54.8544%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="54.6044%" y="645" width="0.0649%" height="15" fill="rgb(210,65,31)" fg:x="842" fg:w="1"/><text x="54.8544%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="54.6044%" y="629" width="0.0649%" height="15" fill="rgb(244,9,50)" fg:x="842" fg:w="1"/><text x="54.8544%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.6044%" y="613" width="0.0649%" height="15" fill="rgb(215,141,38)" fg:x="842" fg:w="1"/><text x="54.8544%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.6044%" y="597" width="0.0649%" height="15" fill="rgb(241,129,6)" fg:x="842" fg:w="1"/><text x="54.8544%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="54.6044%" y="581" width="0.0649%" height="15" fill="rgb(253,169,4)" fg:x="842" fg:w="1"/><text x="54.8544%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="54.6044%" y="565" width="0.0649%" height="15" fill="rgb(237,82,36)" fg:x="842" fg:w="1"/><text x="54.8544%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="54.6044%" y="549" width="0.0649%" height="15" fill="rgb(209,171,11)" fg:x="842" fg:w="1"/><text x="54.8544%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="54.6044%" y="533" width="0.0649%" height="15" fill="rgb(242,19,22)" fg:x="842" fg:w="1"/><text x="54.8544%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="54.6044%" y="517" width="0.0649%" height="15" fill="rgb(251,122,24)" fg:x="842" fg:w="1"/><text x="54.8544%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.6044%" y="501" width="0.0649%" height="15" fill="rgb(226,166,42)" fg:x="842" fg:w="1"/><text x="54.8544%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="54.6044%" y="485" width="0.0649%" height="15" fill="rgb(244,101,48)" fg:x="842" fg:w="1"/><text x="54.8544%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="54.6044%" y="469" width="0.0649%" height="15" fill="rgb(227,125,1)" fg:x="842" fg:w="1"/><text x="54.8544%" y="479.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="54.6044%" y="453" width="0.0649%" height="15" fill="rgb(206,79,43)" fg:x="842" fg:w="1"/><text x="54.8544%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="54.6044%" y="437" width="0.0649%" height="15" fill="rgb(241,109,41)" fg:x="842" fg:w="1"/><text x="54.8544%" y="447.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="54.6044%" y="421" width="0.0649%" height="15" fill="rgb(219,73,4)" fg:x="842" fg:w="1"/><text x="54.8544%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="54.6044%" y="405" width="0.0649%" height="15" fill="rgb(239,25,41)" fg:x="842" fg:w="1"/><text x="54.8544%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="54.6044%" y="389" width="0.0649%" height="15" fill="rgb(208,88,46)" fg:x="842" fg:w="1"/><text x="54.8544%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="54.6044%" y="373" width="0.0649%" height="15" fill="rgb(239,184,9)" fg:x="842" fg:w="1"/><text x="54.8544%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="54.6044%" y="357" width="0.0649%" height="15" fill="rgb(223,114,13)" fg:x="842" fg:w="1"/><text x="54.8544%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="54.6044%" y="341" width="0.0649%" height="15" fill="rgb(214,28,42)" fg:x="842" fg:w="1"/><text x="54.8544%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="54.6044%" y="325" width="0.0649%" height="15" fill="rgb(252,32,44)" fg:x="842" fg:w="1"/><text x="54.8544%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="54.6044%" y="309" width="0.0649%" height="15" fill="rgb(231,159,4)" fg:x="842" fg:w="1"/><text x="54.8544%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="54.6044%" y="293" width="0.0649%" height="15" fill="rgb(210,35,26)" fg:x="842" fg:w="1"/><text x="54.8544%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="54.6044%" y="277" width="0.0649%" height="15" fill="rgb(208,190,37)" fg:x="842" fg:w="1"/><text x="54.8544%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="54.6044%" y="261" width="0.0649%" height="15" fill="rgb(226,148,22)" fg:x="842" fg:w="1"/><text x="54.8544%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.6044%" y="245" width="0.0649%" height="15" fill="rgb(242,153,24)" fg:x="842" fg:w="1"/><text x="54.8544%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.6044%" y="229" width="0.0649%" height="15" fill="rgb(213,133,7)" fg:x="842" fg:w="1"/><text x="54.8544%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.6044%" y="213" width="0.0649%" height="15" fill="rgb(248,206,18)" fg:x="842" fg:w="1"/><text x="54.8544%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="54.6693%" y="869" width="0.0649%" height="15" fill="rgb(233,157,4)" fg:x="843" fg:w="1"/><text x="54.9193%" y="879.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="54.6693%" y="853" width="0.0649%" height="15" fill="rgb(249,179,32)" fg:x="843" fg:w="1"/><text x="54.9193%" y="863.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="54.6693%" y="837" width="0.0649%" height="15" fill="rgb(248,69,35)" fg:x="843" fg:w="1"/><text x="54.9193%" y="847.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="54.6693%" y="821" width="0.0649%" height="15" fill="rgb(249,158,38)" fg:x="843" fg:w="1"/><text x="54.9193%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.6693%" y="805" width="0.0649%" height="15" fill="rgb(223,18,43)" fg:x="843" fg:w="1"/><text x="54.9193%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.6693%" y="789" width="0.0649%" height="15" fill="rgb(238,42,45)" fg:x="843" fg:w="1"/><text x="54.9193%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.6693%" y="773" width="0.0649%" height="15" fill="rgb(219,65,47)" fg:x="843" fg:w="1"/><text x="54.9193%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (6 samples, 0.39%)</title><rect x="54.4099%" y="933" width="0.3891%" height="15" fill="rgb(248,153,12)" fg:x="839" fg:w="6"/><text x="54.6599%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (2 samples, 0.13%)</title><rect x="54.6693%" y="917" width="0.1297%" height="15" fill="rgb(240,118,4)" fg:x="843" fg:w="2"/><text x="54.9193%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (2 samples, 0.13%)</title><rect x="54.6693%" y="901" width="0.1297%" height="15" fill="rgb(250,96,34)" fg:x="843" fg:w="2"/><text x="54.9193%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="54.6693%" y="885" width="0.1297%" height="15" fill="rgb(221,15,4)" fg:x="843" fg:w="2"/><text x="54.9193%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="54.7341%" y="869" width="0.0649%" height="15" fill="rgb(217,149,33)" fg:x="844" fg:w="1"/><text x="54.9841%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="54.7341%" y="853" width="0.0649%" height="15" fill="rgb(213,58,29)" fg:x="844" fg:w="1"/><text x="54.9841%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.7341%" y="837" width="0.0649%" height="15" fill="rgb(236,218,9)" fg:x="844" fg:w="1"/><text x="54.9841%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.7341%" y="821" width="0.0649%" height="15" fill="rgb(248,40,19)" fg:x="844" fg:w="1"/><text x="54.9841%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.7341%" y="805" width="0.0649%" height="15" fill="rgb(212,17,6)" fg:x="844" fg:w="1"/><text x="54.9841%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (1 samples, 0.06%)</title><rect x="54.7990%" y="933" width="0.0649%" height="15" fill="rgb(206,212,20)" fg:x="845" fg:w="1"/><text x="55.0490%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="54.7990%" y="917" width="0.0649%" height="15" fill="rgb(229,80,37)" fg:x="845" fg:w="1"/><text x="55.0490%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_end (1 samples, 0.06%)</title><rect x="54.7990%" y="901" width="0.0649%" height="15" fill="rgb(253,8,37)" fg:x="845" fg:w="1"/><text x="55.0490%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.7990%" y="885" width="0.0649%" height="15" fill="rgb(215,16,43)" fg:x="845" fg:w="1"/><text x="55.0490%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.7990%" y="869" width="0.0649%" height="15" fill="rgb(236,219,16)" fg:x="845" fg:w="1"/><text x="55.0490%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.7990%" y="853" width="0.0649%" height="15" fill="rgb(251,0,3)" fg:x="845" fg:w="1"/><text x="55.0490%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build_split (1 samples, 0.06%)</title><rect x="54.8638%" y="933" width="0.0649%" height="15" fill="rgb(207,133,37)" fg:x="846" fg:w="1"/><text x="55.1138%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="54.8638%" y="917" width="0.0649%" height="15" fill="rgb(250,143,20)" fg:x="846" fg:w="1"/><text x="55.1138%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::key_end (1 samples, 0.06%)</title><rect x="54.8638%" y="901" width="0.0649%" height="15" fill="rgb(242,19,50)" fg:x="846" fg:w="1"/><text x="55.1138%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.8638%" y="885" width="0.0649%" height="15" fill="rgb(206,124,43)" fg:x="846" fg:w="1"/><text x="55.1138%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.8638%" y="869" width="0.0649%" height="15" fill="rgb(229,4,38)" fg:x="846" fg:w="1"/><text x="55.1138%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.8638%" y="853" width="0.0649%" height="15" fill="rgb(247,220,45)" fg:x="846" fg:w="1"/><text x="55.1138%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.9287%" y="917" width="0.0649%" height="15" fill="rgb(247,195,0)" fg:x="847" fg:w="1"/><text x="55.1787%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.9287%" y="901" width="0.0649%" height="15" fill="rgb(252,12,19)" fg:x="847" fg:w="1"/><text x="55.1787%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.9287%" y="885" width="0.0649%" height="15" fill="rgb(222,49,50)" fg:x="847" fg:w="1"/><text x="55.1787%" y="895.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.06%)</title><rect x="54.9935%" y="917" width="0.0649%" height="15" fill="rgb(209,157,28)" fg:x="848" fg:w="1"/><text x="55.2435%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.06%)</title><rect x="54.9935%" y="901" width="0.0649%" height="15" fill="rgb(238,174,24)" fg:x="848" fg:w="1"/><text x="55.2435%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="54.9935%" y="885" width="0.0649%" height="15" fill="rgb(224,17,28)" fg:x="848" fg:w="1"/><text x="55.2435%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="54.9935%" y="869" width="0.0649%" height="15" fill="rgb(249,7,29)" fg:x="848" fg:w="1"/><text x="55.2435%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="54.9935%" y="853" width="0.0649%" height="15" fill="rgb(243,178,4)" fg:x="848" fg:w="1"/><text x="55.2435%" y="863.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="55.0584%" y="901" width="0.0649%" height="15" fill="rgb(246,138,35)" fg:x="849" fg:w="1"/><text x="55.3084%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="55.0584%" y="885" width="0.0649%" height="15" fill="rgb(251,85,18)" fg:x="849" fg:w="1"/><text x="55.3084%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="55.0584%" y="869" width="0.0649%" height="15" fill="rgb(254,55,9)" fg:x="849" fg:w="1"/><text x="55.3084%" y="879.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="55.0584%" y="853" width="0.0649%" height="15" fill="rgb(248,4,50)" fg:x="849" fg:w="1"/><text x="55.3084%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.0584%" y="837" width="0.0649%" height="15" fill="rgb(215,208,14)" fg:x="849" fg:w="1"/><text x="55.3084%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.0584%" y="821" width="0.0649%" height="15" fill="rgb(218,37,18)" fg:x="849" fg:w="1"/><text x="55.3084%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.0584%" y="805" width="0.0649%" height="15" fill="rgb(206,104,13)" fg:x="849" fg:w="1"/><text x="55.3084%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="55.1232%" y="901" width="0.1297%" height="15" fill="rgb(248,94,22)" fg:x="850" fg:w="2"/><text x="55.3732%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="55.1232%" y="885" width="0.1297%" height="15" fill="rgb(235,42,46)" fg:x="850" fg:w="2"/><text x="55.3732%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="55.1232%" y="869" width="0.1297%" height="15" fill="rgb(220,228,48)" fg:x="850" fg:w="2"/><text x="55.3732%" y="879.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="55.2529%" y="901" width="0.0649%" height="15" fill="rgb(216,58,12)" fg:x="852" fg:w="1"/><text x="55.5029%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.2529%" y="885" width="0.0649%" height="15" fill="rgb(223,97,52)" fg:x="852" fg:w="1"/><text x="55.5029%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.2529%" y="869" width="0.0649%" height="15" fill="rgb(208,159,17)" fg:x="852" fg:w="1"/><text x="55.5029%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.2529%" y="853" width="0.0649%" height="15" fill="rgb(215,172,9)" fg:x="852" fg:w="1"/><text x="55.5029%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="55.3178%" y="853" width="0.0649%" height="15" fill="rgb(252,175,30)" fg:x="853" fg:w="1"/><text x="55.5678%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="55.3178%" y="837" width="0.0649%" height="15" fill="rgb(209,159,10)" fg:x="853" fg:w="1"/><text x="55.5678%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="55.3178%" y="821" width="0.0649%" height="15" fill="rgb(229,73,51)" fg:x="853" fg:w="1"/><text x="55.5678%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.3178%" y="805" width="0.0649%" height="15" fill="rgb(208,212,43)" fg:x="853" fg:w="1"/><text x="55.5678%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.3178%" y="789" width="0.0649%" height="15" fill="rgb(254,123,53)" fg:x="853" fg:w="1"/><text x="55.5678%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.3178%" y="773" width="0.0649%" height="15" fill="rgb(254,128,49)" fg:x="853" fg:w="1"/><text x="55.5678%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="55.3178%" y="901" width="0.1297%" height="15" fill="rgb(246,16,16)" fg:x="853" fg:w="2"/><text x="55.5678%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="55.3178%" y="885" width="0.1297%" height="15" fill="rgb(209,200,1)" fg:x="853" fg:w="2"/><text x="55.5678%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="55.3178%" y="869" width="0.1297%" height="15" fill="rgb(235,9,3)" fg:x="853" fg:w="2"/><text x="55.5678%" y="879.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="55.3826%" y="853" width="0.0649%" height="15" fill="rgb(233,121,54)" fg:x="854" fg:w="1"/><text x="55.6326%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="55.3826%" y="837" width="0.0649%" height="15" fill="rgb(236,80,25)" fg:x="854" fg:w="1"/><text x="55.6326%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.3826%" y="821" width="0.0649%" height="15" fill="rgb(220,44,24)" fg:x="854" fg:w="1"/><text x="55.6326%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.3826%" y="805" width="0.0649%" height="15" fill="rgb(236,225,16)" fg:x="854" fg:w="1"/><text x="55.6326%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.3826%" y="789" width="0.0649%" height="15" fill="rgb(237,140,0)" fg:x="854" fg:w="1"/><text x="55.6326%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="55.4475%" y="837" width="0.0649%" height="15" fill="rgb(243,225,53)" fg:x="855" fg:w="1"/><text x="55.6975%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="55.4475%" y="821" width="0.0649%" height="15" fill="rgb(240,140,30)" fg:x="855" fg:w="1"/><text x="55.6975%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.4475%" y="805" width="0.0649%" height="15" fill="rgb(217,51,16)" fg:x="855" fg:w="1"/><text x="55.6975%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.4475%" y="789" width="0.0649%" height="15" fill="rgb(245,75,50)" fg:x="855" fg:w="1"/><text x="55.6975%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.4475%" y="773" width="0.0649%" height="15" fill="rgb(208,174,22)" fg:x="855" fg:w="1"/><text x="55.6975%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (9 samples, 0.58%)</title><rect x="55.0584%" y="917" width="0.5837%" height="15" fill="rgb(219,98,50)" fg:x="849" fg:w="9"/><text x="55.3084%" y="927.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (3 samples, 0.19%)</title><rect x="55.4475%" y="901" width="0.1946%" height="15" fill="rgb(243,138,3)" fg:x="855" fg:w="3"/><text x="55.6975%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (3 samples, 0.19%)</title><rect x="55.4475%" y="885" width="0.1946%" height="15" fill="rgb(243,132,26)" fg:x="855" fg:w="3"/><text x="55.6975%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (3 samples, 0.19%)</title><rect x="55.4475%" y="869" width="0.1946%" height="15" fill="rgb(250,201,8)" fg:x="855" fg:w="3"/><text x="55.6975%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (3 samples, 0.19%)</title><rect x="55.4475%" y="853" width="0.1946%" height="15" fill="rgb(213,91,26)" fg:x="855" fg:w="3"/><text x="55.6975%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.13%)</title><rect x="55.5123%" y="837" width="0.1297%" height="15" fill="rgb(229,117,1)" fg:x="856" fg:w="2"/><text x="55.7623%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="55.5123%" y="821" width="0.1297%" height="15" fill="rgb(229,24,6)" fg:x="856" fg:w="2"/><text x="55.7623%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="55.5123%" y="805" width="0.1297%" height="15" fill="rgb(206,69,11)" fg:x="856" fg:w="2"/><text x="55.7623%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="55.5123%" y="789" width="0.1297%" height="15" fill="rgb(234,111,34)" fg:x="856" fg:w="2"/><text x="55.7623%" y="799.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="55.6420%" y="901" width="0.0649%" height="15" fill="rgb(213,187,51)" fg:x="858" fg:w="1"/><text x="55.8920%" y="911.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;isize&gt; for u32&gt;::try_from (1 samples, 0.06%)</title><rect x="55.6420%" y="885" width="0.0649%" height="15" fill="rgb(207,45,11)" fg:x="858" fg:w="1"/><text x="55.8920%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.6420%" y="869" width="0.0649%" height="15" fill="rgb(225,151,47)" fg:x="858" fg:w="1"/><text x="55.8920%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.6420%" y="853" width="0.0649%" height="15" fill="rgb(211,226,5)" fg:x="858" fg:w="1"/><text x="55.8920%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.6420%" y="837" width="0.0649%" height="15" fill="rgb(214,83,52)" fg:x="858" fg:w="1"/><text x="55.8920%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="55.7069%" y="901" width="0.1946%" height="15" fill="rgb(229,49,53)" fg:x="859" fg:w="3"/><text x="55.9569%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="55.7069%" y="885" width="0.1946%" height="15" fill="rgb(246,8,28)" fg:x="859" fg:w="3"/><text x="55.9569%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="55.7069%" y="869" width="0.1946%" height="15" fill="rgb(207,28,41)" fg:x="859" fg:w="3"/><text x="55.9569%" y="879.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="55.9014%" y="901" width="0.0649%" height="15" fill="rgb(254,22,25)" fg:x="862" fg:w="1"/><text x="56.1514%" y="911.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="55.9014%" y="885" width="0.0649%" height="15" fill="rgb(209,120,42)" fg:x="862" fg:w="1"/><text x="56.1514%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.9014%" y="869" width="0.0649%" height="15" fill="rgb(216,194,18)" fg:x="862" fg:w="1"/><text x="56.1514%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.9014%" y="853" width="0.0649%" height="15" fill="rgb(213,70,17)" fg:x="862" fg:w="1"/><text x="56.1514%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.9014%" y="837" width="0.0649%" height="15" fill="rgb(228,66,19)" fg:x="862" fg:w="1"/><text x="56.1514%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="55.9663%" y="901" width="0.0649%" height="15" fill="rgb(236,221,54)" fg:x="863" fg:w="1"/><text x="56.2163%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="55.9663%" y="885" width="0.0649%" height="15" fill="rgb(207,175,15)" fg:x="863" fg:w="1"/><text x="56.2163%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="55.9663%" y="869" width="0.0649%" height="15" fill="rgb(234,76,8)" fg:x="863" fg:w="1"/><text x="56.2163%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="55.9663%" y="853" width="0.0649%" height="15" fill="rgb(243,106,0)" fg:x="863" fg:w="1"/><text x="56.2163%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="55.9663%" y="837" width="0.0649%" height="15" fill="rgb(208,48,19)" fg:x="863" fg:w="1"/><text x="56.2163%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="56.0311%" y="869" width="0.0649%" height="15" fill="rgb(251,50,29)" fg:x="864" fg:w="1"/><text x="56.2811%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="56.0311%" y="853" width="0.0649%" height="15" fill="rgb(222,31,49)" fg:x="864" fg:w="1"/><text x="56.2811%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="56.0311%" y="837" width="0.0649%" height="15" fill="rgb(232,33,18)" fg:x="864" fg:w="1"/><text x="56.2811%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="56.0311%" y="821" width="0.0649%" height="15" fill="rgb(209,1,44)" fg:x="864" fg:w="1"/><text x="56.2811%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.0311%" y="805" width="0.0649%" height="15" fill="rgb(211,7,1)" fg:x="864" fg:w="1"/><text x="56.2811%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.0311%" y="789" width="0.0649%" height="15" fill="rgb(224,111,27)" fg:x="864" fg:w="1"/><text x="56.2811%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.0311%" y="773" width="0.0649%" height="15" fill="rgb(252,195,39)" fg:x="864" fg:w="1"/><text x="56.2811%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (19 samples, 1.23%)</title><rect x="54.9287%" y="933" width="1.2322%" height="15" fill="rgb(237,198,5)" fg:x="847" fg:w="19"/><text x="55.1787%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (8 samples, 0.52%)</title><rect x="55.6420%" y="917" width="0.5188%" height="15" fill="rgb(232,148,1)" fg:x="858" fg:w="8"/><text x="55.8920%" y="927.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (2 samples, 0.13%)</title><rect x="56.0311%" y="901" width="0.1297%" height="15" fill="rgb(249,41,3)" fg:x="864" fg:w="2"/><text x="56.2811%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (2 samples, 0.13%)</title><rect x="56.0311%" y="885" width="0.1297%" height="15" fill="rgb(215,14,33)" fg:x="864" fg:w="2"/><text x="56.2811%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.06%)</title><rect x="56.0960%" y="869" width="0.0649%" height="15" fill="rgb(209,146,24)" fg:x="865" fg:w="1"/><text x="56.3460%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.0960%" y="853" width="0.0649%" height="15" fill="rgb(219,51,47)" fg:x="865" fg:w="1"/><text x="56.3460%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.0960%" y="837" width="0.0649%" height="15" fill="rgb(234,217,40)" fg:x="865" fg:w="1"/><text x="56.3460%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.0960%" y="821" width="0.0649%" height="15" fill="rgb(228,34,26)" fg:x="865" fg:w="1"/><text x="56.3460%" y="831.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (28 samples, 1.82%)</title><rect x="54.4099%" y="949" width="1.8158%" height="15" fill="rgb(224,50,29)" fg:x="839" fg:w="28"/><text x="54.6599%" y="959.50">r..</text></g><g><title>redb::tree_store::btree_base::LeafMutator::new (1 samples, 0.06%)</title><rect x="56.1608%" y="933" width="0.0649%" height="15" fill="rgb(205,79,51)" fg:x="866" fg:w="1"/><text x="56.4108%" y="943.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="56.1608%" y="917" width="0.0649%" height="15" fill="rgb(218,136,28)" fg:x="866" fg:w="1"/><text x="56.4108%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="56.1608%" y="901" width="0.0649%" height="15" fill="rgb(220,150,10)" fg:x="866" fg:w="1"/><text x="56.4108%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="56.1608%" y="885" width="0.0649%" height="15" fill="rgb(242,158,47)" fg:x="866" fg:w="1"/><text x="56.4108%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="56.1608%" y="869" width="0.0649%" height="15" fill="rgb(209,68,0)" fg:x="866" fg:w="1"/><text x="56.4108%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.06%)</title><rect x="56.1608%" y="853" width="0.0649%" height="15" fill="rgb(208,13,41)" fg:x="866" fg:w="1"/><text x="56.4108%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.06%)</title><rect x="56.1608%" y="837" width="0.0649%" height="15" fill="rgb(226,201,7)" fg:x="866" fg:w="1"/><text x="56.4108%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.1608%" y="821" width="0.0649%" height="15" fill="rgb(236,103,26)" fg:x="866" fg:w="1"/><text x="56.4108%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.1608%" y="805" width="0.0649%" height="15" fill="rgb(243,162,8)" fg:x="866" fg:w="1"/><text x="56.4108%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.1608%" y="789" width="0.0649%" height="15" fill="rgb(237,225,11)" fg:x="866" fg:w="1"/><text x="56.4108%" y="799.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="56.2257%" y="949" width="0.0649%" height="15" fill="rgb(247,186,32)" fg:x="867" fg:w="1"/><text x="56.4757%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="56.2257%" y="933" width="0.0649%" height="15" fill="rgb(215,26,28)" fg:x="867" fg:w="1"/><text x="56.4757%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="56.2257%" y="917" width="0.0649%" height="15" fill="rgb(208,121,6)" fg:x="867" fg:w="1"/><text x="56.4757%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="56.2257%" y="901" width="0.0649%" height="15" fill="rgb(225,91,3)" fg:x="867" fg:w="1"/><text x="56.4757%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="56.2257%" y="885" width="0.0649%" height="15" fill="rgb(246,119,36)" fg:x="867" fg:w="1"/><text x="56.4757%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="56.2257%" y="869" width="0.0649%" height="15" fill="rgb(254,173,2)" fg:x="867" fg:w="1"/><text x="56.4757%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="56.2257%" y="853" width="0.0649%" height="15" fill="rgb(209,87,54)" fg:x="867" fg:w="1"/><text x="56.4757%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="56.2257%" y="837" width="0.0649%" height="15" fill="rgb(223,216,20)" fg:x="867" fg:w="1"/><text x="56.4757%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.2257%" y="821" width="0.0649%" height="15" fill="rgb(220,31,8)" fg:x="867" fg:w="1"/><text x="56.4757%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.2257%" y="805" width="0.0649%" height="15" fill="rgb(220,185,15)" fg:x="867" fg:w="1"/><text x="56.4757%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.2257%" y="789" width="0.0649%" height="15" fill="rgb(247,190,50)" fg:x="867" fg:w="1"/><text x="56.4757%" y="799.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (41 samples, 2.66%)</title><rect x="53.6965%" y="981" width="2.6589%" height="15" fill="rgb(239,173,47)" fg:x="828" fg:w="41"/><text x="53.9465%" y="991.50">re..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (40 samples, 2.59%)</title><rect x="53.7613%" y="965" width="2.5940%" height="15" fill="rgb(218,190,42)" fg:x="829" fg:w="40"/><text x="54.0113%" y="975.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::uncommitted (1 samples, 0.06%)</title><rect x="56.2905%" y="949" width="0.0649%" height="15" fill="rgb(251,207,16)" fg:x="868" fg:w="1"/><text x="56.5405%" y="959.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="56.2905%" y="933" width="0.0649%" height="15" fill="rgb(222,199,47)" fg:x="868" fg:w="1"/><text x="56.5405%" y="943.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.06%)</title><rect x="56.2905%" y="917" width="0.0649%" height="15" fill="rgb(245,190,7)" fg:x="868" fg:w="1"/><text x="56.5405%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="56.2905%" y="901" width="0.0649%" height="15" fill="rgb(239,85,38)" fg:x="868" fg:w="1"/><text x="56.5405%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="56.2905%" y="885" width="0.0649%" height="15" fill="rgb(229,69,51)" fg:x="868" fg:w="1"/><text x="56.5405%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="56.2905%" y="869" width="0.0649%" height="15" fill="rgb(231,104,51)" fg:x="868" fg:w="1"/><text x="56.5405%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="56.2905%" y="853" width="0.0649%" height="15" fill="rgb(235,49,4)" fg:x="868" fg:w="1"/><text x="56.5405%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="56.2905%" y="837" width="0.0649%" height="15" fill="rgb(246,166,20)" fg:x="868" fg:w="1"/><text x="56.5405%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="56.2905%" y="821" width="0.0649%" height="15" fill="rgb(230,119,37)" fg:x="868" fg:w="1"/><text x="56.5405%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="56.2905%" y="805" width="0.0649%" height="15" fill="rgb(234,77,34)" fg:x="868" fg:w="1"/><text x="56.5405%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="56.2905%" y="789" width="0.0649%" height="15" fill="rgb(211,222,33)" fg:x="868" fg:w="1"/><text x="56.5405%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="56.2905%" y="773" width="0.0649%" height="15" fill="rgb(226,45,42)" fg:x="868" fg:w="1"/><text x="56.5405%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="56.2905%" y="757" width="0.0649%" height="15" fill="rgb(215,174,28)" fg:x="868" fg:w="1"/><text x="56.5405%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="56.2905%" y="741" width="0.0649%" height="15" fill="rgb(254,173,49)" fg:x="868" fg:w="1"/><text x="56.5405%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="56.2905%" y="725" width="0.0649%" height="15" fill="rgb(229,191,6)" fg:x="868" fg:w="1"/><text x="56.5405%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.2905%" y="709" width="0.0649%" height="15" fill="rgb(212,145,22)" fg:x="868" fg:w="1"/><text x="56.5405%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.2905%" y="693" width="0.0649%" height="15" fill="rgb(226,6,51)" fg:x="868" fg:w="1"/><text x="56.5405%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.2905%" y="677" width="0.0649%" height="15" fill="rgb(227,128,8)" fg:x="868" fg:w="1"/><text x="56.5405%" y="687.50"></text></g><g><title>redb::table::Table&lt;K,V&gt;::insert (45 samples, 2.92%)</title><rect x="53.5668%" y="1013" width="2.9183%" height="15" fill="rgb(205,24,10)" fg:x="826" fg:w="45"/><text x="53.8168%" y="1023.50">re..</text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (44 samples, 2.85%)</title><rect x="53.6316%" y="997" width="2.8534%" height="15" fill="rgb(217,147,27)" fg:x="827" fg:w="44"/><text x="53.8816%" y="1007.50">re..</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.13%)</title><rect x="56.3554%" y="981" width="0.1297%" height="15" fill="rgb(250,82,42)" fg:x="869" fg:w="2"/><text x="56.6054%" y="991.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.13%)</title><rect x="56.3554%" y="965" width="0.1297%" height="15" fill="rgb(248,93,17)" fg:x="869" fg:w="2"/><text x="56.6054%" y="975.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.13%)</title><rect x="56.3554%" y="949" width="0.1297%" height="15" fill="rgb(254,212,40)" fg:x="869" fg:w="2"/><text x="56.6054%" y="959.50"></text></g><g><title>std::thread::panicking (2 samples, 0.13%)</title><rect x="56.3554%" y="933" width="0.1297%" height="15" fill="rgb(229,209,2)" fg:x="869" fg:w="2"/><text x="56.6054%" y="943.50"></text></g><g><title>std::panicking::panicking (2 samples, 0.13%)</title><rect x="56.3554%" y="917" width="0.1297%" height="15" fill="rgb(211,50,43)" fg:x="869" fg:w="2"/><text x="56.6054%" y="927.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (2 samples, 0.13%)</title><rect x="56.3554%" y="901" width="0.1297%" height="15" fill="rgb(245,196,29)" fg:x="869" fg:w="2"/><text x="56.6054%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.13%)</title><rect x="56.3554%" y="885" width="0.1297%" height="15" fill="rgb(216,132,13)" fg:x="869" fg:w="2"/><text x="56.6054%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.13%)</title><rect x="56.3554%" y="869" width="0.1297%" height="15" fill="rgb(251,108,21)" fg:x="869" fg:w="2"/><text x="56.6054%" y="879.50"></text></g><g><title>core::fmt::Arguments::new_const (2 samples, 0.13%)</title><rect x="56.3554%" y="853" width="0.1297%" height="15" fill="rgb(229,174,54)" fg:x="869" fg:w="2"/><text x="56.6054%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="56.3554%" y="837" width="0.1297%" height="15" fill="rgb(211,175,47)" fg:x="869" fg:w="2"/><text x="56.6054%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="56.3554%" y="821" width="0.1297%" height="15" fill="rgb(234,5,37)" fg:x="869" fg:w="2"/><text x="56.6054%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="56.3554%" y="805" width="0.1297%" height="15" fill="rgb(244,150,43)" fg:x="869" fg:w="2"/><text x="56.6054%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;alloc::string::String&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="56.4851%" y="965" width="0.0649%" height="15" fill="rgb(242,172,38)" fg:x="871" fg:w="1"/><text x="56.7351%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;redb::db::TransactionGuard&gt;&gt; (1 samples, 0.06%)</title><rect x="56.4851%" y="949" width="0.0649%" height="15" fill="rgb(205,27,8)" fg:x="871" fg:w="1"/><text x="56.7351%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="56.4851%" y="933" width="0.0649%" height="15" fill="rgb(217,57,3)" fg:x="871" fg:w="1"/><text x="56.7351%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="56.4851%" y="917" width="0.0649%" height="15" fill="rgb(242,21,38)" fg:x="871" fg:w="1"/><text x="56.7351%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="56.4851%" y="901" width="0.0649%" height="15" fill="rgb(209,64,43)" fg:x="871" fg:w="1"/><text x="56.7351%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.4851%" y="885" width="0.0649%" height="15" fill="rgb(222,2,46)" fg:x="871" fg:w="1"/><text x="56.7351%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.4851%" y="869" width="0.0649%" height="15" fill="rgb(218,19,44)" fg:x="871" fg:w="1"/><text x="56.7351%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.4851%" y="853" width="0.0649%" height="15" fill="rgb(240,203,42)" fg:x="871" fg:w="1"/><text x="56.7351%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.5499%" y="949" width="0.0649%" height="15" fill="rgb(229,23,45)" fg:x="872" fg:w="1"/><text x="56.7999%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.5499%" y="933" width="0.0649%" height="15" fill="rgb(205,228,51)" fg:x="872" fg:w="1"/><text x="56.7999%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.5499%" y="917" width="0.0649%" height="15" fill="rgb(239,36,20)" fg:x="872" fg:w="1"/><text x="56.7999%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.6148%" y="885" width="0.0649%" height="15" fill="rgb(248,172,27)" fg:x="873" fg:w="1"/><text x="56.8648%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.6148%" y="869" width="0.0649%" height="15" fill="rgb(244,55,32)" fg:x="873" fg:w="1"/><text x="56.8648%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.6148%" y="853" width="0.0649%" height="15" fill="rgb(215,97,16)" fg:x="873" fg:w="1"/><text x="56.8648%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="56.6148%" y="949" width="0.1297%" height="15" fill="rgb(224,80,29)" fg:x="873" fg:w="2"/><text x="56.8648%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="56.6148%" y="933" width="0.1297%" height="15" fill="rgb(216,93,47)" fg:x="873" fg:w="2"/><text x="56.8648%" y="943.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="56.6148%" y="917" width="0.1297%" height="15" fill="rgb(238,159,10)" fg:x="873" fg:w="2"/><text x="56.8648%" y="927.50"></text></g><g><title>bincode::internal::serialized_size (2 samples, 0.13%)</title><rect x="56.6148%" y="901" width="0.1297%" height="15" fill="rgb(223,98,29)" fg:x="873" fg:w="2"/><text x="56.8648%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="56.6796%" y="885" width="0.0649%" height="15" fill="rgb(210,176,23)" fg:x="874" fg:w="1"/><text x="56.9296%" y="895.50"></text></g><g><title>bincode::internal::serialized_size::{{closure}} (1 samples, 0.06%)</title><rect x="56.6796%" y="869" width="0.0649%" height="15" fill="rgb(242,162,27)" fg:x="874" fg:w="1"/><text x="56.9296%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.6796%" y="853" width="0.0649%" height="15" fill="rgb(245,109,32)" fg:x="874" fg:w="1"/><text x="56.9296%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.6796%" y="837" width="0.0649%" height="15" fill="rgb(248,87,8)" fg:x="874" fg:w="1"/><text x="56.9296%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.6796%" y="821" width="0.0649%" height="15" fill="rgb(250,160,50)" fg:x="874" fg:w="1"/><text x="56.9296%" y="831.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="56.5499%" y="965" width="0.2594%" height="15" fill="rgb(246,165,25)" fg:x="872" fg:w="4"/><text x="56.7999%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="56.7445%" y="949" width="0.0649%" height="15" fill="rgb(249,219,3)" fg:x="875" fg:w="1"/><text x="56.9945%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="56.7445%" y="933" width="0.0649%" height="15" fill="rgb(226,66,5)" fg:x="875" fg:w="1"/><text x="56.9945%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="56.7445%" y="917" width="0.0649%" height="15" fill="rgb(250,220,43)" fg:x="875" fg:w="1"/><text x="56.9945%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="56.7445%" y="901" width="0.0649%" height="15" fill="rgb(225,111,31)" fg:x="875" fg:w="1"/><text x="56.9945%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="56.7445%" y="885" width="0.0649%" height="15" fill="rgb(248,106,18)" fg:x="875" fg:w="1"/><text x="56.9945%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="56.7445%" y="869" width="0.0649%" height="15" fill="rgb(220,226,45)" fg:x="875" fg:w="1"/><text x="56.9945%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="56.7445%" y="853" width="0.0649%" height="15" fill="rgb(208,58,53)" fg:x="875" fg:w="1"/><text x="56.9945%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="56.7445%" y="837" width="0.0649%" height="15" fill="rgb(209,133,1)" fg:x="875" fg:w="1"/><text x="56.9945%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="56.7445%" y="821" width="0.0649%" height="15" fill="rgb(228,216,27)" fg:x="875" fg:w="1"/><text x="56.9945%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.06%)</title><rect x="56.7445%" y="805" width="0.0649%" height="15" fill="rgb(238,155,2)" fg:x="875" fg:w="1"/><text x="56.9945%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.06%)</title><rect x="56.7445%" y="789" width="0.0649%" height="15" fill="rgb(244,99,37)" fg:x="875" fg:w="1"/><text x="56.9945%" y="799.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="56.7445%" y="773" width="0.0649%" height="15" fill="rgb(254,32,3)" fg:x="875" fg:w="1"/><text x="56.9945%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.7445%" y="757" width="0.0649%" height="15" fill="rgb(234,46,50)" fg:x="875" fg:w="1"/><text x="56.9945%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.7445%" y="741" width="0.0649%" height="15" fill="rgb(232,118,51)" fg:x="875" fg:w="1"/><text x="56.9945%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.7445%" y="725" width="0.0649%" height="15" fill="rgb(207,24,32)" fg:x="875" fg:w="1"/><text x="56.9945%" y="735.50"></text></g><g><title>&lt;redb::table::Table&lt;K,V&gt; as redb::table::ReadableTable&lt;K,V&gt;&gt;::get (6 samples, 0.39%)</title><rect x="56.4851%" y="997" width="0.3891%" height="15" fill="rgb(208,107,43)" fg:x="871" fg:w="6"/><text x="56.7351%" y="1007.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="56.4851%" y="981" width="0.3891%" height="15" fill="rgb(231,28,9)" fg:x="871" fg:w="6"/><text x="56.7351%" y="991.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::read_tree (1 samples, 0.06%)</title><rect x="56.8093%" y="965" width="0.0649%" height="15" fill="rgb(241,204,15)" fg:x="876" fg:w="1"/><text x="57.0593%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="56.8093%" y="949" width="0.0649%" height="15" fill="rgb(214,54,15)" fg:x="876" fg:w="1"/><text x="57.0593%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="56.8093%" y="933" width="0.0649%" height="15" fill="rgb(230,12,28)" fg:x="876" fg:w="1"/><text x="57.0593%" y="943.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="56.8093%" y="917" width="0.0649%" height="15" fill="rgb(221,171,5)" fg:x="876" fg:w="1"/><text x="57.0593%" y="927.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="56.8093%" y="901" width="0.0649%" height="15" fill="rgb(207,72,25)" fg:x="876" fg:w="1"/><text x="57.0593%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="56.8093%" y="885" width="0.0649%" height="15" fill="rgb(249,79,37)" fg:x="876" fg:w="1"/><text x="57.0593%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="56.8093%" y="869" width="0.0649%" height="15" fill="rgb(209,98,49)" fg:x="876" fg:w="1"/><text x="57.0593%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="56.8093%" y="853" width="0.0649%" height="15" fill="rgb(221,62,13)" fg:x="876" fg:w="1"/><text x="57.0593%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="56.8093%" y="837" width="0.0649%" height="15" fill="rgb(223,39,6)" fg:x="876" fg:w="1"/><text x="57.0593%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="56.8093%" y="821" width="0.0649%" height="15" fill="rgb(246,163,20)" fg:x="876" fg:w="1"/><text x="57.0593%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="56.8093%" y="805" width="0.0649%" height="15" fill="rgb(211,111,29)" fg:x="876" fg:w="1"/><text x="57.0593%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="56.8093%" y="789" width="0.0649%" height="15" fill="rgb(243,118,5)" fg:x="876" fg:w="1"/><text x="57.0593%" y="799.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="56.8093%" y="773" width="0.0649%" height="15" fill="rgb(240,144,52)" fg:x="876" fg:w="1"/><text x="57.0593%" y="783.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.06%)</title><rect x="56.8093%" y="757" width="0.0649%" height="15" fill="rgb(244,158,36)" fg:x="876" fg:w="1"/><text x="57.0593%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.06%)</title><rect x="56.8093%" y="741" width="0.0649%" height="15" fill="rgb(241,109,37)" fg:x="876" fg:w="1"/><text x="57.0593%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.06%)</title><rect x="56.8093%" y="725" width="0.0649%" height="15" fill="rgb(213,95,32)" fg:x="876" fg:w="1"/><text x="57.0593%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.8093%" y="709" width="0.0649%" height="15" fill="rgb(252,193,9)" fg:x="876" fg:w="1"/><text x="57.0593%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.8093%" y="693" width="0.0649%" height="15" fill="rgb(225,213,21)" fg:x="876" fg:w="1"/><text x="57.0593%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.8093%" y="677" width="0.0649%" height="15" fill="rgb(220,172,46)" fg:x="876" fg:w="1"/><text x="57.0593%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="56.8742%" y="997" width="0.0649%" height="15" fill="rgb(235,75,41)" fg:x="877" fg:w="1"/><text x="57.1242%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="56.8742%" y="981" width="0.0649%" height="15" fill="rgb(213,86,9)" fg:x="877" fg:w="1"/><text x="57.1242%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="56.8742%" y="965" width="0.0649%" height="15" fill="rgb(238,127,51)" fg:x="877" fg:w="1"/><text x="57.1242%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="56.8742%" y="949" width="0.0649%" height="15" fill="rgb(215,2,54)" fg:x="877" fg:w="1"/><text x="57.1242%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="56.8742%" y="933" width="0.0649%" height="15" fill="rgb(245,80,6)" fg:x="877" fg:w="1"/><text x="57.1242%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="56.8742%" y="917" width="0.0649%" height="15" fill="rgb(233,106,42)" fg:x="877" fg:w="1"/><text x="57.1242%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="56.8742%" y="901" width="0.0649%" height="15" fill="rgb(244,86,38)" fg:x="877" fg:w="1"/><text x="57.1242%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="56.8742%" y="885" width="0.0649%" height="15" fill="rgb(242,167,7)" fg:x="877" fg:w="1"/><text x="57.1242%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="56.8742%" y="869" width="0.0649%" height="15" fill="rgb(218,216,3)" fg:x="877" fg:w="1"/><text x="57.1242%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="56.8742%" y="853" width="0.0649%" height="15" fill="rgb(206,136,36)" fg:x="877" fg:w="1"/><text x="57.1242%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="56.8742%" y="837" width="0.0649%" height="15" fill="rgb(206,206,15)" fg:x="877" fg:w="1"/><text x="57.1242%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.8742%" y="821" width="0.0649%" height="15" fill="rgb(207,163,34)" fg:x="877" fg:w="1"/><text x="57.1242%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.8742%" y="805" width="0.0649%" height="15" fill="rgb(240,127,22)" fg:x="877" fg:w="1"/><text x="57.1242%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.8742%" y="789" width="0.0649%" height="15" fill="rgb(227,49,5)" fg:x="877" fg:w="1"/><text x="57.1242%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="56.9390%" y="949" width="0.0649%" height="15" fill="rgb(231,8,6)" fg:x="878" fg:w="1"/><text x="57.1890%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="56.9390%" y="933" width="0.0649%" height="15" fill="rgb(223,21,24)" fg:x="878" fg:w="1"/><text x="57.1890%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="56.9390%" y="917" width="0.0649%" height="15" fill="rgb(244,44,52)" fg:x="878" fg:w="1"/><text x="57.1890%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.0039%" y="821" width="0.0649%" height="15" fill="rgb(207,73,28)" fg:x="879" fg:w="1"/><text x="57.2539%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.0039%" y="805" width="0.0649%" height="15" fill="rgb(234,215,10)" fg:x="879" fg:w="1"/><text x="57.2539%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.0039%" y="789" width="0.0649%" height="15" fill="rgb(236,85,3)" fg:x="879" fg:w="1"/><text x="57.2539%" y="799.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="57.0687%" y="821" width="0.0649%" height="15" fill="rgb(236,102,39)" fg:x="880" fg:w="1"/><text x="57.3187%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="57.0687%" y="805" width="0.0649%" height="15" fill="rgb(243,50,8)" fg:x="880" fg:w="1"/><text x="57.3187%" y="815.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="57.0687%" y="789" width="0.0649%" height="15" fill="rgb(207,111,4)" fg:x="880" fg:w="1"/><text x="57.3187%" y="799.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="57.0687%" y="773" width="0.0649%" height="15" fill="rgb(230,52,42)" fg:x="880" fg:w="1"/><text x="57.3187%" y="783.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="57.0687%" y="757" width="0.0649%" height="15" fill="rgb(252,178,50)" fg:x="880" fg:w="1"/><text x="57.3187%" y="767.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u16 (1 samples, 0.06%)</title><rect x="57.0687%" y="741" width="0.0649%" height="15" fill="rgb(234,46,35)" fg:x="880" fg:w="1"/><text x="57.3187%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="57.0687%" y="725" width="0.0649%" height="15" fill="rgb(228,69,37)" fg:x="880" fg:w="1"/><text x="57.3187%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.0687%" y="709" width="0.0649%" height="15" fill="rgb(221,21,11)" fg:x="880" fg:w="1"/><text x="57.3187%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.0687%" y="693" width="0.0649%" height="15" fill="rgb(223,56,9)" fg:x="880" fg:w="1"/><text x="57.3187%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.0687%" y="677" width="0.0649%" height="15" fill="rgb(234,30,19)" fg:x="880" fg:w="1"/><text x="57.3187%" y="687.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (4 samples, 0.26%)</title><rect x="56.9390%" y="981" width="0.2594%" height="15" fill="rgb(211,64,54)" fg:x="878" fg:w="4"/><text x="57.1890%" y="991.50"></text></g><g><title>bincode::config::Options::serialize (4 samples, 0.26%)</title><rect x="56.9390%" y="965" width="0.2594%" height="15" fill="rgb(250,189,5)" fg:x="878" fg:w="4"/><text x="57.1890%" y="975.50"></text></g><g><title>bincode::internal::serialize (3 samples, 0.19%)</title><rect x="57.0039%" y="949" width="0.1946%" height="15" fill="rgb(214,180,13)" fg:x="879" fg:w="3"/><text x="57.2539%" y="959.50"></text></g><g><title>bincode::internal::serialize_into (3 samples, 0.19%)</title><rect x="57.0039%" y="933" width="0.1946%" height="15" fill="rgb(238,40,40)" fg:x="879" fg:w="3"/><text x="57.2539%" y="943.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (3 samples, 0.19%)</title><rect x="57.0039%" y="917" width="0.1946%" height="15" fill="rgb(214,101,38)" fg:x="879" fg:w="3"/><text x="57.2539%" y="927.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.19%)</title><rect x="57.0039%" y="901" width="0.1946%" height="15" fill="rgb(242,65,53)" fg:x="879" fg:w="3"/><text x="57.2539%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (3 samples, 0.19%)</title><rect x="57.0039%" y="885" width="0.1946%" height="15" fill="rgb(230,22,45)" fg:x="879" fg:w="3"/><text x="57.2539%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.19%)</title><rect x="57.0039%" y="869" width="0.1946%" height="15" fill="rgb(223,77,1)" fg:x="879" fg:w="3"/><text x="57.2539%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (3 samples, 0.19%)</title><rect x="57.0039%" y="853" width="0.1946%" height="15" fill="rgb(227,33,37)" fg:x="879" fg:w="3"/><text x="57.2539%" y="863.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.19%)</title><rect x="57.0039%" y="837" width="0.1946%" height="15" fill="rgb(224,148,39)" fg:x="879" fg:w="3"/><text x="57.2539%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.1336%" y="821" width="0.0649%" height="15" fill="rgb(232,212,39)" fg:x="881" fg:w="1"/><text x="57.3836%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.1336%" y="805" width="0.0649%" height="15" fill="rgb(251,172,7)" fg:x="881" fg:w="1"/><text x="57.3836%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.1336%" y="789" width="0.0649%" height="15" fill="rgb(219,39,9)" fg:x="881" fg:w="1"/><text x="57.3836%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.1336%" y="773" width="0.0649%" height="15" fill="rgb(228,118,14)" fg:x="881" fg:w="1"/><text x="57.3836%" y="783.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="57.1984%" y="949" width="0.0649%" height="15" fill="rgb(207,140,10)" fg:x="882" fg:w="1"/><text x="57.4484%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="57.1984%" y="933" width="0.0649%" height="15" fill="rgb(227,111,53)" fg:x="882" fg:w="1"/><text x="57.4484%" y="943.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="57.1984%" y="917" width="0.0649%" height="15" fill="rgb(216,165,16)" fg:x="882" fg:w="1"/><text x="57.4484%" y="927.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="57.1984%" y="901" width="0.0649%" height="15" fill="rgb(226,111,18)" fg:x="882" fg:w="1"/><text x="57.4484%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.1984%" y="885" width="0.0649%" height="15" fill="rgb(251,27,17)" fg:x="882" fg:w="1"/><text x="57.4484%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.1984%" y="869" width="0.0649%" height="15" fill="rgb(254,69,9)" fg:x="882" fg:w="1"/><text x="57.4484%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.1984%" y="853" width="0.0649%" height="15" fill="rgb(234,140,37)" fg:x="882" fg:w="1"/><text x="57.4484%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.1984%" y="837" width="0.0649%" height="15" fill="rgb(220,93,8)" fg:x="882" fg:w="1"/><text x="57.4484%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.1984%" y="821" width="0.0649%" height="15" fill="rgb(236,113,3)" fg:x="882" fg:w="1"/><text x="57.4484%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="57.2633%" y="821" width="0.0649%" height="15" fill="rgb(234,108,23)" fg:x="883" fg:w="1"/><text x="57.5133%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="57.2633%" y="805" width="0.0649%" height="15" fill="rgb(205,114,34)" fg:x="883" fg:w="1"/><text x="57.5133%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="57.2633%" y="789" width="0.0649%" height="15" fill="rgb(236,200,45)" fg:x="883" fg:w="1"/><text x="57.5133%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="57.2633%" y="773" width="0.0649%" height="15" fill="rgb(227,194,29)" fg:x="883" fg:w="1"/><text x="57.5133%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="57.2633%" y="757" width="0.0649%" height="15" fill="rgb(250,76,42)" fg:x="883" fg:w="1"/><text x="57.5133%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="57.2633%" y="741" width="0.0649%" height="15" fill="rgb(208,128,8)" fg:x="883" fg:w="1"/><text x="57.5133%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="57.2633%" y="725" width="0.0649%" height="15" fill="rgb(229,209,35)" fg:x="883" fg:w="1"/><text x="57.5133%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="57.2633%" y="709" width="0.0649%" height="15" fill="rgb(215,39,53)" fg:x="883" fg:w="1"/><text x="57.5133%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="57.2633%" y="693" width="0.0649%" height="15" fill="rgb(219,123,41)" fg:x="883" fg:w="1"/><text x="57.5133%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="57.2633%" y="677" width="0.0649%" height="15" fill="rgb(212,158,18)" fg:x="883" fg:w="1"/><text x="57.5133%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="57.2633%" y="661" width="0.0649%" height="15" fill="rgb(234,196,53)" fg:x="883" fg:w="1"/><text x="57.5133%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="57.2633%" y="645" width="0.0649%" height="15" fill="rgb(210,139,12)" fg:x="883" fg:w="1"/><text x="57.5133%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="57.2633%" y="629" width="0.0649%" height="15" fill="rgb(220,116,54)" fg:x="883" fg:w="1"/><text x="57.5133%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="57.2633%" y="613" width="0.0649%" height="15" fill="rgb(247,103,28)" fg:x="883" fg:w="1"/><text x="57.5133%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="57.2633%" y="597" width="0.0649%" height="15" fill="rgb(253,156,45)" fg:x="883" fg:w="1"/><text x="57.5133%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.2633%" y="581" width="0.0649%" height="15" fill="rgb(237,157,52)" fg:x="883" fg:w="1"/><text x="57.5133%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.2633%" y="565" width="0.0649%" height="15" fill="rgb(253,112,16)" fg:x="883" fg:w="1"/><text x="57.5133%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.2633%" y="549" width="0.0649%" height="15" fill="rgb(234,70,18)" fg:x="883" fg:w="1"/><text x="57.5133%" y="559.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (3 samples, 0.19%)</title><rect x="57.1984%" y="965" width="0.1946%" height="15" fill="rgb(247,138,19)" fg:x="882" fg:w="3"/><text x="57.4484%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="57.2633%" y="949" width="0.1297%" height="15" fill="rgb(207,171,1)" fg:x="883" fg:w="2"/><text x="57.5133%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="57.2633%" y="933" width="0.1297%" height="15" fill="rgb(239,213,3)" fg:x="883" fg:w="2"/><text x="57.5133%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="57.2633%" y="917" width="0.1297%" height="15" fill="rgb(226,112,4)" fg:x="883" fg:w="2"/><text x="57.5133%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="57.2633%" y="901" width="0.1297%" height="15" fill="rgb(252,170,12)" fg:x="883" fg:w="2"/><text x="57.5133%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="57.2633%" y="885" width="0.1297%" height="15" fill="rgb(241,106,13)" fg:x="883" fg:w="2"/><text x="57.5133%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="57.2633%" y="869" width="0.1297%" height="15" fill="rgb(225,73,23)" fg:x="883" fg:w="2"/><text x="57.5133%" y="879.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="57.2633%" y="853" width="0.1297%" height="15" fill="rgb(251,227,29)" fg:x="883" fg:w="2"/><text x="57.5133%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="57.2633%" y="837" width="0.1297%" height="15" fill="rgb(237,144,13)" fg:x="883" fg:w="2"/><text x="57.5133%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.3281%" y="821" width="0.0649%" height="15" fill="rgb(232,106,46)" fg:x="884" fg:w="1"/><text x="57.5781%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.3281%" y="805" width="0.0649%" height="15" fill="rgb(245,154,53)" fg:x="884" fg:w="1"/><text x="57.5781%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.3281%" y="789" width="0.0649%" height="15" fill="rgb(212,119,47)" fg:x="884" fg:w="1"/><text x="57.5781%" y="799.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="57.1984%" y="981" width="0.2594%" height="15" fill="rgb(253,135,25)" fg:x="882" fg:w="4"/><text x="57.4484%" y="991.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::read_tree (1 samples, 0.06%)</title><rect x="57.3930%" y="965" width="0.0649%" height="15" fill="rgb(253,208,39)" fg:x="885" fg:w="1"/><text x="57.6430%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="57.3930%" y="949" width="0.0649%" height="15" fill="rgb(226,64,12)" fg:x="885" fg:w="1"/><text x="57.6430%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="57.3930%" y="933" width="0.0649%" height="15" fill="rgb(214,162,37)" fg:x="885" fg:w="1"/><text x="57.6430%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="57.3930%" y="917" width="0.0649%" height="15" fill="rgb(250,104,5)" fg:x="885" fg:w="1"/><text x="57.6430%" y="927.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="57.3930%" y="901" width="0.0649%" height="15" fill="rgb(220,202,50)" fg:x="885" fg:w="1"/><text x="57.6430%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="57.3930%" y="885" width="0.0649%" height="15" fill="rgb(248,67,38)" fg:x="885" fg:w="1"/><text x="57.6430%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="57.3930%" y="869" width="0.0649%" height="15" fill="rgb(242,94,35)" fg:x="885" fg:w="1"/><text x="57.6430%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.3930%" y="853" width="0.0649%" height="15" fill="rgb(209,78,37)" fg:x="885" fg:w="1"/><text x="57.6430%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.3930%" y="837" width="0.0649%" height="15" fill="rgb(230,126,47)" fg:x="885" fg:w="1"/><text x="57.6430%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.3930%" y="821" width="0.0649%" height="15" fill="rgb(222,110,35)" fg:x="885" fg:w="1"/><text x="57.6430%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuardMut&lt;()&gt;&gt; (1 samples, 0.06%)</title><rect x="57.4578%" y="965" width="0.0649%" height="15" fill="rgb(233,154,20)" fg:x="886" fg:w="1"/><text x="57.7078%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (1 samples, 0.06%)</title><rect x="57.4578%" y="949" width="0.0649%" height="15" fill="rgb(223,53,50)" fg:x="886" fg:w="1"/><text x="57.7078%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::cached_file::WritablePage&gt; (1 samples, 0.06%)</title><rect x="57.4578%" y="933" width="0.0649%" height="15" fill="rgb(251,27,26)" fg:x="886" fg:w="1"/><text x="57.7078%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::cached_file::WritablePage as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="57.4578%" y="917" width="0.0649%" height="15" fill="rgb(223,189,16)" fg:x="886" fg:w="1"/><text x="57.7078%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::return_value (1 samples, 0.06%)</title><rect x="57.4578%" y="901" width="0.0649%" height="15" fill="rgb(207,5,54)" fg:x="886" fg:w="1"/><text x="57.7078%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="57.4578%" y="885" width="0.0649%" height="15" fill="rgb(254,124,50)" fg:x="886" fg:w="1"/><text x="57.7078%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="57.4578%" y="869" width="0.0649%" height="15" fill="rgb(253,193,24)" fg:x="886" fg:w="1"/><text x="57.7078%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="57.4578%" y="853" width="0.0649%" height="15" fill="rgb(235,170,24)" fg:x="886" fg:w="1"/><text x="57.7078%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="57.4578%" y="837" width="0.0649%" height="15" fill="rgb(222,212,52)" fg:x="886" fg:w="1"/><text x="57.7078%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="57.4578%" y="821" width="0.0649%" height="15" fill="rgb(223,17,45)" fg:x="886" fg:w="1"/><text x="57.7078%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="57.4578%" y="805" width="0.0649%" height="15" fill="rgb(227,103,26)" fg:x="886" fg:w="1"/><text x="57.7078%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="57.4578%" y="789" width="0.0649%" height="15" fill="rgb(251,151,25)" fg:x="886" fg:w="1"/><text x="57.7078%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="57.4578%" y="773" width="0.0649%" height="15" fill="rgb(248,144,29)" fg:x="886" fg:w="1"/><text x="57.7078%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="57.4578%" y="757" width="0.0649%" height="15" fill="rgb(245,97,16)" fg:x="886" fg:w="1"/><text x="57.7078%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="57.4578%" y="741" width="0.0649%" height="15" fill="rgb(220,200,29)" fg:x="886" fg:w="1"/><text x="57.7078%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.4578%" y="725" width="0.0649%" height="15" fill="rgb(206,38,29)" fg:x="886" fg:w="1"/><text x="57.7078%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.4578%" y="709" width="0.0649%" height="15" fill="rgb(245,19,52)" fg:x="886" fg:w="1"/><text x="57.7078%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.4578%" y="693" width="0.0649%" height="15" fill="rgb(205,67,43)" fg:x="886" fg:w="1"/><text x="57.7078%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="57.5227%" y="949" width="0.1297%" height="15" fill="rgb(217,128,23)" fg:x="887" fg:w="2"/><text x="57.7727%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="57.5227%" y="933" width="0.1297%" height="15" fill="rgb(210,109,28)" fg:x="887" fg:w="2"/><text x="57.7727%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="57.5227%" y="917" width="0.1297%" height="15" fill="rgb(233,181,7)" fg:x="887" fg:w="2"/><text x="57.7727%" y="927.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="57.6524%" y="901" width="0.0649%" height="15" fill="rgb(244,11,22)" fg:x="889" fg:w="1"/><text x="57.9024%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.6524%" y="885" width="0.0649%" height="15" fill="rgb(205,124,54)" fg:x="889" fg:w="1"/><text x="57.9024%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.6524%" y="869" width="0.0649%" height="15" fill="rgb(218,21,27)" fg:x="889" fg:w="1"/><text x="57.9024%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.6524%" y="853" width="0.0649%" height="15" fill="rgb(224,153,33)" fg:x="889" fg:w="1"/><text x="57.9024%" y="863.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.6524%" y="837" width="0.0649%" height="15" fill="rgb(240,219,28)" fg:x="889" fg:w="1"/><text x="57.9024%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.6524%" y="821" width="0.0649%" height="15" fill="rgb(214,80,29)" fg:x="889" fg:w="1"/><text x="57.9024%" y="831.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.6524%" y="805" width="0.0649%" height="15" fill="rgb(247,148,44)" fg:x="889" fg:w="1"/><text x="57.9024%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.6524%" y="789" width="0.0649%" height="15" fill="rgb(243,110,30)" fg:x="889" fg:w="1"/><text x="57.9024%" y="799.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.6524%" y="773" width="0.0649%" height="15" fill="rgb(243,173,41)" fg:x="889" fg:w="1"/><text x="57.9024%" y="783.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="57.6524%" y="757" width="0.0649%" height="15" fill="rgb(225,160,47)" fg:x="889" fg:w="1"/><text x="57.9024%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="57.6524%" y="741" width="0.0649%" height="15" fill="rgb(215,44,21)" fg:x="889" fg:w="1"/><text x="57.9024%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="57.6524%" y="725" width="0.0649%" height="15" fill="rgb(248,90,3)" fg:x="889" fg:w="1"/><text x="57.9024%" y="735.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="57.6524%" y="709" width="0.0649%" height="15" fill="rgb(220,196,49)" fg:x="889" fg:w="1"/><text x="57.9024%" y="719.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="57.6524%" y="693" width="0.0649%" height="15" fill="rgb(217,138,14)" fg:x="889" fg:w="1"/><text x="57.9024%" y="703.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u32 (1 samples, 0.06%)</title><rect x="57.6524%" y="677" width="0.0649%" height="15" fill="rgb(219,111,20)" fg:x="889" fg:w="1"/><text x="57.9024%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="57.6524%" y="661" width="0.0649%" height="15" fill="rgb(218,114,4)" fg:x="889" fg:w="1"/><text x="57.9024%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="57.6524%" y="645" width="0.0649%" height="15" fill="rgb(238,133,3)" fg:x="889" fg:w="1"/><text x="57.9024%" y="655.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="57.6524%" y="629" width="0.0649%" height="15" fill="rgb(224,95,0)" fg:x="889" fg:w="1"/><text x="57.9024%" y="639.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="57.6524%" y="613" width="0.0649%" height="15" fill="rgb(220,169,35)" fg:x="889" fg:w="1"/><text x="57.9024%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.6524%" y="597" width="0.0649%" height="15" fill="rgb(242,116,47)" fg:x="889" fg:w="1"/><text x="57.9024%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.6524%" y="581" width="0.0649%" height="15" fill="rgb(251,42,20)" fg:x="889" fg:w="1"/><text x="57.9024%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.6524%" y="565" width="0.0649%" height="15" fill="rgb(234,7,34)" fg:x="889" fg:w="1"/><text x="57.9024%" y="575.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="57.6524%" y="949" width="0.1297%" height="15" fill="rgb(243,208,13)" fg:x="889" fg:w="2"/><text x="57.9024%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="57.6524%" y="933" width="0.1297%" height="15" fill="rgb(227,33,28)" fg:x="889" fg:w="2"/><text x="57.9024%" y="943.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="57.6524%" y="917" width="0.1297%" height="15" fill="rgb(250,47,37)" fg:x="889" fg:w="2"/><text x="57.9024%" y="927.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="57.7173%" y="901" width="0.0649%" height="15" fill="rgb(235,111,52)" fg:x="890" fg:w="1"/><text x="57.9673%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.7173%" y="885" width="0.0649%" height="15" fill="rgb(223,64,28)" fg:x="890" fg:w="1"/><text x="57.9673%" y="895.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.7173%" y="869" width="0.0649%" height="15" fill="rgb(236,67,22)" fg:x="890" fg:w="1"/><text x="57.9673%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.7173%" y="853" width="0.0649%" height="15" fill="rgb(243,79,24)" fg:x="890" fg:w="1"/><text x="57.9673%" y="863.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.7173%" y="837" width="0.0649%" height="15" fill="rgb(241,225,22)" fg:x="890" fg:w="1"/><text x="57.9673%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.7173%" y="821" width="0.0649%" height="15" fill="rgb(228,214,26)" fg:x="890" fg:w="1"/><text x="57.9673%" y="831.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="57.7173%" y="805" width="0.0649%" height="15" fill="rgb(219,84,52)" fg:x="890" fg:w="1"/><text x="57.9673%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="57.7173%" y="789" width="0.0649%" height="15" fill="rgb(220,12,22)" fg:x="890" fg:w="1"/><text x="57.9673%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.7173%" y="773" width="0.0649%" height="15" fill="rgb(219,9,49)" fg:x="890" fg:w="1"/><text x="57.9673%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.7173%" y="757" width="0.0649%" height="15" fill="rgb(237,40,43)" fg:x="890" fg:w="1"/><text x="57.9673%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.7173%" y="741" width="0.0649%" height="15" fill="rgb(212,189,32)" fg:x="890" fg:w="1"/><text x="57.9673%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="57.7821%" y="885" width="0.0649%" height="15" fill="rgb(247,48,9)" fg:x="891" fg:w="1"/><text x="58.0321%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="57.7821%" y="869" width="0.0649%" height="15" fill="rgb(247,112,3)" fg:x="891" fg:w="1"/><text x="58.0321%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="57.7821%" y="853" width="0.0649%" height="15" fill="rgb(243,110,18)" fg:x="891" fg:w="1"/><text x="58.0321%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="57.7821%" y="837" width="0.0649%" height="15" fill="rgb(233,223,44)" fg:x="891" fg:w="1"/><text x="58.0321%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="57.7821%" y="821" width="0.0649%" height="15" fill="rgb(245,160,20)" fg:x="891" fg:w="1"/><text x="58.0321%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="57.7821%" y="805" width="0.0649%" height="15" fill="rgb(225,37,1)" fg:x="891" fg:w="1"/><text x="58.0321%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="57.7821%" y="789" width="0.0649%" height="15" fill="rgb(253,227,39)" fg:x="891" fg:w="1"/><text x="58.0321%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="57.7821%" y="773" width="0.0649%" height="15" fill="rgb(240,179,26)" fg:x="891" fg:w="1"/><text x="58.0321%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="57.7821%" y="757" width="0.0649%" height="15" fill="rgb(237,212,23)" fg:x="891" fg:w="1"/><text x="58.0321%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="57.7821%" y="741" width="0.0649%" height="15" fill="rgb(221,38,11)" fg:x="891" fg:w="1"/><text x="58.0321%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="57.7821%" y="725" width="0.0649%" height="15" fill="rgb(215,85,6)" fg:x="891" fg:w="1"/><text x="58.0321%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="57.7821%" y="709" width="0.0649%" height="15" fill="rgb(239,64,14)" fg:x="891" fg:w="1"/><text x="58.0321%" y="719.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="57.7821%" y="693" width="0.0649%" height="15" fill="rgb(215,150,32)" fg:x="891" fg:w="1"/><text x="58.0321%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="57.7821%" y="677" width="0.0649%" height="15" fill="rgb(238,15,13)" fg:x="891" fg:w="1"/><text x="58.0321%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="57.7821%" y="661" width="0.0649%" height="15" fill="rgb(251,87,8)" fg:x="891" fg:w="1"/><text x="58.0321%" y="671.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="57.7821%" y="645" width="0.0649%" height="15" fill="rgb(206,86,1)" fg:x="891" fg:w="1"/><text x="58.0321%" y="655.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="57.7821%" y="629" width="0.0649%" height="15" fill="rgb(208,151,45)" fg:x="891" fg:w="1"/><text x="58.0321%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="57.7821%" y="613" width="0.0649%" height="15" fill="rgb(231,181,24)" fg:x="891" fg:w="1"/><text x="58.0321%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="57.7821%" y="597" width="0.0649%" height="15" fill="rgb(240,106,29)" fg:x="891" fg:w="1"/><text x="58.0321%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="57.7821%" y="581" width="0.0649%" height="15" fill="rgb(227,166,11)" fg:x="891" fg:w="1"/><text x="58.0321%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.7821%" y="565" width="0.0649%" height="15" fill="rgb(254,14,34)" fg:x="891" fg:w="1"/><text x="58.0321%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.7821%" y="549" width="0.0649%" height="15" fill="rgb(223,222,6)" fg:x="891" fg:w="1"/><text x="58.0321%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.7821%" y="533" width="0.0649%" height="15" fill="rgb(245,69,24)" fg:x="891" fg:w="1"/><text x="58.0321%" y="543.50"></text></g><g><title>core::mem::drop (2 samples, 0.13%)</title><rect x="57.7821%" y="933" width="0.1297%" height="15" fill="rgb(213,193,7)" fg:x="891" fg:w="2"/><text x="58.0321%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="57.7821%" y="917" width="0.1297%" height="15" fill="rgb(237,92,51)" fg:x="891" fg:w="2"/><text x="58.0321%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="57.7821%" y="901" width="0.1297%" height="15" fill="rgb(225,194,6)" fg:x="891" fg:w="2"/><text x="58.0321%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="57.8470%" y="885" width="0.0649%" height="15" fill="rgb(205,159,49)" fg:x="892" fg:w="1"/><text x="58.0970%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="57.8470%" y="869" width="0.0649%" height="15" fill="rgb(219,69,2)" fg:x="892" fg:w="1"/><text x="58.0970%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="57.8470%" y="853" width="0.0649%" height="15" fill="rgb(215,107,24)" fg:x="892" fg:w="1"/><text x="58.0970%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="57.8470%" y="837" width="0.0649%" height="15" fill="rgb(249,208,29)" fg:x="892" fg:w="1"/><text x="58.0970%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="57.8470%" y="821" width="0.0649%" height="15" fill="rgb(213,147,10)" fg:x="892" fg:w="1"/><text x="58.0970%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="57.8470%" y="805" width="0.0649%" height="15" fill="rgb(254,140,42)" fg:x="892" fg:w="1"/><text x="58.0970%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="57.8470%" y="789" width="0.0649%" height="15" fill="rgb(249,9,15)" fg:x="892" fg:w="1"/><text x="58.0970%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="57.8470%" y="773" width="0.0649%" height="15" fill="rgb(210,19,33)" fg:x="892" fg:w="1"/><text x="58.0970%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="57.8470%" y="757" width="0.0649%" height="15" fill="rgb(241,121,22)" fg:x="892" fg:w="1"/><text x="58.0970%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="57.8470%" y="741" width="0.0649%" height="15" fill="rgb(244,69,52)" fg:x="892" fg:w="1"/><text x="58.0970%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="57.8470%" y="725" width="0.0649%" height="15" fill="rgb(244,191,54)" fg:x="892" fg:w="1"/><text x="58.0970%" y="735.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="57.8470%" y="709" width="0.0649%" height="15" fill="rgb(250,3,53)" fg:x="892" fg:w="1"/><text x="58.0970%" y="719.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="57.8470%" y="693" width="0.0649%" height="15" fill="rgb(205,77,3)" fg:x="892" fg:w="1"/><text x="58.0970%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="57.8470%" y="677" width="0.0649%" height="15" fill="rgb(207,155,3)" fg:x="892" fg:w="1"/><text x="58.0970%" y="687.50"></text></g><g><title>core::fmt::Arguments::new_const (1 samples, 0.06%)</title><rect x="57.8470%" y="661" width="0.0649%" height="15" fill="rgb(224,79,2)" fg:x="892" fg:w="1"/><text x="58.0970%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.8470%" y="645" width="0.0649%" height="15" fill="rgb(243,172,5)" fg:x="892" fg:w="1"/><text x="58.0970%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.8470%" y="629" width="0.0649%" height="15" fill="rgb(217,23,43)" fg:x="892" fg:w="1"/><text x="58.0970%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.8470%" y="613" width="0.0649%" height="15" fill="rgb(223,109,20)" fg:x="892" fg:w="1"/><text x="58.0970%" y="623.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="57.9118%" y="757" width="0.0649%" height="15" fill="rgb(232,159,21)" fg:x="893" fg:w="1"/><text x="58.1618%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.9118%" y="741" width="0.0649%" height="15" fill="rgb(219,58,2)" fg:x="893" fg:w="1"/><text x="58.1618%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.9118%" y="725" width="0.0649%" height="15" fill="rgb(241,56,8)" fg:x="893" fg:w="1"/><text x="58.1618%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.9118%" y="709" width="0.0649%" height="15" fill="rgb(249,10,27)" fg:x="893" fg:w="1"/><text x="58.1618%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (2 samples, 0.13%)</title><rect x="57.9118%" y="933" width="0.1297%" height="15" fill="rgb(248,177,5)" fg:x="893" fg:w="2"/><text x="58.1618%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::cached_file::WritablePage&gt; (2 samples, 0.13%)</title><rect x="57.9118%" y="917" width="0.1297%" height="15" fill="rgb(239,12,30)" fg:x="893" fg:w="2"/><text x="58.1618%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::cached_file::WritablePage as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="57.9118%" y="901" width="0.1297%" height="15" fill="rgb(229,164,25)" fg:x="893" fg:w="2"/><text x="58.1618%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::return_value (2 samples, 0.13%)</title><rect x="57.9118%" y="885" width="0.1297%" height="15" fill="rgb(231,217,50)" fg:x="893" fg:w="2"/><text x="58.1618%" y="895.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (2 samples, 0.13%)</title><rect x="57.9118%" y="869" width="0.1297%" height="15" fill="rgb(247,99,32)" fg:x="893" fg:w="2"/><text x="58.1618%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="57.9118%" y="853" width="0.1297%" height="15" fill="rgb(240,74,50)" fg:x="893" fg:w="2"/><text x="58.1618%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="57.9118%" y="837" width="0.1297%" height="15" fill="rgb(218,54,8)" fg:x="893" fg:w="2"/><text x="58.1618%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="57.9118%" y="821" width="0.1297%" height="15" fill="rgb(227,132,20)" fg:x="893" fg:w="2"/><text x="58.1618%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="57.9118%" y="805" width="0.1297%" height="15" fill="rgb(232,134,12)" fg:x="893" fg:w="2"/><text x="58.1618%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.13%)</title><rect x="57.9118%" y="789" width="0.1297%" height="15" fill="rgb(250,129,18)" fg:x="893" fg:w="2"/><text x="58.1618%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.13%)</title><rect x="57.9118%" y="773" width="0.1297%" height="15" fill="rgb(232,129,47)" fg:x="893" fg:w="2"/><text x="58.1618%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="57.9767%" y="757" width="0.0649%" height="15" fill="rgb(230,31,40)" fg:x="894" fg:w="1"/><text x="58.2267%" y="767.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="57.9767%" y="741" width="0.0649%" height="15" fill="rgb(232,126,10)" fg:x="894" fg:w="1"/><text x="58.2267%" y="751.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.06%)</title><rect x="57.9767%" y="725" width="0.0649%" height="15" fill="rgb(205,46,31)" fg:x="894" fg:w="1"/><text x="58.2267%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="57.9767%" y="709" width="0.0649%" height="15" fill="rgb(232,37,37)" fg:x="894" fg:w="1"/><text x="58.2267%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="57.9767%" y="693" width="0.0649%" height="15" fill="rgb(240,91,16)" fg:x="894" fg:w="1"/><text x="58.2267%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="57.9767%" y="677" width="0.0649%" height="15" fill="rgb(224,160,9)" fg:x="894" fg:w="1"/><text x="58.2267%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.0415%" y="821" width="0.0649%" height="15" fill="rgb(215,116,14)" fg:x="895" fg:w="1"/><text x="58.2915%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.0415%" y="805" width="0.0649%" height="15" fill="rgb(235,46,36)" fg:x="895" fg:w="1"/><text x="58.2915%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.0415%" y="789" width="0.0649%" height="15" fill="rgb(238,39,28)" fg:x="895" fg:w="1"/><text x="58.2915%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="58.1064%" y="725" width="0.0649%" height="15" fill="rgb(242,125,29)" fg:x="896" fg:w="1"/><text x="58.3564%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="58.1064%" y="709" width="0.0649%" height="15" fill="rgb(238,211,30)" fg:x="896" fg:w="1"/><text x="58.3564%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="58.1064%" y="693" width="0.0649%" height="15" fill="rgb(227,201,28)" fg:x="896" fg:w="1"/><text x="58.3564%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="58.1064%" y="677" width="0.0649%" height="15" fill="rgb(238,77,29)" fg:x="896" fg:w="1"/><text x="58.3564%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="58.1064%" y="661" width="0.0649%" height="15" fill="rgb(213,221,40)" fg:x="896" fg:w="1"/><text x="58.3564%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="58.1064%" y="645" width="0.0649%" height="15" fill="rgb(226,220,44)" fg:x="896" fg:w="1"/><text x="58.3564%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="58.1064%" y="629" width="0.0649%" height="15" fill="rgb(228,90,23)" fg:x="896" fg:w="1"/><text x="58.3564%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.1064%" y="613" width="0.0649%" height="15" fill="rgb(235,72,29)" fg:x="896" fg:w="1"/><text x="58.3564%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.1064%" y="597" width="0.0649%" height="15" fill="rgb(248,117,39)" fg:x="896" fg:w="1"/><text x="58.3564%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.1064%" y="581" width="0.0649%" height="15" fill="rgb(225,43,28)" fg:x="896" fg:w="1"/><text x="58.3564%" y="591.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="58.0415%" y="917" width="0.1946%" height="15" fill="rgb(240,93,4)" fg:x="895" fg:w="3"/><text x="58.2915%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="58.0415%" y="901" width="0.1946%" height="15" fill="rgb(234,178,27)" fg:x="895" fg:w="3"/><text x="58.2915%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="58.0415%" y="885" width="0.1946%" height="15" fill="rgb(254,88,22)" fg:x="895" fg:w="3"/><text x="58.2915%" y="895.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="58.0415%" y="869" width="0.1946%" height="15" fill="rgb(240,206,50)" fg:x="895" fg:w="3"/><text x="58.2915%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="58.0415%" y="853" width="0.1946%" height="15" fill="rgb(249,103,8)" fg:x="895" fg:w="3"/><text x="58.2915%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="58.0415%" y="837" width="0.1946%" height="15" fill="rgb(241,178,36)" fg:x="895" fg:w="3"/><text x="58.2915%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="58.1064%" y="821" width="0.1297%" height="15" fill="rgb(246,110,15)" fg:x="896" fg:w="2"/><text x="58.3564%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="58.1064%" y="805" width="0.1297%" height="15" fill="rgb(207,14,43)" fg:x="896" fg:w="2"/><text x="58.3564%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="58.1064%" y="789" width="0.1297%" height="15" fill="rgb(253,219,19)" fg:x="896" fg:w="2"/><text x="58.3564%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="58.1064%" y="773" width="0.1297%" height="15" fill="rgb(216,126,5)" fg:x="896" fg:w="2"/><text x="58.3564%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="58.1064%" y="757" width="0.1297%" height="15" fill="rgb(218,78,42)" fg:x="896" fg:w="2"/><text x="58.3564%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="58.1064%" y="741" width="0.1297%" height="15" fill="rgb(215,154,40)" fg:x="896" fg:w="2"/><text x="58.3564%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.1712%" y="725" width="0.0649%" height="15" fill="rgb(235,129,32)" fg:x="897" fg:w="1"/><text x="58.4212%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.1712%" y="709" width="0.0649%" height="15" fill="rgb(218,51,8)" fg:x="897" fg:w="1"/><text x="58.4212%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.1712%" y="693" width="0.0649%" height="15" fill="rgb(245,48,4)" fg:x="897" fg:w="1"/><text x="58.4212%" y="703.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (4 samples, 0.26%)</title><rect x="58.0415%" y="933" width="0.2594%" height="15" fill="rgb(250,175,12)" fg:x="895" fg:w="4"/><text x="58.2915%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="58.2361%" y="917" width="0.0649%" height="15" fill="rgb(237,95,40)" fg:x="898" fg:w="1"/><text x="58.4861%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="58.2361%" y="901" width="0.0649%" height="15" fill="rgb(244,120,0)" fg:x="898" fg:w="1"/><text x="58.4861%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="58.2361%" y="885" width="0.0649%" height="15" fill="rgb(241,19,42)" fg:x="898" fg:w="1"/><text x="58.4861%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="58.2361%" y="869" width="0.0649%" height="15" fill="rgb(217,174,48)" fg:x="898" fg:w="1"/><text x="58.4861%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="58.2361%" y="853" width="0.0649%" height="15" fill="rgb(239,36,38)" fg:x="898" fg:w="1"/><text x="58.4861%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.2361%" y="837" width="0.0649%" height="15" fill="rgb(220,63,49)" fg:x="898" fg:w="1"/><text x="58.4861%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.2361%" y="821" width="0.0649%" height="15" fill="rgb(240,101,13)" fg:x="898" fg:w="1"/><text x="58.4861%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.2361%" y="805" width="0.0649%" height="15" fill="rgb(209,184,51)" fg:x="898" fg:w="1"/><text x="58.4861%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="58.3009%" y="933" width="0.0649%" height="15" fill="rgb(206,136,39)" fg:x="899" fg:w="1"/><text x="58.5509%" y="943.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="58.3009%" y="917" width="0.0649%" height="15" fill="rgb(254,47,45)" fg:x="899" fg:w="1"/><text x="58.5509%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="58.3009%" y="901" width="0.0649%" height="15" fill="rgb(252,103,20)" fg:x="899" fg:w="1"/><text x="58.5509%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="58.3009%" y="885" width="0.0649%" height="15" fill="rgb(230,69,12)" fg:x="899" fg:w="1"/><text x="58.5509%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.3009%" y="869" width="0.0649%" height="15" fill="rgb(219,2,28)" fg:x="899" fg:w="1"/><text x="58.5509%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.3009%" y="853" width="0.0649%" height="15" fill="rgb(210,9,12)" fg:x="899" fg:w="1"/><text x="58.5509%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.3009%" y="837" width="0.0649%" height="15" fill="rgb(235,99,33)" fg:x="899" fg:w="1"/><text x="58.5509%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="58.3658%" y="933" width="0.0649%" height="15" fill="rgb(230,11,38)" fg:x="900" fg:w="1"/><text x="58.6158%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="58.3658%" y="917" width="0.0649%" height="15" fill="rgb(217,129,0)" fg:x="900" fg:w="1"/><text x="58.6158%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="58.3658%" y="901" width="0.0649%" height="15" fill="rgb(222,198,4)" fg:x="900" fg:w="1"/><text x="58.6158%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="58.3658%" y="885" width="0.0649%" height="15" fill="rgb(246,170,27)" fg:x="900" fg:w="1"/><text x="58.6158%" y="895.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="58.3658%" y="869" width="0.0649%" height="15" fill="rgb(229,17,28)" fg:x="900" fg:w="1"/><text x="58.6158%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="58.3658%" y="853" width="0.0649%" height="15" fill="rgb(233,198,48)" fg:x="900" fg:w="1"/><text x="58.6158%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="58.3658%" y="837" width="0.0649%" height="15" fill="rgb(238,103,23)" fg:x="900" fg:w="1"/><text x="58.6158%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="58.3658%" y="821" width="0.0649%" height="15" fill="rgb(206,91,41)" fg:x="900" fg:w="1"/><text x="58.6158%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="58.3658%" y="805" width="0.0649%" height="15" fill="rgb(227,34,25)" fg:x="900" fg:w="1"/><text x="58.6158%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.3658%" y="789" width="0.0649%" height="15" fill="rgb(210,110,44)" fg:x="900" fg:w="1"/><text x="58.6158%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.3658%" y="773" width="0.0649%" height="15" fill="rgb(216,189,8)" fg:x="900" fg:w="1"/><text x="58.6158%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.3658%" y="757" width="0.0649%" height="15" fill="rgb(234,9,46)" fg:x="900" fg:w="1"/><text x="58.6158%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="58.4306%" y="917" width="0.0649%" height="15" fill="rgb(251,200,5)" fg:x="901" fg:w="1"/><text x="58.6806%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.4306%" y="901" width="0.0649%" height="15" fill="rgb(238,165,37)" fg:x="901" fg:w="1"/><text x="58.6806%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.4306%" y="885" width="0.0649%" height="15" fill="rgb(232,77,38)" fg:x="901" fg:w="1"/><text x="58.6806%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.4306%" y="869" width="0.0649%" height="15" fill="rgb(253,179,33)" fg:x="901" fg:w="1"/><text x="58.6806%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="58.4955%" y="917" width="0.0649%" height="15" fill="rgb(240,13,35)" fg:x="902" fg:w="1"/><text x="58.7455%" y="927.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="58.4955%" y="901" width="0.0649%" height="15" fill="rgb(242,150,49)" fg:x="902" fg:w="1"/><text x="58.7455%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.4955%" y="885" width="0.0649%" height="15" fill="rgb(237,176,28)" fg:x="902" fg:w="1"/><text x="58.7455%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.4955%" y="869" width="0.0649%" height="15" fill="rgb(214,176,33)" fg:x="902" fg:w="1"/><text x="58.7455%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.4955%" y="853" width="0.0649%" height="15" fill="rgb(214,25,12)" fg:x="902" fg:w="1"/><text x="58.7455%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (1 samples, 0.06%)</title><rect x="58.5603%" y="917" width="0.0649%" height="15" fill="rgb(238,190,20)" fg:x="903" fg:w="1"/><text x="58.8103%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.5603%" y="901" width="0.0649%" height="15" fill="rgb(208,11,19)" fg:x="903" fg:w="1"/><text x="58.8103%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.5603%" y="885" width="0.0649%" height="15" fill="rgb(239,90,4)" fg:x="903" fg:w="1"/><text x="58.8103%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.5603%" y="869" width="0.0649%" height="15" fill="rgb(248,110,3)" fg:x="903" fg:w="1"/><text x="58.8103%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (4 samples, 0.26%)</title><rect x="58.4306%" y="933" width="0.2594%" height="15" fill="rgb(210,41,30)" fg:x="901" fg:w="4"/><text x="58.6806%" y="943.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="58.6252%" y="917" width="0.0649%" height="15" fill="rgb(239,36,8)" fg:x="904" fg:w="1"/><text x="58.8752%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="58.6252%" y="901" width="0.0649%" height="15" fill="rgb(237,201,47)" fg:x="904" fg:w="1"/><text x="58.8752%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="58.6252%" y="885" width="0.0649%" height="15" fill="rgb(224,140,29)" fg:x="904" fg:w="1"/><text x="58.8752%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="58.6252%" y="869" width="0.0649%" height="15" fill="rgb(231,209,17)" fg:x="904" fg:w="1"/><text x="58.8752%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.06%)</title><rect x="58.6252%" y="853" width="0.0649%" height="15" fill="rgb(249,196,1)" fg:x="904" fg:w="1"/><text x="58.8752%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.06%)</title><rect x="58.6252%" y="837" width="0.0649%" height="15" fill="rgb(223,207,51)" fg:x="904" fg:w="1"/><text x="58.8752%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.6252%" y="821" width="0.0649%" height="15" fill="rgb(210,14,40)" fg:x="904" fg:w="1"/><text x="58.8752%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.6252%" y="805" width="0.0649%" height="15" fill="rgb(250,20,52)" fg:x="904" fg:w="1"/><text x="58.8752%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.6252%" y="789" width="0.0649%" height="15" fill="rgb(241,46,11)" fg:x="904" fg:w="1"/><text x="58.8752%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::sufficient_insert_inplace_space (1 samples, 0.06%)</title><rect x="58.6900%" y="933" width="0.0649%" height="15" fill="rgb(219,105,5)" fg:x="905" fg:w="1"/><text x="58.9400%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::total_length (1 samples, 0.06%)</title><rect x="58.6900%" y="917" width="0.0649%" height="15" fill="rgb(252,77,35)" fg:x="905" fg:w="1"/><text x="58.9400%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="58.6900%" y="901" width="0.0649%" height="15" fill="rgb(243,119,2)" fg:x="905" fg:w="1"/><text x="58.9400%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.6900%" y="885" width="0.0649%" height="15" fill="rgb(206,82,28)" fg:x="905" fg:w="1"/><text x="58.9400%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.6900%" y="869" width="0.0649%" height="15" fill="rgb(227,120,12)" fg:x="905" fg:w="1"/><text x="58.9400%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.6900%" y="853" width="0.0649%" height="15" fill="rgb(229,134,41)" fg:x="905" fg:w="1"/><text x="58.9400%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.7549%" y="901" width="0.0649%" height="15" fill="rgb(239,96,32)" fg:x="906" fg:w="1"/><text x="59.0049%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.7549%" y="885" width="0.0649%" height="15" fill="rgb(225,46,27)" fg:x="906" fg:w="1"/><text x="59.0049%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.7549%" y="869" width="0.0649%" height="15" fill="rgb(215,168,2)" fg:x="906" fg:w="1"/><text x="59.0049%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.8197%" y="741" width="0.0649%" height="15" fill="rgb(207,170,52)" fg:x="907" fg:w="1"/><text x="59.0697%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.8197%" y="725" width="0.0649%" height="15" fill="rgb(237,198,36)" fg:x="907" fg:w="1"/><text x="59.0697%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.8197%" y="709" width="0.0649%" height="15" fill="rgb(213,27,14)" fg:x="907" fg:w="1"/><text x="59.0697%" y="719.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="58.8846%" y="693" width="0.0649%" height="15" fill="rgb(218,77,5)" fg:x="908" fg:w="1"/><text x="59.1346%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="58.8846%" y="677" width="0.0649%" height="15" fill="rgb(230,219,39)" fg:x="908" fg:w="1"/><text x="59.1346%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="58.8846%" y="661" width="0.0649%" height="15" fill="rgb(245,177,7)" fg:x="908" fg:w="1"/><text x="59.1346%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="58.8846%" y="645" width="0.0649%" height="15" fill="rgb(246,44,46)" fg:x="908" fg:w="1"/><text x="59.1346%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="58.8846%" y="629" width="0.0649%" height="15" fill="rgb(207,173,15)" fg:x="908" fg:w="1"/><text x="59.1346%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="58.8846%" y="613" width="0.0649%" height="15" fill="rgb(245,170,50)" fg:x="908" fg:w="1"/><text x="59.1346%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="58.8846%" y="597" width="0.0649%" height="15" fill="rgb(233,156,21)" fg:x="908" fg:w="1"/><text x="59.1346%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="58.8846%" y="581" width="0.0649%" height="15" fill="rgb(253,146,27)" fg:x="908" fg:w="1"/><text x="59.1346%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="58.8846%" y="565" width="0.0649%" height="15" fill="rgb(247,66,29)" fg:x="908" fg:w="1"/><text x="59.1346%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="58.8846%" y="549" width="0.0649%" height="15" fill="rgb(218,207,26)" fg:x="908" fg:w="1"/><text x="59.1346%" y="559.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="58.8846%" y="533" width="0.0649%" height="15" fill="rgb(234,93,26)" fg:x="908" fg:w="1"/><text x="59.1346%" y="543.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="58.8846%" y="517" width="0.0649%" height="15" fill="rgb(214,75,48)" fg:x="908" fg:w="1"/><text x="59.1346%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.8846%" y="501" width="0.0649%" height="15" fill="rgb(229,119,22)" fg:x="908" fg:w="1"/><text x="59.1346%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.8846%" y="485" width="0.0649%" height="15" fill="rgb(226,153,19)" fg:x="908" fg:w="1"/><text x="59.1346%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.8846%" y="469" width="0.0649%" height="15" fill="rgb(220,204,36)" fg:x="908" fg:w="1"/><text x="59.1346%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="58.9494%" y="629" width="0.0649%" height="15" fill="rgb(253,181,43)" fg:x="909" fg:w="1"/><text x="59.1994%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="58.9494%" y="613" width="0.0649%" height="15" fill="rgb(211,41,51)" fg:x="909" fg:w="1"/><text x="59.1994%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="58.9494%" y="597" width="0.0649%" height="15" fill="rgb(207,215,0)" fg:x="909" fg:w="1"/><text x="59.1994%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="59.0143%" y="469" width="0.0649%" height="15" fill="rgb(212,153,10)" fg:x="910" fg:w="1"/><text x="59.2643%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="59.0143%" y="453" width="0.0649%" height="15" fill="rgb(251,171,36)" fg:x="910" fg:w="1"/><text x="59.2643%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="59.0143%" y="437" width="0.0649%" height="15" fill="rgb(225,219,41)" fg:x="910" fg:w="1"/><text x="59.2643%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.0143%" y="421" width="0.0649%" height="15" fill="rgb(208,200,1)" fg:x="910" fg:w="1"/><text x="59.2643%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.0143%" y="405" width="0.0649%" height="15" fill="rgb(206,75,47)" fg:x="910" fg:w="1"/><text x="59.2643%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.0143%" y="389" width="0.0649%" height="15" fill="rgb(248,3,16)" fg:x="910" fg:w="1"/><text x="59.2643%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="59.0143%" y="581" width="0.1297%" height="15" fill="rgb(242,157,36)" fg:x="910" fg:w="2"/><text x="59.2643%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="59.0143%" y="565" width="0.1297%" height="15" fill="rgb(215,175,11)" fg:x="910" fg:w="2"/><text x="59.2643%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="59.0143%" y="549" width="0.1297%" height="15" fill="rgb(252,222,22)" fg:x="910" fg:w="2"/><text x="59.2643%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="59.0143%" y="533" width="0.1297%" height="15" fill="rgb(250,121,35)" fg:x="910" fg:w="2"/><text x="59.2643%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="59.0143%" y="517" width="0.1297%" height="15" fill="rgb(233,120,49)" fg:x="910" fg:w="2"/><text x="59.2643%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="59.0143%" y="501" width="0.1297%" height="15" fill="rgb(205,201,14)" fg:x="910" fg:w="2"/><text x="59.2643%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="59.0143%" y="485" width="0.1297%" height="15" fill="rgb(219,58,45)" fg:x="910" fg:w="2"/><text x="59.2643%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="59.0791%" y="469" width="0.0649%" height="15" fill="rgb(251,65,12)" fg:x="911" fg:w="1"/><text x="59.3291%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="59.0791%" y="453" width="0.0649%" height="15" fill="rgb(224,47,31)" fg:x="911" fg:w="1"/><text x="59.3291%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="59.0791%" y="437" width="0.0649%" height="15" fill="rgb(233,74,26)" fg:x="911" fg:w="1"/><text x="59.3291%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="59.0791%" y="421" width="0.0649%" height="15" fill="rgb(231,211,31)" fg:x="911" fg:w="1"/><text x="59.3291%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="59.0791%" y="405" width="0.0649%" height="15" fill="rgb(239,167,5)" fg:x="911" fg:w="1"/><text x="59.3291%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.0791%" y="389" width="0.0649%" height="15" fill="rgb(241,85,0)" fg:x="911" fg:w="1"/><text x="59.3291%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.0791%" y="373" width="0.0649%" height="15" fill="rgb(229,130,21)" fg:x="911" fg:w="1"/><text x="59.3291%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.0791%" y="357" width="0.0649%" height="15" fill="rgb(254,84,49)" fg:x="911" fg:w="1"/><text x="59.3291%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.1440%" y="533" width="0.0649%" height="15" fill="rgb(235,85,21)" fg:x="912" fg:w="1"/><text x="59.3940%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.1440%" y="517" width="0.0649%" height="15" fill="rgb(246,128,52)" fg:x="912" fg:w="1"/><text x="59.3940%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.1440%" y="501" width="0.0649%" height="15" fill="rgb(243,114,49)" fg:x="912" fg:w="1"/><text x="59.3940%" y="511.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="59.2088%" y="389" width="0.0649%" height="15" fill="rgb(240,224,22)" fg:x="913" fg:w="1"/><text x="59.4588%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="59.2088%" y="373" width="0.0649%" height="15" fill="rgb(247,201,52)" fg:x="913" fg:w="1"/><text x="59.4588%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="59.2088%" y="357" width="0.0649%" height="15" fill="rgb(231,70,45)" fg:x="913" fg:w="1"/><text x="59.4588%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.2088%" y="341" width="0.0649%" height="15" fill="rgb(217,215,20)" fg:x="913" fg:w="1"/><text x="59.4588%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.2088%" y="325" width="0.0649%" height="15" fill="rgb(226,170,30)" fg:x="913" fg:w="1"/><text x="59.4588%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.2088%" y="309" width="0.0649%" height="15" fill="rgb(220,190,43)" fg:x="913" fg:w="1"/><text x="59.4588%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="59.2088%" y="469" width="0.1297%" height="15" fill="rgb(218,20,18)" fg:x="913" fg:w="2"/><text x="59.4588%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="59.2088%" y="453" width="0.1297%" height="15" fill="rgb(245,37,26)" fg:x="913" fg:w="2"/><text x="59.4588%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="59.2088%" y="437" width="0.1297%" height="15" fill="rgb(241,127,29)" fg:x="913" fg:w="2"/><text x="59.4588%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="59.2088%" y="421" width="0.1297%" height="15" fill="rgb(241,33,26)" fg:x="913" fg:w="2"/><text x="59.4588%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="59.2088%" y="405" width="0.1297%" height="15" fill="rgb(220,106,21)" fg:x="913" fg:w="2"/><text x="59.4588%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="59.2737%" y="389" width="0.0649%" height="15" fill="rgb(225,125,35)" fg:x="914" fg:w="1"/><text x="59.5237%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="59.2737%" y="373" width="0.0649%" height="15" fill="rgb(248,80,22)" fg:x="914" fg:w="1"/><text x="59.5237%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="59.2737%" y="357" width="0.0649%" height="15" fill="rgb(231,117,39)" fg:x="914" fg:w="1"/><text x="59.5237%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="59.2737%" y="341" width="0.0649%" height="15" fill="rgb(239,183,16)" fg:x="914" fg:w="1"/><text x="59.5237%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="59.2737%" y="325" width="0.0649%" height="15" fill="rgb(221,61,19)" fg:x="914" fg:w="1"/><text x="59.5237%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.2737%" y="309" width="0.0649%" height="15" fill="rgb(239,196,44)" fg:x="914" fg:w="1"/><text x="59.5237%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.2737%" y="293" width="0.0649%" height="15" fill="rgb(206,113,19)" fg:x="914" fg:w="1"/><text x="59.5237%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.2737%" y="277" width="0.0649%" height="15" fill="rgb(245,114,12)" fg:x="914" fg:w="1"/><text x="59.5237%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="59.2088%" y="485" width="0.1946%" height="15" fill="rgb(247,89,39)" fg:x="913" fg:w="3"/><text x="59.4588%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="59.3385%" y="469" width="0.0649%" height="15" fill="rgb(213,85,14)" fg:x="915" fg:w="1"/><text x="59.5885%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="59.3385%" y="453" width="0.0649%" height="15" fill="rgb(249,206,33)" fg:x="915" fg:w="1"/><text x="59.5885%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="59.3385%" y="437" width="0.0649%" height="15" fill="rgb(235,167,47)" fg:x="915" fg:w="1"/><text x="59.5885%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="59.3385%" y="421" width="0.0649%" height="15" fill="rgb(217,177,16)" fg:x="915" fg:w="1"/><text x="59.5885%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.3385%" y="405" width="0.0649%" height="15" fill="rgb(250,228,29)" fg:x="915" fg:w="1"/><text x="59.5885%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.3385%" y="389" width="0.0649%" height="15" fill="rgb(216,195,42)" fg:x="915" fg:w="1"/><text x="59.5885%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.3385%" y="373" width="0.0649%" height="15" fill="rgb(232,192,32)" fg:x="915" fg:w="1"/><text x="59.5885%" y="383.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (11 samples, 0.71%)</title><rect x="58.8197%" y="901" width="0.7134%" height="15" fill="rgb(211,8,47)" fg:x="907" fg:w="11"/><text x="59.0697%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (11 samples, 0.71%)</title><rect x="58.8197%" y="885" width="0.7134%" height="15" fill="rgb(251,201,9)" fg:x="907" fg:w="11"/><text x="59.0697%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (11 samples, 0.71%)</title><rect x="58.8197%" y="869" width="0.7134%" height="15" fill="rgb(206,185,47)" fg:x="907" fg:w="11"/><text x="59.0697%" y="879.50"></text></g><g><title>bincode::internal::deserialize (11 samples, 0.71%)</title><rect x="58.8197%" y="853" width="0.7134%" height="15" fill="rgb(245,54,32)" fg:x="907" fg:w="11"/><text x="59.0697%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (11 samples, 0.71%)</title><rect x="58.8197%" y="837" width="0.7134%" height="15" fill="rgb(208,1,8)" fg:x="907" fg:w="11"/><text x="59.0697%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="58.8197%" y="821" width="0.7134%" height="15" fill="rgb(228,57,24)" fg:x="907" fg:w="11"/><text x="59.0697%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (11 samples, 0.71%)</title><rect x="58.8197%" y="805" width="0.7134%" height="15" fill="rgb(251,24,8)" fg:x="907" fg:w="11"/><text x="59.0697%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 0.71%)</title><rect x="58.8197%" y="789" width="0.7134%" height="15" fill="rgb(236,196,50)" fg:x="907" fg:w="11"/><text x="59.0697%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (11 samples, 0.71%)</title><rect x="58.8197%" y="773" width="0.7134%" height="15" fill="rgb(246,222,29)" fg:x="907" fg:w="11"/><text x="59.0697%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (11 samples, 0.71%)</title><rect x="58.8197%" y="757" width="0.7134%" height="15" fill="rgb(211,34,40)" fg:x="907" fg:w="11"/><text x="59.0697%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (10 samples, 0.65%)</title><rect x="58.8846%" y="741" width="0.6485%" height="15" fill="rgb(210,66,51)" fg:x="908" fg:w="10"/><text x="59.1346%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (10 samples, 0.65%)</title><rect x="58.8846%" y="725" width="0.6485%" height="15" fill="rgb(250,56,43)" fg:x="908" fg:w="10"/><text x="59.1346%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.65%)</title><rect x="58.8846%" y="709" width="0.6485%" height="15" fill="rgb(240,111,50)" fg:x="908" fg:w="10"/><text x="59.1346%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="58.9494%" y="693" width="0.5837%" height="15" fill="rgb(209,117,13)" fg:x="909" fg:w="9"/><text x="59.1994%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="58.9494%" y="677" width="0.5837%" height="15" fill="rgb(232,164,45)" fg:x="909" fg:w="9"/><text x="59.1994%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="58.9494%" y="661" width="0.5837%" height="15" fill="rgb(205,69,32)" fg:x="909" fg:w="9"/><text x="59.1994%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="58.9494%" y="645" width="0.5837%" height="15" fill="rgb(240,147,45)" fg:x="909" fg:w="9"/><text x="59.1994%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="59.0143%" y="629" width="0.5188%" height="15" fill="rgb(221,94,48)" fg:x="910" fg:w="8"/><text x="59.2643%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="59.0143%" y="613" width="0.5188%" height="15" fill="rgb(249,209,17)" fg:x="910" fg:w="8"/><text x="59.2643%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="59.0143%" y="597" width="0.5188%" height="15" fill="rgb(228,57,28)" fg:x="910" fg:w="8"/><text x="59.2643%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="59.1440%" y="581" width="0.3891%" height="15" fill="rgb(250,133,26)" fg:x="912" fg:w="6"/><text x="59.3940%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="59.1440%" y="565" width="0.3891%" height="15" fill="rgb(254,15,16)" fg:x="912" fg:w="6"/><text x="59.3940%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="59.1440%" y="549" width="0.3891%" height="15" fill="rgb(209,147,42)" fg:x="912" fg:w="6"/><text x="59.3940%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="59.2088%" y="533" width="0.3243%" height="15" fill="rgb(208,5,29)" fg:x="913" fg:w="5"/><text x="59.4588%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.32%)</title><rect x="59.2088%" y="517" width="0.3243%" height="15" fill="rgb(250,73,31)" fg:x="913" fg:w="5"/><text x="59.4588%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.32%)</title><rect x="59.2088%" y="501" width="0.3243%" height="15" fill="rgb(238,45,10)" fg:x="913" fg:w="5"/><text x="59.4588%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="59.4034%" y="485" width="0.1297%" height="15" fill="rgb(214,104,5)" fg:x="916" fg:w="2"/><text x="59.6534%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="59.4034%" y="469" width="0.1297%" height="15" fill="rgb(242,217,19)" fg:x="916" fg:w="2"/><text x="59.6534%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="59.4034%" y="453" width="0.1297%" height="15" fill="rgb(246,113,27)" fg:x="916" fg:w="2"/><text x="59.6534%" y="463.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (13 samples, 0.84%)</title><rect x="58.7549%" y="917" width="0.8431%" height="15" fill="rgb(221,34,27)" fg:x="906" fg:w="13"/><text x="59.0049%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="59.5331%" y="901" width="0.0649%" height="15" fill="rgb(246,109,6)" fg:x="918" fg:w="1"/><text x="59.7831%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="59.5331%" y="885" width="0.0649%" height="15" fill="rgb(217,12,25)" fg:x="918" fg:w="1"/><text x="59.7831%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="59.5331%" y="869" width="0.0649%" height="15" fill="rgb(250,195,5)" fg:x="918" fg:w="1"/><text x="59.7831%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.5331%" y="853" width="0.0649%" height="15" fill="rgb(244,140,45)" fg:x="918" fg:w="1"/><text x="59.7831%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.5331%" y="837" width="0.0649%" height="15" fill="rgb(230,64,14)" fg:x="918" fg:w="1"/><text x="59.7831%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.5331%" y="821" width="0.0649%" height="15" fill="rgb(206,27,27)" fg:x="918" fg:w="1"/><text x="59.7831%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="59.5979%" y="869" width="0.0649%" height="15" fill="rgb(230,14,50)" fg:x="919" fg:w="1"/><text x="59.8479%" y="879.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="59.5979%" y="853" width="0.0649%" height="15" fill="rgb(237,172,14)" fg:x="919" fg:w="1"/><text x="59.8479%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.5979%" y="837" width="0.0649%" height="15" fill="rgb(209,25,21)" fg:x="919" fg:w="1"/><text x="59.8479%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.5979%" y="821" width="0.0649%" height="15" fill="rgb(248,148,22)" fg:x="919" fg:w="1"/><text x="59.8479%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.5979%" y="805" width="0.0649%" height="15" fill="rgb(234,100,22)" fg:x="919" fg:w="1"/><text x="59.8479%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="59.6628%" y="773" width="0.0649%" height="15" fill="rgb(210,20,30)" fg:x="920" fg:w="1"/><text x="59.9128%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="59.6628%" y="757" width="0.0649%" height="15" fill="rgb(232,58,0)" fg:x="920" fg:w="1"/><text x="59.9128%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="59.6628%" y="741" width="0.0649%" height="15" fill="rgb(221,68,13)" fg:x="920" fg:w="1"/><text x="59.9128%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="59.6628%" y="725" width="0.0649%" height="15" fill="rgb(231,194,11)" fg:x="920" fg:w="1"/><text x="59.9128%" y="735.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="59.6628%" y="709" width="0.0649%" height="15" fill="rgb(235,51,41)" fg:x="920" fg:w="1"/><text x="59.9128%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="59.6628%" y="693" width="0.0649%" height="15" fill="rgb(240,50,32)" fg:x="920" fg:w="1"/><text x="59.9128%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="59.6628%" y="677" width="0.0649%" height="15" fill="rgb(240,185,36)" fg:x="920" fg:w="1"/><text x="59.9128%" y="687.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (1 samples, 0.06%)</title><rect x="59.6628%" y="661" width="0.0649%" height="15" fill="rgb(211,168,15)" fg:x="920" fg:w="1"/><text x="59.9128%" y="671.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.06%)</title><rect x="59.6628%" y="645" width="0.0649%" height="15" fill="rgb(221,70,0)" fg:x="920" fg:w="1"/><text x="59.9128%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="59.6628%" y="629" width="0.0649%" height="15" fill="rgb(205,21,33)" fg:x="920" fg:w="1"/><text x="59.9128%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="59.6628%" y="613" width="0.0649%" height="15" fill="rgb(225,106,10)" fg:x="920" fg:w="1"/><text x="59.9128%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="59.6628%" y="597" width="0.0649%" height="15" fill="rgb(236,200,50)" fg:x="920" fg:w="1"/><text x="59.9128%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.6628%" y="581" width="0.0649%" height="15" fill="rgb(249,93,23)" fg:x="920" fg:w="1"/><text x="59.9128%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.6628%" y="565" width="0.0649%" height="15" fill="rgb(244,115,35)" fg:x="920" fg:w="1"/><text x="59.9128%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.6628%" y="549" width="0.0649%" height="15" fill="rgb(231,129,47)" fg:x="920" fg:w="1"/><text x="59.9128%" y="559.50"></text></g><g><title>redb::tree_store::page_store::layout::RegionLayout::calculate (2 samples, 0.13%)</title><rect x="59.6628%" y="837" width="0.1297%" height="15" fill="rgb(225,160,50)" fg:x="920" fg:w="2"/><text x="59.9128%" y="847.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::header_pages_expensive (2 samples, 0.13%)</title><rect x="59.6628%" y="821" width="0.1297%" height="15" fill="rgb(218,135,23)" fg:x="920" fg:w="2"/><text x="59.9128%" y="831.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="59.6628%" y="805" width="0.1297%" height="15" fill="rgb(227,119,14)" fg:x="920" fg:w="2"/><text x="59.9128%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="59.6628%" y="789" width="0.1297%" height="15" fill="rgb(242,138,13)" fg:x="920" fg:w="2"/><text x="59.9128%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.7276%" y="773" width="0.0649%" height="15" fill="rgb(215,11,16)" fg:x="921" fg:w="1"/><text x="59.9776%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.7276%" y="757" width="0.0649%" height="15" fill="rgb(234,170,50)" fg:x="921" fg:w="1"/><text x="59.9776%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.7276%" y="741" width="0.0649%" height="15" fill="rgb(233,34,20)" fg:x="921" fg:w="1"/><text x="59.9776%" y="751.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.06%)</title><rect x="59.7925%" y="645" width="0.0649%" height="15" fill="rgb(237,100,45)" fg:x="922" fg:w="1"/><text x="60.0425%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="59.7925%" y="629" width="0.0649%" height="15" fill="rgb(231,184,36)" fg:x="922" fg:w="1"/><text x="60.0425%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="59.7925%" y="613" width="0.0649%" height="15" fill="rgb(252,93,2)" fg:x="922" fg:w="1"/><text x="60.0425%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="59.7925%" y="597" width="0.0649%" height="15" fill="rgb(248,176,47)" fg:x="922" fg:w="1"/><text x="60.0425%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.7925%" y="581" width="0.0649%" height="15" fill="rgb(249,125,23)" fg:x="922" fg:w="1"/><text x="60.0425%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.7925%" y="565" width="0.0649%" height="15" fill="rgb(239,67,42)" fg:x="922" fg:w="1"/><text x="60.0425%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.7925%" y="549" width="0.0649%" height="15" fill="rgb(244,162,4)" fg:x="922" fg:w="1"/><text x="60.0425%" y="559.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build (5 samples, 0.32%)</title><rect x="59.5979%" y="917" width="0.3243%" height="15" fill="rgb(214,150,38)" fg:x="919" fg:w="5"/><text x="59.8479%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (5 samples, 0.32%)</title><rect x="59.5979%" y="901" width="0.3243%" height="15" fill="rgb(228,211,28)" fg:x="919" fg:w="5"/><text x="59.8479%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (5 samples, 0.32%)</title><rect x="59.5979%" y="885" width="0.3243%" height="15" fill="rgb(212,98,48)" fg:x="919" fg:w="5"/><text x="59.8479%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::grow (4 samples, 0.26%)</title><rect x="59.6628%" y="869" width="0.2594%" height="15" fill="rgb(213,45,13)" fg:x="920" fg:w="4"/><text x="59.9128%" y="879.50"></text></g><g><title>redb::tree_store::page_store::layout::DatabaseLayout::calculate (4 samples, 0.26%)</title><rect x="59.6628%" y="853" width="0.2594%" height="15" fill="rgb(218,35,29)" fg:x="920" fg:w="4"/><text x="59.9128%" y="863.50"></text></g><g><title>redb::tree_store::page_store::layout::RegionLayout::full_region_layout (2 samples, 0.13%)</title><rect x="59.7925%" y="837" width="0.1297%" height="15" fill="rgb(244,13,3)" fg:x="922" fg:w="2"/><text x="60.0425%" y="847.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::header_pages_expensive (2 samples, 0.13%)</title><rect x="59.7925%" y="821" width="0.1297%" height="15" fill="rgb(235,170,19)" fg:x="922" fg:w="2"/><text x="60.0425%" y="831.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="59.7925%" y="805" width="0.1297%" height="15" fill="rgb(233,193,43)" fg:x="922" fg:w="2"/><text x="60.0425%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="59.7925%" y="789" width="0.1297%" height="15" fill="rgb(228,223,20)" fg:x="922" fg:w="2"/><text x="60.0425%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="59.7925%" y="773" width="0.1297%" height="15" fill="rgb(208,85,54)" fg:x="922" fg:w="2"/><text x="60.0425%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="59.7925%" y="757" width="0.1297%" height="15" fill="rgb(254,14,45)" fg:x="922" fg:w="2"/><text x="60.0425%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="59.7925%" y="741" width="0.1297%" height="15" fill="rgb(247,99,29)" fg:x="922" fg:w="2"/><text x="60.0425%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.13%)</title><rect x="59.7925%" y="725" width="0.1297%" height="15" fill="rgb(225,180,54)" fg:x="922" fg:w="2"/><text x="60.0425%" y="735.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="59.7925%" y="709" width="0.1297%" height="15" fill="rgb(239,88,43)" fg:x="922" fg:w="2"/><text x="60.0425%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="59.7925%" y="693" width="0.1297%" height="15" fill="rgb(209,47,11)" fg:x="922" fg:w="2"/><text x="60.0425%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.13%)</title><rect x="59.7925%" y="677" width="0.1297%" height="15" fill="rgb(219,179,23)" fg:x="922" fg:w="2"/><text x="60.0425%" y="687.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (2 samples, 0.13%)</title><rect x="59.7925%" y="661" width="0.1297%" height="15" fill="rgb(213,183,19)" fg:x="922" fg:w="2"/><text x="60.0425%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.8573%" y="645" width="0.0649%" height="15" fill="rgb(210,11,9)" fg:x="923" fg:w="1"/><text x="60.1073%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.8573%" y="629" width="0.0649%" height="15" fill="rgb(239,194,16)" fg:x="923" fg:w="1"/><text x="60.1073%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.8573%" y="613" width="0.0649%" height="15" fill="rgb(246,23,50)" fg:x="923" fg:w="1"/><text x="60.1073%" y="623.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build_split (1 samples, 0.06%)</title><rect x="59.9222%" y="917" width="0.0649%" height="15" fill="rgb(245,10,41)" fg:x="924" fg:w="1"/><text x="60.1722%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::RawLeafBuilder::append (1 samples, 0.06%)</title><rect x="59.9222%" y="901" width="0.0649%" height="15" fill="rgb(228,43,24)" fg:x="924" fg:w="1"/><text x="60.1722%" y="911.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="59.9222%" y="885" width="0.0649%" height="15" fill="rgb(220,151,0)" fg:x="924" fg:w="1"/><text x="60.1722%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="59.9222%" y="869" width="0.0649%" height="15" fill="rgb(232,219,10)" fg:x="924" fg:w="1"/><text x="60.1722%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.9222%" y="853" width="0.0649%" height="15" fill="rgb(227,217,48)" fg:x="924" fg:w="1"/><text x="60.1722%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.9222%" y="837" width="0.0649%" height="15" fill="rgb(210,66,35)" fg:x="924" fg:w="1"/><text x="60.1722%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.9222%" y="821" width="0.0649%" height="15" fill="rgb(254,6,7)" fg:x="924" fg:w="1"/><text x="60.1722%" y="831.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="59.9870%" y="901" width="0.0649%" height="15" fill="rgb(235,222,42)" fg:x="925" fg:w="1"/><text x="60.2370%" y="911.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;usize&gt; for isize&gt;::try_from (1 samples, 0.06%)</title><rect x="59.9870%" y="885" width="0.0649%" height="15" fill="rgb(245,126,5)" fg:x="925" fg:w="1"/><text x="60.2370%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="59.9870%" y="869" width="0.0649%" height="15" fill="rgb(215,73,17)" fg:x="925" fg:w="1"/><text x="60.2370%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="59.9870%" y="853" width="0.0649%" height="15" fill="rgb(219,198,52)" fg:x="925" fg:w="1"/><text x="60.2370%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="59.9870%" y="837" width="0.0649%" height="15" fill="rgb(217,159,18)" fg:x="925" fg:w="1"/><text x="60.2370%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="60.0519%" y="901" width="0.1297%" height="15" fill="rgb(212,177,18)" fg:x="926" fg:w="2"/><text x="60.3019%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="60.0519%" y="885" width="0.1297%" height="15" fill="rgb(241,10,11)" fg:x="926" fg:w="2"/><text x="60.3019%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="60.0519%" y="869" width="0.1297%" height="15" fill="rgb(232,114,35)" fg:x="926" fg:w="2"/><text x="60.3019%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="60.1816%" y="901" width="0.0649%" height="15" fill="rgb(238,222,8)" fg:x="928" fg:w="1"/><text x="60.4316%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="60.1816%" y="885" width="0.0649%" height="15" fill="rgb(251,153,44)" fg:x="928" fg:w="1"/><text x="60.4316%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="60.1816%" y="869" width="0.0649%" height="15" fill="rgb(210,140,51)" fg:x="928" fg:w="1"/><text x="60.4316%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="60.1816%" y="853" width="0.0649%" height="15" fill="rgb(222,63,0)" fg:x="928" fg:w="1"/><text x="60.4316%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="60.2464%" y="901" width="0.0649%" height="15" fill="rgb(240,18,40)" fg:x="929" fg:w="1"/><text x="60.4964%" y="911.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.06%)</title><rect x="60.2464%" y="885" width="0.0649%" height="15" fill="rgb(237,88,16)" fg:x="929" fg:w="1"/><text x="60.4964%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="60.2464%" y="869" width="0.0649%" height="15" fill="rgb(251,117,13)" fg:x="929" fg:w="1"/><text x="60.4964%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="60.2464%" y="853" width="0.0649%" height="15" fill="rgb(251,228,8)" fg:x="929" fg:w="1"/><text x="60.4964%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="60.2464%" y="837" width="0.0649%" height="15" fill="rgb(205,107,49)" fg:x="929" fg:w="1"/><text x="60.4964%" y="847.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="60.3113%" y="869" width="0.0649%" height="15" fill="rgb(238,72,41)" fg:x="930" fg:w="1"/><text x="60.5613%" y="879.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="60.3113%" y="853" width="0.0649%" height="15" fill="rgb(248,183,52)" fg:x="930" fg:w="1"/><text x="60.5613%" y="863.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="60.3113%" y="837" width="0.0649%" height="15" fill="rgb(215,58,20)" fg:x="930" fg:w="1"/><text x="60.5613%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="60.3113%" y="821" width="0.0649%" height="15" fill="rgb(209,49,13)" fg:x="930" fg:w="1"/><text x="60.5613%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="60.3113%" y="805" width="0.0649%" height="15" fill="rgb(208,113,17)" fg:x="930" fg:w="1"/><text x="60.5613%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="60.3113%" y="789" width="0.0649%" height="15" fill="rgb(208,14,22)" fg:x="930" fg:w="1"/><text x="60.5613%" y="799.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (4 samples, 0.26%)</title><rect x="60.3113%" y="885" width="0.2594%" height="15" fill="rgb(222,95,2)" fg:x="930" fg:w="4"/><text x="60.5613%" y="895.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;isize&gt; for u32&gt;::try_from (3 samples, 0.19%)</title><rect x="60.3761%" y="869" width="0.1946%" height="15" fill="rgb(253,180,37)" fg:x="931" fg:w="3"/><text x="60.6261%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="60.3761%" y="853" width="0.1946%" height="15" fill="rgb(250,81,33)" fg:x="931" fg:w="3"/><text x="60.6261%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="60.3761%" y="837" width="0.1946%" height="15" fill="rgb(251,151,41)" fg:x="931" fg:w="3"/><text x="60.6261%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="60.3761%" y="821" width="0.1946%" height="15" fill="rgb(210,135,17)" fg:x="931" fg:w="3"/><text x="60.6261%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5 samples, 0.32%)</title><rect x="60.5707%" y="885" width="0.3243%" height="15" fill="rgb(239,21,29)" fg:x="934" fg:w="5"/><text x="60.8207%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (5 samples, 0.32%)</title><rect x="60.5707%" y="869" width="0.3243%" height="15" fill="rgb(231,215,16)" fg:x="934" fg:w="5"/><text x="60.8207%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (5 samples, 0.32%)</title><rect x="60.5707%" y="853" width="0.3243%" height="15" fill="rgb(239,151,54)" fg:x="934" fg:w="5"/><text x="60.8207%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.06%)</title><rect x="60.8949%" y="885" width="0.0649%" height="15" fill="rgb(222,122,38)" fg:x="939" fg:w="1"/><text x="61.1449%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.06%)</title><rect x="60.8949%" y="869" width="0.0649%" height="15" fill="rgb(243,128,1)" fg:x="939" fg:w="1"/><text x="61.1449%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="60.8949%" y="853" width="0.0649%" height="15" fill="rgb(225,74,21)" fg:x="939" fg:w="1"/><text x="61.1449%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="60.8949%" y="837" width="0.0649%" height="15" fill="rgb(216,210,10)" fg:x="939" fg:w="1"/><text x="61.1449%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="60.8949%" y="821" width="0.0649%" height="15" fill="rgb(228,76,19)" fg:x="939" fg:w="1"/><text x="61.1449%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="60.9598%" y="853" width="0.0649%" height="15" fill="rgb(236,80,34)" fg:x="940" fg:w="1"/><text x="61.2098%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="60.9598%" y="837" width="0.0649%" height="15" fill="rgb(225,173,23)" fg:x="940" fg:w="1"/><text x="61.2098%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="60.9598%" y="821" width="0.0649%" height="15" fill="rgb(253,38,1)" fg:x="940" fg:w="1"/><text x="61.2098%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut_unchecked (1 samples, 0.06%)</title><rect x="61.0246%" y="837" width="0.0649%" height="15" fill="rgb(206,155,35)" fg:x="941" fg:w="1"/><text x="61.2746%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.0246%" y="821" width="0.0649%" height="15" fill="rgb(254,27,53)" fg:x="941" fg:w="1"/><text x="61.2746%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.0246%" y="805" width="0.0649%" height="15" fill="rgb(225,52,41)" fg:x="941" fg:w="1"/><text x="61.2746%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.0246%" y="789" width="0.0649%" height="15" fill="rgb(244,53,18)" fg:x="941" fg:w="1"/><text x="61.2746%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.0895%" y="805" width="0.0649%" height="15" fill="rgb(254,206,48)" fg:x="942" fg:w="1"/><text x="61.3395%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.0895%" y="789" width="0.0649%" height="15" fill="rgb(236,182,23)" fg:x="942" fg:w="1"/><text x="61.3395%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.0895%" y="773" width="0.0649%" height="15" fill="rgb(236,191,37)" fg:x="942" fg:w="1"/><text x="61.3395%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (20 samples, 1.30%)</title><rect x="59.9870%" y="917" width="1.2970%" height="15" fill="rgb(245,53,8)" fg:x="925" fg:w="20"/><text x="60.2370%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (15 samples, 0.97%)</title><rect x="60.3113%" y="901" width="0.9728%" height="15" fill="rgb(245,147,9)" fg:x="930" fg:w="15"/><text x="60.5613%" y="911.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (5 samples, 0.32%)</title><rect x="60.9598%" y="885" width="0.3243%" height="15" fill="rgb(218,24,48)" fg:x="940" fg:w="5"/><text x="61.2098%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (5 samples, 0.32%)</title><rect x="60.9598%" y="869" width="0.3243%" height="15" fill="rgb(254,23,9)" fg:x="940" fg:w="5"/><text x="61.2098%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (4 samples, 0.26%)</title><rect x="61.0246%" y="853" width="0.2594%" height="15" fill="rgb(244,105,9)" fg:x="941" fg:w="4"/><text x="61.2746%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (3 samples, 0.19%)</title><rect x="61.0895%" y="837" width="0.1946%" height="15" fill="rgb(212,142,22)" fg:x="942" fg:w="3"/><text x="61.3395%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (3 samples, 0.19%)</title><rect x="61.0895%" y="821" width="0.1946%" height="15" fill="rgb(221,114,49)" fg:x="942" fg:w="3"/><text x="61.3395%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.13%)</title><rect x="61.1543%" y="805" width="0.1297%" height="15" fill="rgb(223,210,25)" fg:x="943" fg:w="2"/><text x="61.4043%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="61.1543%" y="789" width="0.1297%" height="15" fill="rgb(235,162,44)" fg:x="943" fg:w="2"/><text x="61.4043%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="61.1543%" y="773" width="0.1297%" height="15" fill="rgb(237,65,45)" fg:x="943" fg:w="2"/><text x="61.4043%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="61.1543%" y="757" width="0.1297%" height="15" fill="rgb(208,79,9)" fg:x="943" fg:w="2"/><text x="61.4043%" y="767.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="61.2840%" y="901" width="0.0649%" height="15" fill="rgb(215,228,8)" fg:x="945" fg:w="1"/><text x="61.5340%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.2840%" y="885" width="0.0649%" height="15" fill="rgb(205,185,17)" fg:x="945" fg:w="1"/><text x="61.5340%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.2840%" y="869" width="0.0649%" height="15" fill="rgb(213,62,36)" fg:x="945" fg:w="1"/><text x="61.5340%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.2840%" y="853" width="0.0649%" height="15" fill="rgb(209,34,9)" fg:x="945" fg:w="1"/><text x="61.5340%" y="863.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (2 samples, 0.13%)</title><rect x="61.2840%" y="917" width="0.1297%" height="15" fill="rgb(246,151,27)" fg:x="945" fg:w="2"/><text x="61.5340%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.06%)</title><rect x="61.3489%" y="901" width="0.0649%" height="15" fill="rgb(218,206,3)" fg:x="946" fg:w="1"/><text x="61.5989%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="61.3489%" y="885" width="0.0649%" height="15" fill="rgb(242,202,1)" fg:x="946" fg:w="1"/><text x="61.5989%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="61.3489%" y="869" width="0.0649%" height="15" fill="rgb(227,185,16)" fg:x="946" fg:w="1"/><text x="61.5989%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="61.3489%" y="853" width="0.0649%" height="15" fill="rgb(241,1,14)" fg:x="946" fg:w="1"/><text x="61.5989%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="61.3489%" y="837" width="0.0649%" height="15" fill="rgb(212,113,25)" fg:x="946" fg:w="1"/><text x="61.5989%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="61.3489%" y="821" width="0.0649%" height="15" fill="rgb(247,37,43)" fg:x="946" fg:w="1"/><text x="61.5989%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.3489%" y="805" width="0.0649%" height="15" fill="rgb(226,54,8)" fg:x="946" fg:w="1"/><text x="61.5989%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.3489%" y="789" width="0.0649%" height="15" fill="rgb(251,205,25)" fg:x="946" fg:w="1"/><text x="61.5989%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.3489%" y="773" width="0.0649%" height="15" fill="rgb(246,87,35)" fg:x="946" fg:w="1"/><text x="61.5989%" y="783.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (42 samples, 2.72%)</title><rect x="58.7549%" y="933" width="2.7237%" height="15" fill="rgb(251,145,46)" fg:x="906" fg:w="42"/><text x="59.0049%" y="943.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::uncommitted (1 samples, 0.06%)</title><rect x="61.4137%" y="917" width="0.0649%" height="15" fill="rgb(210,210,33)" fg:x="947" fg:w="1"/><text x="61.6637%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="61.4137%" y="901" width="0.0649%" height="15" fill="rgb(221,151,11)" fg:x="947" fg:w="1"/><text x="61.6637%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.06%)</title><rect x="61.4137%" y="885" width="0.0649%" height="15" fill="rgb(208,160,28)" fg:x="947" fg:w="1"/><text x="61.6637%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="61.4137%" y="869" width="0.0649%" height="15" fill="rgb(243,69,29)" fg:x="947" fg:w="1"/><text x="61.6637%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="61.4137%" y="853" width="0.0649%" height="15" fill="rgb(224,144,4)" fg:x="947" fg:w="1"/><text x="61.6637%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="61.4137%" y="837" width="0.0649%" height="15" fill="rgb(211,140,38)" fg:x="947" fg:w="1"/><text x="61.6637%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="61.4137%" y="821" width="0.0649%" height="15" fill="rgb(252,189,15)" fg:x="947" fg:w="1"/><text x="61.6637%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="61.4137%" y="805" width="0.0649%" height="15" fill="rgb(251,175,23)" fg:x="947" fg:w="1"/><text x="61.6637%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="61.4137%" y="789" width="0.0649%" height="15" fill="rgb(212,184,11)" fg:x="947" fg:w="1"/><text x="61.6637%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="61.4137%" y="773" width="0.0649%" height="15" fill="rgb(217,205,6)" fg:x="947" fg:w="1"/><text x="61.6637%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="61.4137%" y="757" width="0.0649%" height="15" fill="rgb(235,45,45)" fg:x="947" fg:w="1"/><text x="61.6637%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.4137%" y="741" width="0.0649%" height="15" fill="rgb(211,157,53)" fg:x="947" fg:w="1"/><text x="61.6637%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.4137%" y="725" width="0.0649%" height="15" fill="rgb(212,13,8)" fg:x="947" fg:w="1"/><text x="61.6637%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.4137%" y="709" width="0.0649%" height="15" fill="rgb(218,80,36)" fg:x="947" fg:w="1"/><text x="61.6637%" y="719.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="61.4786%" y="901" width="0.0649%" height="15" fill="rgb(211,123,43)" fg:x="948" fg:w="1"/><text x="61.7286%" y="911.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="61.4786%" y="885" width="0.0649%" height="15" fill="rgb(206,165,2)" fg:x="948" fg:w="1"/><text x="61.7286%" y="895.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="61.4786%" y="869" width="0.0649%" height="15" fill="rgb(248,63,35)" fg:x="948" fg:w="1"/><text x="61.7286%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="61.4786%" y="853" width="0.0649%" height="15" fill="rgb(219,133,41)" fg:x="948" fg:w="1"/><text x="61.7286%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.06%)</title><rect x="61.4786%" y="837" width="0.0649%" height="15" fill="rgb(206,175,46)" fg:x="948" fg:w="1"/><text x="61.7286%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (1 samples, 0.06%)</title><rect x="61.4786%" y="821" width="0.0649%" height="15" fill="rgb(224,41,35)" fg:x="948" fg:w="1"/><text x="61.7286%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.06%)</title><rect x="61.4786%" y="805" width="0.0649%" height="15" fill="rgb(226,113,24)" fg:x="948" fg:w="1"/><text x="61.7286%" y="815.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.06%)</title><rect x="61.4786%" y="789" width="0.0649%" height="15" fill="rgb(219,51,41)" fg:x="948" fg:w="1"/><text x="61.7286%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.4786%" y="773" width="0.0649%" height="15" fill="rgb(220,145,47)" fg:x="948" fg:w="1"/><text x="61.7286%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.4786%" y="757" width="0.0649%" height="15" fill="rgb(239,121,47)" fg:x="948" fg:w="1"/><text x="61.7286%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.4786%" y="741" width="0.0649%" height="15" fill="rgb(207,60,40)" fg:x="948" fg:w="1"/><text x="61.7286%" y="751.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (2 samples, 0.13%)</title><rect x="61.4786%" y="933" width="0.1297%" height="15" fill="rgb(224,229,11)" fg:x="948" fg:w="2"/><text x="61.7286%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="61.4786%" y="917" width="0.1297%" height="15" fill="rgb(252,28,32)" fg:x="948" fg:w="2"/><text x="61.7286%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="61.5435%" y="901" width="0.0649%" height="15" fill="rgb(207,52,49)" fg:x="949" fg:w="1"/><text x="61.7935%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="61.5435%" y="885" width="0.0649%" height="15" fill="rgb(243,51,50)" fg:x="949" fg:w="1"/><text x="61.7935%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="61.5435%" y="869" width="0.0649%" height="15" fill="rgb(212,92,21)" fg:x="949" fg:w="1"/><text x="61.7935%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="61.5435%" y="853" width="0.0649%" height="15" fill="rgb(230,183,50)" fg:x="949" fg:w="1"/><text x="61.7935%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="61.5435%" y="837" width="0.0649%" height="15" fill="rgb(225,48,9)" fg:x="949" fg:w="1"/><text x="61.7935%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="61.5435%" y="821" width="0.0649%" height="15" fill="rgb(254,44,4)" fg:x="949" fg:w="1"/><text x="61.7935%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="61.5435%" y="805" width="0.0649%" height="15" fill="rgb(252,128,37)" fg:x="949" fg:w="1"/><text x="61.7935%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="61.5435%" y="789" width="0.0649%" height="15" fill="rgb(227,178,8)" fg:x="949" fg:w="1"/><text x="61.7935%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="61.5435%" y="773" width="0.0649%" height="15" fill="rgb(205,206,32)" fg:x="949" fg:w="1"/><text x="61.7935%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="61.5435%" y="757" width="0.0649%" height="15" fill="rgb(220,218,22)" fg:x="949" fg:w="1"/><text x="61.7935%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="61.5435%" y="741" width="0.0649%" height="15" fill="rgb(236,41,28)" fg:x="949" fg:w="1"/><text x="61.7935%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="61.5435%" y="725" width="0.0649%" height="15" fill="rgb(219,37,7)" fg:x="949" fg:w="1"/><text x="61.7935%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="61.5435%" y="709" width="0.0649%" height="15" fill="rgb(206,160,15)" fg:x="949" fg:w="1"/><text x="61.7935%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="61.5435%" y="693" width="0.0649%" height="15" fill="rgb(208,82,21)" fg:x="949" fg:w="1"/><text x="61.7935%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="61.5435%" y="677" width="0.0649%" height="15" fill="rgb(226,130,25)" fg:x="949" fg:w="1"/><text x="61.7935%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.5435%" y="661" width="0.0649%" height="15" fill="rgb(212,72,24)" fg:x="949" fg:w="1"/><text x="61.7935%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.5435%" y="645" width="0.0649%" height="15" fill="rgb(206,28,16)" fg:x="949" fg:w="1"/><text x="61.7935%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.5435%" y="629" width="0.0649%" height="15" fill="rgb(249,41,5)" fg:x="949" fg:w="1"/><text x="61.7935%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.6083%" y="917" width="0.0649%" height="15" fill="rgb(233,96,48)" fg:x="950" fg:w="1"/><text x="61.8583%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.6083%" y="901" width="0.0649%" height="15" fill="rgb(240,198,11)" fg:x="950" fg:w="1"/><text x="61.8583%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.6083%" y="885" width="0.0649%" height="15" fill="rgb(209,175,35)" fg:x="950" fg:w="1"/><text x="61.8583%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::take_value (1 samples, 0.06%)</title><rect x="61.6732%" y="901" width="0.0649%" height="15" fill="rgb(214,40,51)" fg:x="951" fg:w="1"/><text x="61.9232%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="61.6732%" y="885" width="0.0649%" height="15" fill="rgb(252,56,4)" fg:x="951" fg:w="1"/><text x="61.9232%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="61.6732%" y="869" width="0.0649%" height="15" fill="rgb(219,131,5)" fg:x="951" fg:w="1"/><text x="61.9232%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="61.6732%" y="853" width="0.0649%" height="15" fill="rgb(223,67,53)" fg:x="951" fg:w="1"/><text x="61.9232%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="61.6732%" y="837" width="0.0649%" height="15" fill="rgb(227,154,8)" fg:x="951" fg:w="1"/><text x="61.9232%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="61.6732%" y="821" width="0.0649%" height="15" fill="rgb(216,174,51)" fg:x="951" fg:w="1"/><text x="61.9232%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="61.6732%" y="805" width="0.0649%" height="15" fill="rgb(239,60,34)" fg:x="951" fg:w="1"/><text x="61.9232%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="61.6732%" y="789" width="0.0649%" height="15" fill="rgb(236,165,48)" fg:x="951" fg:w="1"/><text x="61.9232%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="61.6732%" y="773" width="0.0649%" height="15" fill="rgb(210,37,26)" fg:x="951" fg:w="1"/><text x="61.9232%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="61.6732%" y="757" width="0.0649%" height="15" fill="rgb(211,3,17)" fg:x="951" fg:w="1"/><text x="61.9232%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="61.6732%" y="741" width="0.0649%" height="15" fill="rgb(234,88,49)" fg:x="951" fg:w="1"/><text x="61.9232%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.6732%" y="725" width="0.0649%" height="15" fill="rgb(233,40,17)" fg:x="951" fg:w="1"/><text x="61.9232%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.6732%" y="709" width="0.0649%" height="15" fill="rgb(235,127,31)" fg:x="951" fg:w="1"/><text x="61.9232%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.6732%" y="693" width="0.0649%" height="15" fill="rgb(248,167,17)" fg:x="951" fg:w="1"/><text x="61.9232%" y="703.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (2 samples, 0.13%)</title><rect x="61.6732%" y="917" width="0.1297%" height="15" fill="rgb(218,179,8)" fg:x="951" fg:w="2"/><text x="61.9232%" y="927.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="61.7380%" y="901" width="0.0649%" height="15" fill="rgb(216,92,14)" fg:x="952" fg:w="1"/><text x="61.9880%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="61.7380%" y="885" width="0.0649%" height="15" fill="rgb(221,198,46)" fg:x="952" fg:w="1"/><text x="61.9880%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="61.7380%" y="869" width="0.0649%" height="15" fill="rgb(244,7,25)" fg:x="952" fg:w="1"/><text x="61.9880%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="61.7380%" y="853" width="0.0649%" height="15" fill="rgb(233,75,6)" fg:x="952" fg:w="1"/><text x="61.9880%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="61.7380%" y="837" width="0.0649%" height="15" fill="rgb(240,189,41)" fg:x="952" fg:w="1"/><text x="61.9880%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="61.7380%" y="821" width="0.0649%" height="15" fill="rgb(237,157,21)" fg:x="952" fg:w="1"/><text x="61.9880%" y="831.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="61.7380%" y="805" width="0.0649%" height="15" fill="rgb(210,136,49)" fg:x="952" fg:w="1"/><text x="61.9880%" y="815.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="61.7380%" y="789" width="0.0649%" height="15" fill="rgb(210,68,29)" fg:x="952" fg:w="1"/><text x="61.9880%" y="799.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="61.7380%" y="773" width="0.0649%" height="15" fill="rgb(247,207,20)" fg:x="952" fg:w="1"/><text x="61.9880%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="61.7380%" y="757" width="0.0649%" height="15" fill="rgb(224,73,48)" fg:x="952" fg:w="1"/><text x="61.9880%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.7380%" y="741" width="0.0649%" height="15" fill="rgb(215,136,47)" fg:x="952" fg:w="1"/><text x="61.9880%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.7380%" y="725" width="0.0649%" height="15" fill="rgb(232,222,16)" fg:x="952" fg:w="1"/><text x="61.9880%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.7380%" y="709" width="0.0649%" height="15" fill="rgb(249,202,47)" fg:x="952" fg:w="1"/><text x="61.9880%" y="719.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (4 samples, 0.26%)</title><rect x="61.6083%" y="933" width="0.2594%" height="15" fill="rgb(236,56,8)" fg:x="950" fg:w="4"/><text x="61.8583%" y="943.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="61.8029%" y="917" width="0.0649%" height="15" fill="rgb(222,6,3)" fg:x="953" fg:w="1"/><text x="62.0529%" y="927.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.06%)</title><rect x="61.8029%" y="901" width="0.0649%" height="15" fill="rgb(254,222,28)" fg:x="953" fg:w="1"/><text x="62.0529%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="61.8029%" y="885" width="0.0649%" height="15" fill="rgb(219,57,23)" fg:x="953" fg:w="1"/><text x="62.0529%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="61.8029%" y="869" width="0.0649%" height="15" fill="rgb(251,106,48)" fg:x="953" fg:w="1"/><text x="62.0529%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="61.8029%" y="853" width="0.0649%" height="15" fill="rgb(242,2,23)" fg:x="953" fg:w="1"/><text x="62.0529%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="61.8029%" y="837" width="0.0649%" height="15" fill="rgb(212,109,31)" fg:x="953" fg:w="1"/><text x="62.0529%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="61.8029%" y="821" width="0.0649%" height="15" fill="rgb(241,9,22)" fg:x="953" fg:w="1"/><text x="62.0529%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="61.8029%" y="805" width="0.0649%" height="15" fill="rgb(209,64,27)" fg:x="953" fg:w="1"/><text x="62.0529%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="61.8029%" y="789" width="0.0649%" height="15" fill="rgb(248,13,44)" fg:x="953" fg:w="1"/><text x="62.0529%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.8029%" y="773" width="0.0649%" height="15" fill="rgb(213,86,6)" fg:x="953" fg:w="1"/><text x="62.0529%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.8029%" y="757" width="0.0649%" height="15" fill="rgb(247,11,18)" fg:x="953" fg:w="1"/><text x="62.0529%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.8029%" y="741" width="0.0649%" height="15" fill="rgb(252,31,11)" fg:x="953" fg:w="1"/><text x="62.0529%" y="751.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (64 samples, 4.15%)</title><rect x="57.7821%" y="949" width="4.1505%" height="15" fill="rgb(215,63,51)" fg:x="891" fg:w="64"/><text x="58.0321%" y="959.50">redb:..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::uncommitted (1 samples, 0.06%)</title><rect x="61.8677%" y="933" width="0.0649%" height="15" fill="rgb(222,180,4)" fg:x="954" fg:w="1"/><text x="62.1177%" y="943.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="61.8677%" y="917" width="0.0649%" height="15" fill="rgb(233,4,23)" fg:x="954" fg:w="1"/><text x="62.1177%" y="927.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1 samples, 0.06%)</title><rect x="61.8677%" y="901" width="0.0649%" height="15" fill="rgb(230,116,22)" fg:x="954" fg:w="1"/><text x="62.1177%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.06%)</title><rect x="61.8677%" y="885" width="0.0649%" height="15" fill="rgb(222,20,14)" fg:x="954" fg:w="1"/><text x="62.1177%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="61.8677%" y="869" width="0.0649%" height="15" fill="rgb(210,176,43)" fg:x="954" fg:w="1"/><text x="62.1177%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="61.8677%" y="853" width="0.0649%" height="15" fill="rgb(219,67,32)" fg:x="954" fg:w="1"/><text x="62.1177%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="61.8677%" y="837" width="0.0649%" height="15" fill="rgb(228,91,39)" fg:x="954" fg:w="1"/><text x="62.1177%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="61.8677%" y="821" width="0.0649%" height="15" fill="rgb(254,63,14)" fg:x="954" fg:w="1"/><text x="62.1177%" y="831.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="61.8677%" y="805" width="0.0649%" height="15" fill="rgb(216,171,39)" fg:x="954" fg:w="1"/><text x="62.1177%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="61.8677%" y="789" width="0.0649%" height="15" fill="rgb(248,68,25)" fg:x="954" fg:w="1"/><text x="62.1177%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="61.8677%" y="773" width="0.0649%" height="15" fill="rgb(239,63,16)" fg:x="954" fg:w="1"/><text x="62.1177%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="61.8677%" y="757" width="0.0649%" height="15" fill="rgb(225,111,43)" fg:x="954" fg:w="1"/><text x="62.1177%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="61.8677%" y="741" width="0.0649%" height="15" fill="rgb(246,165,17)" fg:x="954" fg:w="1"/><text x="62.1177%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="61.8677%" y="725" width="0.0649%" height="15" fill="rgb(208,124,1)" fg:x="954" fg:w="1"/><text x="62.1177%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="61.8677%" y="709" width="0.0649%" height="15" fill="rgb(234,147,33)" fg:x="954" fg:w="1"/><text x="62.1177%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.8677%" y="693" width="0.0649%" height="15" fill="rgb(240,86,30)" fg:x="954" fg:w="1"/><text x="62.1177%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.8677%" y="677" width="0.0649%" height="15" fill="rgb(237,34,51)" fg:x="954" fg:w="1"/><text x="62.1177%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.8677%" y="661" width="0.0649%" height="15" fill="rgb(232,131,41)" fg:x="954" fg:w="1"/><text x="62.1177%" y="671.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (69 samples, 4.47%)</title><rect x="57.5227%" y="965" width="4.4747%" height="15" fill="rgb(227,129,53)" fg:x="887" fg:w="69"/><text x="57.7727%" y="975.50">redb:..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="61.9326%" y="949" width="0.0649%" height="15" fill="rgb(230,90,35)" fg:x="955" fg:w="1"/><text x="62.1826%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="61.9326%" y="933" width="0.0649%" height="15" fill="rgb(248,88,27)" fg:x="955" fg:w="1"/><text x="62.1826%" y="943.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="61.9326%" y="917" width="0.0649%" height="15" fill="rgb(223,18,17)" fg:x="955" fg:w="1"/><text x="62.1826%" y="927.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="61.9326%" y="901" width="0.0649%" height="15" fill="rgb(241,11,10)" fg:x="955" fg:w="1"/><text x="62.1826%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="61.9326%" y="885" width="0.0649%" height="15" fill="rgb(232,111,52)" fg:x="955" fg:w="1"/><text x="62.1826%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="61.9326%" y="869" width="0.0649%" height="15" fill="rgb(228,67,8)" fg:x="955" fg:w="1"/><text x="62.1826%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (1 samples, 0.06%)</title><rect x="61.9326%" y="853" width="0.0649%" height="15" fill="rgb(251,168,31)" fg:x="955" fg:w="1"/><text x="62.1826%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (1 samples, 0.06%)</title><rect x="61.9326%" y="837" width="0.0649%" height="15" fill="rgb(249,164,11)" fg:x="955" fg:w="1"/><text x="62.1826%" y="847.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (1 samples, 0.06%)</title><rect x="61.9326%" y="821" width="0.0649%" height="15" fill="rgb(239,81,9)" fg:x="955" fg:w="1"/><text x="62.1826%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.9326%" y="805" width="0.0649%" height="15" fill="rgb(222,145,38)" fg:x="955" fg:w="1"/><text x="62.1826%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.9326%" y="789" width="0.0649%" height="15" fill="rgb(238,80,54)" fg:x="955" fg:w="1"/><text x="62.1826%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.9326%" y="773" width="0.0649%" height="15" fill="rgb(237,116,16)" fg:x="955" fg:w="1"/><text x="62.1826%" y="783.50"></text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (71 samples, 4.60%)</title><rect x="57.4578%" y="981" width="4.6044%" height="15" fill="rgb(218,135,19)" fg:x="886" fg:w="71"/><text x="57.7078%" y="991.50">redb:..</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="61.9974%" y="965" width="0.0649%" height="15" fill="rgb(216,207,44)" fg:x="956" fg:w="1"/><text x="62.2474%" y="975.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="61.9974%" y="949" width="0.0649%" height="15" fill="rgb(226,152,40)" fg:x="956" fg:w="1"/><text x="62.2474%" y="959.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="61.9974%" y="933" width="0.0649%" height="15" fill="rgb(219,98,35)" fg:x="956" fg:w="1"/><text x="62.2474%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="61.9974%" y="917" width="0.0649%" height="15" fill="rgb(222,136,46)" fg:x="956" fg:w="1"/><text x="62.2474%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="61.9974%" y="901" width="0.0649%" height="15" fill="rgb(222,71,8)" fg:x="956" fg:w="1"/><text x="62.2474%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="61.9974%" y="885" width="0.0649%" height="15" fill="rgb(209,89,53)" fg:x="956" fg:w="1"/><text x="62.2474%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.0623%" y="805" width="0.0649%" height="15" fill="rgb(210,97,51)" fg:x="957" fg:w="1"/><text x="62.3123%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.0623%" y="789" width="0.0649%" height="15" fill="rgb(248,65,21)" fg:x="957" fg:w="1"/><text x="62.3123%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.0623%" y="773" width="0.0649%" height="15" fill="rgb(222,5,31)" fg:x="957" fg:w="1"/><text x="62.3123%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.1271%" y="693" width="0.0649%" height="15" fill="rgb(241,16,30)" fg:x="958" fg:w="1"/><text x="62.3771%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.1271%" y="677" width="0.0649%" height="15" fill="rgb(215,86,30)" fg:x="958" fg:w="1"/><text x="62.3771%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.1271%" y="661" width="0.0649%" height="15" fill="rgb(235,26,44)" fg:x="958" fg:w="1"/><text x="62.3771%" y="671.50"></text></g><g><title>redb::multimap_table::MultimapTable&lt;K,V&gt;::insert (82 samples, 5.32%)</title><rect x="56.9390%" y="997" width="5.3178%" height="15" fill="rgb(228,147,14)" fg:x="878" fg:w="82"/><text x="57.1890%" y="1007.50">redb::m..</text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="62.0623%" y="981" width="0.1946%" height="15" fill="rgb(253,38,50)" fg:x="957" fg:w="3"/><text x="62.3123%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="62.0623%" y="965" width="0.1946%" height="15" fill="rgb(251,151,16)" fg:x="957" fg:w="3"/><text x="62.3123%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="62.0623%" y="949" width="0.1946%" height="15" fill="rgb(224,64,19)" fg:x="957" fg:w="3"/><text x="62.3123%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="62.0623%" y="933" width="0.1946%" height="15" fill="rgb(235,214,47)" fg:x="957" fg:w="3"/><text x="62.3123%" y="943.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="62.0623%" y="917" width="0.1946%" height="15" fill="rgb(218,15,19)" fg:x="957" fg:w="3"/><text x="62.3123%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="62.0623%" y="901" width="0.1946%" height="15" fill="rgb(247,209,3)" fg:x="957" fg:w="3"/><text x="62.3123%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="62.0623%" y="885" width="0.1946%" height="15" fill="rgb(217,29,2)" fg:x="957" fg:w="3"/><text x="62.3123%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="62.0623%" y="869" width="0.1946%" height="15" fill="rgb(234,9,9)" fg:x="957" fg:w="3"/><text x="62.3123%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="62.0623%" y="853" width="0.1946%" height="15" fill="rgb(207,43,14)" fg:x="957" fg:w="3"/><text x="62.3123%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="62.0623%" y="837" width="0.1946%" height="15" fill="rgb(216,219,36)" fg:x="957" fg:w="3"/><text x="62.3123%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="62.0623%" y="821" width="0.1946%" height="15" fill="rgb(238,12,26)" fg:x="957" fg:w="3"/><text x="62.3123%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="62.1271%" y="805" width="0.1297%" height="15" fill="rgb(226,67,30)" fg:x="958" fg:w="2"/><text x="62.3771%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="62.1271%" y="789" width="0.1297%" height="15" fill="rgb(229,154,7)" fg:x="958" fg:w="2"/><text x="62.3771%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="62.1271%" y="773" width="0.1297%" height="15" fill="rgb(249,90,18)" fg:x="958" fg:w="2"/><text x="62.3771%" y="783.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="62.1271%" y="757" width="0.1297%" height="15" fill="rgb(223,53,15)" fg:x="958" fg:w="2"/><text x="62.3771%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="62.1271%" y="741" width="0.1297%" height="15" fill="rgb(253,86,38)" fg:x="958" fg:w="2"/><text x="62.3771%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="62.1271%" y="725" width="0.1297%" height="15" fill="rgb(222,198,9)" fg:x="958" fg:w="2"/><text x="62.3771%" y="735.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="62.1271%" y="709" width="0.1297%" height="15" fill="rgb(240,146,25)" fg:x="958" fg:w="2"/><text x="62.3771%" y="719.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="62.1920%" y="693" width="0.0649%" height="15" fill="rgb(225,38,10)" fg:x="959" fg:w="1"/><text x="62.4420%" y="703.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="62.1920%" y="677" width="0.0649%" height="15" fill="rgb(246,93,4)" fg:x="959" fg:w="1"/><text x="62.4420%" y="687.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="62.1920%" y="661" width="0.0649%" height="15" fill="rgb(222,55,18)" fg:x="959" fg:w="1"/><text x="62.4420%" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="62.1920%" y="645" width="0.0649%" height="15" fill="rgb(233,137,48)" fg:x="959" fg:w="1"/><text x="62.4420%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="62.1920%" y="629" width="0.0649%" height="15" fill="rgb(214,8,54)" fg:x="959" fg:w="1"/><text x="62.4420%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="62.1920%" y="613" width="0.0649%" height="15" fill="rgb(206,75,4)" fg:x="959" fg:w="1"/><text x="62.4420%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.1920%" y="597" width="0.0649%" height="15" fill="rgb(238,171,14)" fg:x="959" fg:w="1"/><text x="62.4420%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.1920%" y="581" width="0.0649%" height="15" fill="rgb(233,70,41)" fg:x="959" fg:w="1"/><text x="62.4420%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.1920%" y="565" width="0.0649%" height="15" fill="rgb(214,68,36)" fg:x="959" fg:w="1"/><text x="62.4420%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u64&gt;::serialize (1 samples, 0.06%)</title><rect x="62.2568%" y="917" width="0.0649%" height="15" fill="rgb(223,29,5)" fg:x="960" fg:w="1"/><text x="62.5068%" y="927.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u64 (1 samples, 0.06%)</title><rect x="62.2568%" y="901" width="0.0649%" height="15" fill="rgb(251,22,40)" fg:x="960" fg:w="1"/><text x="62.5068%" y="911.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (1 samples, 0.06%)</title><rect x="62.2568%" y="885" width="0.0649%" height="15" fill="rgb(210,67,41)" fg:x="960" fg:w="1"/><text x="62.5068%" y="895.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u64 (1 samples, 0.06%)</title><rect x="62.2568%" y="869" width="0.0649%" height="15" fill="rgb(225,177,31)" fg:x="960" fg:w="1"/><text x="62.5068%" y="879.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u64 (1 samples, 0.06%)</title><rect x="62.2568%" y="853" width="0.0649%" height="15" fill="rgb(221,229,11)" fg:x="960" fg:w="1"/><text x="62.5068%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="62.2568%" y="837" width="0.0649%" height="15" fill="rgb(247,172,52)" fg:x="960" fg:w="1"/><text x="62.5068%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="62.2568%" y="821" width="0.0649%" height="15" fill="rgb(212,73,19)" fg:x="960" fg:w="1"/><text x="62.5068%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="62.2568%" y="805" width="0.0649%" height="15" fill="rgb(244,7,46)" fg:x="960" fg:w="1"/><text x="62.5068%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="62.2568%" y="789" width="0.0649%" height="15" fill="rgb(230,113,20)" fg:x="960" fg:w="1"/><text x="62.5068%" y="799.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.06%)</title><rect x="62.2568%" y="773" width="0.0649%" height="15" fill="rgb(209,97,30)" fg:x="960" fg:w="1"/><text x="62.5068%" y="783.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.06%)</title><rect x="62.2568%" y="757" width="0.0649%" height="15" fill="rgb(243,89,12)" fg:x="960" fg:w="1"/><text x="62.5068%" y="767.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="62.2568%" y="741" width="0.0649%" height="15" fill="rgb(228,32,19)" fg:x="960" fg:w="1"/><text x="62.5068%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.2568%" y="725" width="0.0649%" height="15" fill="rgb(248,25,17)" fg:x="960" fg:w="1"/><text x="62.5068%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.2568%" y="709" width="0.0649%" height="15" fill="rgb(232,161,29)" fg:x="960" fg:w="1"/><text x="62.5068%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.2568%" y="693" width="0.0649%" height="15" fill="rgb(251,192,11)" fg:x="960" fg:w="1"/><text x="62.5068%" y="703.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="62.2568%" y="981" width="0.1297%" height="15" fill="rgb(240,47,32)" fg:x="960" fg:w="2"/><text x="62.5068%" y="991.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="62.2568%" y="965" width="0.1297%" height="15" fill="rgb(250,16,45)" fg:x="960" fg:w="2"/><text x="62.5068%" y="975.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="62.2568%" y="949" width="0.1297%" height="15" fill="rgb(227,217,42)" fg:x="960" fg:w="2"/><text x="62.5068%" y="959.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="62.2568%" y="933" width="0.1297%" height="15" fill="rgb(206,82,54)" fg:x="960" fg:w="2"/><text x="62.5068%" y="943.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.3217%" y="917" width="0.0649%" height="15" fill="rgb(243,145,25)" fg:x="961" fg:w="1"/><text x="62.5717%" y="927.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="62.3217%" y="901" width="0.0649%" height="15" fill="rgb(207,166,24)" fg:x="961" fg:w="1"/><text x="62.5717%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.3217%" y="885" width="0.0649%" height="15" fill="rgb(215,191,44)" fg:x="961" fg:w="1"/><text x="62.5717%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.3217%" y="869" width="0.0649%" height="15" fill="rgb(234,218,51)" fg:x="961" fg:w="1"/><text x="62.5717%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.3217%" y="853" width="0.0649%" height="15" fill="rgb(245,133,21)" fg:x="961" fg:w="1"/><text x="62.5717%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.3217%" y="837" width="0.0649%" height="15" fill="rgb(230,136,45)" fg:x="961" fg:w="1"/><text x="62.5717%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.3865%" y="821" width="0.0649%" height="15" fill="rgb(247,63,43)" fg:x="962" fg:w="1"/><text x="62.6365%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.3865%" y="805" width="0.0649%" height="15" fill="rgb(254,223,31)" fg:x="962" fg:w="1"/><text x="62.6365%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.3865%" y="789" width="0.0649%" height="15" fill="rgb(236,185,0)" fg:x="962" fg:w="1"/><text x="62.6365%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.13%)</title><rect x="62.3865%" y="837" width="0.1297%" height="15" fill="rgb(231,139,46)" fg:x="962" fg:w="2"/><text x="62.6365%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="62.4514%" y="821" width="0.0649%" height="15" fill="rgb(236,147,31)" fg:x="963" fg:w="1"/><text x="62.7014%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="62.4514%" y="805" width="0.0649%" height="15" fill="rgb(225,222,22)" fg:x="963" fg:w="1"/><text x="62.7014%" y="815.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="62.4514%" y="789" width="0.0649%" height="15" fill="rgb(225,193,14)" fg:x="963" fg:w="1"/><text x="62.7014%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.4514%" y="773" width="0.0649%" height="15" fill="rgb(253,193,46)" fg:x="963" fg:w="1"/><text x="62.7014%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.4514%" y="757" width="0.0649%" height="15" fill="rgb(218,187,39)" fg:x="963" fg:w="1"/><text x="62.7014%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.4514%" y="741" width="0.0649%" height="15" fill="rgb(227,162,48)" fg:x="963" fg:w="1"/><text x="62.7014%" y="751.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="62.5162%" y="789" width="0.0649%" height="15" fill="rgb(222,25,5)" fg:x="964" fg:w="1"/><text x="62.7662%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="62.5162%" y="773" width="0.0649%" height="15" fill="rgb(211,205,16)" fg:x="964" fg:w="1"/><text x="62.7662%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.5162%" y="757" width="0.0649%" height="15" fill="rgb(244,191,2)" fg:x="964" fg:w="1"/><text x="62.7662%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.5162%" y="741" width="0.0649%" height="15" fill="rgb(248,159,12)" fg:x="964" fg:w="1"/><text x="62.7662%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.5162%" y="725" width="0.0649%" height="15" fill="rgb(235,204,17)" fg:x="964" fg:w="1"/><text x="62.7662%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuardMut&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (4 samples, 0.26%)</title><rect x="62.3865%" y="965" width="0.2594%" height="15" fill="rgb(240,21,27)" fg:x="962" fg:w="4"/><text x="62.6365%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageMut&gt; (4 samples, 0.26%)</title><rect x="62.3865%" y="949" width="0.2594%" height="15" fill="rgb(224,170,31)" fg:x="962" fg:w="4"/><text x="62.6365%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.26%)</title><rect x="62.3865%" y="933" width="0.2594%" height="15" fill="rgb(223,145,32)" fg:x="962" fg:w="4"/><text x="62.6365%" y="943.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (4 samples, 0.26%)</title><rect x="62.3865%" y="917" width="0.2594%" height="15" fill="rgb(243,100,5)" fg:x="962" fg:w="4"/><text x="62.6365%" y="927.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (4 samples, 0.26%)</title><rect x="62.3865%" y="901" width="0.2594%" height="15" fill="rgb(242,131,51)" fg:x="962" fg:w="4"/><text x="62.6365%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (4 samples, 0.26%)</title><rect x="62.3865%" y="885" width="0.2594%" height="15" fill="rgb(223,156,46)" fg:x="962" fg:w="4"/><text x="62.6365%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (4 samples, 0.26%)</title><rect x="62.3865%" y="869" width="0.2594%" height="15" fill="rgb(215,10,40)" fg:x="962" fg:w="4"/><text x="62.6365%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (4 samples, 0.26%)</title><rect x="62.3865%" y="853" width="0.2594%" height="15" fill="rgb(233,155,0)" fg:x="962" fg:w="4"/><text x="62.6365%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.13%)</title><rect x="62.5162%" y="837" width="0.1297%" height="15" fill="rgb(247,78,6)" fg:x="964" fg:w="2"/><text x="62.7662%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (2 samples, 0.13%)</title><rect x="62.5162%" y="821" width="0.1297%" height="15" fill="rgb(237,217,21)" fg:x="964" fg:w="2"/><text x="62.7662%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (2 samples, 0.13%)</title><rect x="62.5162%" y="805" width="0.1297%" height="15" fill="rgb(212,1,21)" fg:x="964" fg:w="2"/><text x="62.7662%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="62.5811%" y="789" width="0.0649%" height="15" fill="rgb(213,7,14)" fg:x="965" fg:w="1"/><text x="62.8311%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="62.5811%" y="773" width="0.0649%" height="15" fill="rgb(225,84,14)" fg:x="965" fg:w="1"/><text x="62.8311%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="62.5811%" y="757" width="0.0649%" height="15" fill="rgb(239,216,39)" fg:x="965" fg:w="1"/><text x="62.8311%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.5811%" y="741" width="0.0649%" height="15" fill="rgb(253,29,23)" fg:x="965" fg:w="1"/><text x="62.8311%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.5811%" y="725" width="0.0649%" height="15" fill="rgb(220,167,50)" fg:x="965" fg:w="1"/><text x="62.8311%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.5811%" y="709" width="0.0649%" height="15" fill="rgb(232,141,1)" fg:x="965" fg:w="1"/><text x="62.8311%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="62.6459%" y="949" width="0.0649%" height="15" fill="rgb(222,210,1)" fg:x="966" fg:w="1"/><text x="62.8959%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="62.6459%" y="933" width="0.0649%" height="15" fill="rgb(219,84,10)" fg:x="966" fg:w="1"/><text x="62.8959%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.6459%" y="917" width="0.0649%" height="15" fill="rgb(245,188,6)" fg:x="966" fg:w="1"/><text x="62.8959%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.6459%" y="901" width="0.0649%" height="15" fill="rgb(252,139,39)" fg:x="966" fg:w="1"/><text x="62.8959%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.6459%" y="885" width="0.0649%" height="15" fill="rgb(218,42,26)" fg:x="966" fg:w="1"/><text x="62.8959%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.06%)</title><rect x="62.7108%" y="901" width="0.0649%" height="15" fill="rgb(237,226,51)" fg:x="967" fg:w="1"/><text x="62.9608%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="62.7108%" y="885" width="0.0649%" height="15" fill="rgb(246,15,17)" fg:x="967" fg:w="1"/><text x="62.9608%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="62.7108%" y="869" width="0.0649%" height="15" fill="rgb(228,170,42)" fg:x="967" fg:w="1"/><text x="62.9608%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="62.7108%" y="853" width="0.0649%" height="15" fill="rgb(248,118,53)" fg:x="967" fg:w="1"/><text x="62.9608%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="62.7108%" y="837" width="0.0649%" height="15" fill="rgb(207,30,10)" fg:x="967" fg:w="1"/><text x="62.9608%" y="847.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="62.7108%" y="821" width="0.0649%" height="15" fill="rgb(217,104,38)" fg:x="967" fg:w="1"/><text x="62.9608%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.7108%" y="805" width="0.0649%" height="15" fill="rgb(211,165,26)" fg:x="967" fg:w="1"/><text x="62.9608%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.7108%" y="789" width="0.0649%" height="15" fill="rgb(247,38,9)" fg:x="967" fg:w="1"/><text x="62.9608%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.7108%" y="773" width="0.0649%" height="15" fill="rgb(218,187,8)" fg:x="967" fg:w="1"/><text x="62.9608%" y="783.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="62.7756%" y="901" width="0.0649%" height="15" fill="rgb(247,94,28)" fg:x="968" fg:w="1"/><text x="63.0256%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.7756%" y="885" width="0.0649%" height="15" fill="rgb(218,173,30)" fg:x="968" fg:w="1"/><text x="63.0256%" y="895.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="62.7756%" y="869" width="0.0649%" height="15" fill="rgb(245,45,36)" fg:x="968" fg:w="1"/><text x="63.0256%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.7756%" y="853" width="0.0649%" height="15" fill="rgb(221,172,44)" fg:x="968" fg:w="1"/><text x="63.0256%" y="863.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="62.7756%" y="837" width="0.0649%" height="15" fill="rgb(222,45,12)" fg:x="968" fg:w="1"/><text x="63.0256%" y="847.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="62.7756%" y="821" width="0.0649%" height="15" fill="rgb(250,10,22)" fg:x="968" fg:w="1"/><text x="63.0256%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="62.7756%" y="805" width="0.0649%" height="15" fill="rgb(239,27,0)" fg:x="968" fg:w="1"/><text x="63.0256%" y="815.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="62.7756%" y="789" width="0.0649%" height="15" fill="rgb(223,118,22)" fg:x="968" fg:w="1"/><text x="63.0256%" y="799.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="62.7756%" y="773" width="0.0649%" height="15" fill="rgb(251,81,25)" fg:x="968" fg:w="1"/><text x="63.0256%" y="783.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="62.7756%" y="757" width="0.0649%" height="15" fill="rgb(237,225,53)" fg:x="968" fg:w="1"/><text x="63.0256%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="62.7756%" y="741" width="0.0649%" height="15" fill="rgb(237,186,51)" fg:x="968" fg:w="1"/><text x="63.0256%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="62.7756%" y="725" width="0.0649%" height="15" fill="rgb(247,209,11)" fg:x="968" fg:w="1"/><text x="63.0256%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="62.7756%" y="709" width="0.0649%" height="15" fill="rgb(223,109,27)" fg:x="968" fg:w="1"/><text x="63.0256%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="62.7756%" y="693" width="0.0649%" height="15" fill="rgb(246,181,13)" fg:x="968" fg:w="1"/><text x="63.0256%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="62.7756%" y="677" width="0.0649%" height="15" fill="rgb(234,57,44)" fg:x="968" fg:w="1"/><text x="63.0256%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="62.7756%" y="661" width="0.0649%" height="15" fill="rgb(211,227,50)" fg:x="968" fg:w="1"/><text x="63.0256%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="62.7756%" y="645" width="0.0649%" height="15" fill="rgb(254,57,34)" fg:x="968" fg:w="1"/><text x="63.0256%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.7756%" y="629" width="0.0649%" height="15" fill="rgb(227,212,26)" fg:x="968" fg:w="1"/><text x="63.0256%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.7756%" y="613" width="0.0649%" height="15" fill="rgb(244,169,44)" fg:x="968" fg:w="1"/><text x="63.0256%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.7756%" y="597" width="0.0649%" height="15" fill="rgb(236,135,50)" fg:x="968" fg:w="1"/><text x="63.0256%" y="607.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (3 samples, 0.19%)</title><rect x="62.7108%" y="949" width="0.1946%" height="15" fill="rgb(241,89,30)" fg:x="967" fg:w="3"/><text x="62.9608%" y="959.50"></text></g><g><title>bincode::config::Options::serialize (3 samples, 0.19%)</title><rect x="62.7108%" y="933" width="0.1946%" height="15" fill="rgb(206,113,34)" fg:x="967" fg:w="3"/><text x="62.9608%" y="943.50"></text></g><g><title>bincode::internal::serialize (3 samples, 0.19%)</title><rect x="62.7108%" y="917" width="0.1946%" height="15" fill="rgb(218,104,52)" fg:x="967" fg:w="3"/><text x="62.9608%" y="927.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="62.8405%" y="901" width="0.0649%" height="15" fill="rgb(223,82,32)" fg:x="969" fg:w="1"/><text x="63.0905%" y="911.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.8405%" y="885" width="0.0649%" height="15" fill="rgb(249,219,30)" fg:x="969" fg:w="1"/><text x="63.0905%" y="895.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="62.8405%" y="869" width="0.0649%" height="15" fill="rgb(233,141,21)" fg:x="969" fg:w="1"/><text x="63.0905%" y="879.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.8405%" y="853" width="0.0649%" height="15" fill="rgb(252,87,44)" fg:x="969" fg:w="1"/><text x="63.0905%" y="863.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="62.8405%" y="837" width="0.0649%" height="15" fill="rgb(229,48,33)" fg:x="969" fg:w="1"/><text x="63.0905%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.8405%" y="821" width="0.0649%" height="15" fill="rgb(229,23,22)" fg:x="969" fg:w="1"/><text x="63.0905%" y="831.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="62.8405%" y="805" width="0.0649%" height="15" fill="rgb(244,116,16)" fg:x="969" fg:w="1"/><text x="63.0905%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="62.8405%" y="789" width="0.0649%" height="15" fill="rgb(247,45,10)" fg:x="969" fg:w="1"/><text x="63.0905%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::ser::SizeChecker&lt;O&gt; as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.06%)</title><rect x="62.8405%" y="773" width="0.0649%" height="15" fill="rgb(228,60,29)" fg:x="969" fg:w="1"/><text x="63.0905%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.8405%" y="757" width="0.0649%" height="15" fill="rgb(205,129,15)" fg:x="969" fg:w="1"/><text x="63.0905%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.8405%" y="741" width="0.0649%" height="15" fill="rgb(206,229,4)" fg:x="969" fg:w="1"/><text x="63.0905%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.8405%" y="725" width="0.0649%" height="15" fill="rgb(249,191,30)" fg:x="969" fg:w="1"/><text x="63.0905%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="62.9053%" y="949" width="0.0649%" height="15" fill="rgb(250,84,54)" fg:x="970" fg:w="1"/><text x="63.1553%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.9053%" y="933" width="0.0649%" height="15" fill="rgb(207,25,53)" fg:x="970" fg:w="1"/><text x="63.1553%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.9053%" y="917" width="0.0649%" height="15" fill="rgb(235,40,8)" fg:x="970" fg:w="1"/><text x="63.1553%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.9053%" y="901" width="0.0649%" height="15" fill="rgb(226,169,33)" fg:x="970" fg:w="1"/><text x="63.1553%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="62.9702%" y="885" width="0.0649%" height="15" fill="rgb(238,110,8)" fg:x="971" fg:w="1"/><text x="63.2202%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="62.9702%" y="869" width="0.0649%" height="15" fill="rgb(251,206,12)" fg:x="971" fg:w="1"/><text x="63.2202%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="62.9702%" y="853" width="0.0649%" height="15" fill="rgb(248,171,18)" fg:x="971" fg:w="1"/><text x="63.2202%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="62.9702%" y="837" width="0.0649%" height="15" fill="rgb(213,65,46)" fg:x="971" fg:w="1"/><text x="63.2202%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="62.9702%" y="821" width="0.0649%" height="15" fill="rgb(211,154,15)" fg:x="971" fg:w="1"/><text x="63.2202%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="62.9702%" y="805" width="0.0649%" height="15" fill="rgb(217,75,43)" fg:x="971" fg:w="1"/><text x="63.2202%" y="815.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="62.9702%" y="789" width="0.0649%" height="15" fill="rgb(230,32,33)" fg:x="971" fg:w="1"/><text x="63.2202%" y="799.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="62.9702%" y="773" width="0.0649%" height="15" fill="rgb(221,100,16)" fg:x="971" fg:w="1"/><text x="63.2202%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="62.9702%" y="757" width="0.0649%" height="15" fill="rgb(212,129,47)" fg:x="971" fg:w="1"/><text x="63.2202%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="62.9702%" y="741" width="0.0649%" height="15" fill="rgb(239,217,47)" fg:x="971" fg:w="1"/><text x="63.2202%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="62.9702%" y="725" width="0.0649%" height="15" fill="rgb(230,84,24)" fg:x="971" fg:w="1"/><text x="63.2202%" y="735.50"></text></g><g><title>core::mem::drop (2 samples, 0.13%)</title><rect x="62.9702%" y="933" width="0.1297%" height="15" fill="rgb(214,153,51)" fg:x="971" fg:w="2"/><text x="63.2202%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="62.9702%" y="917" width="0.1297%" height="15" fill="rgb(231,6,35)" fg:x="971" fg:w="2"/><text x="63.2202%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="62.9702%" y="901" width="0.1297%" height="15" fill="rgb(229,122,30)" fg:x="971" fg:w="2"/><text x="63.2202%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="63.0350%" y="885" width="0.0649%" height="15" fill="rgb(234,71,10)" fg:x="972" fg:w="1"/><text x="63.2850%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="63.0350%" y="869" width="0.0649%" height="15" fill="rgb(215,173,26)" fg:x="972" fg:w="1"/><text x="63.2850%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="63.0350%" y="853" width="0.0649%" height="15" fill="rgb(248,118,52)" fg:x="972" fg:w="1"/><text x="63.2850%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="63.0350%" y="837" width="0.0649%" height="15" fill="rgb(237,55,46)" fg:x="972" fg:w="1"/><text x="63.2850%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="63.0350%" y="821" width="0.0649%" height="15" fill="rgb(243,214,43)" fg:x="972" fg:w="1"/><text x="63.2850%" y="831.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="63.0350%" y="805" width="0.0649%" height="15" fill="rgb(252,123,30)" fg:x="972" fg:w="1"/><text x="63.2850%" y="815.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="63.0350%" y="789" width="0.0649%" height="15" fill="rgb(215,73,39)" fg:x="972" fg:w="1"/><text x="63.2850%" y="799.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="63.0350%" y="773" width="0.0649%" height="15" fill="rgb(251,194,29)" fg:x="972" fg:w="1"/><text x="63.2850%" y="783.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="63.0350%" y="757" width="0.0649%" height="15" fill="rgb(224,58,52)" fg:x="972" fg:w="1"/><text x="63.2850%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.0350%" y="741" width="0.0649%" height="15" fill="rgb(248,106,46)" fg:x="972" fg:w="1"/><text x="63.2850%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.0350%" y="725" width="0.0649%" height="15" fill="rgb(223,80,29)" fg:x="972" fg:w="1"/><text x="63.2850%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.0350%" y="709" width="0.0649%" height="15" fill="rgb(243,137,9)" fg:x="972" fg:w="1"/><text x="63.2850%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.0999%" y="773" width="0.0649%" height="15" fill="rgb(235,121,28)" fg:x="973" fg:w="1"/><text x="63.3499%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.0999%" y="757" width="0.0649%" height="15" fill="rgb(219,121,41)" fg:x="973" fg:w="1"/><text x="63.3499%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.0999%" y="741" width="0.0649%" height="15" fill="rgb(251,60,6)" fg:x="973" fg:w="1"/><text x="63.3499%" y="751.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="63.1647%" y="709" width="0.0649%" height="15" fill="rgb(208,12,30)" fg:x="974" fg:w="1"/><text x="63.4147%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="63.1647%" y="693" width="0.0649%" height="15" fill="rgb(207,176,36)" fg:x="974" fg:w="1"/><text x="63.4147%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="63.1647%" y="677" width="0.0649%" height="15" fill="rgb(211,188,29)" fg:x="974" fg:w="1"/><text x="63.4147%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="63.1647%" y="661" width="0.0649%" height="15" fill="rgb(220,184,37)" fg:x="974" fg:w="1"/><text x="63.4147%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="63.1647%" y="645" width="0.0649%" height="15" fill="rgb(239,87,37)" fg:x="974" fg:w="1"/><text x="63.4147%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="63.1647%" y="629" width="0.0649%" height="15" fill="rgb(232,113,44)" fg:x="974" fg:w="1"/><text x="63.4147%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="63.1647%" y="613" width="0.0649%" height="15" fill="rgb(246,25,39)" fg:x="974" fg:w="1"/><text x="63.4147%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="63.1647%" y="597" width="0.0649%" height="15" fill="rgb(247,30,13)" fg:x="974" fg:w="1"/><text x="63.4147%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="63.1647%" y="581" width="0.0649%" height="15" fill="rgb(230,176,35)" fg:x="974" fg:w="1"/><text x="63.4147%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="63.1647%" y="565" width="0.0649%" height="15" fill="rgb(222,23,18)" fg:x="974" fg:w="1"/><text x="63.4147%" y="575.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="63.1647%" y="549" width="0.0649%" height="15" fill="rgb(234,86,8)" fg:x="974" fg:w="1"/><text x="63.4147%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="63.1647%" y="533" width="0.0649%" height="15" fill="rgb(206,218,47)" fg:x="974" fg:w="1"/><text x="63.4147%" y="543.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="63.1647%" y="517" width="0.0649%" height="15" fill="rgb(229,35,31)" fg:x="974" fg:w="1"/><text x="63.4147%" y="527.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="63.1647%" y="501" width="0.0649%" height="15" fill="rgb(242,81,7)" fg:x="974" fg:w="1"/><text x="63.4147%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="63.1647%" y="485" width="0.0649%" height="15" fill="rgb(231,11,35)" fg:x="974" fg:w="1"/><text x="63.4147%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="63.1647%" y="469" width="0.0649%" height="15" fill="rgb(219,218,17)" fg:x="974" fg:w="1"/><text x="63.4147%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="63.1647%" y="453" width="0.0649%" height="15" fill="rgb(221,83,32)" fg:x="974" fg:w="1"/><text x="63.4147%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.1647%" y="437" width="0.0649%" height="15" fill="rgb(233,49,54)" fg:x="974" fg:w="1"/><text x="63.4147%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.1647%" y="421" width="0.0649%" height="15" fill="rgb(206,18,51)" fg:x="974" fg:w="1"/><text x="63.4147%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.1647%" y="405" width="0.0649%" height="15" fill="rgb(249,193,15)" fg:x="974" fg:w="1"/><text x="63.4147%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.13%)</title><rect x="63.2296%" y="645" width="0.1297%" height="15" fill="rgb(245,186,19)" fg:x="975" fg:w="2"/><text x="63.4796%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="63.2296%" y="629" width="0.1297%" height="15" fill="rgb(230,4,24)" fg:x="975" fg:w="2"/><text x="63.4796%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="63.2296%" y="613" width="0.1297%" height="15" fill="rgb(234,75,27)" fg:x="975" fg:w="2"/><text x="63.4796%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="63.2296%" y="597" width="0.1297%" height="15" fill="rgb(244,187,35)" fg:x="975" fg:w="2"/><text x="63.4796%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.3593%" y="645" width="0.0649%" height="15" fill="rgb(241,97,43)" fg:x="977" fg:w="1"/><text x="63.6093%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.3593%" y="629" width="0.0649%" height="15" fill="rgb(236,94,2)" fg:x="977" fg:w="1"/><text x="63.6093%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.3593%" y="613" width="0.0649%" height="15" fill="rgb(231,175,7)" fg:x="977" fg:w="1"/><text x="63.6093%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="63.4241%" y="533" width="0.0649%" height="15" fill="rgb(236,89,47)" fg:x="978" fg:w="1"/><text x="63.6741%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.4241%" y="517" width="0.0649%" height="15" fill="rgb(213,191,37)" fg:x="978" fg:w="1"/><text x="63.6741%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.4241%" y="501" width="0.0649%" height="15" fill="rgb(252,0,34)" fg:x="978" fg:w="1"/><text x="63.6741%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.4241%" y="485" width="0.0649%" height="15" fill="rgb(208,145,44)" fg:x="978" fg:w="1"/><text x="63.6741%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.4890%" y="325" width="0.0649%" height="15" fill="rgb(227,95,50)" fg:x="979" fg:w="1"/><text x="63.7390%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.4890%" y="309" width="0.0649%" height="15" fill="rgb(222,136,24)" fg:x="979" fg:w="1"/><text x="63.7390%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.4890%" y="293" width="0.0649%" height="15" fill="rgb(218,105,10)" fg:x="979" fg:w="1"/><text x="63.7390%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="63.4890%" y="373" width="0.1297%" height="15" fill="rgb(216,65,28)" fg:x="979" fg:w="2"/><text x="63.7390%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="63.4890%" y="357" width="0.1297%" height="15" fill="rgb(229,6,28)" fg:x="979" fg:w="2"/><text x="63.7390%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="63.4890%" y="341" width="0.1297%" height="15" fill="rgb(222,160,42)" fg:x="979" fg:w="2"/><text x="63.7390%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="63.5538%" y="325" width="0.0649%" height="15" fill="rgb(235,83,49)" fg:x="980" fg:w="1"/><text x="63.8038%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="63.5538%" y="309" width="0.0649%" height="15" fill="rgb(236,86,36)" fg:x="980" fg:w="1"/><text x="63.8038%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="63.5538%" y="293" width="0.0649%" height="15" fill="rgb(236,19,41)" fg:x="980" fg:w="1"/><text x="63.8038%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="63.5538%" y="277" width="0.0649%" height="15" fill="rgb(217,71,31)" fg:x="980" fg:w="1"/><text x="63.8038%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="63.5538%" y="261" width="0.0649%" height="15" fill="rgb(236,209,25)" fg:x="980" fg:w="1"/><text x="63.8038%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.5538%" y="245" width="0.0649%" height="15" fill="rgb(247,104,21)" fg:x="980" fg:w="1"/><text x="63.8038%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.5538%" y="229" width="0.0649%" height="15" fill="rgb(243,80,38)" fg:x="980" fg:w="1"/><text x="63.8038%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.5538%" y="213" width="0.0649%" height="15" fill="rgb(232,109,38)" fg:x="980" fg:w="1"/><text x="63.8038%" y="223.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (4 samples, 0.26%)</title><rect x="63.4890%" y="485" width="0.2594%" height="15" fill="rgb(212,177,53)" fg:x="979" fg:w="4"/><text x="63.7390%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="63.4890%" y="469" width="0.2594%" height="15" fill="rgb(227,30,34)" fg:x="979" fg:w="4"/><text x="63.7390%" y="479.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="63.4890%" y="453" width="0.2594%" height="15" fill="rgb(205,175,25)" fg:x="979" fg:w="4"/><text x="63.7390%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (4 samples, 0.26%)</title><rect x="63.4890%" y="437" width="0.2594%" height="15" fill="rgb(249,39,54)" fg:x="979" fg:w="4"/><text x="63.7390%" y="447.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (4 samples, 0.26%)</title><rect x="63.4890%" y="421" width="0.2594%" height="15" fill="rgb(215,54,37)" fg:x="979" fg:w="4"/><text x="63.7390%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (4 samples, 0.26%)</title><rect x="63.4890%" y="405" width="0.2594%" height="15" fill="rgb(205,60,46)" fg:x="979" fg:w="4"/><text x="63.7390%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4 samples, 0.26%)</title><rect x="63.4890%" y="389" width="0.2594%" height="15" fill="rgb(238,89,29)" fg:x="979" fg:w="4"/><text x="63.7390%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="63.6187%" y="373" width="0.1297%" height="15" fill="rgb(212,48,10)" fg:x="981" fg:w="2"/><text x="63.8687%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="63.6187%" y="357" width="0.1297%" height="15" fill="rgb(237,186,28)" fg:x="981" fg:w="2"/><text x="63.8687%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="63.6187%" y="341" width="0.1297%" height="15" fill="rgb(237,204,4)" fg:x="981" fg:w="2"/><text x="63.8687%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="63.6187%" y="325" width="0.1297%" height="15" fill="rgb(237,15,47)" fg:x="981" fg:w="2"/><text x="63.8687%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="63.6187%" y="309" width="0.1297%" height="15" fill="rgb(244,110,25)" fg:x="981" fg:w="2"/><text x="63.8687%" y="319.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (2 samples, 0.13%)</title><rect x="63.6187%" y="293" width="0.1297%" height="15" fill="rgb(241,12,16)" fg:x="981" fg:w="2"/><text x="63.8687%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="63.6187%" y="277" width="0.1297%" height="15" fill="rgb(235,25,9)" fg:x="981" fg:w="2"/><text x="63.8687%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="63.6187%" y="261" width="0.1297%" height="15" fill="rgb(245,159,19)" fg:x="981" fg:w="2"/><text x="63.8687%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="63.6187%" y="245" width="0.1297%" height="15" fill="rgb(236,63,32)" fg:x="981" fg:w="2"/><text x="63.8687%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="63.4241%" y="613" width="0.3891%" height="15" fill="rgb(235,32,52)" fg:x="978" fg:w="6"/><text x="63.6741%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="63.4241%" y="597" width="0.3891%" height="15" fill="rgb(209,176,21)" fg:x="978" fg:w="6"/><text x="63.6741%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="63.4241%" y="581" width="0.3891%" height="15" fill="rgb(205,90,42)" fg:x="978" fg:w="6"/><text x="63.6741%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="63.4241%" y="565" width="0.3891%" height="15" fill="rgb(213,132,16)" fg:x="978" fg:w="6"/><text x="63.6741%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.39%)</title><rect x="63.4241%" y="549" width="0.3891%" height="15" fill="rgb(232,11,22)" fg:x="978" fg:w="6"/><text x="63.6741%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.32%)</title><rect x="63.4890%" y="533" width="0.3243%" height="15" fill="rgb(248,167,41)" fg:x="979" fg:w="5"/><text x="63.7390%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.32%)</title><rect x="63.4890%" y="517" width="0.3243%" height="15" fill="rgb(209,127,6)" fg:x="979" fg:w="5"/><text x="63.7390%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="63.4890%" y="501" width="0.3243%" height="15" fill="rgb(246,210,34)" fg:x="979" fg:w="5"/><text x="63.7390%" y="511.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="63.7484%" y="485" width="0.0649%" height="15" fill="rgb(238,165,13)" fg:x="983" fg:w="1"/><text x="63.9984%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="63.7484%" y="469" width="0.0649%" height="15" fill="rgb(233,98,15)" fg:x="983" fg:w="1"/><text x="63.9984%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="63.7484%" y="453" width="0.0649%" height="15" fill="rgb(215,215,51)" fg:x="983" fg:w="1"/><text x="63.9984%" y="463.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="63.7484%" y="437" width="0.0649%" height="15" fill="rgb(217,161,25)" fg:x="983" fg:w="1"/><text x="63.9984%" y="447.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="63.7484%" y="421" width="0.0649%" height="15" fill="rgb(217,167,48)" fg:x="983" fg:w="1"/><text x="63.9984%" y="431.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="63.7484%" y="405" width="0.0649%" height="15" fill="rgb(205,163,34)" fg:x="983" fg:w="1"/><text x="63.9984%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="63.7484%" y="389" width="0.0649%" height="15" fill="rgb(241,197,31)" fg:x="983" fg:w="1"/><text x="63.9984%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="63.7484%" y="373" width="0.0649%" height="15" fill="rgb(225,123,11)" fg:x="983" fg:w="1"/><text x="63.9984%" y="383.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="63.7484%" y="357" width="0.0649%" height="15" fill="rgb(217,4,20)" fg:x="983" fg:w="1"/><text x="63.9984%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.7484%" y="341" width="0.0649%" height="15" fill="rgb(215,55,9)" fg:x="983" fg:w="1"/><text x="63.9984%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.7484%" y="325" width="0.0649%" height="15" fill="rgb(218,165,5)" fg:x="983" fg:w="1"/><text x="63.9984%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.7484%" y="309" width="0.0649%" height="15" fill="rgb(222,175,15)" fg:x="983" fg:w="1"/><text x="63.9984%" y="319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="63.0999%" y="837" width="0.7782%" height="15" fill="rgb(223,85,34)" fg:x="973" fg:w="12"/><text x="63.3499%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (12 samples, 0.78%)</title><rect x="63.0999%" y="821" width="0.7782%" height="15" fill="rgb(234,228,29)" fg:x="973" fg:w="12"/><text x="63.3499%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (12 samples, 0.78%)</title><rect x="63.0999%" y="805" width="0.7782%" height="15" fill="rgb(239,7,28)" fg:x="973" fg:w="12"/><text x="63.3499%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.78%)</title><rect x="63.0999%" y="789" width="0.7782%" height="15" fill="rgb(252,222,53)" fg:x="973" fg:w="12"/><text x="63.3499%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (11 samples, 0.71%)</title><rect x="63.1647%" y="773" width="0.7134%" height="15" fill="rgb(232,146,44)" fg:x="974" fg:w="11"/><text x="63.4147%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (11 samples, 0.71%)</title><rect x="63.1647%" y="757" width="0.7134%" height="15" fill="rgb(243,223,53)" fg:x="974" fg:w="11"/><text x="63.4147%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11 samples, 0.71%)</title><rect x="63.1647%" y="741" width="0.7134%" height="15" fill="rgb(219,128,25)" fg:x="974" fg:w="11"/><text x="63.4147%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="63.1647%" y="725" width="0.7134%" height="15" fill="rgb(223,56,32)" fg:x="974" fg:w="11"/><text x="63.4147%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (10 samples, 0.65%)</title><rect x="63.2296%" y="709" width="0.6485%" height="15" fill="rgb(237,41,3)" fg:x="975" fg:w="10"/><text x="63.4796%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (10 samples, 0.65%)</title><rect x="63.2296%" y="693" width="0.6485%" height="15" fill="rgb(235,138,9)" fg:x="975" fg:w="10"/><text x="63.4796%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="63.2296%" y="677" width="0.6485%" height="15" fill="rgb(214,131,10)" fg:x="975" fg:w="10"/><text x="63.4796%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.65%)</title><rect x="63.2296%" y="661" width="0.6485%" height="15" fill="rgb(229,89,7)" fg:x="975" fg:w="10"/><text x="63.4796%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (7 samples, 0.45%)</title><rect x="63.4241%" y="645" width="0.4540%" height="15" fill="rgb(240,24,42)" fg:x="978" fg:w="7"/><text x="63.6741%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.45%)</title><rect x="63.4241%" y="629" width="0.4540%" height="15" fill="rgb(243,188,54)" fg:x="978" fg:w="7"/><text x="63.6741%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="63.8132%" y="613" width="0.0649%" height="15" fill="rgb(246,92,22)" fg:x="984" fg:w="1"/><text x="64.0632%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="63.8132%" y="597" width="0.0649%" height="15" fill="rgb(211,176,51)" fg:x="984" fg:w="1"/><text x="64.0632%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="63.8132%" y="581" width="0.0649%" height="15" fill="rgb(246,207,34)" fg:x="984" fg:w="1"/><text x="64.0632%" y="591.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (14 samples, 0.91%)</title><rect x="63.0999%" y="917" width="0.9079%" height="15" fill="rgb(239,95,2)" fg:x="973" fg:w="14"/><text x="63.3499%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (14 samples, 0.91%)</title><rect x="63.0999%" y="901" width="0.9079%" height="15" fill="rgb(211,124,25)" fg:x="973" fg:w="14"/><text x="63.3499%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (14 samples, 0.91%)</title><rect x="63.0999%" y="885" width="0.9079%" height="15" fill="rgb(231,221,19)" fg:x="973" fg:w="14"/><text x="63.3499%" y="895.50"></text></g><g><title>bincode::internal::deserialize (14 samples, 0.91%)</title><rect x="63.0999%" y="869" width="0.9079%" height="15" fill="rgb(239,183,19)" fg:x="973" fg:w="14"/><text x="63.3499%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (14 samples, 0.91%)</title><rect x="63.0999%" y="853" width="0.9079%" height="15" fill="rgb(221,130,29)" fg:x="973" fg:w="14"/><text x="63.3499%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="63.8781%" y="837" width="0.1297%" height="15" fill="rgb(206,130,36)" fg:x="985" fg:w="2"/><text x="64.1281%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="63.8781%" y="821" width="0.1297%" height="15" fill="rgb(215,70,19)" fg:x="985" fg:w="2"/><text x="64.1281%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="63.8781%" y="805" width="0.1297%" height="15" fill="rgb(244,16,43)" fg:x="985" fg:w="2"/><text x="64.1281%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (15 samples, 0.97%)</title><rect x="63.0999%" y="933" width="0.9728%" height="15" fill="rgb(222,115,32)" fg:x="973" fg:w="15"/><text x="63.3499%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="64.0078%" y="917" width="0.0649%" height="15" fill="rgb(247,48,25)" fg:x="987" fg:w="1"/><text x="64.2578%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="64.0078%" y="901" width="0.0649%" height="15" fill="rgb(226,180,51)" fg:x="987" fg:w="1"/><text x="64.2578%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="64.0078%" y="885" width="0.0649%" height="15" fill="rgb(217,142,42)" fg:x="987" fg:w="1"/><text x="64.2578%" y="895.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="64.0078%" y="869" width="0.0649%" height="15" fill="rgb(220,178,3)" fg:x="987" fg:w="1"/><text x="64.2578%" y="879.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="64.0078%" y="853" width="0.0649%" height="15" fill="rgb(217,221,4)" fg:x="987" fg:w="1"/><text x="64.2578%" y="863.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="64.0078%" y="837" width="0.0649%" height="15" fill="rgb(237,63,43)" fg:x="987" fg:w="1"/><text x="64.2578%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.0078%" y="821" width="0.0649%" height="15" fill="rgb(220,57,8)" fg:x="987" fg:w="1"/><text x="64.2578%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.0078%" y="805" width="0.0649%" height="15" fill="rgb(254,186,27)" fg:x="987" fg:w="1"/><text x="64.2578%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.0078%" y="789" width="0.0649%" height="15" fill="rgb(251,57,28)" fg:x="987" fg:w="1"/><text x="64.2578%" y="799.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_page (1 samples, 0.06%)</title><rect x="64.0726%" y="933" width="0.0649%" height="15" fill="rgb(215,228,0)" fg:x="988" fg:w="1"/><text x="64.3226%" y="943.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="64.0726%" y="917" width="0.0649%" height="15" fill="rgb(237,218,39)" fg:x="988" fg:w="1"/><text x="64.3226%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="64.0726%" y="901" width="0.0649%" height="15" fill="rgb(207,2,54)" fg:x="988" fg:w="1"/><text x="64.3226%" y="911.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="64.0726%" y="885" width="0.0649%" height="15" fill="rgb(232,76,50)" fg:x="988" fg:w="1"/><text x="64.3226%" y="895.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="64.0726%" y="869" width="0.0649%" height="15" fill="rgb(211,85,31)" fg:x="988" fg:w="1"/><text x="64.3226%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.0726%" y="853" width="0.0649%" height="15" fill="rgb(223,210,27)" fg:x="988" fg:w="1"/><text x="64.3226%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.0726%" y="837" width="0.0649%" height="15" fill="rgb(254,36,8)" fg:x="988" fg:w="1"/><text x="64.3226%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.0726%" y="821" width="0.0649%" height="15" fill="rgb(213,4,25)" fg:x="988" fg:w="1"/><text x="64.3226%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="64.1375%" y="933" width="0.0649%" height="15" fill="rgb(224,2,39)" fg:x="989" fg:w="1"/><text x="64.3875%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="64.1375%" y="917" width="0.0649%" height="15" fill="rgb(208,8,39)" fg:x="989" fg:w="1"/><text x="64.3875%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="64.1375%" y="901" width="0.0649%" height="15" fill="rgb(216,226,3)" fg:x="989" fg:w="1"/><text x="64.3875%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="64.1375%" y="885" width="0.0649%" height="15" fill="rgb(249,139,31)" fg:x="989" fg:w="1"/><text x="64.3875%" y="895.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="64.1375%" y="869" width="0.0649%" height="15" fill="rgb(242,170,35)" fg:x="989" fg:w="1"/><text x="64.3875%" y="879.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.06%)</title><rect x="64.1375%" y="853" width="0.0649%" height="15" fill="rgb(238,14,9)" fg:x="989" fg:w="1"/><text x="64.3875%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.1375%" y="837" width="0.0649%" height="15" fill="rgb(251,81,46)" fg:x="989" fg:w="1"/><text x="64.3875%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.1375%" y="821" width="0.0649%" height="15" fill="rgb(230,23,4)" fg:x="989" fg:w="1"/><text x="64.3875%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.1375%" y="805" width="0.0649%" height="15" fill="rgb(211,85,25)" fg:x="989" fg:w="1"/><text x="64.3875%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="64.2023%" y="885" width="0.0649%" height="15" fill="rgb(252,23,31)" fg:x="990" fg:w="1"/><text x="64.4523%" y="895.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="64.2023%" y="869" width="0.0649%" height="15" fill="rgb(234,163,38)" fg:x="990" fg:w="1"/><text x="64.4523%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.2023%" y="853" width="0.0649%" height="15" fill="rgb(210,190,50)" fg:x="990" fg:w="1"/><text x="64.4523%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.2023%" y="837" width="0.0649%" height="15" fill="rgb(228,158,3)" fg:x="990" fg:w="1"/><text x="64.4523%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.2023%" y="821" width="0.0649%" height="15" fill="rgb(216,130,0)" fg:x="990" fg:w="1"/><text x="64.4523%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchBuilder::build (2 samples, 0.13%)</title><rect x="64.2023%" y="933" width="0.1297%" height="15" fill="rgb(224,184,10)" fg:x="990" fg:w="2"/><text x="64.4523%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (2 samples, 0.13%)</title><rect x="64.2023%" y="917" width="0.1297%" height="15" fill="rgb(214,202,18)" fg:x="990" fg:w="2"/><text x="64.4523%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (2 samples, 0.13%)</title><rect x="64.2023%" y="901" width="0.1297%" height="15" fill="rgb(213,229,54)" fg:x="990" fg:w="2"/><text x="64.4523%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (1 samples, 0.06%)</title><rect x="64.2672%" y="885" width="0.0649%" height="15" fill="rgb(246,120,0)" fg:x="991" fg:w="1"/><text x="64.5172%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::take_value (1 samples, 0.06%)</title><rect x="64.2672%" y="869" width="0.0649%" height="15" fill="rgb(237,6,15)" fg:x="991" fg:w="1"/><text x="64.5172%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="64.2672%" y="853" width="0.0649%" height="15" fill="rgb(252,156,15)" fg:x="991" fg:w="1"/><text x="64.5172%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="64.2672%" y="837" width="0.0649%" height="15" fill="rgb(249,78,18)" fg:x="991" fg:w="1"/><text x="64.5172%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="64.2672%" y="821" width="0.0649%" height="15" fill="rgb(230,223,44)" fg:x="991" fg:w="1"/><text x="64.5172%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="64.2672%" y="805" width="0.0649%" height="15" fill="rgb(230,222,32)" fg:x="991" fg:w="1"/><text x="64.5172%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="64.2672%" y="789" width="0.0649%" height="15" fill="rgb(247,54,6)" fg:x="991" fg:w="1"/><text x="64.5172%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="64.2672%" y="773" width="0.0649%" height="15" fill="rgb(247,115,45)" fg:x="991" fg:w="1"/><text x="64.5172%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="64.2672%" y="757" width="0.0649%" height="15" fill="rgb(213,203,37)" fg:x="991" fg:w="1"/><text x="64.5172%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="64.2672%" y="741" width="0.0649%" height="15" fill="rgb(248,188,18)" fg:x="991" fg:w="1"/><text x="64.5172%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="64.2672%" y="725" width="0.0649%" height="15" fill="rgb(206,80,8)" fg:x="991" fg:w="1"/><text x="64.5172%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="64.2672%" y="709" width="0.0649%" height="15" fill="rgb(245,217,31)" fg:x="991" fg:w="1"/><text x="64.5172%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="64.2672%" y="693" width="0.0649%" height="15" fill="rgb(220,193,15)" fg:x="991" fg:w="1"/><text x="64.5172%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="64.2672%" y="677" width="0.0649%" height="15" fill="rgb(226,7,19)" fg:x="991" fg:w="1"/><text x="64.5172%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="64.2672%" y="661" width="0.0649%" height="15" fill="rgb(222,145,31)" fg:x="991" fg:w="1"/><text x="64.5172%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.2672%" y="645" width="0.0649%" height="15" fill="rgb(241,193,36)" fg:x="991" fg:w="1"/><text x="64.5172%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.2672%" y="629" width="0.0649%" height="15" fill="rgb(225,123,33)" fg:x="991" fg:w="1"/><text x="64.5172%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.2672%" y="613" width="0.0649%" height="15" fill="rgb(246,136,38)" fg:x="991" fg:w="1"/><text x="64.5172%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="64.3320%" y="421" width="0.0649%" height="15" fill="rgb(243,56,24)" fg:x="992" fg:w="1"/><text x="64.5820%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.3320%" y="405" width="0.0649%" height="15" fill="rgb(215,147,2)" fg:x="992" fg:w="1"/><text x="64.5820%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.3320%" y="389" width="0.0649%" height="15" fill="rgb(209,155,27)" fg:x="992" fg:w="1"/><text x="64.5820%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.3320%" y="373" width="0.0649%" height="15" fill="rgb(222,177,11)" fg:x="992" fg:w="1"/><text x="64.5820%" y="383.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="64.3320%" y="933" width="0.1297%" height="15" fill="rgb(212,227,15)" fg:x="992" fg:w="2"/><text x="64.5820%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="64.3320%" y="917" width="0.1297%" height="15" fill="rgb(214,138,20)" fg:x="992" fg:w="2"/><text x="64.5820%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="64.3320%" y="901" width="0.1297%" height="15" fill="rgb(221,170,31)" fg:x="992" fg:w="2"/><text x="64.5820%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="885" width="0.1297%" height="15" fill="rgb(253,207,5)" fg:x="992" fg:w="2"/><text x="64.5820%" y="895.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="869" width="0.1297%" height="15" fill="rgb(212,64,37)" fg:x="992" fg:w="2"/><text x="64.5820%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="64.3320%" y="853" width="0.1297%" height="15" fill="rgb(208,113,51)" fg:x="992" fg:w="2"/><text x="64.5820%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="837" width="0.1297%" height="15" fill="rgb(237,15,5)" fg:x="992" fg:w="2"/><text x="64.5820%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="821" width="0.1297%" height="15" fill="rgb(238,33,18)" fg:x="992" fg:w="2"/><text x="64.5820%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="64.3320%" y="805" width="0.1297%" height="15" fill="rgb(253,206,50)" fg:x="992" fg:w="2"/><text x="64.5820%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="64.3320%" y="789" width="0.1297%" height="15" fill="rgb(242,158,43)" fg:x="992" fg:w="2"/><text x="64.5820%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="64.3320%" y="773" width="0.1297%" height="15" fill="rgb(213,125,27)" fg:x="992" fg:w="2"/><text x="64.5820%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="64.3320%" y="757" width="0.1297%" height="15" fill="rgb(233,161,31)" fg:x="992" fg:w="2"/><text x="64.5820%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="64.3320%" y="741" width="0.1297%" height="15" fill="rgb(218,135,6)" fg:x="992" fg:w="2"/><text x="64.5820%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="725" width="0.1297%" height="15" fill="rgb(222,73,53)" fg:x="992" fg:w="2"/><text x="64.5820%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="709" width="0.1297%" height="15" fill="rgb(229,66,53)" fg:x="992" fg:w="2"/><text x="64.5820%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="64.3320%" y="693" width="0.1297%" height="15" fill="rgb(208,128,19)" fg:x="992" fg:w="2"/><text x="64.5820%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="64.3320%" y="677" width="0.1297%" height="15" fill="rgb(235,70,27)" fg:x="992" fg:w="2"/><text x="64.5820%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="64.3320%" y="661" width="0.1297%" height="15" fill="rgb(241,130,30)" fg:x="992" fg:w="2"/><text x="64.5820%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="64.3320%" y="645" width="0.1297%" height="15" fill="rgb(222,57,48)" fg:x="992" fg:w="2"/><text x="64.5820%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="64.3320%" y="629" width="0.1297%" height="15" fill="rgb(225,204,29)" fg:x="992" fg:w="2"/><text x="64.5820%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="613" width="0.1297%" height="15" fill="rgb(240,196,35)" fg:x="992" fg:w="2"/><text x="64.5820%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="597" width="0.1297%" height="15" fill="rgb(215,150,16)" fg:x="992" fg:w="2"/><text x="64.5820%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="64.3320%" y="581" width="0.1297%" height="15" fill="rgb(209,170,13)" fg:x="992" fg:w="2"/><text x="64.5820%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="64.3320%" y="565" width="0.1297%" height="15" fill="rgb(235,75,31)" fg:x="992" fg:w="2"/><text x="64.5820%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="64.3320%" y="549" width="0.1297%" height="15" fill="rgb(252,1,47)" fg:x="992" fg:w="2"/><text x="64.5820%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="64.3320%" y="533" width="0.1297%" height="15" fill="rgb(241,2,36)" fg:x="992" fg:w="2"/><text x="64.5820%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="64.3320%" y="517" width="0.1297%" height="15" fill="rgb(236,191,4)" fg:x="992" fg:w="2"/><text x="64.5820%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="501" width="0.1297%" height="15" fill="rgb(212,65,35)" fg:x="992" fg:w="2"/><text x="64.5820%" y="511.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="64.3320%" y="485" width="0.1297%" height="15" fill="rgb(209,49,33)" fg:x="992" fg:w="2"/><text x="64.5820%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="64.3320%" y="469" width="0.1297%" height="15" fill="rgb(208,36,46)" fg:x="992" fg:w="2"/><text x="64.5820%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="64.3320%" y="453" width="0.1297%" height="15" fill="rgb(210,125,2)" fg:x="992" fg:w="2"/><text x="64.5820%" y="463.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="64.3320%" y="437" width="0.1297%" height="15" fill="rgb(225,62,6)" fg:x="992" fg:w="2"/><text x="64.5820%" y="447.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="64.3969%" y="421" width="0.0649%" height="15" fill="rgb(210,54,27)" fg:x="993" fg:w="1"/><text x="64.6469%" y="431.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="64.3969%" y="405" width="0.0649%" height="15" fill="rgb(249,189,52)" fg:x="993" fg:w="1"/><text x="64.6469%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="64.3969%" y="389" width="0.0649%" height="15" fill="rgb(225,134,40)" fg:x="993" fg:w="1"/><text x="64.6469%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="64.3969%" y="373" width="0.0649%" height="15" fill="rgb(206,13,37)" fg:x="993" fg:w="1"/><text x="64.6469%" y="383.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="64.3969%" y="357" width="0.0649%" height="15" fill="rgb(232,114,28)" fg:x="993" fg:w="1"/><text x="64.6469%" y="367.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="64.3969%" y="341" width="0.0649%" height="15" fill="rgb(253,215,8)" fg:x="993" fg:w="1"/><text x="64.6469%" y="351.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="64.3969%" y="325" width="0.0649%" height="15" fill="rgb(254,64,19)" fg:x="993" fg:w="1"/><text x="64.6469%" y="335.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="64.3969%" y="309" width="0.0649%" height="15" fill="rgb(242,18,46)" fg:x="993" fg:w="1"/><text x="64.6469%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="64.3969%" y="293" width="0.0649%" height="15" fill="rgb(239,192,30)" fg:x="993" fg:w="1"/><text x="64.6469%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="64.3969%" y="277" width="0.0649%" height="15" fill="rgb(232,73,14)" fg:x="993" fg:w="1"/><text x="64.6469%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="64.3969%" y="261" width="0.0649%" height="15" fill="rgb(225,51,9)" fg:x="993" fg:w="1"/><text x="64.6469%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="64.3969%" y="245" width="0.0649%" height="15" fill="rgb(242,217,54)" fg:x="993" fg:w="1"/><text x="64.6469%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="64.3969%" y="229" width="0.0649%" height="15" fill="rgb(216,93,3)" fg:x="993" fg:w="1"/><text x="64.6469%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="64.3969%" y="213" width="0.0649%" height="15" fill="rgb(230,119,33)" fg:x="993" fg:w="1"/><text x="64.6469%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="64.3969%" y="197" width="0.0649%" height="15" fill="rgb(238,170,27)" fg:x="993" fg:w="1"/><text x="64.6469%" y="207.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="64.3969%" y="181" width="0.0649%" height="15" fill="rgb(229,8,2)" fg:x="993" fg:w="1"/><text x="64.6469%" y="191.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.3969%" y="165" width="0.0649%" height="15" fill="rgb(205,214,42)" fg:x="993" fg:w="1"/><text x="64.6469%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.3969%" y="149" width="0.0649%" height="15" fill="rgb(245,113,1)" fg:x="993" fg:w="1"/><text x="64.6469%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.3969%" y="133" width="0.0649%" height="15" fill="rgb(252,50,2)" fg:x="993" fg:w="1"/><text x="64.6469%" y="143.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (1 samples, 0.06%)</title><rect x="64.4617%" y="933" width="0.0649%" height="15" fill="rgb(225,122,24)" fg:x="994" fg:w="1"/><text x="64.7117%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (1 samples, 0.06%)</title><rect x="64.4617%" y="917" width="0.0649%" height="15" fill="rgb(234,129,31)" fg:x="994" fg:w="1"/><text x="64.7117%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.4617%" y="901" width="0.0649%" height="15" fill="rgb(219,177,4)" fg:x="994" fg:w="1"/><text x="64.7117%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.4617%" y="885" width="0.0649%" height="15" fill="rgb(225,142,27)" fg:x="994" fg:w="1"/><text x="64.7117%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.4617%" y="869" width="0.0649%" height="15" fill="rgb(205,107,51)" fg:x="994" fg:w="1"/><text x="64.7117%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.5266%" y="917" width="0.0649%" height="15" fill="rgb(236,223,15)" fg:x="995" fg:w="1"/><text x="64.7766%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.5266%" y="901" width="0.0649%" height="15" fill="rgb(235,133,11)" fg:x="995" fg:w="1"/><text x="64.7766%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.5266%" y="885" width="0.0649%" height="15" fill="rgb(247,172,13)" fg:x="995" fg:w="1"/><text x="64.7766%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="64.5914%" y="869" width="0.0649%" height="15" fill="rgb(233,191,41)" fg:x="996" fg:w="1"/><text x="64.8414%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="64.5914%" y="853" width="0.0649%" height="15" fill="rgb(250,65,16)" fg:x="996" fg:w="1"/><text x="64.8414%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="64.5914%" y="837" width="0.0649%" height="15" fill="rgb(206,10,27)" fg:x="996" fg:w="1"/><text x="64.8414%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="64.5914%" y="821" width="0.0649%" height="15" fill="rgb(212,96,22)" fg:x="996" fg:w="1"/><text x="64.8414%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="64.5914%" y="805" width="0.0649%" height="15" fill="rgb(206,50,0)" fg:x="996" fg:w="1"/><text x="64.8414%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="64.5914%" y="789" width="0.0649%" height="15" fill="rgb(249,105,52)" fg:x="996" fg:w="1"/><text x="64.8414%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="64.5914%" y="773" width="0.0649%" height="15" fill="rgb(216,93,51)" fg:x="996" fg:w="1"/><text x="64.8414%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.06%)</title><rect x="64.5914%" y="757" width="0.0649%" height="15" fill="rgb(217,172,13)" fg:x="996" fg:w="1"/><text x="64.8414%" y="767.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.06%)</title><rect x="64.5914%" y="741" width="0.0649%" height="15" fill="rgb(235,199,38)" fg:x="996" fg:w="1"/><text x="64.8414%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.06%)</title><rect x="64.5914%" y="725" width="0.0649%" height="15" fill="rgb(221,97,33)" fg:x="996" fg:w="1"/><text x="64.8414%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.5914%" y="709" width="0.0649%" height="15" fill="rgb(205,156,50)" fg:x="996" fg:w="1"/><text x="64.8414%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.5914%" y="693" width="0.0649%" height="15" fill="rgb(215,142,19)" fg:x="996" fg:w="1"/><text x="64.8414%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.5914%" y="677" width="0.0649%" height="15" fill="rgb(232,170,7)" fg:x="996" fg:w="1"/><text x="64.8414%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (1 samples, 0.06%)</title><rect x="64.6563%" y="773" width="0.0649%" height="15" fill="rgb(223,50,17)" fg:x="997" fg:w="1"/><text x="64.9063%" y="783.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::to_base_index (1 samples, 0.06%)</title><rect x="64.6563%" y="757" width="0.0649%" height="15" fill="rgb(230,103,46)" fg:x="997" fg:w="1"/><text x="64.9063%" y="767.50"></text></g><g><title>hashbrown::raw::offset_from (1 samples, 0.06%)</title><rect x="64.6563%" y="741" width="0.0649%" height="15" fill="rgb(254,30,34)" fg:x="997" fg:w="1"/><text x="64.9063%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.06%)</title><rect x="64.6563%" y="725" width="0.0649%" height="15" fill="rgb(235,198,1)" fg:x="997" fg:w="1"/><text x="64.9063%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.6563%" y="709" width="0.0649%" height="15" fill="rgb(217,105,47)" fg:x="997" fg:w="1"/><text x="64.9063%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.6563%" y="693" width="0.0649%" height="15" fill="rgb(231,18,12)" fg:x="997" fg:w="1"/><text x="64.9063%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.6563%" y="677" width="0.0649%" height="15" fill="rgb(218,196,1)" fg:x="997" fg:w="1"/><text x="64.9063%" y="687.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="64.5914%" y="885" width="0.1946%" height="15" fill="rgb(210,32,3)" fg:x="996" fg:w="3"/><text x="64.8414%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="64.6563%" y="869" width="0.1297%" height="15" fill="rgb(227,178,30)" fg:x="997" fg:w="2"/><text x="64.9063%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="64.6563%" y="853" width="0.1297%" height="15" fill="rgb(231,140,27)" fg:x="997" fg:w="2"/><text x="64.9063%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="64.6563%" y="837" width="0.1297%" height="15" fill="rgb(206,66,35)" fg:x="997" fg:w="2"/><text x="64.9063%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="64.6563%" y="821" width="0.1297%" height="15" fill="rgb(212,34,2)" fg:x="997" fg:w="2"/><text x="64.9063%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (2 samples, 0.13%)</title><rect x="64.6563%" y="805" width="0.1297%" height="15" fill="rgb(207,201,33)" fg:x="997" fg:w="2"/><text x="64.9063%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (2 samples, 0.13%)</title><rect x="64.6563%" y="789" width="0.1297%" height="15" fill="rgb(221,135,32)" fg:x="997" fg:w="2"/><text x="64.9063%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="64.7211%" y="773" width="0.0649%" height="15" fill="rgb(206,77,31)" fg:x="998" fg:w="1"/><text x="64.9711%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="64.7211%" y="757" width="0.0649%" height="15" fill="rgb(252,198,50)" fg:x="998" fg:w="1"/><text x="64.9711%" y="767.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="64.7211%" y="741" width="0.0649%" height="15" fill="rgb(206,79,27)" fg:x="998" fg:w="1"/><text x="64.9711%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.7211%" y="725" width="0.0649%" height="15" fill="rgb(228,108,9)" fg:x="998" fg:w="1"/><text x="64.9711%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.7211%" y="709" width="0.0649%" height="15" fill="rgb(213,9,39)" fg:x="998" fg:w="1"/><text x="64.9711%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.7211%" y="693" width="0.0649%" height="15" fill="rgb(252,51,13)" fg:x="998" fg:w="1"/><text x="64.9711%" y="703.50"></text></g><g><title>core::mem::drop (4 samples, 0.26%)</title><rect x="64.5914%" y="917" width="0.2594%" height="15" fill="rgb(218,202,39)" fg:x="996" fg:w="4"/><text x="64.8414%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (4 samples, 0.26%)</title><rect x="64.5914%" y="901" width="0.2594%" height="15" fill="rgb(214,122,21)" fg:x="996" fg:w="4"/><text x="64.8414%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (1 samples, 0.06%)</title><rect x="64.7860%" y="885" width="0.0649%" height="15" fill="rgb(217,205,48)" fg:x="999" fg:w="1"/><text x="65.0360%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.7860%" y="869" width="0.0649%" height="15" fill="rgb(230,216,13)" fg:x="999" fg:w="1"/><text x="65.0360%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.7860%" y="853" width="0.0649%" height="15" fill="rgb(249,118,4)" fg:x="999" fg:w="1"/><text x="65.0360%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.7860%" y="837" width="0.0649%" height="15" fill="rgb(212,207,40)" fg:x="999" fg:w="1"/><text x="65.0360%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="64.8508%" y="885" width="0.1297%" height="15" fill="rgb(217,156,26)" fg:x="1000" fg:w="2"/><text x="65.1008%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="64.8508%" y="869" width="0.1297%" height="15" fill="rgb(226,86,34)" fg:x="1000" fg:w="2"/><text x="65.1008%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="64.8508%" y="853" width="0.1297%" height="15" fill="rgb(217,111,30)" fg:x="1000" fg:w="2"/><text x="65.1008%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="64.9805%" y="741" width="0.0649%" height="15" fill="rgb(228,64,18)" fg:x="1002" fg:w="1"/><text x="65.2305%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="64.9805%" y="725" width="0.0649%" height="15" fill="rgb(254,217,48)" fg:x="1002" fg:w="1"/><text x="65.2305%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="64.9805%" y="709" width="0.0649%" height="15" fill="rgb(226,156,48)" fg:x="1002" fg:w="1"/><text x="65.2305%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="65.0454%" y="581" width="0.0649%" height="15" fill="rgb(236,168,20)" fg:x="1003" fg:w="1"/><text x="65.2954%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="65.0454%" y="565" width="0.0649%" height="15" fill="rgb(239,210,33)" fg:x="1003" fg:w="1"/><text x="65.2954%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="65.0454%" y="549" width="0.0649%" height="15" fill="rgb(242,85,17)" fg:x="1003" fg:w="1"/><text x="65.2954%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.0454%" y="533" width="0.0649%" height="15" fill="rgb(221,196,15)" fg:x="1003" fg:w="1"/><text x="65.2954%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.0454%" y="517" width="0.0649%" height="15" fill="rgb(249,76,21)" fg:x="1003" fg:w="1"/><text x="65.2954%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.0454%" y="501" width="0.0649%" height="15" fill="rgb(243,67,29)" fg:x="1003" fg:w="1"/><text x="65.2954%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.1102%" y="565" width="0.0649%" height="15" fill="rgb(240,159,2)" fg:x="1004" fg:w="1"/><text x="65.3602%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.1102%" y="549" width="0.0649%" height="15" fill="rgb(244,64,3)" fg:x="1004" fg:w="1"/><text x="65.3602%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.1102%" y="533" width="0.0649%" height="15" fill="rgb(220,86,40)" fg:x="1004" fg:w="1"/><text x="65.3602%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (4 samples, 0.26%)</title><rect x="65.0454%" y="629" width="0.2594%" height="15" fill="rgb(222,194,51)" fg:x="1003" fg:w="4"/><text x="65.2954%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (4 samples, 0.26%)</title><rect x="65.0454%" y="613" width="0.2594%" height="15" fill="rgb(207,154,19)" fg:x="1003" fg:w="4"/><text x="65.2954%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4 samples, 0.26%)</title><rect x="65.0454%" y="597" width="0.2594%" height="15" fill="rgb(206,178,36)" fg:x="1003" fg:w="4"/><text x="65.2954%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (3 samples, 0.19%)</title><rect x="65.1102%" y="581" width="0.1946%" height="15" fill="rgb(218,8,24)" fg:x="1004" fg:w="3"/><text x="65.3602%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="65.1751%" y="565" width="0.1297%" height="15" fill="rgb(226,83,41)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="65.1751%" y="549" width="0.1297%" height="15" fill="rgb(224,23,22)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="65.1751%" y="533" width="0.1297%" height="15" fill="rgb(218,198,45)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="65.1751%" y="517" width="0.1297%" height="15" fill="rgb(249,147,41)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="527.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="65.1751%" y="501" width="0.1297%" height="15" fill="rgb(244,224,13)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="511.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="65.1751%" y="485" width="0.1297%" height="15" fill="rgb(225,97,27)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="65.1751%" y="469" width="0.1297%" height="15" fill="rgb(254,64,0)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.13%)</title><rect x="65.1751%" y="453" width="0.1297%" height="15" fill="rgb(208,130,43)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (2 samples, 0.13%)</title><rect x="65.1751%" y="437" width="0.1297%" height="15" fill="rgb(247,91,25)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="65.1751%" y="421" width="0.1297%" height="15" fill="rgb(215,218,42)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="65.1751%" y="405" width="0.1297%" height="15" fill="rgb(233,9,24)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="65.1751%" y="389" width="0.1297%" height="15" fill="rgb(252,105,38)" fg:x="1005" fg:w="2"/><text x="65.4251%" y="399.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="65.0454%" y="661" width="0.3243%" height="15" fill="rgb(225,40,49)" fg:x="1003" fg:w="5"/><text x="65.2954%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (5 samples, 0.32%)</title><rect x="65.0454%" y="645" width="0.3243%" height="15" fill="rgb(232,196,19)" fg:x="1003" fg:w="5"/><text x="65.2954%" y="655.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="65.3048%" y="629" width="0.0649%" height="15" fill="rgb(207,35,15)" fg:x="1007" fg:w="1"/><text x="65.5548%" y="639.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="65.3048%" y="613" width="0.0649%" height="15" fill="rgb(238,68,36)" fg:x="1007" fg:w="1"/><text x="65.5548%" y="623.50"></text></g><g><title>&lt;bincode::config::limit::Infinite as bincode::config::limit::SizeLimit&gt;::add (1 samples, 0.06%)</title><rect x="65.3048%" y="597" width="0.0649%" height="15" fill="rgb(205,158,20)" fg:x="1007" fg:w="1"/><text x="65.5548%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.3048%" y="581" width="0.0649%" height="15" fill="rgb(232,32,22)" fg:x="1007" fg:w="1"/><text x="65.5548%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.3048%" y="565" width="0.0649%" height="15" fill="rgb(210,169,6)" fg:x="1007" fg:w="1"/><text x="65.5548%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.3048%" y="549" width="0.0649%" height="15" fill="rgb(229,28,12)" fg:x="1007" fg:w="1"/><text x="65.5548%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (6 samples, 0.39%)</title><rect x="65.0454%" y="693" width="0.3891%" height="15" fill="rgb(229,78,10)" fg:x="1003" fg:w="6"/><text x="65.2954%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (6 samples, 0.39%)</title><rect x="65.0454%" y="677" width="0.3891%" height="15" fill="rgb(223,139,54)" fg:x="1003" fg:w="6"/><text x="65.2954%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.3696%" y="661" width="0.0649%" height="15" fill="rgb(207,110,4)" fg:x="1008" fg:w="1"/><text x="65.6196%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.3696%" y="645" width="0.0649%" height="15" fill="rgb(248,30,41)" fg:x="1008" fg:w="1"/><text x="65.6196%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.3696%" y="629" width="0.0649%" height="15" fill="rgb(235,54,25)" fg:x="1008" fg:w="1"/><text x="65.6196%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.4345%" y="629" width="0.0649%" height="15" fill="rgb(213,107,41)" fg:x="1009" fg:w="1"/><text x="65.6845%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.4345%" y="613" width="0.0649%" height="15" fill="rgb(237,102,9)" fg:x="1009" fg:w="1"/><text x="65.6845%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.4345%" y="597" width="0.0649%" height="15" fill="rgb(252,137,49)" fg:x="1009" fg:w="1"/><text x="65.6845%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.4994%" y="581" width="0.0649%" height="15" fill="rgb(233,202,33)" fg:x="1010" fg:w="1"/><text x="65.7494%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.4994%" y="565" width="0.0649%" height="15" fill="rgb(223,14,51)" fg:x="1010" fg:w="1"/><text x="65.7494%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.4994%" y="549" width="0.0649%" height="15" fill="rgb(248,70,23)" fg:x="1010" fg:w="1"/><text x="65.7494%" y="559.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="65.5642%" y="501" width="0.0649%" height="15" fill="rgb(209,207,47)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="65.5642%" y="485" width="0.0649%" height="15" fill="rgb(245,124,2)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="65.5642%" y="469" width="0.0649%" height="15" fill="rgb(249,208,11)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="479.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="65.5642%" y="453" width="0.0649%" height="15" fill="rgb(247,112,7)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="463.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="65.5642%" y="437" width="0.0649%" height="15" fill="rgb(209,192,31)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (1 samples, 0.06%)</title><rect x="65.5642%" y="421" width="0.0649%" height="15" fill="rgb(236,55,19)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.5642%" y="405" width="0.0649%" height="15" fill="rgb(252,89,41)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.5642%" y="389" width="0.0649%" height="15" fill="rgb(220,172,14)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.5642%" y="373" width="0.0649%" height="15" fill="rgb(252,65,2)" fg:x="1011" fg:w="1"/><text x="65.8142%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.6291%" y="469" width="0.0649%" height="15" fill="rgb(250,20,8)" fg:x="1012" fg:w="1"/><text x="65.8791%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.6291%" y="453" width="0.0649%" height="15" fill="rgb(234,149,13)" fg:x="1012" fg:w="1"/><text x="65.8791%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.6291%" y="437" width="0.0649%" height="15" fill="rgb(223,219,12)" fg:x="1012" fg:w="1"/><text x="65.8791%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="65.5642%" y="581" width="0.1946%" height="15" fill="rgb(234,13,49)" fg:x="1011" fg:w="3"/><text x="65.8142%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="65.5642%" y="565" width="0.1946%" height="15" fill="rgb(214,41,25)" fg:x="1011" fg:w="3"/><text x="65.8142%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="65.5642%" y="549" width="0.1946%" height="15" fill="rgb(232,198,52)" fg:x="1011" fg:w="3"/><text x="65.8142%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="65.5642%" y="533" width="0.1946%" height="15" fill="rgb(236,111,46)" fg:x="1011" fg:w="3"/><text x="65.8142%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="65.5642%" y="517" width="0.1946%" height="15" fill="rgb(253,30,20)" fg:x="1011" fg:w="3"/><text x="65.8142%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="65.6291%" y="501" width="0.1297%" height="15" fill="rgb(247,141,17)" fg:x="1012" fg:w="2"/><text x="65.8791%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="65.6291%" y="485" width="0.1297%" height="15" fill="rgb(214,195,21)" fg:x="1012" fg:w="2"/><text x="65.8791%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="65.6939%" y="469" width="0.0649%" height="15" fill="rgb(214,98,12)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="65.6939%" y="453" width="0.0649%" height="15" fill="rgb(239,4,26)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="65.6939%" y="437" width="0.0649%" height="15" fill="rgb(234,210,35)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="65.6939%" y="421" width="0.0649%" height="15" fill="rgb(252,178,27)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="65.6939%" y="405" width="0.0649%" height="15" fill="rgb(217,50,1)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="415.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="65.6939%" y="389" width="0.0649%" height="15" fill="rgb(233,137,5)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.6939%" y="373" width="0.0649%" height="15" fill="rgb(217,227,25)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.6939%" y="357" width="0.0649%" height="15" fill="rgb(242,89,38)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.6939%" y="341" width="0.0649%" height="15" fill="rgb(212,190,30)" fg:x="1013" fg:w="1"/><text x="65.9439%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="65.7588%" y="405" width="0.0649%" height="15" fill="rgb(222,120,8)" fg:x="1014" fg:w="1"/><text x="66.0088%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.7588%" y="389" width="0.0649%" height="15" fill="rgb(227,181,9)" fg:x="1014" fg:w="1"/><text x="66.0088%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.7588%" y="373" width="0.0649%" height="15" fill="rgb(222,125,29)" fg:x="1014" fg:w="1"/><text x="66.0088%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.7588%" y="357" width="0.0649%" height="15" fill="rgb(215,153,31)" fg:x="1014" fg:w="1"/><text x="66.0088%" y="367.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="65.8236%" y="389" width="0.0649%" height="15" fill="rgb(228,77,30)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="65.8236%" y="373" width="0.0649%" height="15" fill="rgb(226,110,9)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="65.8236%" y="357" width="0.0649%" height="15" fill="rgb(219,111,7)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="367.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="65.8236%" y="341" width="0.0649%" height="15" fill="rgb(229,167,25)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="65.8236%" y="325" width="0.0649%" height="15" fill="rgb(209,77,43)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.8236%" y="309" width="0.0649%" height="15" fill="rgb(233,70,39)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.8236%" y="293" width="0.0649%" height="15" fill="rgb(207,171,44)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.8236%" y="277" width="0.0649%" height="15" fill="rgb(244,91,6)" fg:x="1015" fg:w="1"/><text x="66.0736%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.8885%" y="357" width="0.0649%" height="15" fill="rgb(234,136,12)" fg:x="1016" fg:w="1"/><text x="66.1385%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.8885%" y="341" width="0.0649%" height="15" fill="rgb(216,210,38)" fg:x="1016" fg:w="1"/><text x="66.1385%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.8885%" y="325" width="0.0649%" height="15" fill="rgb(241,227,7)" fg:x="1016" fg:w="1"/><text x="66.1385%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="65.9533%" y="341" width="0.0649%" height="15" fill="rgb(241,222,11)" fg:x="1017" fg:w="1"/><text x="66.2033%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="65.9533%" y="325" width="0.0649%" height="15" fill="rgb(246,86,18)" fg:x="1017" fg:w="1"/><text x="66.2033%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="65.9533%" y="309" width="0.0649%" height="15" fill="rgb(224,151,49)" fg:x="1017" fg:w="1"/><text x="66.2033%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (5 samples, 0.32%)</title><rect x="65.7588%" y="469" width="0.3243%" height="15" fill="rgb(235,4,41)" fg:x="1014" fg:w="5"/><text x="66.0088%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="65.7588%" y="453" width="0.3243%" height="15" fill="rgb(218,30,52)" fg:x="1014" fg:w="5"/><text x="66.0088%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="65.7588%" y="437" width="0.3243%" height="15" fill="rgb(205,124,51)" fg:x="1014" fg:w="5"/><text x="66.0088%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (5 samples, 0.32%)</title><rect x="65.7588%" y="421" width="0.3243%" height="15" fill="rgb(237,126,51)" fg:x="1014" fg:w="5"/><text x="66.0088%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (4 samples, 0.26%)</title><rect x="65.8236%" y="405" width="0.2594%" height="15" fill="rgb(225,32,46)" fg:x="1015" fg:w="4"/><text x="66.0736%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3 samples, 0.19%)</title><rect x="65.8885%" y="389" width="0.1946%" height="15" fill="rgb(251,60,49)" fg:x="1016" fg:w="3"/><text x="66.1385%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3 samples, 0.19%)</title><rect x="65.8885%" y="373" width="0.1946%" height="15" fill="rgb(234,18,23)" fg:x="1016" fg:w="3"/><text x="66.1385%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="65.9533%" y="357" width="0.1297%" height="15" fill="rgb(234,25,23)" fg:x="1017" fg:w="2"/><text x="66.2033%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="66.0182%" y="341" width="0.0649%" height="15" fill="rgb(210,43,52)" fg:x="1018" fg:w="1"/><text x="66.2682%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="66.0182%" y="325" width="0.0649%" height="15" fill="rgb(237,198,21)" fg:x="1018" fg:w="1"/><text x="66.2682%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.0182%" y="309" width="0.0649%" height="15" fill="rgb(211,20,34)" fg:x="1018" fg:w="1"/><text x="66.2682%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.0182%" y="293" width="0.0649%" height="15" fill="rgb(221,155,50)" fg:x="1018" fg:w="1"/><text x="66.2682%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.0182%" y="277" width="0.0649%" height="15" fill="rgb(213,214,53)" fg:x="1018" fg:w="1"/><text x="66.2682%" y="287.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="66.0830%" y="277" width="0.0649%" height="15" fill="rgb(215,229,48)" fg:x="1019" fg:w="1"/><text x="66.3330%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="66.0830%" y="261" width="0.0649%" height="15" fill="rgb(243,88,5)" fg:x="1019" fg:w="1"/><text x="66.3330%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="66.0830%" y="245" width="0.0649%" height="15" fill="rgb(216,199,8)" fg:x="1019" fg:w="1"/><text x="66.3330%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.0830%" y="229" width="0.0649%" height="15" fill="rgb(241,22,4)" fg:x="1019" fg:w="1"/><text x="66.3330%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.0830%" y="213" width="0.0649%" height="15" fill="rgb(209,190,22)" fg:x="1019" fg:w="1"/><text x="66.3330%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.0830%" y="197" width="0.0649%" height="15" fill="rgb(251,138,45)" fg:x="1019" fg:w="1"/><text x="66.3330%" y="207.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.1479%" y="197" width="0.0649%" height="15" fill="rgb(219,111,22)" fg:x="1020" fg:w="1"/><text x="66.3979%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.1479%" y="181" width="0.0649%" height="15" fill="rgb(253,29,49)" fg:x="1020" fg:w="1"/><text x="66.3979%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.1479%" y="165" width="0.0649%" height="15" fill="rgb(238,129,49)" fg:x="1020" fg:w="1"/><text x="66.3979%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="65.7588%" y="485" width="0.5188%" height="15" fill="rgb(240,26,41)" fg:x="1014" fg:w="8"/><text x="66.0088%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="66.0830%" y="469" width="0.1946%" height="15" fill="rgb(221,47,33)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="66.0830%" y="453" width="0.1946%" height="15" fill="rgb(216,200,17)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="66.0830%" y="437" width="0.1946%" height="15" fill="rgb(230,151,26)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="66.0830%" y="421" width="0.1946%" height="15" fill="rgb(242,182,16)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="66.0830%" y="405" width="0.1946%" height="15" fill="rgb(236,35,53)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="66.0830%" y="389" width="0.1946%" height="15" fill="rgb(214,180,28)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="66.0830%" y="373" width="0.1946%" height="15" fill="rgb(208,173,36)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="66.0830%" y="357" width="0.1946%" height="15" fill="rgb(218,39,15)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="66.0830%" y="341" width="0.1946%" height="15" fill="rgb(213,145,15)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="66.0830%" y="325" width="0.1946%" height="15" fill="rgb(242,110,37)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="66.0830%" y="309" width="0.1946%" height="15" fill="rgb(247,146,22)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="66.0830%" y="293" width="0.1946%" height="15" fill="rgb(215,191,7)" fg:x="1019" fg:w="3"/><text x="66.3330%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="66.1479%" y="277" width="0.1297%" height="15" fill="rgb(240,158,1)" fg:x="1020" fg:w="2"/><text x="66.3979%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="66.1479%" y="261" width="0.1297%" height="15" fill="rgb(241,78,32)" fg:x="1020" fg:w="2"/><text x="66.3979%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="66.1479%" y="245" width="0.1297%" height="15" fill="rgb(248,83,10)" fg:x="1020" fg:w="2"/><text x="66.3979%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="66.1479%" y="229" width="0.1297%" height="15" fill="rgb(241,52,0)" fg:x="1020" fg:w="2"/><text x="66.3979%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="66.1479%" y="213" width="0.1297%" height="15" fill="rgb(238,37,13)" fg:x="1020" fg:w="2"/><text x="66.3979%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="66.2127%" y="197" width="0.0649%" height="15" fill="rgb(242,194,17)" fg:x="1021" fg:w="1"/><text x="66.4627%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="66.2127%" y="181" width="0.0649%" height="15" fill="rgb(236,96,3)" fg:x="1021" fg:w="1"/><text x="66.4627%" y="191.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="66.2127%" y="165" width="0.0649%" height="15" fill="rgb(235,148,34)" fg:x="1021" fg:w="1"/><text x="66.4627%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.2127%" y="149" width="0.0649%" height="15" fill="rgb(254,12,11)" fg:x="1021" fg:w="1"/><text x="66.4627%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.2127%" y="133" width="0.0649%" height="15" fill="rgb(207,31,54)" fg:x="1021" fg:w="1"/><text x="66.4627%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.2127%" y="117" width="0.0649%" height="15" fill="rgb(252,14,28)" fg:x="1021" fg:w="1"/><text x="66.4627%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (20 samples, 1.30%)</title><rect x="65.0454%" y="709" width="1.2970%" height="15" fill="rgb(252,108,36)" fg:x="1003" fg:w="20"/><text x="65.2954%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (14 samples, 0.91%)</title><rect x="65.4345%" y="693" width="0.9079%" height="15" fill="rgb(214,149,7)" fg:x="1009" fg:w="14"/><text x="65.6845%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (14 samples, 0.91%)</title><rect x="65.4345%" y="677" width="0.9079%" height="15" fill="rgb(243,94,12)" fg:x="1009" fg:w="14"/><text x="65.6845%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (14 samples, 0.91%)</title><rect x="65.4345%" y="661" width="0.9079%" height="15" fill="rgb(208,36,10)" fg:x="1009" fg:w="14"/><text x="65.6845%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (14 samples, 0.91%)</title><rect x="65.4345%" y="645" width="0.9079%" height="15" fill="rgb(233,185,52)" fg:x="1009" fg:w="14"/><text x="65.6845%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (13 samples, 0.84%)</title><rect x="65.4994%" y="629" width="0.8431%" height="15" fill="rgb(234,50,45)" fg:x="1010" fg:w="13"/><text x="65.7494%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (13 samples, 0.84%)</title><rect x="65.4994%" y="613" width="0.8431%" height="15" fill="rgb(228,92,54)" fg:x="1010" fg:w="13"/><text x="65.7494%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13 samples, 0.84%)</title><rect x="65.4994%" y="597" width="0.8431%" height="15" fill="rgb(224,85,25)" fg:x="1010" fg:w="13"/><text x="65.7494%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="65.7588%" y="581" width="0.5837%" height="15" fill="rgb(246,1,45)" fg:x="1014" fg:w="9"/><text x="66.0088%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="65.7588%" y="565" width="0.5837%" height="15" fill="rgb(240,66,23)" fg:x="1014" fg:w="9"/><text x="66.0088%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="65.7588%" y="549" width="0.5837%" height="15" fill="rgb(222,96,27)" fg:x="1014" fg:w="9"/><text x="66.0088%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="65.7588%" y="533" width="0.5837%" height="15" fill="rgb(212,136,10)" fg:x="1014" fg:w="9"/><text x="66.0088%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="65.7588%" y="517" width="0.5837%" height="15" fill="rgb(226,192,50)" fg:x="1014" fg:w="9"/><text x="66.0088%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="65.7588%" y="501" width="0.5837%" height="15" fill="rgb(241,182,31)" fg:x="1014" fg:w="9"/><text x="66.0088%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.2776%" y="485" width="0.0649%" height="15" fill="rgb(219,205,47)" fg:x="1022" fg:w="1"/><text x="66.5276%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.2776%" y="469" width="0.0649%" height="15" fill="rgb(207,96,14)" fg:x="1022" fg:w="1"/><text x="66.5276%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.2776%" y="453" width="0.0649%" height="15" fill="rgb(216,119,9)" fg:x="1022" fg:w="1"/><text x="66.5276%" y="463.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (24 samples, 1.56%)</title><rect x="64.8508%" y="917" width="1.5564%" height="15" fill="rgb(235,62,36)" fg:x="1000" fg:w="24"/><text x="65.1008%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (24 samples, 1.56%)</title><rect x="64.8508%" y="901" width="1.5564%" height="15" fill="rgb(214,41,27)" fg:x="1000" fg:w="24"/><text x="65.1008%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (22 samples, 1.43%)</title><rect x="64.9805%" y="885" width="1.4267%" height="15" fill="rgb(214,174,37)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (22 samples, 1.43%)</title><rect x="64.9805%" y="869" width="1.4267%" height="15" fill="rgb(212,11,25)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="879.50"></text></g><g><title>bincode::internal::deserialize (22 samples, 1.43%)</title><rect x="64.9805%" y="853" width="1.4267%" height="15" fill="rgb(217,71,35)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (22 samples, 1.43%)</title><rect x="64.9805%" y="837" width="1.4267%" height="15" fill="rgb(234,152,9)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (22 samples, 1.43%)</title><rect x="64.9805%" y="821" width="1.4267%" height="15" fill="rgb(228,32,51)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (22 samples, 1.43%)</title><rect x="64.9805%" y="805" width="1.4267%" height="15" fill="rgb(209,14,47)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (22 samples, 1.43%)</title><rect x="64.9805%" y="789" width="1.4267%" height="15" fill="rgb(218,201,17)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (22 samples, 1.43%)</title><rect x="64.9805%" y="773" width="1.4267%" height="15" fill="rgb(218,98,15)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (22 samples, 1.43%)</title><rect x="64.9805%" y="757" width="1.4267%" height="15" fill="rgb(233,202,29)" fg:x="1002" fg:w="22"/><text x="65.2305%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (21 samples, 1.36%)</title><rect x="65.0454%" y="741" width="1.3619%" height="15" fill="rgb(207,196,44)" fg:x="1003" fg:w="21"/><text x="65.2954%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (21 samples, 1.36%)</title><rect x="65.0454%" y="725" width="1.3619%" height="15" fill="rgb(218,63,34)" fg:x="1003" fg:w="21"/><text x="65.2954%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.3424%" y="709" width="0.0649%" height="15" fill="rgb(209,10,5)" fg:x="1023" fg:w="1"/><text x="66.5924%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.3424%" y="693" width="0.0649%" height="15" fill="rgb(224,36,28)" fg:x="1023" fg:w="1"/><text x="66.5924%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.3424%" y="677" width="0.0649%" height="15" fill="rgb(249,178,7)" fg:x="1023" fg:w="1"/><text x="66.5924%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.06%)</title><rect x="66.4073%" y="869" width="0.0649%" height="15" fill="rgb(253,163,10)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="879.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.06%)</title><rect x="66.4073%" y="853" width="0.0649%" height="15" fill="rgb(245,67,46)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="863.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="66.4073%" y="837" width="0.0649%" height="15" fill="rgb(225,14,18)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.06%)</title><rect x="66.4073%" y="821" width="0.0649%" height="15" fill="rgb(217,41,54)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="831.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.06%)</title><rect x="66.4073%" y="805" width="0.0649%" height="15" fill="rgb(222,111,11)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.4073%" y="789" width="0.0649%" height="15" fill="rgb(211,85,31)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.4073%" y="773" width="0.0649%" height="15" fill="rgb(223,29,26)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.4073%" y="757" width="0.0649%" height="15" fill="rgb(236,124,50)" fg:x="1024" fg:w="1"/><text x="66.6573%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="66.4721%" y="565" width="0.0649%" height="15" fill="rgb(219,148,15)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.06%)</title><rect x="66.4721%" y="549" width="0.0649%" height="15" fill="rgb(248,159,33)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="66.4721%" y="533" width="0.0649%" height="15" fill="rgb(252,65,8)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="543.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="66.4721%" y="517" width="0.0649%" height="15" fill="rgb(236,45,7)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="66.4721%" y="501" width="0.0649%" height="15" fill="rgb(244,3,48)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="66.4721%" y="485" width="0.0649%" height="15" fill="rgb(224,123,53)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="495.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (1 samples, 0.06%)</title><rect x="66.4721%" y="469" width="0.0649%" height="15" fill="rgb(223,173,15)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="479.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.06%)</title><rect x="66.4721%" y="453" width="0.0649%" height="15" fill="rgb(254,181,5)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.4721%" y="437" width="0.0649%" height="15" fill="rgb(243,124,33)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.4721%" y="421" width="0.0649%" height="15" fill="rgb(253,220,11)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.4721%" y="405" width="0.0649%" height="15" fill="rgb(217,14,4)" fg:x="1025" fg:w="1"/><text x="66.7221%" y="415.50"></text></g><g><title>redb::tree_store::page_store::layout::RegionLayout::calculate (2 samples, 0.13%)</title><rect x="66.4721%" y="837" width="0.1297%" height="15" fill="rgb(209,196,12)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="847.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::header_pages_expensive (2 samples, 0.13%)</title><rect x="66.4721%" y="821" width="0.1297%" height="15" fill="rgb(237,108,29)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="831.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="66.4721%" y="805" width="0.1297%" height="15" fill="rgb(216,173,20)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::to_vec (2 samples, 0.13%)</title><rect x="66.4721%" y="789" width="0.1297%" height="15" fill="rgb(245,27,6)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.13%)</title><rect x="66.4721%" y="773" width="0.1297%" height="15" fill="rgb(210,181,20)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.13%)</title><rect x="66.4721%" y="757" width="0.1297%" height="15" fill="rgb(235,213,1)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.13%)</title><rect x="66.4721%" y="741" width="0.1297%" height="15" fill="rgb(239,68,43)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.13%)</title><rect x="66.4721%" y="725" width="0.1297%" height="15" fill="rgb(254,137,43)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="66.4721%" y="709" width="0.1297%" height="15" fill="rgb(252,170,38)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="66.4721%" y="693" width="0.1297%" height="15" fill="rgb(234,21,42)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.13%)</title><rect x="66.4721%" y="677" width="0.1297%" height="15" fill="rgb(216,145,40)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="66.4721%" y="661" width="0.1297%" height="15" fill="rgb(251,73,9)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="66.4721%" y="645" width="0.1297%" height="15" fill="rgb(242,54,6)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.13%)</title><rect x="66.4721%" y="629" width="0.1297%" height="15" fill="rgb(239,70,7)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="639.50"></text></g><g><title>redb::tree_store::page_store::bitmap::BtreeBitmap::to_vec::{{closure}} (2 samples, 0.13%)</title><rect x="66.4721%" y="613" width="0.1297%" height="15" fill="rgb(216,159,35)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="623.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="66.4721%" y="597" width="0.1297%" height="15" fill="rgb(224,50,39)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="66.4721%" y="581" width="0.1297%" height="15" fill="rgb(235,9,35)" fg:x="1025" fg:w="2"/><text x="66.7221%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.5370%" y="565" width="0.0649%" height="15" fill="rgb(239,34,21)" fg:x="1026" fg:w="1"/><text x="66.7870%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.5370%" y="549" width="0.0649%" height="15" fill="rgb(218,162,43)" fg:x="1026" fg:w="1"/><text x="66.7870%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.5370%" y="533" width="0.0649%" height="15" fill="rgb(219,89,33)" fg:x="1026" fg:w="1"/><text x="66.7870%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.6018%" y="725" width="0.0649%" height="15" fill="rgb(226,125,37)" fg:x="1027" fg:w="1"/><text x="66.8518%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.6018%" y="709" width="0.0649%" height="15" fill="rgb(233,149,30)" fg:x="1027" fg:w="1"/><text x="66.8518%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.6018%" y="693" width="0.0649%" height="15" fill="rgb(236,8,18)" fg:x="1027" fg:w="1"/><text x="66.8518%" y="703.50"></text></g><g><title>redb::tree_store::btree_base::LeafBuilder::build_split (5 samples, 0.32%)</title><rect x="66.4073%" y="917" width="0.3243%" height="15" fill="rgb(205,176,9)" fg:x="1024" fg:w="5"/><text x="66.6573%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate (5 samples, 0.32%)</title><rect x="66.4073%" y="901" width="0.3243%" height="15" fill="rgb(252,103,44)" fg:x="1024" fg:w="5"/><text x="66.6573%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::allocate_helper (5 samples, 0.32%)</title><rect x="66.4073%" y="885" width="0.3243%" height="15" fill="rgb(207,68,53)" fg:x="1024" fg:w="5"/><text x="66.6573%" y="895.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::grow (4 samples, 0.26%)</title><rect x="66.4721%" y="869" width="0.2594%" height="15" fill="rgb(218,193,48)" fg:x="1025" fg:w="4"/><text x="66.7221%" y="879.50"></text></g><g><title>redb::tree_store::page_store::layout::DatabaseLayout::calculate (4 samples, 0.26%)</title><rect x="66.4721%" y="853" width="0.2594%" height="15" fill="rgb(234,121,52)" fg:x="1025" fg:w="4"/><text x="66.7221%" y="863.50"></text></g><g><title>redb::tree_store::page_store::layout::RegionLayout::full_region_layout (2 samples, 0.13%)</title><rect x="66.6018%" y="837" width="0.1297%" height="15" fill="rgb(227,218,49)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="847.50"></text></g><g><title>redb::tree_store::page_store::region::RegionHeader::header_pages_expensive (2 samples, 0.13%)</title><rect x="66.6018%" y="821" width="0.1297%" height="15" fill="rgb(221,8,7)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="831.50"></text></g><g><title>redb::tree_store::page_store::buddy_allocator::BuddyAllocator::to_vec (2 samples, 0.13%)</title><rect x="66.6018%" y="805" width="0.1297%" height="15" fill="rgb(217,151,36)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="815.50"></text></g><g><title>redb::tree_store::page_store::bitmap::U64GroupedBitmap::to_vec (2 samples, 0.13%)</title><rect x="66.6018%" y="789" width="0.1297%" height="15" fill="rgb(213,71,5)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.13%)</title><rect x="66.6018%" y="773" width="0.1297%" height="15" fill="rgb(225,145,43)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="66.6018%" y="757" width="0.1297%" height="15" fill="rgb(235,118,19)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.13%)</title><rect x="66.6018%" y="741" width="0.1297%" height="15" fill="rgb(214,102,36)" fg:x="1027" fg:w="2"/><text x="66.8518%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.06%)</title><rect x="66.6667%" y="725" width="0.0649%" height="15" fill="rgb(220,56,43)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="735.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="66.6667%" y="709" width="0.0649%" height="15" fill="rgb(246,136,46)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.06%)</title><rect x="66.6667%" y="693" width="0.0649%" height="15" fill="rgb(249,99,12)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="66.6667%" y="677" width="0.0649%" height="15" fill="rgb(224,31,42)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.6667%" y="661" width="0.0649%" height="15" fill="rgb(208,96,21)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.6667%" y="645" width="0.0649%" height="15" fill="rgb(237,229,7)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.6667%" y="629" width="0.0649%" height="15" fill="rgb(210,12,6)" fg:x="1028" fg:w="1"/><text x="66.9167%" y="639.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="66.7315%" y="901" width="0.0649%" height="15" fill="rgb(240,9,34)" fg:x="1029" fg:w="1"/><text x="66.9815%" y="911.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;usize&gt; for isize&gt;::try_from (1 samples, 0.06%)</title><rect x="66.7315%" y="885" width="0.0649%" height="15" fill="rgb(211,68,37)" fg:x="1029" fg:w="1"/><text x="66.9815%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.7315%" y="869" width="0.0649%" height="15" fill="rgb(249,138,50)" fg:x="1029" fg:w="1"/><text x="66.9815%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.7315%" y="853" width="0.0649%" height="15" fill="rgb(243,185,40)" fg:x="1029" fg:w="1"/><text x="66.9815%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.7315%" y="837" width="0.0649%" height="15" fill="rgb(242,92,35)" fg:x="1029" fg:w="1"/><text x="66.9815%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="66.7964%" y="901" width="0.0649%" height="15" fill="rgb(244,98,5)" fg:x="1030" fg:w="1"/><text x="67.0464%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="66.7964%" y="885" width="0.0649%" height="15" fill="rgb(228,186,29)" fg:x="1030" fg:w="1"/><text x="67.0464%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="66.7964%" y="869" width="0.0649%" height="15" fill="rgb(253,7,44)" fg:x="1030" fg:w="1"/><text x="67.0464%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.19%)</title><rect x="66.8612%" y="901" width="0.1946%" height="15" fill="rgb(216,11,45)" fg:x="1031" fg:w="3"/><text x="67.1112%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="66.8612%" y="885" width="0.1946%" height="15" fill="rgb(205,67,3)" fg:x="1031" fg:w="3"/><text x="67.1112%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="66.8612%" y="869" width="0.1946%" height="15" fill="rgb(250,18,3)" fg:x="1031" fg:w="3"/><text x="67.1112%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="66.8612%" y="853" width="0.1946%" height="15" fill="rgb(241,222,43)" fg:x="1031" fg:w="3"/><text x="67.1112%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="67.0558%" y="869" width="0.0649%" height="15" fill="rgb(233,115,3)" fg:x="1034" fg:w="1"/><text x="67.3058%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="67.0558%" y="853" width="0.0649%" height="15" fill="rgb(215,165,25)" fg:x="1034" fg:w="1"/><text x="67.3058%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="67.0558%" y="837" width="0.0649%" height="15" fill="rgb(234,179,6)" fg:x="1034" fg:w="1"/><text x="67.3058%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="67.0558%" y="821" width="0.0649%" height="15" fill="rgb(215,82,23)" fg:x="1034" fg:w="1"/><text x="67.3058%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="67.0558%" y="901" width="0.1297%" height="15" fill="rgb(211,47,18)" fg:x="1034" fg:w="2"/><text x="67.3058%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="67.0558%" y="885" width="0.1297%" height="15" fill="rgb(248,17,9)" fg:x="1034" fg:w="2"/><text x="67.3058%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="67.1206%" y="869" width="0.0649%" height="15" fill="rgb(210,212,12)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="879.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="67.1206%" y="853" width="0.0649%" height="15" fill="rgb(230,135,45)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="67.1206%" y="837" width="0.0649%" height="15" fill="rgb(214,121,41)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (1 samples, 0.06%)</title><rect x="67.1206%" y="821" width="0.0649%" height="15" fill="rgb(239,165,45)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="67.1206%" y="805" width="0.0649%" height="15" fill="rgb(214,85,51)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="67.1206%" y="789" width="0.0649%" height="15" fill="rgb(223,90,27)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="67.1206%" y="773" width="0.0649%" height="15" fill="rgb(244,84,11)" fg:x="1035" fg:w="1"/><text x="67.3706%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="67.1855%" y="869" width="0.1297%" height="15" fill="rgb(253,41,47)" fg:x="1036" fg:w="2"/><text x="67.4355%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="67.1855%" y="853" width="0.1297%" height="15" fill="rgb(232,39,5)" fg:x="1036" fg:w="2"/><text x="67.4355%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="67.1855%" y="837" width="0.1297%" height="15" fill="rgb(211,93,4)" fg:x="1036" fg:w="2"/><text x="67.4355%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="67.3152%" y="837" width="0.1946%" height="15" fill="rgb(219,50,49)" fg:x="1038" fg:w="3"/><text x="67.5652%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="67.3152%" y="821" width="0.1946%" height="15" fill="rgb(232,80,19)" fg:x="1038" fg:w="3"/><text x="67.5652%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="67.3152%" y="805" width="0.1946%" height="15" fill="rgb(215,227,39)" fg:x="1038" fg:w="3"/><text x="67.5652%" y="815.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (4 samples, 0.26%)</title><rect x="67.3152%" y="869" width="0.2594%" height="15" fill="rgb(211,99,12)" fg:x="1038" fg:w="4"/><text x="67.5652%" y="879.50"></text></g><g><title> N]&gt;::try_from (4 samples, 0.26%)</title><rect x="67.3152%" y="853" width="0.2594%" height="15" fill="rgb(214,158,5)" fg:x="1038" fg:w="4"/><text x="67.5652%" y="863.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="67.5097%" y="837" width="0.0649%" height="15" fill="rgb(242,19,53)" fg:x="1041" fg:w="1"/><text x="67.7597%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="67.5097%" y="821" width="0.0649%" height="15" fill="rgb(208,18,20)" fg:x="1041" fg:w="1"/><text x="67.7597%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="67.5097%" y="805" width="0.0649%" height="15" fill="rgb(250,44,11)" fg:x="1041" fg:w="1"/><text x="67.7597%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="67.5097%" y="789" width="0.0649%" height="15" fill="rgb(238,159,13)" fg:x="1041" fg:w="1"/><text x="67.7597%" y="799.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8 samples, 0.52%)</title><rect x="67.1855%" y="885" width="0.5188%" height="15" fill="rgb(231,74,18)" fg:x="1036" fg:w="8"/><text x="67.4355%" y="895.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;isize&gt; for u32&gt;::try_from (2 samples, 0.13%)</title><rect x="67.5746%" y="869" width="0.1297%" height="15" fill="rgb(229,219,45)" fg:x="1042" fg:w="2"/><text x="67.8246%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="67.5746%" y="853" width="0.1297%" height="15" fill="rgb(210,221,1)" fg:x="1042" fg:w="2"/><text x="67.8246%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="67.5746%" y="837" width="0.1297%" height="15" fill="rgb(209,60,51)" fg:x="1042" fg:w="2"/><text x="67.8246%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="67.5746%" y="821" width="0.1297%" height="15" fill="rgb(252,97,34)" fg:x="1042" fg:w="2"/><text x="67.8246%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (7 samples, 0.45%)</title><rect x="67.7043%" y="885" width="0.4540%" height="15" fill="rgb(243,211,37)" fg:x="1044" fg:w="7"/><text x="67.9543%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (7 samples, 0.45%)</title><rect x="67.7043%" y="869" width="0.4540%" height="15" fill="rgb(210,229,37)" fg:x="1044" fg:w="7"/><text x="67.9543%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (7 samples, 0.45%)</title><rect x="67.7043%" y="853" width="0.4540%" height="15" fill="rgb(220,208,43)" fg:x="1044" fg:w="7"/><text x="67.9543%" y="863.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;u32&gt; for isize&gt;::try_from (1 samples, 0.06%)</title><rect x="68.1582%" y="885" width="0.0649%" height="15" fill="rgb(218,118,50)" fg:x="1051" fg:w="1"/><text x="68.4082%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="68.1582%" y="869" width="0.0649%" height="15" fill="rgb(254,169,52)" fg:x="1051" fg:w="1"/><text x="68.4082%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="68.1582%" y="853" width="0.0649%" height="15" fill="rgb(221,214,37)" fg:x="1051" fg:w="1"/><text x="68.4082%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="68.1582%" y="837" width="0.0649%" height="15" fill="rgb(254,186,32)" fg:x="1051" fg:w="1"/><text x="68.4082%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="68.2231%" y="869" width="0.0649%" height="15" fill="rgb(215,144,43)" fg:x="1052" fg:w="1"/><text x="68.4731%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="68.2231%" y="853" width="0.0649%" height="15" fill="rgb(252,21,46)" fg:x="1052" fg:w="1"/><text x="68.4731%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="68.2231%" y="837" width="0.0649%" height="15" fill="rgb(207,166,46)" fg:x="1052" fg:w="1"/><text x="68.4731%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5 samples, 0.32%)</title><rect x="68.2879%" y="837" width="0.3243%" height="15" fill="rgb(253,37,49)" fg:x="1053" fg:w="5"/><text x="68.5379%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (5 samples, 0.32%)</title><rect x="68.2879%" y="821" width="0.3243%" height="15" fill="rgb(222,97,20)" fg:x="1053" fg:w="5"/><text x="68.5379%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (5 samples, 0.32%)</title><rect x="68.2879%" y="805" width="0.3243%" height="15" fill="rgb(244,181,26)" fg:x="1053" fg:w="5"/><text x="68.5379%" y="815.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="68.6122%" y="837" width="0.0649%" height="15" fill="rgb(241,22,29)" fg:x="1058" fg:w="1"/><text x="68.8622%" y="847.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="68.6122%" y="821" width="0.0649%" height="15" fill="rgb(206,200,43)" fg:x="1058" fg:w="1"/><text x="68.8622%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="68.6122%" y="805" width="0.0649%" height="15" fill="rgb(226,224,43)" fg:x="1058" fg:w="1"/><text x="68.8622%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="68.6122%" y="789" width="0.0649%" height="15" fill="rgb(253,129,28)" fg:x="1058" fg:w="1"/><text x="68.8622%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="68.6122%" y="773" width="0.0649%" height="15" fill="rgb(252,99,33)" fg:x="1058" fg:w="1"/><text x="68.8622%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (8 samples, 0.52%)</title><rect x="68.2231%" y="885" width="0.5188%" height="15" fill="rgb(208,123,45)" fg:x="1052" fg:w="8"/><text x="68.4731%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.45%)</title><rect x="68.2879%" y="869" width="0.4540%" height="15" fill="rgb(251,106,12)" fg:x="1053" fg:w="7"/><text x="68.5379%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (7 samples, 0.45%)</title><rect x="68.2879%" y="853" width="0.4540%" height="15" fill="rgb(240,209,35)" fg:x="1053" fg:w="7"/><text x="68.5379%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="68.6770%" y="837" width="0.0649%" height="15" fill="rgb(214,52,50)" fg:x="1059" fg:w="1"/><text x="68.9270%" y="847.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="68.6770%" y="821" width="0.0649%" height="15" fill="rgb(234,119,4)" fg:x="1059" fg:w="1"/><text x="68.9270%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (1 samples, 0.06%)</title><rect x="68.6770%" y="805" width="0.0649%" height="15" fill="rgb(228,181,36)" fg:x="1059" fg:w="1"/><text x="68.9270%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="68.6770%" y="789" width="0.0649%" height="15" fill="rgb(213,171,42)" fg:x="1059" fg:w="1"/><text x="68.9270%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="68.6770%" y="773" width="0.0649%" height="15" fill="rgb(239,14,41)" fg:x="1059" fg:w="1"/><text x="68.9270%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="68.6770%" y="757" width="0.0649%" height="15" fill="rgb(239,111,46)" fg:x="1059" fg:w="1"/><text x="68.9270%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="68.7419%" y="821" width="0.1946%" height="15" fill="rgb(214,72,7)" fg:x="1060" fg:w="3"/><text x="68.9919%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="68.7419%" y="805" width="0.1946%" height="15" fill="rgb(221,114,1)" fg:x="1060" fg:w="3"/><text x="68.9919%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="68.7419%" y="789" width="0.1946%" height="15" fill="rgb(213,143,14)" fg:x="1060" fg:w="3"/><text x="68.9919%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="68.9364%" y="789" width="0.1297%" height="15" fill="rgb(220,221,53)" fg:x="1063" fg:w="2"/><text x="69.1864%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="68.9364%" y="773" width="0.1297%" height="15" fill="rgb(236,189,27)" fg:x="1063" fg:w="2"/><text x="69.1864%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="68.9364%" y="757" width="0.1297%" height="15" fill="rgb(252,139,49)" fg:x="1063" fg:w="2"/><text x="69.1864%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (6 samples, 0.39%)</title><rect x="68.9364%" y="821" width="0.3891%" height="15" fill="rgb(231,158,33)" fg:x="1063" fg:w="6"/><text x="69.1864%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (6 samples, 0.39%)</title><rect x="68.9364%" y="805" width="0.3891%" height="15" fill="rgb(207,201,15)" fg:x="1063" fg:w="6"/><text x="69.1864%" y="815.50"></text></g><g><title>core::fmt::Arguments::new_const (4 samples, 0.26%)</title><rect x="69.0661%" y="789" width="0.2594%" height="15" fill="rgb(218,43,48)" fg:x="1065" fg:w="4"/><text x="69.3161%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (4 samples, 0.26%)</title><rect x="69.0661%" y="773" width="0.2594%" height="15" fill="rgb(244,63,52)" fg:x="1065" fg:w="4"/><text x="69.3161%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (4 samples, 0.26%)</title><rect x="69.0661%" y="757" width="0.2594%" height="15" fill="rgb(236,60,17)" fg:x="1065" fg:w="4"/><text x="69.3161%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (4 samples, 0.26%)</title><rect x="69.0661%" y="741" width="0.2594%" height="15" fill="rgb(205,206,29)" fg:x="1065" fg:w="4"/><text x="69.3161%" y="751.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_key_end (34 samples, 2.20%)</title><rect x="67.1855%" y="901" width="2.2049%" height="15" fill="rgb(205,209,35)" fg:x="1036" fg:w="34"/><text x="67.4355%" y="911.50">r..</text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (10 samples, 0.65%)</title><rect x="68.7419%" y="885" width="0.6485%" height="15" fill="rgb(227,112,14)" fg:x="1060" fg:w="10"/><text x="68.9919%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (10 samples, 0.65%)</title><rect x="68.7419%" y="869" width="0.6485%" height="15" fill="rgb(248,151,9)" fg:x="1060" fg:w="10"/><text x="68.9919%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (10 samples, 0.65%)</title><rect x="68.7419%" y="853" width="0.6485%" height="15" fill="rgb(247,45,40)" fg:x="1060" fg:w="10"/><text x="68.9919%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (10 samples, 0.65%)</title><rect x="68.7419%" y="837" width="0.6485%" height="15" fill="rgb(232,185,16)" fg:x="1060" fg:w="10"/><text x="68.9919%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="69.3256%" y="821" width="0.0649%" height="15" fill="rgb(215,45,44)" fg:x="1069" fg:w="1"/><text x="69.5756%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="69.3256%" y="805" width="0.0649%" height="15" fill="rgb(206,69,32)" fg:x="1069" fg:w="1"/><text x="69.5756%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="69.3256%" y="789" width="0.0649%" height="15" fill="rgb(233,98,50)" fg:x="1069" fg:w="1"/><text x="69.5756%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="69.3256%" y="773" width="0.0649%" height="15" fill="rgb(232,217,52)" fg:x="1069" fg:w="1"/><text x="69.5756%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="69.3256%" y="757" width="0.0649%" height="15" fill="rgb(250,42,51)" fg:x="1069" fg:w="1"/><text x="69.5756%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="69.3904%" y="885" width="0.1946%" height="15" fill="rgb(241,200,26)" fg:x="1070" fg:w="3"/><text x="69.6404%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="69.3904%" y="869" width="0.1946%" height="15" fill="rgb(207,10,32)" fg:x="1070" fg:w="3"/><text x="69.6404%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="69.3904%" y="853" width="0.1946%" height="15" fill="rgb(214,63,15)" fg:x="1070" fg:w="3"/><text x="69.6404%" y="863.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="69.5850%" y="885" width="0.0649%" height="15" fill="rgb(234,176,14)" fg:x="1073" fg:w="1"/><text x="69.8350%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="69.5850%" y="869" width="0.0649%" height="15" fill="rgb(226,104,52)" fg:x="1073" fg:w="1"/><text x="69.8350%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="69.5850%" y="853" width="0.0649%" height="15" fill="rgb(211,222,1)" fg:x="1073" fg:w="1"/><text x="69.8350%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="69.5850%" y="837" width="0.0649%" height="15" fill="rgb(237,7,3)" fg:x="1073" fg:w="1"/><text x="69.8350%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.19%)</title><rect x="69.6498%" y="885" width="0.1946%" height="15" fill="rgb(218,143,7)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.19%)</title><rect x="69.6498%" y="869" width="0.1946%" height="15" fill="rgb(208,25,22)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.19%)</title><rect x="69.6498%" y="853" width="0.1946%" height="15" fill="rgb(228,127,16)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="863.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (3 samples, 0.19%)</title><rect x="69.6498%" y="837" width="0.1946%" height="15" fill="rgb(237,86,27)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="847.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (3 samples, 0.19%)</title><rect x="69.6498%" y="821" width="0.1946%" height="15" fill="rgb(207,125,19)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.19%)</title><rect x="69.6498%" y="805" width="0.1946%" height="15" fill="rgb(243,195,0)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.19%)</title><rect x="69.6498%" y="789" width="0.1946%" height="15" fill="rgb(230,95,18)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.19%)</title><rect x="69.6498%" y="773" width="0.1946%" height="15" fill="rgb(232,157,21)" fg:x="1074" fg:w="3"/><text x="69.8998%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (6 samples, 0.39%)</title><rect x="69.8444%" y="869" width="0.3891%" height="15" fill="rgb(212,120,50)" fg:x="1077" fg:w="6"/><text x="70.0944%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (6 samples, 0.39%)</title><rect x="69.8444%" y="853" width="0.3891%" height="15" fill="rgb(222,204,44)" fg:x="1077" fg:w="6"/><text x="70.0944%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (6 samples, 0.39%)</title><rect x="69.8444%" y="837" width="0.3891%" height="15" fill="rgb(236,6,33)" fg:x="1077" fg:w="6"/><text x="70.0944%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (7 samples, 0.45%)</title><rect x="69.8444%" y="885" width="0.4540%" height="15" fill="rgb(247,11,38)" fg:x="1077" fg:w="7"/><text x="70.0944%" y="895.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="70.2335%" y="869" width="0.0649%" height="15" fill="rgb(215,111,0)" fg:x="1083" fg:w="1"/><text x="70.4835%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.2335%" y="853" width="0.0649%" height="15" fill="rgb(211,65,46)" fg:x="1083" fg:w="1"/><text x="70.4835%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.2335%" y="837" width="0.0649%" height="15" fill="rgb(216,5,12)" fg:x="1083" fg:w="1"/><text x="70.4835%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.2335%" y="821" width="0.0649%" height="15" fill="rgb(226,7,2)" fg:x="1083" fg:w="1"/><text x="70.4835%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.2983%" y="821" width="0.0649%" height="15" fill="rgb(242,116,12)" fg:x="1084" fg:w="1"/><text x="70.5483%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.2983%" y="805" width="0.0649%" height="15" fill="rgb(249,209,7)" fg:x="1084" fg:w="1"/><text x="70.5483%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.2983%" y="789" width="0.0649%" height="15" fill="rgb(232,73,17)" fg:x="1084" fg:w="1"/><text x="70.5483%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="70.3632%" y="805" width="0.1297%" height="15" fill="rgb(214,13,32)" fg:x="1085" fg:w="2"/><text x="70.6132%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="70.3632%" y="789" width="0.1297%" height="15" fill="rgb(221,125,10)" fg:x="1085" fg:w="2"/><text x="70.6132%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="70.3632%" y="773" width="0.1297%" height="15" fill="rgb(246,7,44)" fg:x="1085" fg:w="2"/><text x="70.6132%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (3 samples, 0.19%)</title><rect x="70.3632%" y="821" width="0.1946%" height="15" fill="rgb(239,18,35)" fg:x="1085" fg:w="3"/><text x="70.6132%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="70.4929%" y="805" width="0.0649%" height="15" fill="rgb(250,222,16)" fg:x="1087" fg:w="1"/><text x="70.7429%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.4929%" y="789" width="0.0649%" height="15" fill="rgb(219,100,8)" fg:x="1087" fg:w="1"/><text x="70.7429%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.4929%" y="773" width="0.0649%" height="15" fill="rgb(240,62,13)" fg:x="1087" fg:w="1"/><text x="70.7429%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.4929%" y="757" width="0.0649%" height="15" fill="rgb(253,194,2)" fg:x="1087" fg:w="1"/><text x="70.7429%" y="767.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::update_value_end (19 samples, 1.23%)</title><rect x="69.3904%" y="901" width="1.2322%" height="15" fill="rgb(235,58,31)" fg:x="1070" fg:w="19"/><text x="69.6404%" y="911.50"></text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (5 samples, 0.32%)</title><rect x="70.2983%" y="885" width="0.3243%" height="15" fill="rgb(231,37,11)" fg:x="1084" fg:w="5"/><text x="70.5483%" y="895.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (5 samples, 0.32%)</title><rect x="70.2983%" y="869" width="0.3243%" height="15" fill="rgb(235,133,0)" fg:x="1084" fg:w="5"/><text x="70.5483%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (5 samples, 0.32%)</title><rect x="70.2983%" y="853" width="0.3243%" height="15" fill="rgb(212,185,40)" fg:x="1084" fg:w="5"/><text x="70.5483%" y="863.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (5 samples, 0.32%)</title><rect x="70.2983%" y="837" width="0.3243%" height="15" fill="rgb(216,68,42)" fg:x="1084" fg:w="5"/><text x="70.5483%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (1 samples, 0.06%)</title><rect x="70.5577%" y="821" width="0.0649%" height="15" fill="rgb(239,81,4)" fg:x="1088" fg:w="1"/><text x="70.8077%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.06%)</title><rect x="70.5577%" y="805" width="0.0649%" height="15" fill="rgb(206,86,6)" fg:x="1088" fg:w="1"/><text x="70.8077%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.5577%" y="789" width="0.0649%" height="15" fill="rgb(249,95,27)" fg:x="1088" fg:w="1"/><text x="70.8077%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.5577%" y="773" width="0.0649%" height="15" fill="rgb(205,155,45)" fg:x="1088" fg:w="1"/><text x="70.8077%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.5577%" y="757" width="0.0649%" height="15" fill="rgb(213,55,42)" fg:x="1088" fg:w="1"/><text x="70.8077%" y="767.50"></text></g><g><title>redb::tree_store::btree_base::LeafMutator::insert (61 samples, 3.96%)</title><rect x="66.7315%" y="917" width="3.9559%" height="15" fill="rgb(249,197,4)" fg:x="1029" fg:w="61"/><text x="66.9815%" y="927.50">redb..</text></g><g><title>redb::tree_store::page_store::base::PageMut::memory_mut (1 samples, 0.06%)</title><rect x="70.6226%" y="901" width="0.0649%" height="15" fill="rgb(212,128,32)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::WritablePage::mem_mut (1 samples, 0.06%)</title><rect x="70.6226%" y="885" width="0.0649%" height="15" fill="rgb(252,47,30)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="70.6226%" y="869" width="0.0649%" height="15" fill="rgb(209,79,18)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::is_unique (1 samples, 0.06%)</title><rect x="70.6226%" y="853" width="0.0649%" height="15" fill="rgb(225,81,38)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.06%)</title><rect x="70.6226%" y="837" width="0.0649%" height="15" fill="rgb(205,95,16)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="70.6226%" y="821" width="0.0649%" height="15" fill="rgb(214,30,4)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.6226%" y="805" width="0.0649%" height="15" fill="rgb(232,137,22)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.6226%" y="789" width="0.0649%" height="15" fill="rgb(232,156,19)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.6226%" y="773" width="0.0649%" height="15" fill="rgb(248,157,26)" fg:x="1089" fg:w="1"/><text x="70.8726%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="70.6874%" y="901" width="0.0649%" height="15" fill="rgb(242,24,3)" fg:x="1090" fg:w="1"/><text x="70.9374%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.6874%" y="885" width="0.0649%" height="15" fill="rgb(218,195,48)" fg:x="1090" fg:w="1"/><text x="70.9374%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.6874%" y="869" width="0.0649%" height="15" fill="rgb(214,193,36)" fg:x="1090" fg:w="1"/><text x="70.9374%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.6874%" y="853" width="0.0649%" height="15" fill="rgb(242,110,40)" fg:x="1090" fg:w="1"/><text x="70.9374%" y="863.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::take_value (1 samples, 0.06%)</title><rect x="70.7523%" y="885" width="0.0649%" height="15" fill="rgb(233,150,26)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="895.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="70.7523%" y="869" width="0.0649%" height="15" fill="rgb(239,200,30)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="70.7523%" y="853" width="0.0649%" height="15" fill="rgb(226,28,11)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="70.7523%" y="837" width="0.0649%" height="15" fill="rgb(220,26,48)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="70.7523%" y="821" width="0.0649%" height="15" fill="rgb(232,10,11)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="70.7523%" y="805" width="0.0649%" height="15" fill="rgb(252,143,50)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="70.7523%" y="789" width="0.0649%" height="15" fill="rgb(206,58,22)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="70.7523%" y="773" width="0.0649%" height="15" fill="rgb(250,9,45)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="70.7523%" y="757" width="0.0649%" height="15" fill="rgb(225,148,14)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="70.7523%" y="741" width="0.0649%" height="15" fill="rgb(205,178,40)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="751.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="70.7523%" y="725" width="0.0649%" height="15" fill="rgb(215,201,4)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.7523%" y="709" width="0.0649%" height="15" fill="rgb(219,223,24)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.7523%" y="693" width="0.0649%" height="15" fill="rgb(217,19,31)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.7523%" y="677" width="0.0649%" height="15" fill="rgb(235,33,3)" fg:x="1091" fg:w="1"/><text x="71.0023%" y="687.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (2 samples, 0.13%)</title><rect x="70.7523%" y="901" width="0.1297%" height="15" fill="rgb(221,39,18)" fg:x="1091" fg:w="2"/><text x="71.0023%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="70.8171%" y="885" width="0.0649%" height="15" fill="rgb(242,162,33)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="70.8171%" y="869" width="0.0649%" height="15" fill="rgb(233,215,28)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="70.8171%" y="853" width="0.0649%" height="15" fill="rgb(212,117,9)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="70.8171%" y="837" width="0.0649%" height="15" fill="rgb(237,70,47)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="70.8171%" y="821" width="0.0649%" height="15" fill="rgb(206,177,13)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="70.8171%" y="805" width="0.0649%" height="15" fill="rgb(209,174,33)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="70.8171%" y="789" width="0.0649%" height="15" fill="rgb(226,6,11)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="70.8171%" y="773" width="0.0649%" height="15" fill="rgb(240,214,6)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="70.8171%" y="757" width="0.0649%" height="15" fill="rgb(254,214,40)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="70.8171%" y="741" width="0.0649%" height="15" fill="rgb(230,187,15)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="70.8171%" y="725" width="0.0649%" height="15" fill="rgb(250,11,27)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="70.8171%" y="709" width="0.0649%" height="15" fill="rgb(243,107,19)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="70.8171%" y="693" width="0.0649%" height="15" fill="rgb(253,66,26)" fg:x="1092" fg:w="1"/><text x="71.0671%" y="703.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (2 samples, 0.13%)</title><rect x="70.8820%" y="901" width="0.1297%" height="15" fill="rgb(228,43,8)" fg:x="1093" fg:w="2"/><text x="71.1320%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.13%)</title><rect x="70.8820%" y="885" width="0.1297%" height="15" fill="rgb(232,197,36)" fg:x="1093" fg:w="2"/><text x="71.1320%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="70.8820%" y="869" width="0.1297%" height="15" fill="rgb(221,182,31)" fg:x="1093" fg:w="2"/><text x="71.1320%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="70.8820%" y="853" width="0.1297%" height="15" fill="rgb(244,25,36)" fg:x="1093" fg:w="2"/><text x="71.1320%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="70.8820%" y="837" width="0.1297%" height="15" fill="rgb(247,101,19)" fg:x="1093" fg:w="2"/><text x="71.1320%" y="847.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (101 samples, 6.55%)</title><rect x="64.5266%" y="933" width="6.5499%" height="15" fill="rgb(223,117,19)" fg:x="995" fg:w="101"/><text x="64.7766%" y="943.50">redb::tre..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (6 samples, 0.39%)</title><rect x="70.6874%" y="917" width="0.3891%" height="15" fill="rgb(249,63,38)" fg:x="1090" fg:w="6"/><text x="70.9374%" y="927.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="71.0117%" y="901" width="0.0649%" height="15" fill="rgb(220,143,23)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="911.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="71.0117%" y="885" width="0.0649%" height="15" fill="rgb(252,183,22)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="71.0117%" y="869" width="0.0649%" height="15" fill="rgb(243,176,15)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="71.0117%" y="853" width="0.0649%" height="15" fill="rgb(244,204,46)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.0117%" y="837" width="0.0649%" height="15" fill="rgb(227,28,54)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.0117%" y="821" width="0.0649%" height="15" fill="rgb(231,10,15)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.0117%" y="805" width="0.0649%" height="15" fill="rgb(210,200,17)" fg:x="1095" fg:w="1"/><text x="71.2617%" y="815.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="71.0765%" y="933" width="0.0649%" height="15" fill="rgb(251,106,46)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="71.0765%" y="917" width="0.0649%" height="15" fill="rgb(218,211,15)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="71.0765%" y="901" width="0.0649%" height="15" fill="rgb(239,62,10)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="911.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::get (1 samples, 0.06%)</title><rect x="71.0765%" y="885" width="0.0649%" height="15" fill="rgb(225,53,53)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="895.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="71.0765%" y="869" width="0.0649%" height="15" fill="rgb(207,16,24)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="71.0765%" y="853" width="0.0649%" height="15" fill="rgb(217,52,28)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="71.0765%" y="837" width="0.0649%" height="15" fill="rgb(246,1,5)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="71.0765%" y="821" width="0.0649%" height="15" fill="rgb(221,29,26)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="71.0765%" y="805" width="0.0649%" height="15" fill="rgb(250,133,32)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="71.0765%" y="789" width="0.0649%" height="15" fill="rgb(236,63,16)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="71.0765%" y="773" width="0.0649%" height="15" fill="rgb(231,159,14)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="783.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="71.0765%" y="757" width="0.0649%" height="15" fill="rgb(207,102,36)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="71.0765%" y="741" width="0.0649%" height="15" fill="rgb(230,224,31)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="71.0765%" y="725" width="0.0649%" height="15" fill="rgb(215,182,16)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="71.0765%" y="709" width="0.0649%" height="15" fill="rgb(226,113,2)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="719.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="71.0765%" y="693" width="0.0649%" height="15" fill="rgb(241,18,35)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="71.0765%" y="677" width="0.0649%" height="15" fill="rgb(240,165,44)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="71.0765%" y="661" width="0.0649%" height="15" fill="rgb(229,130,47)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.0765%" y="645" width="0.0649%" height="15" fill="rgb(223,93,7)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.0765%" y="629" width="0.0649%" height="15" fill="rgb(205,180,36)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.0765%" y="613" width="0.0649%" height="15" fill="rgb(221,103,28)" fg:x="1096" fg:w="1"/><text x="71.3265%" y="623.50"></text></g><g><title>redb::tree_store::page_store::cached_file::LRUWriteCache::take_value (1 samples, 0.06%)</title><rect x="71.1414%" y="901" width="0.0649%" height="15" fill="rgb(212,4,3)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get_mut (1 samples, 0.06%)</title><rect x="71.1414%" y="885" width="0.0649%" height="15" fill="rgb(209,221,53)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="71.1414%" y="869" width="0.0649%" height="15" fill="rgb(233,229,52)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="71.1414%" y="853" width="0.0649%" height="15" fill="rgb(254,127,37)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="71.1414%" y="837" width="0.0649%" height="15" fill="rgb(207,161,26)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="71.1414%" y="821" width="0.0649%" height="15" fill="rgb(223,75,5)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="71.1414%" y="805" width="0.0649%" height="15" fill="rgb(235,115,52)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="815.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="71.1414%" y="789" width="0.0649%" height="15" fill="rgb(240,91,46)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="799.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="71.1414%" y="773" width="0.0649%" height="15" fill="rgb(251,144,21)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.1414%" y="757" width="0.0649%" height="15" fill="rgb(247,220,47)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.1414%" y="741" width="0.0649%" height="15" fill="rgb(253,122,1)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.1414%" y="725" width="0.0649%" height="15" fill="rgb(221,0,24)" fg:x="1097" fg:w="1"/><text x="71.3914%" y="735.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::write (2 samples, 0.13%)</title><rect x="71.1414%" y="917" width="0.1297%" height="15" fill="rgb(220,204,54)" fg:x="1097" fg:w="2"/><text x="71.3914%" y="927.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::remove (1 samples, 0.06%)</title><rect x="71.2062%" y="901" width="0.0649%" height="15" fill="rgb(205,96,25)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="71.2062%" y="885" width="0.0649%" height="15" fill="rgb(247,77,20)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="71.2062%" y="869" width="0.0649%" height="15" fill="rgb(245,151,8)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="71.2062%" y="853" width="0.0649%" height="15" fill="rgb(242,158,39)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="71.2062%" y="837" width="0.0649%" height="15" fill="rgb(222,214,50)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="71.2062%" y="821" width="0.0649%" height="15" fill="rgb(229,60,39)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="71.2062%" y="805" width="0.0649%" height="15" fill="rgb(240,148,18)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="71.2062%" y="789" width="0.0649%" height="15" fill="rgb(215,96,11)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="71.2062%" y="773" width="0.0649%" height="15" fill="rgb(238,162,53)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.2062%" y="757" width="0.0649%" height="15" fill="rgb(214,83,18)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.2062%" y="741" width="0.0649%" height="15" fill="rgb(248,117,24)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.2062%" y="725" width="0.0649%" height="15" fill="rgb(238,190,6)" fg:x="1098" fg:w="1"/><text x="71.4562%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="71.2711%" y="853" width="0.0649%" height="15" fill="rgb(213,51,6)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="71.2711%" y="837" width="0.0649%" height="15" fill="rgb(212,136,1)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="71.2711%" y="821" width="0.0649%" height="15" fill="rgb(221,192,14)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="831.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="71.2711%" y="805" width="0.0649%" height="15" fill="rgb(244,38,54)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="815.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="71.2711%" y="789" width="0.0649%" height="15" fill="rgb(240,45,28)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="799.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="71.2711%" y="773" width="0.0649%" height="15" fill="rgb(240,123,12)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.2711%" y="757" width="0.0649%" height="15" fill="rgb(216,14,30)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.2711%" y="741" width="0.0649%" height="15" fill="rgb(212,50,24)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.2711%" y="725" width="0.0649%" height="15" fill="rgb(253,229,47)" fg:x="1099" fg:w="1"/><text x="71.5211%" y="735.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2 samples, 0.13%)</title><rect x="71.2711%" y="917" width="0.1297%" height="15" fill="rgb(214,26,17)" fg:x="1099" fg:w="2"/><text x="71.5211%" y="927.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2 samples, 0.13%)</title><rect x="71.2711%" y="901" width="0.1297%" height="15" fill="rgb(252,60,11)" fg:x="1099" fg:w="2"/><text x="71.5211%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.13%)</title><rect x="71.2711%" y="885" width="0.1297%" height="15" fill="rgb(209,59,37)" fg:x="1099" fg:w="2"/><text x="71.5211%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.13%)</title><rect x="71.2711%" y="869" width="0.1297%" height="15" fill="rgb(228,126,53)" fg:x="1099" fg:w="2"/><text x="71.5211%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="71.3359%" y="853" width="0.0649%" height="15" fill="rgb(233,99,2)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="71.3359%" y="837" width="0.0649%" height="15" fill="rgb(217,106,34)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="71.3359%" y="821" width="0.0649%" height="15" fill="rgb(222,46,19)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="71.3359%" y="805" width="0.0649%" height="15" fill="rgb(251,87,31)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="71.3359%" y="789" width="0.0649%" height="15" fill="rgb(213,70,51)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="71.3359%" y="773" width="0.0649%" height="15" fill="rgb(229,144,18)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="783.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="71.3359%" y="757" width="0.0649%" height="15" fill="rgb(254,60,26)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.3359%" y="741" width="0.0649%" height="15" fill="rgb(243,127,51)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.3359%" y="725" width="0.0649%" height="15" fill="rgb(221,51,25)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.3359%" y="709" width="0.0649%" height="15" fill="rgb(205,42,7)" fg:x="1100" fg:w="1"/><text x="71.5859%" y="719.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.06%)</title><rect x="71.4008%" y="917" width="0.0649%" height="15" fill="rgb(236,177,48)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="927.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="71.4008%" y="901" width="0.0649%" height="15" fill="rgb(226,79,31)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="71.4008%" y="885" width="0.0649%" height="15" fill="rgb(216,170,12)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="71.4008%" y="869" width="0.0649%" height="15" fill="rgb(208,62,51)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="71.4008%" y="853" width="0.0649%" height="15" fill="rgb(254,129,9)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="71.4008%" y="837" width="0.0649%" height="15" fill="rgb(243,209,31)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="71.4008%" y="821" width="0.0649%" height="15" fill="rgb(213,159,23)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="71.4008%" y="805" width="0.0649%" height="15" fill="rgb(249,77,39)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="71.4008%" y="789" width="0.0649%" height="15" fill="rgb(230,13,33)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.4008%" y="773" width="0.0649%" height="15" fill="rgb(215,215,7)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.4008%" y="757" width="0.0649%" height="15" fill="rgb(222,92,25)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.4008%" y="741" width="0.0649%" height="15" fill="rgb(215,173,22)" fg:x="1101" fg:w="1"/><text x="71.6508%" y="751.50"></text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert_helper (132 samples, 8.56%)</title><rect x="62.9702%" y="949" width="8.5603%" height="15" fill="rgb(247,205,52)" fg:x="971" fg:w="132"/><text x="63.2202%" y="959.50">redb::tree_s..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_mut (6 samples, 0.39%)</title><rect x="71.1414%" y="933" width="0.3891%" height="15" fill="rgb(240,210,37)" fg:x="1097" fg:w="6"/><text x="71.3914%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="71.4656%" y="917" width="0.0649%" height="15" fill="rgb(224,13,10)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="927.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="71.4656%" y="901" width="0.0649%" height="15" fill="rgb(209,48,33)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="71.4656%" y="885" width="0.0649%" height="15" fill="rgb(228,219,23)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.06%)</title><rect x="71.4656%" y="869" width="0.0649%" height="15" fill="rgb(239,46,49)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.4656%" y="853" width="0.0649%" height="15" fill="rgb(206,172,51)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.4656%" y="837" width="0.0649%" height="15" fill="rgb(213,212,35)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.4656%" y="821" width="0.0649%" height="15" fill="rgb(252,40,27)" fg:x="1102" fg:w="1"/><text x="71.7156%" y="831.50"></text></g><g><title>redb::table::Table&lt;K,V&gt;::insert (145 samples, 9.40%)</title><rect x="62.2568%" y="997" width="9.4034%" height="15" fill="rgb(212,33,41)" fg:x="960" fg:w="145"/><text x="62.5068%" y="1007.50">redb::table::..</text></g><g><title>redb::tree_store::btree::BtreeMut&lt;K,V&gt;::insert (143 samples, 9.27%)</title><rect x="62.3865%" y="981" width="9.2737%" height="15" fill="rgb(232,160,27)" fg:x="962" fg:w="143"/><text x="62.6365%" y="991.50">redb::tree_st..</text></g><g><title>redb::tree_store::btree_mutator::MutateHelper&lt;K,V&gt;::insert (139 samples, 9.01%)</title><rect x="62.6459%" y="965" width="9.0143%" height="15" fill="rgb(244,160,20)" fg:x="966" fg:w="139"/><text x="62.8959%" y="975.50">redb::tree_st..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (2 samples, 0.13%)</title><rect x="71.5305%" y="949" width="0.1297%" height="15" fill="rgb(205,66,20)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="71.5305%" y="933" width="0.1297%" height="15" fill="rgb(236,158,6)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="71.5305%" y="917" width="0.1297%" height="15" fill="rgb(232,25,36)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="71.5305%" y="901" width="0.1297%" height="15" fill="rgb(220,153,35)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="71.5305%" y="885" width="0.1297%" height="15" fill="rgb(216,5,8)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="71.5305%" y="869" width="0.1297%" height="15" fill="rgb(240,97,3)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="71.5305%" y="853" width="0.1297%" height="15" fill="rgb(220,99,26)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="71.5305%" y="837" width="0.1297%" height="15" fill="rgb(237,96,2)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.13%)</title><rect x="71.5305%" y="821" width="0.1297%" height="15" fill="rgb(217,197,47)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.13%)</title><rect x="71.5305%" y="805" width="0.1297%" height="15" fill="rgb(252,133,54)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.13%)</title><rect x="71.5305%" y="789" width="0.1297%" height="15" fill="rgb(233,37,30)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="71.5305%" y="773" width="0.1297%" height="15" fill="rgb(239,182,12)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="71.5305%" y="757" width="0.1297%" height="15" fill="rgb(245,83,39)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="71.5305%" y="741" width="0.1297%" height="15" fill="rgb(222,109,36)" fg:x="1103" fg:w="2"/><text x="71.7805%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="71.6602%" y="885" width="0.0649%" height="15" fill="rgb(237,95,44)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="71.6602%" y="869" width="0.0649%" height="15" fill="rgb(216,36,54)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="879.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="71.6602%" y="853" width="0.0649%" height="15" fill="rgb(236,164,3)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="863.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="71.6602%" y="837" width="0.0649%" height="15" fill="rgb(223,15,21)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="847.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="71.6602%" y="821" width="0.0649%" height="15" fill="rgb(239,191,12)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.6602%" y="805" width="0.0649%" height="15" fill="rgb(231,191,37)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.6602%" y="789" width="0.0649%" height="15" fill="rgb(209,155,36)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="71.6602%" y="773" width="0.0649%" height="15" fill="rgb(216,222,49)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="71.6602%" y="757" width="0.0649%" height="15" fill="rgb(218,181,2)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="71.6602%" y="741" width="0.0649%" height="15" fill="rgb(239,125,9)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="71.6602%" y="725" width="0.0649%" height="15" fill="rgb(233,103,7)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="71.6602%" y="709" width="0.0649%" height="15" fill="rgb(209,223,5)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.6602%" y="693" width="0.0649%" height="15" fill="rgb(234,71,27)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="703.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.6602%" y="677" width="0.0649%" height="15" fill="rgb(251,202,16)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="71.6602%" y="661" width="0.0649%" height="15" fill="rgb(231,180,0)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="671.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="71.6602%" y="645" width="0.0649%" height="15" fill="rgb(223,58,28)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="655.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="71.6602%" y="629" width="0.0649%" height="15" fill="rgb(250,34,24)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="639.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="71.6602%" y="613" width="0.0649%" height="15" fill="rgb(235,24,16)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="71.6602%" y="597" width="0.0649%" height="15" fill="rgb(219,28,33)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="607.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="71.6602%" y="581" width="0.0649%" height="15" fill="rgb(228,150,43)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="71.6602%" y="565" width="0.0649%" height="15" fill="rgb(221,228,36)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="71.6602%" y="549" width="0.0649%" height="15" fill="rgb(232,116,17)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="71.6602%" y="533" width="0.0649%" height="15" fill="rgb(220,110,51)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="71.6602%" y="517" width="0.0649%" height="15" fill="rgb(207,26,25)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="527.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="71.6602%" y="501" width="0.0649%" height="15" fill="rgb(223,58,19)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="511.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="71.6602%" y="485" width="0.0649%" height="15" fill="rgb(234,125,39)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.6602%" y="469" width="0.0649%" height="15" fill="rgb(241,48,36)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.6602%" y="453" width="0.0649%" height="15" fill="rgb(217,148,51)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.6602%" y="437" width="0.0649%" height="15" fill="rgb(247,17,25)" fg:x="1105" fg:w="1"/><text x="71.9102%" y="447.50"></text></g><g><title>utxo::Block::store_and_commit (315 samples, 20.43%)</title><rect x="51.3619%" y="1061" width="20.4280%" height="15" fill="rgb(219,89,38)" fg:x="792" fg:w="315"/><text x="51.6119%" y="1071.50">utxo::Block::store_and_commit</text></g><g><title>utxo::Transaction::store_many (310 samples, 20.10%)</title><rect x="51.6861%" y="1045" width="20.1038%" height="15" fill="rgb(220,145,2)" fg:x="797" fg:w="310"/><text x="51.9361%" y="1055.50">utxo::Transaction::store_many</text></g><g><title>utxo::Utxo::store_many (308 samples, 19.97%)</title><rect x="51.8158%" y="1029" width="19.9741%" height="15" fill="rgb(244,66,47)" fg:x="799" fg:w="308"/><text x="52.0658%" y="1039.50">utxo::Utxo::store_many</text></g><g><title>utxo::Asset::store_many (236 samples, 15.30%)</title><rect x="56.4851%" y="1013" width="15.3048%" height="15" fill="rgb(226,182,5)" fg:x="871" fg:w="236"/><text x="56.7351%" y="1023.50">utxo::Asset::store_many</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (2 samples, 0.13%)</title><rect x="71.6602%" y="997" width="0.1297%" height="15" fill="rgb(211,98,20)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="1007.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="71.6602%" y="981" width="0.1297%" height="15" fill="rgb(217,103,52)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="991.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="71.6602%" y="965" width="0.1297%" height="15" fill="rgb(208,125,52)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="975.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="71.6602%" y="949" width="0.1297%" height="15" fill="rgb(244,70,13)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="959.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="71.6602%" y="933" width="0.1297%" height="15" fill="rgb(253,124,3)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="943.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="71.6602%" y="917" width="0.1297%" height="15" fill="rgb(222,145,32)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="71.6602%" y="901" width="0.1297%" height="15" fill="rgb(232,183,47)" fg:x="1105" fg:w="2"/><text x="71.9102%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.7250%" y="885" width="0.0649%" height="15" fill="rgb(246,226,4)" fg:x="1106" fg:w="1"/><text x="71.9750%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.7250%" y="869" width="0.0649%" height="15" fill="rgb(228,185,46)" fg:x="1106" fg:w="1"/><text x="71.9750%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.7250%" y="853" width="0.0649%" height="15" fill="rgb(213,196,4)" fg:x="1106" fg:w="1"/><text x="71.9750%" y="863.50"></text></g><g><title>utxo::BlockHeader::get_by_merkle_root (1 samples, 0.06%)</title><rect x="71.7899%" y="1061" width="0.0649%" height="15" fill="rgb(212,2,45)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="1071.50"></text></g><g><title>utxo::BlockHeader::compose (1 samples, 0.06%)</title><rect x="71.7899%" y="1045" width="0.0649%" height="15" fill="rgb(217,145,50)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="1055.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (1 samples, 0.06%)</title><rect x="71.7899%" y="1029" width="0.0649%" height="15" fill="rgb(242,10,46)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (1 samples, 0.06%)</title><rect x="71.7899%" y="1013" width="0.0649%" height="15" fill="rgb(252,91,48)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (1 samples, 0.06%)</title><rect x="71.7899%" y="997" width="0.0649%" height="15" fill="rgb(216,72,13)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="71.7899%" y="981" width="0.0649%" height="15" fill="rgb(219,6,37)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="71.7899%" y="965" width="0.0649%" height="15" fill="rgb(236,185,40)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="71.7899%" y="949" width="0.0649%" height="15" fill="rgb(208,81,48)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="71.7899%" y="933" width="0.0649%" height="15" fill="rgb(211,42,33)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.7899%" y="917" width="0.0649%" height="15" fill="rgb(211,90,39)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.7899%" y="901" width="0.0649%" height="15" fill="rgb(218,136,12)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.7899%" y="885" width="0.0649%" height="15" fill="rgb(234,12,32)" fg:x="1107" fg:w="1"/><text x="72.0399%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="71.8547%" y="1029" width="0.0649%" height="15" fill="rgb(221,164,18)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="71.8547%" y="1013" width="0.0649%" height="15" fill="rgb(239,135,14)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="71.8547%" y="997" width="0.0649%" height="15" fill="rgb(226,198,47)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (1 samples, 0.06%)</title><rect x="71.8547%" y="981" width="0.0649%" height="15" fill="rgb(244,121,47)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="991.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="71.8547%" y="965" width="0.0649%" height="15" fill="rgb(226,21,48)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="71.8547%" y="949" width="0.0649%" height="15" fill="rgb(215,178,47)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="71.8547%" y="933" width="0.0649%" height="15" fill="rgb(206,212,19)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.8547%" y="917" width="0.0649%" height="15" fill="rgb(230,104,34)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.8547%" y="901" width="0.0649%" height="15" fill="rgb(210,96,51)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.8547%" y="885" width="0.0649%" height="15" fill="rgb(229,111,47)" fg:x="1108" fg:w="1"/><text x="72.1047%" y="895.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="71.9196%" y="1013" width="0.0649%" height="15" fill="rgb(218,174,45)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="71.9196%" y="997" width="0.0649%" height="15" fill="rgb(215,21,32)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_iters::EntryGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,()&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="71.9196%" y="981" width="0.0649%" height="15" fill="rgb(235,72,21)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::EntryGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,()&gt;&gt; (1 samples, 0.06%)</title><rect x="71.9196%" y="965" width="0.0649%" height="15" fill="rgb(250,113,30)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="71.9196%" y="949" width="0.0649%" height="15" fill="rgb(244,136,34)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::mutex::Mutex&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="71.9196%" y="933" width="0.0649%" height="15" fill="rgb(213,226,47)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="71.9196%" y="917" width="0.0649%" height="15" fill="rgb(224,136,40)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="71.9196%" y="901" width="0.0649%" height="15" fill="rgb(253,124,12)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="71.9196%" y="885" width="0.0649%" height="15" fill="rgb(210,67,8)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.9196%" y="869" width="0.0649%" height="15" fill="rgb(210,204,0)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.9196%" y="853" width="0.0649%" height="15" fill="rgb(217,179,22)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.9196%" y="837" width="0.0649%" height="15" fill="rgb(237,192,33)" fg:x="1109" fg:w="1"/><text x="72.1696%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="71.9844%" y="1013" width="0.0649%" height="15" fill="rgb(211,104,28)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="1023.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="71.9844%" y="997" width="0.0649%" height="15" fill="rgb(214,75,30)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="1007.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="981" width="0.0649%" height="15" fill="rgb(220,227,12)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="991.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="965" width="0.0649%" height="15" fill="rgb(233,134,28)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="975.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="71.9844%" y="949" width="0.0649%" height="15" fill="rgb(215,146,24)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="959.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="933" width="0.0649%" height="15" fill="rgb(248,227,20)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="943.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="917" width="0.0649%" height="15" fill="rgb(250,44,42)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="927.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="71.9844%" y="901" width="0.0649%" height="15" fill="rgb(219,5,35)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="71.9844%" y="885" width="0.0649%" height="15" fill="rgb(241,132,32)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="895.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="71.9844%" y="869" width="0.0649%" height="15" fill="rgb(234,212,51)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="879.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="71.9844%" y="853" width="0.0649%" height="15" fill="rgb(242,173,29)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="863.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="71.9844%" y="837" width="0.0649%" height="15" fill="rgb(212,159,2)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="821" width="0.0649%" height="15" fill="rgb(238,165,31)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="805" width="0.0649%" height="15" fill="rgb(241,57,36)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="71.9844%" y="789" width="0.0649%" height="15" fill="rgb(249,7,4)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="71.9844%" y="773" width="0.0649%" height="15" fill="rgb(250,137,44)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="71.9844%" y="757" width="0.0649%" height="15" fill="rgb(244,185,1)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="71.9844%" y="741" width="0.0649%" height="15" fill="rgb(216,5,53)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="71.9844%" y="725" width="0.0649%" height="15" fill="rgb(234,89,21)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="709" width="0.0649%" height="15" fill="rgb(250,81,43)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="71.9844%" y="693" width="0.0649%" height="15" fill="rgb(243,132,11)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="71.9844%" y="677" width="0.0649%" height="15" fill="rgb(253,159,28)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="71.9844%" y="661" width="0.0649%" height="15" fill="rgb(237,167,34)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="71.9844%" y="645" width="0.0649%" height="15" fill="rgb(237,16,50)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="71.9844%" y="629" width="0.0649%" height="15" fill="rgb(247,125,2)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="71.9844%" y="613" width="0.0649%" height="15" fill="rgb(254,35,3)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="71.9844%" y="597" width="0.0649%" height="15" fill="rgb(237,209,21)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="71.9844%" y="581" width="0.0649%" height="15" fill="rgb(224,122,20)" fg:x="1110" fg:w="1"/><text x="72.2344%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="72.0493%" y="997" width="0.0649%" height="15" fill="rgb(224,11,46)" fg:x="1111" fg:w="1"/><text x="72.2993%" y="1007.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.0493%" y="981" width="0.0649%" height="15" fill="rgb(248,21,33)" fg:x="1111" fg:w="1"/><text x="72.2993%" y="991.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.0493%" y="965" width="0.0649%" height="15" fill="rgb(222,144,7)" fg:x="1111" fg:w="1"/><text x="72.2993%" y="975.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.0493%" y="949" width="0.0649%" height="15" fill="rgb(205,141,37)" fg:x="1111" fg:w="1"/><text x="72.2993%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="72.1141%" y="997" width="0.0649%" height="15" fill="rgb(237,130,8)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="72.1141%" y="981" width="0.0649%" height="15" fill="rgb(209,179,39)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="72.1141%" y="965" width="0.0649%" height="15" fill="rgb(207,52,17)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="72.1141%" y="949" width="0.0649%" height="15" fill="rgb(253,158,17)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="72.1141%" y="933" width="0.0649%" height="15" fill="rgb(208,19,53)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="72.1141%" y="917" width="0.0649%" height="15" fill="rgb(233,152,13)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="72.1141%" y="901" width="0.0649%" height="15" fill="rgb(231,84,1)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="72.1141%" y="885" width="0.0649%" height="15" fill="rgb(229,142,48)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="72.1141%" y="869" width="0.0649%" height="15" fill="rgb(248,70,29)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="72.1141%" y="853" width="0.0649%" height="15" fill="rgb(250,85,7)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="863.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="72.1141%" y="837" width="0.0649%" height="15" fill="rgb(235,140,43)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.1141%" y="821" width="0.0649%" height="15" fill="rgb(216,0,5)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.1141%" y="805" width="0.0649%" height="15" fill="rgb(223,167,29)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.1141%" y="789" width="0.0649%" height="15" fill="rgb(229,150,33)" fg:x="1112" fg:w="1"/><text x="72.3641%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="72.1790%" y="997" width="0.0649%" height="15" fill="rgb(227,26,52)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="72.1790%" y="981" width="0.0649%" height="15" fill="rgb(250,60,52)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="72.1790%" y="965" width="0.0649%" height="15" fill="rgb(228,81,46)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="72.1790%" y="949" width="0.0649%" height="15" fill="rgb(225,218,31)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="72.1790%" y="933" width="0.0649%" height="15" fill="rgb(230,35,16)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="72.1790%" y="917" width="0.0649%" height="15" fill="rgb(247,100,0)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="72.1790%" y="901" width="0.0649%" height="15" fill="rgb(223,135,11)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="72.1790%" y="885" width="0.0649%" height="15" fill="rgb(207,136,0)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="72.1790%" y="869" width="0.0649%" height="15" fill="rgb(246,131,25)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="72.1790%" y="853" width="0.0649%" height="15" fill="rgb(209,47,12)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="72.1790%" y="837" width="0.0649%" height="15" fill="rgb(221,25,16)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="72.1790%" y="821" width="0.0649%" height="15" fill="rgb(223,164,33)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="72.1790%" y="805" width="0.0649%" height="15" fill="rgb(220,26,23)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="72.1790%" y="789" width="0.0649%" height="15" fill="rgb(231,224,1)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="72.1790%" y="773" width="0.0649%" height="15" fill="rgb(229,221,24)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="783.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="72.1790%" y="757" width="0.0649%" height="15" fill="rgb(213,34,10)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="767.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="72.1790%" y="741" width="0.0649%" height="15" fill="rgb(215,33,11)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="72.1790%" y="725" width="0.0649%" height="15" fill="rgb(216,20,41)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.06%)</title><rect x="72.1790%" y="709" width="0.0649%" height="15" fill="rgb(228,43,31)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.1790%" y="693" width="0.0649%" height="15" fill="rgb(227,83,26)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.1790%" y="677" width="0.0649%" height="15" fill="rgb(217,168,19)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.1790%" y="661" width="0.0649%" height="15" fill="rgb(231,34,33)" fg:x="1113" fg:w="1"/><text x="72.4290%" y="671.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="72.2438%" y="965" width="0.0649%" height="15" fill="rgb(230,120,51)" fg:x="1114" fg:w="1"/><text x="72.4938%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="72.2438%" y="949" width="0.0649%" height="15" fill="rgb(215,138,27)" fg:x="1114" fg:w="1"/><text x="72.4938%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.2438%" y="933" width="0.0649%" height="15" fill="rgb(246,80,47)" fg:x="1114" fg:w="1"/><text x="72.4938%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.2438%" y="917" width="0.0649%" height="15" fill="rgb(215,57,53)" fg:x="1114" fg:w="1"/><text x="72.4938%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.2438%" y="901" width="0.0649%" height="15" fill="rgb(229,137,5)" fg:x="1114" fg:w="1"/><text x="72.4938%" y="911.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="72.3087%" y="837" width="0.0649%" height="15" fill="rgb(210,86,2)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="72.3087%" y="821" width="0.0649%" height="15" fill="rgb(231,226,51)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="831.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="72.3087%" y="805" width="0.0649%" height="15" fill="rgb(216,62,29)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="815.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="72.3087%" y="789" width="0.0649%" height="15" fill="rgb(248,202,3)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="799.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="72.3087%" y="773" width="0.0649%" height="15" fill="rgb(225,181,7)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="783.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.06%)</title><rect x="72.3087%" y="757" width="0.0649%" height="15" fill="rgb(247,170,54)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.3087%" y="741" width="0.0649%" height="15" fill="rgb(236,204,33)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.3087%" y="725" width="0.0649%" height="15" fill="rgb(216,45,30)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.3087%" y="709" width="0.0649%" height="15" fill="rgb(213,203,16)" fg:x="1115" fg:w="1"/><text x="72.5587%" y="719.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="72.3087%" y="965" width="0.1297%" height="15" fill="rgb(215,46,16)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="72.3087%" y="949" width="0.1297%" height="15" fill="rgb(217,162,46)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="959.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="72.3087%" y="933" width="0.1297%" height="15" fill="rgb(224,189,20)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="943.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="72.3087%" y="917" width="0.1297%" height="15" fill="rgb(232,35,51)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="72.3087%" y="901" width="0.1297%" height="15" fill="rgb(243,221,46)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="72.3087%" y="885" width="0.1297%" height="15" fill="rgb(248,16,16)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="72.3087%" y="869" width="0.1297%" height="15" fill="rgb(220,168,13)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="72.3087%" y="853" width="0.1297%" height="15" fill="rgb(243,102,39)" fg:x="1115" fg:w="2"/><text x="72.5587%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="72.3735%" y="837" width="0.0649%" height="15" fill="rgb(245,82,32)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="72.3735%" y="821" width="0.0649%" height="15" fill="rgb(230,164,19)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="831.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="72.3735%" y="805" width="0.0649%" height="15" fill="rgb(221,9,41)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="72.3735%" y="789" width="0.0649%" height="15" fill="rgb(216,93,0)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="799.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="72.3735%" y="773" width="0.0649%" height="15" fill="rgb(235,113,9)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="783.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="72.3735%" y="757" width="0.0649%" height="15" fill="rgb(209,224,10)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="767.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="72.3735%" y="741" width="0.0649%" height="15" fill="rgb(226,54,34)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="751.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u32 (1 samples, 0.06%)</title><rect x="72.3735%" y="725" width="0.0649%" height="15" fill="rgb(222,60,8)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.3735%" y="709" width="0.0649%" height="15" fill="rgb(248,228,41)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.3735%" y="693" width="0.0649%" height="15" fill="rgb(226,31,32)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.3735%" y="677" width="0.0649%" height="15" fill="rgb(242,132,49)" fg:x="1116" fg:w="1"/><text x="72.6235%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="72.4384%" y="949" width="0.0649%" height="15" fill="rgb(224,194,19)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="72.4384%" y="933" width="0.0649%" height="15" fill="rgb(232,200,51)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="72.4384%" y="917" width="0.0649%" height="15" fill="rgb(235,60,46)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="72.4384%" y="901" width="0.0649%" height="15" fill="rgb(240,109,52)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="72.4384%" y="885" width="0.0649%" height="15" fill="rgb(215,78,37)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="72.4384%" y="869" width="0.0649%" height="15" fill="rgb(225,141,7)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="72.4384%" y="853" width="0.0649%" height="15" fill="rgb(216,102,54)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="72.4384%" y="837" width="0.0649%" height="15" fill="rgb(238,143,13)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="72.4384%" y="821" width="0.0649%" height="15" fill="rgb(219,45,51)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="72.4384%" y="805" width="0.0649%" height="15" fill="rgb(242,105,46)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="72.4384%" y="789" width="0.0649%" height="15" fill="rgb(206,154,49)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="72.4384%" y="773" width="0.0649%" height="15" fill="rgb(239,215,4)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.4384%" y="757" width="0.0649%" height="15" fill="rgb(238,82,17)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.4384%" y="741" width="0.0649%" height="15" fill="rgb(242,49,30)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.4384%" y="725" width="0.0649%" height="15" fill="rgb(248,5,16)" fg:x="1117" fg:w="1"/><text x="72.6884%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.5032%" y="741" width="0.0649%" height="15" fill="rgb(237,138,32)" fg:x="1118" fg:w="1"/><text x="72.7532%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.5032%" y="725" width="0.0649%" height="15" fill="rgb(235,79,45)" fg:x="1118" fg:w="1"/><text x="72.7532%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.5032%" y="709" width="0.0649%" height="15" fill="rgb(213,105,25)" fg:x="1118" fg:w="1"/><text x="72.7532%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.5681%" y="629" width="0.0649%" height="15" fill="rgb(251,131,7)" fg:x="1119" fg:w="1"/><text x="72.8181%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.5681%" y="613" width="0.0649%" height="15" fill="rgb(211,155,7)" fg:x="1119" fg:w="1"/><text x="72.8181%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.5681%" y="597" width="0.0649%" height="15" fill="rgb(243,70,15)" fg:x="1119" fg:w="1"/><text x="72.8181%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="72.5681%" y="677" width="0.1297%" height="15" fill="rgb(215,171,2)" fg:x="1119" fg:w="2"/><text x="72.8181%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="72.5681%" y="661" width="0.1297%" height="15" fill="rgb(244,121,35)" fg:x="1119" fg:w="2"/><text x="72.8181%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="72.5681%" y="645" width="0.1297%" height="15" fill="rgb(249,147,17)" fg:x="1119" fg:w="2"/><text x="72.8181%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="72.6329%" y="629" width="0.0649%" height="15" fill="rgb(241,193,52)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="72.6329%" y="613" width="0.0649%" height="15" fill="rgb(217,159,39)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="72.6329%" y="597" width="0.0649%" height="15" fill="rgb(248,110,0)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="72.6329%" y="581" width="0.0649%" height="15" fill="rgb(233,227,0)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="72.6329%" y="565" width="0.0649%" height="15" fill="rgb(252,55,2)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="72.6329%" y="549" width="0.0649%" height="15" fill="rgb(224,194,24)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="72.6329%" y="533" width="0.0649%" height="15" fill="rgb(247,5,33)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="72.6329%" y="517" width="0.0649%" height="15" fill="rgb(242,66,47)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="72.6329%" y="501" width="0.0649%" height="15" fill="rgb(213,107,12)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="72.6329%" y="485" width="0.0649%" height="15" fill="rgb(206,131,1)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="72.6329%" y="469" width="0.0649%" height="15" fill="rgb(214,9,36)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="72.6329%" y="453" width="0.0649%" height="15" fill="rgb(251,215,18)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="72.6329%" y="437" width="0.0649%" height="15" fill="rgb(251,64,9)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="72.6329%" y="421" width="0.0649%" height="15" fill="rgb(235,68,21)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="72.6329%" y="405" width="0.0649%" height="15" fill="rgb(240,69,38)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="72.6329%" y="389" width="0.0649%" height="15" fill="rgb(231,18,27)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="72.6329%" y="373" width="0.0649%" height="15" fill="rgb(215,154,25)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="72.6329%" y="357" width="0.0649%" height="15" fill="rgb(224,33,46)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="72.6329%" y="341" width="0.0649%" height="15" fill="rgb(248,191,53)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="72.6329%" y="325" width="0.0649%" height="15" fill="rgb(231,3,37)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="72.6329%" y="309" width="0.0649%" height="15" fill="rgb(209,152,2)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.6329%" y="293" width="0.0649%" height="15" fill="rgb(212,208,43)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.6329%" y="277" width="0.0649%" height="15" fill="rgb(208,60,49)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.6329%" y="261" width="0.0649%" height="15" fill="rgb(245,135,6)" fg:x="1120" fg:w="1"/><text x="72.8829%" y="271.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="72.5032%" y="821" width="0.2594%" height="15" fill="rgb(243,86,23)" fg:x="1118" fg:w="4"/><text x="72.7532%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="72.5032%" y="805" width="0.2594%" height="15" fill="rgb(223,7,20)" fg:x="1118" fg:w="4"/><text x="72.7532%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="72.5032%" y="789" width="0.2594%" height="15" fill="rgb(212,182,17)" fg:x="1118" fg:w="4"/><text x="72.7532%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="72.5032%" y="773" width="0.2594%" height="15" fill="rgb(237,94,50)" fg:x="1118" fg:w="4"/><text x="72.7532%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="72.5032%" y="757" width="0.2594%" height="15" fill="rgb(232,185,44)" fg:x="1118" fg:w="4"/><text x="72.7532%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="72.5681%" y="741" width="0.1946%" height="15" fill="rgb(205,50,36)" fg:x="1119" fg:w="3"/><text x="72.8181%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="72.5681%" y="725" width="0.1946%" height="15" fill="rgb(252,32,32)" fg:x="1119" fg:w="3"/><text x="72.8181%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="72.5681%" y="709" width="0.1946%" height="15" fill="rgb(241,123,33)" fg:x="1119" fg:w="3"/><text x="72.8181%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="72.5681%" y="693" width="0.1946%" height="15" fill="rgb(212,140,16)" fg:x="1119" fg:w="3"/><text x="72.8181%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.6978%" y="677" width="0.0649%" height="15" fill="rgb(247,132,5)" fg:x="1121" fg:w="1"/><text x="72.9478%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.6978%" y="661" width="0.0649%" height="15" fill="rgb(209,137,38)" fg:x="1121" fg:w="1"/><text x="72.9478%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.6978%" y="645" width="0.0649%" height="15" fill="rgb(248,32,42)" fg:x="1121" fg:w="1"/><text x="72.9478%" y="655.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (5 samples, 0.32%)</title><rect x="72.5032%" y="949" width="0.3243%" height="15" fill="rgb(216,188,40)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (5 samples, 0.32%)</title><rect x="72.5032%" y="933" width="0.3243%" height="15" fill="rgb(209,127,53)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (5 samples, 0.32%)</title><rect x="72.5032%" y="917" width="0.3243%" height="15" fill="rgb(254,162,9)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (5 samples, 0.32%)</title><rect x="72.5032%" y="901" width="0.3243%" height="15" fill="rgb(219,183,10)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (5 samples, 0.32%)</title><rect x="72.5032%" y="885" width="0.3243%" height="15" fill="rgb(217,192,21)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (5 samples, 0.32%)</title><rect x="72.5032%" y="869" width="0.3243%" height="15" fill="rgb(251,89,27)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="879.50"></text></g><g><title>bincode::internal::deserialize (5 samples, 0.32%)</title><rect x="72.5032%" y="853" width="0.3243%" height="15" fill="rgb(253,55,28)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (5 samples, 0.32%)</title><rect x="72.5032%" y="837" width="0.3243%" height="15" fill="rgb(216,159,8)" fg:x="1118" fg:w="5"/><text x="72.7532%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="72.7626%" y="821" width="0.0649%" height="15" fill="rgb(231,228,44)" fg:x="1122" fg:w="1"/><text x="73.0126%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.7626%" y="805" width="0.0649%" height="15" fill="rgb(247,34,48)" fg:x="1122" fg:w="1"/><text x="73.0126%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.7626%" y="789" width="0.0649%" height="15" fill="rgb(247,222,18)" fg:x="1122" fg:w="1"/><text x="73.0126%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.7626%" y="773" width="0.0649%" height="15" fill="rgb(227,49,4)" fg:x="1122" fg:w="1"/><text x="73.0126%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.8275%" y="933" width="0.0649%" height="15" fill="rgb(219,189,53)" fg:x="1123" fg:w="1"/><text x="73.0775%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.8275%" y="917" width="0.0649%" height="15" fill="rgb(241,160,53)" fg:x="1123" fg:w="1"/><text x="73.0775%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.8275%" y="901" width="0.0649%" height="15" fill="rgb(227,115,4)" fg:x="1123" fg:w="1"/><text x="73.0775%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="72.8923%" y="933" width="0.0649%" height="15" fill="rgb(215,28,28)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="72.8923%" y="917" width="0.0649%" height="15" fill="rgb(237,143,40)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="72.8923%" y="901" width="0.0649%" height="15" fill="rgb(205,107,24)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="911.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="72.8923%" y="885" width="0.0649%" height="15" fill="rgb(209,112,35)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="72.8923%" y="869" width="0.0649%" height="15" fill="rgb(206,135,5)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.8923%" y="853" width="0.0649%" height="15" fill="rgb(227,217,38)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.8923%" y="837" width="0.0649%" height="15" fill="rgb(205,0,41)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.8923%" y="821" width="0.0649%" height="15" fill="rgb(220,20,40)" fg:x="1124" fg:w="1"/><text x="73.1423%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (3 samples, 0.19%)</title><rect x="72.8275%" y="949" width="0.1946%" height="15" fill="rgb(216,145,3)" fg:x="1123" fg:w="3"/><text x="73.0775%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="72.9572%" y="933" width="0.0649%" height="15" fill="rgb(207,130,51)" fg:x="1125" fg:w="1"/><text x="73.2072%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="72.9572%" y="917" width="0.0649%" height="15" fill="rgb(252,93,13)" fg:x="1125" fg:w="1"/><text x="73.2072%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="72.9572%" y="901" width="0.0649%" height="15" fill="rgb(210,105,15)" fg:x="1125" fg:w="1"/><text x="73.2072%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="72.9572%" y="885" width="0.0649%" height="15" fill="rgb(212,126,31)" fg:x="1125" fg:w="1"/><text x="73.2072%" y="895.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (13 samples, 0.84%)</title><rect x="72.2438%" y="997" width="0.8431%" height="15" fill="rgb(241,167,46)" fg:x="1114" fg:w="13"/><text x="72.4938%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (13 samples, 0.84%)</title><rect x="72.2438%" y="981" width="0.8431%" height="15" fill="rgb(217,143,19)" fg:x="1114" fg:w="13"/><text x="72.4938%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (10 samples, 0.65%)</title><rect x="72.4384%" y="965" width="0.6485%" height="15" fill="rgb(235,117,33)" fg:x="1117" fg:w="10"/><text x="72.6884%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="73.0220%" y="949" width="0.0649%" height="15" fill="rgb(247,95,6)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="73.0220%" y="933" width="0.0649%" height="15" fill="rgb(243,206,43)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="73.0220%" y="917" width="0.0649%" height="15" fill="rgb(229,65,54)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="73.0220%" y="901" width="0.0649%" height="15" fill="rgb(247,137,34)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="885" width="0.0649%" height="15" fill="rgb(245,174,44)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="895.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="869" width="0.0649%" height="15" fill="rgb(223,64,15)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="73.0220%" y="853" width="0.0649%" height="15" fill="rgb(243,153,36)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="837" width="0.0649%" height="15" fill="rgb(252,23,4)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="821" width="0.0649%" height="15" fill="rgb(209,132,13)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="73.0220%" y="805" width="0.0649%" height="15" fill="rgb(209,196,21)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="73.0220%" y="789" width="0.0649%" height="15" fill="rgb(252,197,1)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="73.0220%" y="773" width="0.0649%" height="15" fill="rgb(229,42,46)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="73.0220%" y="757" width="0.0649%" height="15" fill="rgb(219,85,8)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="73.0220%" y="741" width="0.0649%" height="15" fill="rgb(223,185,14)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="725" width="0.0649%" height="15" fill="rgb(217,196,18)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="709" width="0.0649%" height="15" fill="rgb(220,122,37)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="73.0220%" y="693" width="0.0649%" height="15" fill="rgb(236,135,33)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="73.0220%" y="677" width="0.0649%" height="15" fill="rgb(222,86,54)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="73.0220%" y="661" width="0.0649%" height="15" fill="rgb(227,42,22)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="73.0220%" y="645" width="0.0649%" height="15" fill="rgb(243,101,27)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="73.0220%" y="629" width="0.0649%" height="15" fill="rgb(229,100,8)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="613" width="0.0649%" height="15" fill="rgb(252,68,10)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="597" width="0.0649%" height="15" fill="rgb(219,19,31)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="73.0220%" y="581" width="0.0649%" height="15" fill="rgb(246,150,44)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="73.0220%" y="565" width="0.0649%" height="15" fill="rgb(211,14,39)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="73.0220%" y="549" width="0.0649%" height="15" fill="rgb(221,98,29)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="73.0220%" y="533" width="0.0649%" height="15" fill="rgb(221,70,26)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="73.0220%" y="517" width="0.0649%" height="15" fill="rgb(236,146,30)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="501" width="0.0649%" height="15" fill="rgb(226,94,34)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.0220%" y="485" width="0.0649%" height="15" fill="rgb(248,132,21)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="73.0220%" y="469" width="0.0649%" height="15" fill="rgb(245,43,50)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="479.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="73.0220%" y="453" width="0.0649%" height="15" fill="rgb(245,132,31)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="73.0220%" y="437" width="0.0649%" height="15" fill="rgb(230,171,4)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="447.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="73.0220%" y="421" width="0.0649%" height="15" fill="rgb(235,6,45)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="73.0220%" y="405" width="0.0649%" height="15" fill="rgb(220,80,28)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="73.0220%" y="389" width="0.0649%" height="15" fill="rgb(242,171,9)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="73.0220%" y="373" width="0.0649%" height="15" fill="rgb(214,135,29)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="73.0220%" y="357" width="0.0649%" height="15" fill="rgb(221,229,16)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.0220%" y="341" width="0.0649%" height="15" fill="rgb(253,59,46)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.0220%" y="325" width="0.0649%" height="15" fill="rgb(250,147,20)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.0220%" y="309" width="0.0649%" height="15" fill="rgb(236,64,48)" fg:x="1126" fg:w="1"/><text x="73.2720%" y="319.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="73.0869%" y="981" width="0.0649%" height="15" fill="rgb(240,37,42)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="73.0869%" y="965" width="0.0649%" height="15" fill="rgb(220,41,50)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="73.0869%" y="949" width="0.0649%" height="15" fill="rgb(216,51,14)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="959.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="73.0869%" y="933" width="0.0649%" height="15" fill="rgb(215,83,10)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="943.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="73.0869%" y="917" width="0.0649%" height="15" fill="rgb(206,144,17)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="73.0869%" y="901" width="0.0649%" height="15" fill="rgb(219,196,37)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="73.0869%" y="885" width="0.0649%" height="15" fill="rgb(226,135,26)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="73.0869%" y="869" width="0.0649%" height="15" fill="rgb(237,195,40)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="73.0869%" y="853" width="0.0649%" height="15" fill="rgb(228,182,42)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="73.0869%" y="837" width="0.0649%" height="15" fill="rgb(224,135,50)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="73.0869%" y="821" width="0.0649%" height="15" fill="rgb(236,215,34)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="73.0869%" y="805" width="0.0649%" height="15" fill="rgb(244,213,27)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="73.0869%" y="789" width="0.0649%" height="15" fill="rgb(233,37,53)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.0869%" y="773" width="0.0649%" height="15" fill="rgb(222,132,14)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.0869%" y="757" width="0.0649%" height="15" fill="rgb(219,202,29)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.0869%" y="741" width="0.0649%" height="15" fill="rgb(226,157,39)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="73.0869%" y="725" width="0.0649%" height="15" fill="rgb(235,213,2)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.0869%" y="709" width="0.0649%" height="15" fill="rgb(250,121,2)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.0869%" y="693" width="0.0649%" height="15" fill="rgb(206,192,33)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.0869%" y="677" width="0.0649%" height="15" fill="rgb(240,161,6)" fg:x="1127" fg:w="1"/><text x="73.3369%" y="687.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (2 samples, 0.13%)</title><rect x="73.0869%" y="997" width="0.1297%" height="15" fill="rgb(246,53,30)" fg:x="1127" fg:w="2"/><text x="73.3369%" y="1007.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (1 samples, 0.06%)</title><rect x="73.1518%" y="981" width="0.0649%" height="15" fill="rgb(219,123,43)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="991.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (1 samples, 0.06%)</title><rect x="73.1518%" y="965" width="0.0649%" height="15" fill="rgb(236,53,49)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="73.1518%" y="949" width="0.0649%" height="15" fill="rgb(241,156,1)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="73.1518%" y="933" width="0.0649%" height="15" fill="rgb(209,73,26)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="73.1518%" y="917" width="0.0649%" height="15" fill="rgb(206,114,3)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="73.1518%" y="901" width="0.0649%" height="15" fill="rgb(230,214,9)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="73.1518%" y="885" width="0.0649%" height="15" fill="rgb(240,184,46)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.1518%" y="869" width="0.0649%" height="15" fill="rgb(242,169,54)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.1518%" y="853" width="0.0649%" height="15" fill="rgb(207,168,50)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.1518%" y="837" width="0.0649%" height="15" fill="rgb(240,114,2)" fg:x="1128" fg:w="1"/><text x="73.4018%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="73.2166%" y="933" width="0.0649%" height="15" fill="rgb(211,17,40)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.2166%" y="917" width="0.0649%" height="15" fill="rgb(235,97,36)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.2166%" y="901" width="0.0649%" height="15" fill="rgb(208,164,11)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="73.2166%" y="885" width="0.0649%" height="15" fill="rgb(242,11,17)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="73.2166%" y="869" width="0.0649%" height="15" fill="rgb(215,86,33)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="73.2166%" y="853" width="0.0649%" height="15" fill="rgb(245,185,28)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="73.2166%" y="837" width="0.0649%" height="15" fill="rgb(231,89,42)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="73.2166%" y="821" width="0.0649%" height="15" fill="rgb(210,18,47)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="73.2166%" y="805" width="0.0649%" height="15" fill="rgb(214,84,8)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="73.2166%" y="789" width="0.0649%" height="15" fill="rgb(214,222,23)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.2166%" y="773" width="0.0649%" height="15" fill="rgb(213,104,21)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.2166%" y="757" width="0.0649%" height="15" fill="rgb(238,138,6)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.2166%" y="741" width="0.0649%" height="15" fill="rgb(205,167,50)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.2166%" y="725" width="0.0649%" height="15" fill="rgb(230,105,27)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.2166%" y="709" width="0.0649%" height="15" fill="rgb(222,97,48)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.2166%" y="693" width="0.0649%" height="15" fill="rgb(222,197,14)" fg:x="1129" fg:w="1"/><text x="73.4666%" y="703.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="73.2166%" y="981" width="0.1297%" height="15" fill="rgb(210,105,47)" fg:x="1129" fg:w="2"/><text x="73.4666%" y="991.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="73.2166%" y="965" width="0.1297%" height="15" fill="rgb(238,158,19)" fg:x="1129" fg:w="2"/><text x="73.4666%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (2 samples, 0.13%)</title><rect x="73.2166%" y="949" width="0.1297%" height="15" fill="rgb(226,176,23)" fg:x="1129" fg:w="2"/><text x="73.4666%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::entry_ranges (1 samples, 0.06%)</title><rect x="73.2815%" y="933" width="0.0649%" height="15" fill="rgb(208,79,31)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="73.2815%" y="917" width="0.0649%" height="15" fill="rgb(221,154,21)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="927.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="73.2815%" y="901" width="0.0649%" height="15" fill="rgb(213,61,41)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="73.2815%" y="885" width="0.0649%" height="15" fill="rgb(215,28,33)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="73.2815%" y="869" width="0.0649%" height="15" fill="rgb(231,139,26)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.2815%" y="853" width="0.0649%" height="15" fill="rgb(232,159,16)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.2815%" y="837" width="0.0649%" height="15" fill="rgb(233,80,10)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.2815%" y="821" width="0.0649%" height="15" fill="rgb(208,147,29)" fg:x="1130" fg:w="1"/><text x="73.5315%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.06%)</title><rect x="73.3463%" y="981" width="0.0649%" height="15" fill="rgb(213,10,12)" fg:x="1131" fg:w="1"/><text x="73.5963%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="73.3463%" y="965" width="0.0649%" height="15" fill="rgb(231,218,13)" fg:x="1131" fg:w="1"/><text x="73.5963%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.3463%" y="949" width="0.0649%" height="15" fill="rgb(244,199,44)" fg:x="1131" fg:w="1"/><text x="73.5963%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.3463%" y="933" width="0.0649%" height="15" fill="rgb(240,144,53)" fg:x="1131" fg:w="1"/><text x="73.5963%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.3463%" y="917" width="0.0649%" height="15" fill="rgb(223,57,28)" fg:x="1131" fg:w="1"/><text x="73.5963%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;()&gt;&gt; (1 samples, 0.06%)</title><rect x="73.4112%" y="965" width="0.0649%" height="15" fill="rgb(213,134,38)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="73.4112%" y="949" width="0.0649%" height="15" fill="rgb(251,182,42)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="73.4112%" y="933" width="0.0649%" height="15" fill="rgb(229,93,13)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="73.4112%" y="917" width="0.0649%" height="15" fill="rgb(234,171,3)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.4112%" y="901" width="0.0649%" height="15" fill="rgb(241,105,32)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.4112%" y="885" width="0.0649%" height="15" fill="rgb(221,66,3)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="73.4112%" y="869" width="0.0649%" height="15" fill="rgb(248,155,29)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.4112%" y="853" width="0.0649%" height="15" fill="rgb(231,31,5)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="73.4112%" y="837" width="0.0649%" height="15" fill="rgb(213,188,31)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="73.4112%" y="821" width="0.0649%" height="15" fill="rgb(212,104,33)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="73.4112%" y="805" width="0.0649%" height="15" fill="rgb(254,77,51)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="73.4112%" y="789" width="0.0649%" height="15" fill="rgb(234,39,26)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.4112%" y="773" width="0.0649%" height="15" fill="rgb(208,88,36)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.4112%" y="757" width="0.0649%" height="15" fill="rgb(243,222,10)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.4112%" y="741" width="0.0649%" height="15" fill="rgb(218,133,52)" fg:x="1132" fg:w="1"/><text x="73.6612%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;,redb::tree_store::btree_base::AccessGuard&lt;()&gt;)&gt; (2 samples, 0.13%)</title><rect x="73.4112%" y="981" width="0.1297%" height="15" fill="rgb(222,25,26)" fg:x="1132" fg:w="2"/><text x="73.6612%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="73.4760%" y="965" width="0.0649%" height="15" fill="rgb(243,174,24)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="73.4760%" y="949" width="0.0649%" height="15" fill="rgb(233,188,52)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="73.4760%" y="933" width="0.0649%" height="15" fill="rgb(208,89,14)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="73.4760%" y="917" width="0.0649%" height="15" fill="rgb(205,204,21)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.4760%" y="901" width="0.0649%" height="15" fill="rgb(246,39,28)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="73.4760%" y="885" width="0.0649%" height="15" fill="rgb(235,71,19)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="73.4760%" y="869" width="0.0649%" height="15" fill="rgb(211,62,39)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="73.4760%" y="853" width="0.0649%" height="15" fill="rgb(246,118,20)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="73.4760%" y="837" width="0.0649%" height="15" fill="rgb(230,82,12)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="73.4760%" y="821" width="0.0649%" height="15" fill="rgb(205,212,34)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="831.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="73.4760%" y="805" width="0.0649%" height="15" fill="rgb(239,90,1)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="73.4760%" y="789" width="0.0649%" height="15" fill="rgb(225,198,50)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="73.4760%" y="773" width="0.0649%" height="15" fill="rgb(227,208,48)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.4760%" y="757" width="0.0649%" height="15" fill="rgb(238,134,41)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="73.4760%" y="741" width="0.0649%" height="15" fill="rgb(241,58,39)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.4760%" y="725" width="0.0649%" height="15" fill="rgb(214,126,4)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.4760%" y="709" width="0.0649%" height="15" fill="rgb(235,149,4)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.4760%" y="693" width="0.0649%" height="15" fill="rgb(236,59,29)" fg:x="1133" fg:w="1"/><text x="73.7260%" y="703.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.5409%" y="581" width="0.0649%" height="15" fill="rgb(246,11,33)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="73.5409%" y="565" width="0.0649%" height="15" fill="rgb(232,180,35)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="73.5409%" y="549" width="0.0649%" height="15" fill="rgb(220,35,37)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="73.5409%" y="533" width="0.0649%" height="15" fill="rgb(238,107,48)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="73.5409%" y="517" width="0.0649%" height="15" fill="rgb(205,65,21)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="73.5409%" y="501" width="0.0649%" height="15" fill="rgb(246,138,48)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="73.5409%" y="485" width="0.0649%" height="15" fill="rgb(209,220,47)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="73.5409%" y="469" width="0.0649%" height="15" fill="rgb(222,162,49)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="73.5409%" y="453" width="0.0649%" height="15" fill="rgb(243,123,11)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="73.5409%" y="437" width="0.0649%" height="15" fill="rgb(221,229,41)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="73.5409%" y="421" width="0.0649%" height="15" fill="rgb(216,68,4)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="73.5409%" y="405" width="0.0649%" height="15" fill="rgb(207,88,35)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="415.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="73.5409%" y="389" width="0.0649%" height="15" fill="rgb(252,2,5)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.5409%" y="373" width="0.0649%" height="15" fill="rgb(209,173,7)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.5409%" y="357" width="0.0649%" height="15" fill="rgb(210,198,52)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.5409%" y="341" width="0.0649%" height="15" fill="rgb(228,152,32)" fg:x="1134" fg:w="1"/><text x="73.7909%" y="351.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="73.5409%" y="917" width="0.1297%" height="15" fill="rgb(249,98,29)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="73.5409%" y="901" width="0.1297%" height="15" fill="rgb(205,148,48)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="73.5409%" y="885" width="0.1297%" height="15" fill="rgb(236,69,34)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="869" width="0.1297%" height="15" fill="rgb(220,151,41)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="879.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="853" width="0.1297%" height="15" fill="rgb(254,106,24)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="73.5409%" y="837" width="0.1297%" height="15" fill="rgb(210,37,48)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="821" width="0.1297%" height="15" fill="rgb(254,131,5)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="805" width="0.1297%" height="15" fill="rgb(216,55,41)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="73.5409%" y="789" width="0.1297%" height="15" fill="rgb(250,35,31)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="73.5409%" y="773" width="0.1297%" height="15" fill="rgb(207,124,33)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="73.5409%" y="757" width="0.1297%" height="15" fill="rgb(249,175,17)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="73.5409%" y="741" width="0.1297%" height="15" fill="rgb(224,175,39)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="73.5409%" y="725" width="0.1297%" height="15" fill="rgb(208,67,49)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="709" width="0.1297%" height="15" fill="rgb(222,188,41)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="693" width="0.1297%" height="15" fill="rgb(243,213,30)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="73.5409%" y="677" width="0.1297%" height="15" fill="rgb(253,100,45)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="73.5409%" y="661" width="0.1297%" height="15" fill="rgb(226,24,44)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="73.5409%" y="645" width="0.1297%" height="15" fill="rgb(215,41,24)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="73.5409%" y="629" width="0.1297%" height="15" fill="rgb(254,53,33)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="73.5409%" y="613" width="0.1297%" height="15" fill="rgb(242,103,10)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.5409%" y="597" width="0.1297%" height="15" fill="rgb(246,29,21)" fg:x="1134" fg:w="2"/><text x="73.7909%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.6057%" y="581" width="0.0649%" height="15" fill="rgb(251,154,1)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="73.6057%" y="565" width="0.0649%" height="15" fill="rgb(254,212,26)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="73.6057%" y="549" width="0.0649%" height="15" fill="rgb(251,187,46)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="73.6057%" y="533" width="0.0649%" height="15" fill="rgb(224,208,14)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="73.6057%" y="517" width="0.0649%" height="15" fill="rgb(222,176,26)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="73.6057%" y="501" width="0.0649%" height="15" fill="rgb(241,219,52)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.6057%" y="485" width="0.0649%" height="15" fill="rgb(252,198,21)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.6057%" y="469" width="0.0649%" height="15" fill="rgb(244,196,23)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="73.6057%" y="453" width="0.0649%" height="15" fill="rgb(239,121,44)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="73.6057%" y="437" width="0.0649%" height="15" fill="rgb(249,203,23)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="73.6057%" y="421" width="0.0649%" height="15" fill="rgb(238,219,10)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="73.6057%" y="405" width="0.0649%" height="15" fill="rgb(241,35,46)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="73.6057%" y="389" width="0.0649%" height="15" fill="rgb(218,28,6)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.6057%" y="373" width="0.0649%" height="15" fill="rgb(233,151,50)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.6057%" y="357" width="0.0649%" height="15" fill="rgb(208,57,8)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="73.6057%" y="341" width="0.0649%" height="15" fill="rgb(253,99,10)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="73.6057%" y="325" width="0.0649%" height="15" fill="rgb(237,196,49)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="73.6057%" y="309" width="0.0649%" height="15" fill="rgb(209,51,3)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="73.6057%" y="293" width="0.0649%" height="15" fill="rgb(238,129,10)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="73.6057%" y="277" width="0.0649%" height="15" fill="rgb(246,201,16)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="73.6057%" y="261" width="0.0649%" height="15" fill="rgb(250,160,20)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="73.6057%" y="245" width="0.0649%" height="15" fill="rgb(251,107,25)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="73.6057%" y="229" width="0.0649%" height="15" fill="rgb(212,103,39)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="73.6057%" y="213" width="0.0649%" height="15" fill="rgb(207,9,29)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="73.6057%" y="197" width="0.0649%" height="15" fill="rgb(227,84,3)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="73.6057%" y="181" width="0.0649%" height="15" fill="rgb(242,194,7)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="73.6057%" y="165" width="0.0649%" height="15" fill="rgb(230,40,4)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="73.6057%" y="149" width="0.0649%" height="15" fill="rgb(243,229,33)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="73.6057%" y="133" width="0.0649%" height="15" fill="rgb(240,65,24)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="143.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.6057%" y="117" width="0.0649%" height="15" fill="rgb(212,28,20)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="127.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.6057%" y="101" width="0.0649%" height="15" fill="rgb(209,72,3)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="111.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.6057%" y="85" width="0.0649%" height="15" fill="rgb(238,170,36)" fg:x="1135" fg:w="1"/><text x="73.8557%" y="95.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.6706%" y="453" width="0.0649%" height="15" fill="rgb(236,19,38)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="73.6706%" y="437" width="0.0649%" height="15" fill="rgb(230,67,43)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="447.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="73.6706%" y="421" width="0.0649%" height="15" fill="rgb(227,14,36)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="431.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="73.6706%" y="405" width="0.0649%" height="15" fill="rgb(247,171,49)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="415.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="73.6706%" y="389" width="0.0649%" height="15" fill="rgb(235,164,51)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="73.6706%" y="373" width="0.0649%" height="15" fill="rgb(246,107,20)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="73.6706%" y="357" width="0.0649%" height="15" fill="rgb(226,88,18)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="73.6706%" y="341" width="0.0649%" height="15" fill="rgb(235,136,9)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="73.6706%" y="325" width="0.0649%" height="15" fill="rgb(209,3,34)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="73.6706%" y="309" width="0.0649%" height="15" fill="rgb(213,38,19)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="73.6706%" y="293" width="0.0649%" height="15" fill="rgb(254,24,24)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="73.6706%" y="277" width="0.0649%" height="15" fill="rgb(219,122,42)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="287.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="73.6706%" y="261" width="0.0649%" height="15" fill="rgb(205,128,31)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.6706%" y="245" width="0.0649%" height="15" fill="rgb(212,142,0)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.6706%" y="229" width="0.0649%" height="15" fill="rgb(211,25,35)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.6706%" y="213" width="0.0649%" height="15" fill="rgb(220,150,53)" fg:x="1136" fg:w="1"/><text x="73.9206%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.6706%" y="581" width="0.1297%" height="15" fill="rgb(220,30,24)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.6706%" y="565" width="0.1297%" height="15" fill="rgb(218,86,23)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="73.6706%" y="549" width="0.1297%" height="15" fill="rgb(206,62,27)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="73.6706%" y="533" width="0.1297%" height="15" fill="rgb(249,174,0)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="73.6706%" y="517" width="0.1297%" height="15" fill="rgb(246,67,27)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="73.6706%" y="501" width="0.1297%" height="15" fill="rgb(250,195,30)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="73.6706%" y="485" width="0.1297%" height="15" fill="rgb(251,171,50)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="73.6706%" y="469" width="0.1297%" height="15" fill="rgb(236,196,10)" fg:x="1136" fg:w="2"/><text x="73.9206%" y="479.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.7354%" y="453" width="0.0649%" height="15" fill="rgb(249,228,52)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="73.7354%" y="437" width="0.0649%" height="15" fill="rgb(219,60,51)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="73.7354%" y="421" width="0.0649%" height="15" fill="rgb(240,198,24)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="431.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="73.7354%" y="405" width="0.0649%" height="15" fill="rgb(240,192,40)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="415.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="73.7354%" y="389" width="0.0649%" height="15" fill="rgb(219,118,5)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="399.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="73.7354%" y="373" width="0.0649%" height="15" fill="rgb(205,202,34)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.7354%" y="357" width="0.0649%" height="15" fill="rgb(234,153,26)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.7354%" y="341" width="0.0649%" height="15" fill="rgb(229,26,29)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="351.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="73.7354%" y="325" width="0.0649%" height="15" fill="rgb(237,115,21)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.7354%" y="309" width="0.0649%" height="15" fill="rgb(252,144,15)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.7354%" y="293" width="0.0649%" height="15" fill="rgb(232,26,13)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.7354%" y="277" width="0.0649%" height="15" fill="rgb(206,44,19)" fg:x="1137" fg:w="1"/><text x="73.9854%" y="287.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="73.6706%" y="885" width="0.1946%" height="15" fill="rgb(249,159,2)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="73.6706%" y="869" width="0.1946%" height="15" fill="rgb(231,5,32)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="73.6706%" y="853" width="0.1946%" height="15" fill="rgb(249,210,18)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="863.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="73.6706%" y="837" width="0.1946%" height="15" fill="rgb(215,223,36)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="73.6706%" y="821" width="0.1946%" height="15" fill="rgb(245,185,20)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="73.6706%" y="805" width="0.1946%" height="15" fill="rgb(206,224,11)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="73.6706%" y="789" width="0.1946%" height="15" fill="rgb(248,73,42)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="73.6706%" y="773" width="0.1946%" height="15" fill="rgb(219,149,31)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="73.6706%" y="757" width="0.1946%" height="15" fill="rgb(243,104,17)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="73.6706%" y="741" width="0.1946%" height="15" fill="rgb(244,117,33)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="73.6706%" y="725" width="0.1946%" height="15" fill="rgb(251,25,47)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="73.6706%" y="709" width="0.1946%" height="15" fill="rgb(249,70,13)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="73.6706%" y="693" width="0.1946%" height="15" fill="rgb(217,133,18)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="73.6706%" y="677" width="0.1946%" height="15" fill="rgb(248,97,28)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="73.6706%" y="661" width="0.1946%" height="15" fill="rgb(237,193,4)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="73.6706%" y="645" width="0.1946%" height="15" fill="rgb(247,198,45)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="73.6706%" y="629" width="0.1946%" height="15" fill="rgb(245,2,20)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="73.6706%" y="613" width="0.1946%" height="15" fill="rgb(210,71,36)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="73.6706%" y="597" width="0.1946%" height="15" fill="rgb(238,114,30)" fg:x="1136" fg:w="3"/><text x="73.9206%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="73.8003%" y="581" width="0.0649%" height="15" fill="rgb(241,200,2)" fg:x="1138" fg:w="1"/><text x="74.0503%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.8003%" y="565" width="0.0649%" height="15" fill="rgb(232,106,18)" fg:x="1138" fg:w="1"/><text x="74.0503%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.8003%" y="549" width="0.0649%" height="15" fill="rgb(211,141,18)" fg:x="1138" fg:w="1"/><text x="74.0503%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.8003%" y="533" width="0.0649%" height="15" fill="rgb(224,9,9)" fg:x="1138" fg:w="1"/><text x="74.0503%" y="543.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (6 samples, 0.39%)</title><rect x="73.5409%" y="933" width="0.3891%" height="15" fill="rgb(249,137,46)" fg:x="1134" fg:w="6"/><text x="73.7909%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (4 samples, 0.26%)</title><rect x="73.6706%" y="917" width="0.2594%" height="15" fill="rgb(236,44,45)" fg:x="1136" fg:w="4"/><text x="73.9206%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="73.6706%" y="901" width="0.2594%" height="15" fill="rgb(205,68,40)" fg:x="1136" fg:w="4"/><text x="73.9206%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="73.8651%" y="885" width="0.0649%" height="15" fill="rgb(214,198,49)" fg:x="1139" fg:w="1"/><text x="74.1151%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="73.8651%" y="869" width="0.0649%" height="15" fill="rgb(226,140,45)" fg:x="1139" fg:w="1"/><text x="74.1151%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.8651%" y="853" width="0.0649%" height="15" fill="rgb(209,109,20)" fg:x="1139" fg:w="1"/><text x="74.1151%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.8651%" y="837" width="0.0649%" height="15" fill="rgb(217,33,46)" fg:x="1139" fg:w="1"/><text x="74.1151%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.8651%" y="821" width="0.0649%" height="15" fill="rgb(232,150,33)" fg:x="1139" fg:w="1"/><text x="74.1151%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.9300%" y="805" width="0.0649%" height="15" fill="rgb(233,76,25)" fg:x="1140" fg:w="1"/><text x="74.1800%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.9300%" y="789" width="0.0649%" height="15" fill="rgb(254,219,23)" fg:x="1140" fg:w="1"/><text x="74.1800%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.9300%" y="773" width="0.0649%" height="15" fill="rgb(233,108,4)" fg:x="1140" fg:w="1"/><text x="74.1800%" y="783.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="73.9948%" y="693" width="0.0649%" height="15" fill="rgb(229,98,6)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="73.9948%" y="677" width="0.0649%" height="15" fill="rgb(217,40,27)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="73.9948%" y="661" width="0.0649%" height="15" fill="rgb(221,35,43)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="73.9948%" y="645" width="0.0649%" height="15" fill="rgb(212,107,11)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="73.9948%" y="629" width="0.0649%" height="15" fill="rgb(245,42,44)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="73.9948%" y="613" width="0.0649%" height="15" fill="rgb(209,31,12)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="73.9948%" y="597" width="0.0649%" height="15" fill="rgb(210,228,54)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="73.9948%" y="581" width="0.0649%" height="15" fill="rgb(241,19,33)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="73.9948%" y="565" width="0.0649%" height="15" fill="rgb(229,51,27)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="73.9948%" y="549" width="0.0649%" height="15" fill="rgb(214,167,49)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="73.9948%" y="533" width="0.0649%" height="15" fill="rgb(248,140,47)" fg:x="1141" fg:w="1"/><text x="74.2448%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.0597%" y="533" width="0.0649%" height="15" fill="rgb(228,6,51)" fg:x="1142" fg:w="1"/><text x="74.3097%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.0597%" y="517" width="0.0649%" height="15" fill="rgb(242,44,53)" fg:x="1142" fg:w="1"/><text x="74.3097%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.0597%" y="501" width="0.0649%" height="15" fill="rgb(249,90,50)" fg:x="1142" fg:w="1"/><text x="74.3097%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.1245%" y="469" width="0.0649%" height="15" fill="rgb(222,84,19)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="74.1245%" y="453" width="0.0649%" height="15" fill="rgb(214,140,12)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="74.1245%" y="437" width="0.0649%" height="15" fill="rgb(210,20,43)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="74.1245%" y="421" width="0.0649%" height="15" fill="rgb(243,1,40)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="74.1245%" y="405" width="0.0649%" height="15" fill="rgb(224,102,26)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="74.1245%" y="389" width="0.0649%" height="15" fill="rgb(221,179,1)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="74.1245%" y="373" width="0.0649%" height="15" fill="rgb(216,209,47)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="74.1245%" y="357" width="0.0649%" height="15" fill="rgb(251,135,9)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.1245%" y="341" width="0.0649%" height="15" fill="rgb(242,9,36)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.1245%" y="325" width="0.0649%" height="15" fill="rgb(249,60,37)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.1245%" y="309" width="0.0649%" height="15" fill="rgb(230,66,45)" fg:x="1143" fg:w="1"/><text x="74.3745%" y="319.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (5 samples, 0.32%)</title><rect x="73.9300%" y="917" width="0.3243%" height="15" fill="rgb(216,1,47)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (5 samples, 0.32%)</title><rect x="73.9300%" y="901" width="0.3243%" height="15" fill="rgb(235,8,23)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (5 samples, 0.32%)</title><rect x="73.9300%" y="885" width="0.3243%" height="15" fill="rgb(225,136,11)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (5 samples, 0.32%)</title><rect x="73.9300%" y="869" width="0.3243%" height="15" fill="rgb(228,63,44)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="879.50"></text></g><g><title>bincode::internal::deserialize (5 samples, 0.32%)</title><rect x="73.9300%" y="853" width="0.3243%" height="15" fill="rgb(240,43,52)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (5 samples, 0.32%)</title><rect x="73.9300%" y="837" width="0.3243%" height="15" fill="rgb(217,167,36)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="73.9300%" y="821" width="0.3243%" height="15" fill="rgb(250,19,6)" fg:x="1140" fg:w="5"/><text x="74.1800%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="73.9948%" y="805" width="0.2594%" height="15" fill="rgb(236,60,51)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="73.9948%" y="789" width="0.2594%" height="15" fill="rgb(222,217,20)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="73.9948%" y="773" width="0.2594%" height="15" fill="rgb(242,65,52)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="73.9948%" y="757" width="0.2594%" height="15" fill="rgb(217,5,41)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="73.9948%" y="741" width="0.2594%" height="15" fill="rgb(223,208,53)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="73.9948%" y="725" width="0.2594%" height="15" fill="rgb(221,104,30)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="73.9948%" y="709" width="0.2594%" height="15" fill="rgb(230,210,42)" fg:x="1141" fg:w="4"/><text x="74.2448%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="74.0597%" y="693" width="0.1946%" height="15" fill="rgb(206,205,27)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="74.0597%" y="677" width="0.1946%" height="15" fill="rgb(233,114,38)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="74.0597%" y="661" width="0.1946%" height="15" fill="rgb(216,174,36)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="74.0597%" y="645" width="0.1946%" height="15" fill="rgb(211,30,9)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="74.0597%" y="629" width="0.1946%" height="15" fill="rgb(216,8,21)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="74.0597%" y="613" width="0.1946%" height="15" fill="rgb(237,209,39)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="74.0597%" y="597" width="0.1946%" height="15" fill="rgb(235,111,47)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="74.0597%" y="581" width="0.1946%" height="15" fill="rgb(216,139,9)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="74.0597%" y="565" width="0.1946%" height="15" fill="rgb(248,185,4)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="74.0597%" y="549" width="0.1946%" height="15" fill="rgb(239,185,25)" fg:x="1142" fg:w="3"/><text x="74.3097%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="74.1245%" y="533" width="0.1297%" height="15" fill="rgb(233,207,8)" fg:x="1143" fg:w="2"/><text x="74.3745%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="74.1245%" y="517" width="0.1297%" height="15" fill="rgb(249,220,24)" fg:x="1143" fg:w="2"/><text x="74.3745%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="74.1245%" y="501" width="0.1297%" height="15" fill="rgb(221,50,14)" fg:x="1143" fg:w="2"/><text x="74.3745%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="74.1245%" y="485" width="0.1297%" height="15" fill="rgb(227,79,42)" fg:x="1143" fg:w="2"/><text x="74.3745%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.1894%" y="469" width="0.0649%" height="15" fill="rgb(228,218,49)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="74.1894%" y="453" width="0.0649%" height="15" fill="rgb(249,18,15)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="74.1894%" y="437" width="0.0649%" height="15" fill="rgb(212,84,27)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="74.1894%" y="421" width="0.0649%" height="15" fill="rgb(207,83,24)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="74.1894%" y="405" width="0.0649%" height="15" fill="rgb(219,61,7)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="74.1894%" y="389" width="0.0649%" height="15" fill="rgb(211,43,29)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.1894%" y="373" width="0.0649%" height="15" fill="rgb(243,15,23)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.1894%" y="357" width="0.0649%" height="15" fill="rgb(217,52,28)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="74.1894%" y="341" width="0.0649%" height="15" fill="rgb(210,35,6)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="74.1894%" y="325" width="0.0649%" height="15" fill="rgb(237,187,28)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="74.1894%" y="309" width="0.0649%" height="15" fill="rgb(231,136,24)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="74.1894%" y="293" width="0.0649%" height="15" fill="rgb(205,176,52)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="303.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.06%)</title><rect x="74.1894%" y="277" width="0.0649%" height="15" fill="rgb(218,65,12)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.1894%" y="261" width="0.0649%" height="15" fill="rgb(234,101,21)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.1894%" y="245" width="0.0649%" height="15" fill="rgb(206,13,20)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.1894%" y="229" width="0.0649%" height="15" fill="rgb(236,89,44)" fg:x="1144" fg:w="1"/><text x="74.4394%" y="239.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::fixed_width (1 samples, 0.06%)</title><rect x="74.2542%" y="901" width="0.0649%" height="15" fill="rgb(225,52,17)" fg:x="1145" fg:w="1"/><text x="74.5042%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.2542%" y="885" width="0.0649%" height="15" fill="rgb(214,27,25)" fg:x="1145" fg:w="1"/><text x="74.5042%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.2542%" y="869" width="0.0649%" height="15" fill="rgb(240,141,35)" fg:x="1145" fg:w="1"/><text x="74.5042%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.2542%" y="853" width="0.0649%" height="15" fill="rgb(216,126,3)" fg:x="1145" fg:w="1"/><text x="74.5042%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.3191%" y="725" width="0.0649%" height="15" fill="rgb(249,196,23)" fg:x="1146" fg:w="1"/><text x="74.5691%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.3191%" y="709" width="0.0649%" height="15" fill="rgb(215,185,43)" fg:x="1146" fg:w="1"/><text x="74.5691%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.3191%" y="693" width="0.0649%" height="15" fill="rgb(208,194,36)" fg:x="1146" fg:w="1"/><text x="74.5691%" y="703.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (14 samples, 0.91%)</title><rect x="73.5409%" y="981" width="0.9079%" height="15" fill="rgb(245,182,12)" fg:x="1134" fg:w="14"/><text x="73.7909%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (14 samples, 0.91%)</title><rect x="73.5409%" y="965" width="0.9079%" height="15" fill="rgb(244,222,52)" fg:x="1134" fg:w="14"/><text x="73.7909%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (14 samples, 0.91%)</title><rect x="73.5409%" y="949" width="0.9079%" height="15" fill="rgb(236,222,51)" fg:x="1134" fg:w="14"/><text x="73.7909%" y="959.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (8 samples, 0.52%)</title><rect x="73.9300%" y="933" width="0.5188%" height="15" fill="rgb(254,71,22)" fg:x="1140" fg:w="8"/><text x="74.1800%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (3 samples, 0.19%)</title><rect x="74.2542%" y="917" width="0.1946%" height="15" fill="rgb(250,104,15)" fg:x="1145" fg:w="3"/><text x="74.5042%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="74.3191%" y="901" width="0.1297%" height="15" fill="rgb(229,223,46)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="74.3191%" y="885" width="0.1297%" height="15" fill="rgb(209,129,18)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="74.3191%" y="869" width="0.1297%" height="15" fill="rgb(224,160,1)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="74.3191%" y="853" width="0.1297%" height="15" fill="rgb(237,112,21)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="863.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="74.3191%" y="837" width="0.1297%" height="15" fill="rgb(215,198,53)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="74.3191%" y="821" width="0.1297%" height="15" fill="rgb(218,227,35)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="74.3191%" y="805" width="0.1297%" height="15" fill="rgb(232,121,22)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="74.3191%" y="789" width="0.1297%" height="15" fill="rgb(235,52,54)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="74.3191%" y="773" width="0.1297%" height="15" fill="rgb(219,21,44)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="74.3191%" y="757" width="0.1297%" height="15" fill="rgb(221,51,43)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="74.3191%" y="741" width="0.1297%" height="15" fill="rgb(225,77,42)" fg:x="1146" fg:w="2"/><text x="74.5691%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="74.3839%" y="725" width="0.0649%" height="15" fill="rgb(214,117,53)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="74.3839%" y="709" width="0.0649%" height="15" fill="rgb(218,227,27)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.3839%" y="693" width="0.0649%" height="15" fill="rgb(223,214,36)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.3839%" y="677" width="0.0649%" height="15" fill="rgb(235,21,7)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="74.3839%" y="661" width="0.0649%" height="15" fill="rgb(244,216,4)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="74.3839%" y="645" width="0.0649%" height="15" fill="rgb(249,197,24)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="74.3839%" y="629" width="0.0649%" height="15" fill="rgb(222,169,49)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="74.3839%" y="613" width="0.0649%" height="15" fill="rgb(207,137,33)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="74.3839%" y="597" width="0.0649%" height="15" fill="rgb(219,180,40)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.3839%" y="581" width="0.0649%" height="15" fill="rgb(250,163,42)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.3839%" y="565" width="0.0649%" height="15" fill="rgb(239,163,0)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="74.3839%" y="549" width="0.0649%" height="15" fill="rgb(252,38,28)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="74.3839%" y="533" width="0.0649%" height="15" fill="rgb(254,203,26)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="74.3839%" y="517" width="0.0649%" height="15" fill="rgb(209,129,32)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="74.3839%" y="501" width="0.0649%" height="15" fill="rgb(207,177,52)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="74.3839%" y="485" width="0.0649%" height="15" fill="rgb(230,209,36)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.3839%" y="469" width="0.0649%" height="15" fill="rgb(238,131,0)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="74.3839%" y="453" width="0.0649%" height="15" fill="rgb(218,61,31)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="74.3839%" y="437" width="0.0649%" height="15" fill="rgb(232,6,53)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="447.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="74.3839%" y="421" width="0.0649%" height="15" fill="rgb(254,100,32)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="431.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="74.3839%" y="405" width="0.0649%" height="15" fill="rgb(229,194,49)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="415.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="74.3839%" y="389" width="0.0649%" height="15" fill="rgb(206,208,39)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="74.3839%" y="373" width="0.0649%" height="15" fill="rgb(246,226,14)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="74.3839%" y="357" width="0.0649%" height="15" fill="rgb(226,48,32)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="74.3839%" y="341" width="0.0649%" height="15" fill="rgb(252,43,54)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="74.3839%" y="325" width="0.0649%" height="15" fill="rgb(207,124,0)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="74.3839%" y="309" width="0.0649%" height="15" fill="rgb(248,188,30)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="74.3839%" y="293" width="0.0649%" height="15" fill="rgb(232,14,43)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="74.3839%" y="277" width="0.0649%" height="15" fill="rgb(218,52,29)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="74.3839%" y="261" width="0.0649%" height="15" fill="rgb(218,176,50)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.3839%" y="245" width="0.0649%" height="15" fill="rgb(213,112,0)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.3839%" y="229" width="0.0649%" height="15" fill="rgb(244,216,8)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.3839%" y="213" width="0.0649%" height="15" fill="rgb(224,148,53)" fg:x="1147" fg:w="1"/><text x="74.6339%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="74.4488%" y="949" width="0.0649%" height="15" fill="rgb(241,133,40)" fg:x="1148" fg:w="1"/><text x="74.6988%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.4488%" y="933" width="0.0649%" height="15" fill="rgb(232,17,44)" fg:x="1148" fg:w="1"/><text x="74.6988%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.4488%" y="917" width="0.0649%" height="15" fill="rgb(213,32,25)" fg:x="1148" fg:w="1"/><text x="74.6988%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.4488%" y="901" width="0.0649%" height="15" fill="rgb(249,115,27)" fg:x="1148" fg:w="1"/><text x="74.6988%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (1 samples, 0.06%)</title><rect x="74.5136%" y="933" width="0.0649%" height="15" fill="rgb(241,50,1)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="74.5136%" y="917" width="0.0649%" height="15" fill="rgb(244,175,40)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="74.5136%" y="901" width="0.0649%" height="15" fill="rgb(230,94,34)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="74.5136%" y="885" width="0.0649%" height="15" fill="rgb(223,185,29)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="74.5136%" y="869" width="0.0649%" height="15" fill="rgb(225,193,15)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="74.5136%" y="853" width="0.0649%" height="15" fill="rgb(252,121,38)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="74.5136%" y="837" width="0.0649%" height="15" fill="rgb(232,44,12)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="74.5136%" y="821" width="0.0649%" height="15" fill="rgb(226,45,54)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="74.5136%" y="805" width="0.0649%" height="15" fill="rgb(209,67,17)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="74.5136%" y="789" width="0.0649%" height="15" fill="rgb(219,108,52)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="799.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="74.5136%" y="773" width="0.0649%" height="15" fill="rgb(216,118,19)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="74.5136%" y="757" width="0.0649%" height="15" fill="rgb(228,120,40)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="767.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="74.5136%" y="741" width="0.0649%" height="15" fill="rgb(221,218,34)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="74.5136%" y="725" width="0.0649%" height="15" fill="rgb(235,89,14)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="74.5136%" y="709" width="0.0649%" height="15" fill="rgb(248,89,7)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="74.5136%" y="693" width="0.0649%" height="15" fill="rgb(212,114,34)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="703.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="74.5136%" y="677" width="0.0649%" height="15" fill="rgb(246,88,32)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="74.5136%" y="661" width="0.0649%" height="15" fill="rgb(237,135,0)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="74.5136%" y="645" width="0.0649%" height="15" fill="rgb(220,201,54)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.5136%" y="629" width="0.0649%" height="15" fill="rgb(210,142,36)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.5136%" y="613" width="0.0649%" height="15" fill="rgb(247,189,26)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.5136%" y="597" width="0.0649%" height="15" fill="rgb(223,89,24)" fg:x="1149" fg:w="1"/><text x="74.7636%" y="607.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (2 samples, 0.13%)</title><rect x="74.5136%" y="949" width="0.1297%" height="15" fill="rgb(205,90,19)" fg:x="1149" fg:w="2"/><text x="74.7636%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="74.5785%" y="933" width="0.0649%" height="15" fill="rgb(234,57,40)" fg:x="1150" fg:w="1"/><text x="74.8285%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="74.5785%" y="917" width="0.0649%" height="15" fill="rgb(213,109,10)" fg:x="1150" fg:w="1"/><text x="74.8285%" y="927.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="74.5785%" y="901" width="0.0649%" height="15" fill="rgb(214,189,23)" fg:x="1150" fg:w="1"/><text x="74.8285%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.5785%" y="885" width="0.0649%" height="15" fill="rgb(234,200,10)" fg:x="1150" fg:w="1"/><text x="74.8285%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.5785%" y="869" width="0.0649%" height="15" fill="rgb(221,148,16)" fg:x="1150" fg:w="1"/><text x="74.8285%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.5785%" y="853" width="0.0649%" height="15" fill="rgb(230,115,10)" fg:x="1150" fg:w="1"/><text x="74.8285%" y="863.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (4 samples, 0.26%)</title><rect x="74.4488%" y="981" width="0.2594%" height="15" fill="rgb(220,106,42)" fg:x="1148" fg:w="4"/><text x="74.6988%" y="991.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (4 samples, 0.26%)</title><rect x="74.4488%" y="965" width="0.2594%" height="15" fill="rgb(225,105,39)" fg:x="1148" fg:w="4"/><text x="74.6988%" y="975.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (1 samples, 0.06%)</title><rect x="74.6433%" y="949" width="0.0649%" height="15" fill="rgb(211,161,38)" fg:x="1151" fg:w="1"/><text x="74.8933%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.6433%" y="933" width="0.0649%" height="15" fill="rgb(213,23,19)" fg:x="1151" fg:w="1"/><text x="74.8933%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.6433%" y="917" width="0.0649%" height="15" fill="rgb(240,2,33)" fg:x="1151" fg:w="1"/><text x="74.8933%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.6433%" y="901" width="0.0649%" height="15" fill="rgb(221,29,45)" fg:x="1151" fg:w="1"/><text x="74.8933%" y="911.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="74.7082%" y="965" width="0.0649%" height="15" fill="rgb(242,10,19)" fg:x="1152" fg:w="1"/><text x="74.9582%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.7082%" y="949" width="0.0649%" height="15" fill="rgb(250,84,37)" fg:x="1152" fg:w="1"/><text x="74.9582%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.7082%" y="933" width="0.0649%" height="15" fill="rgb(214,136,7)" fg:x="1152" fg:w="1"/><text x="74.9582%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.7082%" y="917" width="0.0649%" height="15" fill="rgb(231,189,12)" fg:x="1152" fg:w="1"/><text x="74.9582%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="74.7730%" y="965" width="0.0649%" height="15" fill="rgb(244,40,16)" fg:x="1153" fg:w="1"/><text x="75.0230%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.7730%" y="949" width="0.0649%" height="15" fill="rgb(217,29,15)" fg:x="1153" fg:w="1"/><text x="75.0230%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.7730%" y="933" width="0.0649%" height="15" fill="rgb(235,172,33)" fg:x="1153" fg:w="1"/><text x="75.0230%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.7730%" y="917" width="0.0649%" height="15" fill="rgb(206,148,28)" fg:x="1153" fg:w="1"/><text x="75.0230%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="74.8379%" y="965" width="0.0649%" height="15" fill="rgb(251,167,37)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="74.8379%" y="949" width="0.0649%" height="15" fill="rgb(229,94,52)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;redb::tree_store::page_store::page_manager::TransactionalMemory&gt;&gt; (1 samples, 0.06%)</title><rect x="74.8379%" y="933" width="0.0649%" height="15" fill="rgb(216,132,9)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="74.8379%" y="917" width="0.0649%" height="15" fill="rgb(208,110,29)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="74.8379%" y="901" width="0.0649%" height="15" fill="rgb(241,23,8)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="74.8379%" y="885" width="0.0649%" height="15" fill="rgb(208,26,35)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.8379%" y="869" width="0.0649%" height="15" fill="rgb(242,165,34)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.8379%" y="853" width="0.0649%" height="15" fill="rgb(222,222,33)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.8379%" y="837" width="0.0649%" height="15" fill="rgb(227,16,52)" fg:x="1154" fg:w="1"/><text x="75.0879%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="74.9027%" y="965" width="0.0649%" height="15" fill="rgb(213,93,12)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="74.9027%" y="949" width="0.0649%" height="15" fill="rgb(238,41,5)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="74.9027%" y="933" width="0.0649%" height="15" fill="rgb(211,60,15)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="74.9027%" y="917" width="0.0649%" height="15" fill="rgb(209,11,34)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="74.9027%" y="901" width="0.0649%" height="15" fill="rgb(254,155,53)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="74.9027%" y="885" width="0.0649%" height="15" fill="rgb(236,174,8)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="74.9027%" y="869" width="0.0649%" height="15" fill="rgb(229,31,27)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="74.9027%" y="853" width="0.0649%" height="15" fill="rgb(242,226,26)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="74.9027%" y="837" width="0.0649%" height="15" fill="rgb(234,32,40)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="74.9027%" y="821" width="0.0649%" height="15" fill="rgb(249,226,47)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="74.9027%" y="805" width="0.0649%" height="15" fill="rgb(212,6,26)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="74.9027%" y="789" width="0.0649%" height="15" fill="rgb(249,202,29)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="74.9027%" y="773" width="0.0649%" height="15" fill="rgb(226,106,4)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="74.9027%" y="757" width="0.0649%" height="15" fill="rgb(251,2,27)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="74.9027%" y="741" width="0.0649%" height="15" fill="rgb(236,208,0)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.9027%" y="725" width="0.0649%" height="15" fill="rgb(211,66,17)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.9027%" y="709" width="0.0649%" height="15" fill="rgb(216,129,9)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.9027%" y="693" width="0.0649%" height="15" fill="rgb(215,130,23)" fg:x="1155" fg:w="1"/><text x="75.1527%" y="703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="74.9676%" y="901" width="0.0649%" height="15" fill="rgb(253,157,11)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="74.9676%" y="885" width="0.0649%" height="15" fill="rgb(224,25,14)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="74.9676%" y="869" width="0.0649%" height="15" fill="rgb(238,16,7)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="74.9676%" y="853" width="0.0649%" height="15" fill="rgb(228,74,11)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="74.9676%" y="837" width="0.0649%" height="15" fill="rgb(239,221,27)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="74.9676%" y="821" width="0.0649%" height="15" fill="rgb(229,166,18)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="831.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="74.9676%" y="805" width="0.0649%" height="15" fill="rgb(254,94,46)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="74.9676%" y="789" width="0.0649%" height="15" fill="rgb(241,79,19)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="74.9676%" y="773" width="0.0649%" height="15" fill="rgb(228,99,51)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="74.9676%" y="757" width="0.0649%" height="15" fill="rgb(211,15,6)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="74.9676%" y="741" width="0.0649%" height="15" fill="rgb(245,107,54)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="74.9676%" y="725" width="0.0649%" height="15" fill="rgb(243,3,2)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="74.9676%" y="709" width="0.0649%" height="15" fill="rgb(206,122,10)" fg:x="1156" fg:w="1"/><text x="75.2176%" y="719.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="74.9676%" y="917" width="0.1297%" height="15" fill="rgb(224,88,4)" fg:x="1156" fg:w="2"/><text x="75.2176%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="75.0324%" y="901" width="0.0649%" height="15" fill="rgb(230,1,41)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="75.0324%" y="885" width="0.0649%" height="15" fill="rgb(230,1,31)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="75.0324%" y="869" width="0.0649%" height="15" fill="rgb(232,67,19)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="75.0324%" y="853" width="0.0649%" height="15" fill="rgb(222,206,20)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="75.0324%" y="837" width="0.0649%" height="15" fill="rgb(217,225,19)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="75.0324%" y="821" width="0.0649%" height="15" fill="rgb(234,13,33)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="75.0324%" y="805" width="0.0649%" height="15" fill="rgb(254,5,1)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="75.0324%" y="789" width="0.0649%" height="15" fill="rgb(211,121,41)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.0324%" y="773" width="0.0649%" height="15" fill="rgb(213,199,35)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.0324%" y="757" width="0.0649%" height="15" fill="rgb(240,118,22)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.0324%" y="741" width="0.0649%" height="15" fill="rgb(238,184,25)" fg:x="1157" fg:w="1"/><text x="75.2824%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="74.9676%" y="965" width="0.1946%" height="15" fill="rgb(210,165,6)" fg:x="1156" fg:w="3"/><text x="75.2176%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (3 samples, 0.19%)</title><rect x="74.9676%" y="949" width="0.1946%" height="15" fill="rgb(235,149,5)" fg:x="1156" fg:w="3"/><text x="75.2176%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (3 samples, 0.19%)</title><rect x="74.9676%" y="933" width="0.1946%" height="15" fill="rgb(221,63,5)" fg:x="1156" fg:w="3"/><text x="75.2176%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::poison::mutex::Mutex&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="75.0973%" y="917" width="0.0649%" height="15" fill="rgb(250,44,41)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="75.0973%" y="901" width="0.0649%" height="15" fill="rgb(235,112,47)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="75.0973%" y="885" width="0.0649%" height="15" fill="rgb(252,176,34)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="75.0973%" y="869" width="0.0649%" height="15" fill="rgb(234,50,19)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.0973%" y="853" width="0.0649%" height="15" fill="rgb(241,195,31)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.0973%" y="837" width="0.0649%" height="15" fill="rgb(212,93,11)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.0973%" y="821" width="0.0649%" height="15" fill="rgb(254,98,51)" fg:x="1158" fg:w="1"/><text x="75.3473%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="75.1621%" y="965" width="0.0649%" height="15" fill="rgb(246,18,45)" fg:x="1159" fg:w="1"/><text x="75.4121%" y="975.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="75.1621%" y="949" width="0.0649%" height="15" fill="rgb(215,148,23)" fg:x="1159" fg:w="1"/><text x="75.4121%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.1621%" y="933" width="0.0649%" height="15" fill="rgb(227,22,7)" fg:x="1159" fg:w="1"/><text x="75.4121%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.1621%" y="917" width="0.0649%" height="15" fill="rgb(207,210,37)" fg:x="1159" fg:w="1"/><text x="75.4121%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.1621%" y="901" width="0.0649%" height="15" fill="rgb(247,147,42)" fg:x="1159" fg:w="1"/><text x="75.4121%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="75.2270%" y="933" width="0.0649%" height="15" fill="rgb(226,213,14)" fg:x="1160" fg:w="1"/><text x="75.4770%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.2270%" y="917" width="0.0649%" height="15" fill="rgb(223,18,10)" fg:x="1160" fg:w="1"/><text x="75.4770%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.2270%" y="901" width="0.0649%" height="15" fill="rgb(253,34,22)" fg:x="1160" fg:w="1"/><text x="75.4770%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.2270%" y="885" width="0.0649%" height="15" fill="rgb(222,90,31)" fg:x="1160" fg:w="1"/><text x="75.4770%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="75.2918%" y="917" width="0.1297%" height="15" fill="rgb(220,182,30)" fg:x="1161" fg:w="2"/><text x="75.5418%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="75.2918%" y="901" width="0.1297%" height="15" fill="rgb(229,170,12)" fg:x="1161" fg:w="2"/><text x="75.5418%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="75.2918%" y="885" width="0.1297%" height="15" fill="rgb(210,101,21)" fg:x="1161" fg:w="2"/><text x="75.5418%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.4215%" y="837" width="0.0649%" height="15" fill="rgb(237,177,31)" fg:x="1163" fg:w="1"/><text x="75.6715%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.4215%" y="821" width="0.0649%" height="15" fill="rgb(215,91,34)" fg:x="1163" fg:w="1"/><text x="75.6715%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.4215%" y="805" width="0.0649%" height="15" fill="rgb(229,206,16)" fg:x="1163" fg:w="1"/><text x="75.6715%" y="815.50"></text></g><g><title>bincode::internal::serialize_into (3 samples, 0.19%)</title><rect x="75.4215%" y="885" width="0.1946%" height="15" fill="rgb(235,207,10)" fg:x="1163" fg:w="3"/><text x="75.6715%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (3 samples, 0.19%)</title><rect x="75.4215%" y="869" width="0.1946%" height="15" fill="rgb(247,18,10)" fg:x="1163" fg:w="3"/><text x="75.6715%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.19%)</title><rect x="75.4215%" y="853" width="0.1946%" height="15" fill="rgb(232,4,6)" fg:x="1163" fg:w="3"/><text x="75.6715%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="75.4864%" y="837" width="0.1297%" height="15" fill="rgb(247,93,45)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="75.4864%" y="821" width="0.1297%" height="15" fill="rgb(240,181,18)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="75.4864%" y="805" width="0.1297%" height="15" fill="rgb(208,224,0)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="815.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="75.4864%" y="789" width="0.1297%" height="15" fill="rgb(224,207,54)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="799.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (2 samples, 0.13%)</title><rect x="75.4864%" y="773" width="0.1297%" height="15" fill="rgb(217,152,29)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (2 samples, 0.13%)</title><rect x="75.4864%" y="757" width="0.1297%" height="15" fill="rgb(243,78,27)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="767.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (2 samples, 0.13%)</title><rect x="75.4864%" y="741" width="0.1297%" height="15" fill="rgb(228,111,9)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="751.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (2 samples, 0.13%)</title><rect x="75.4864%" y="725" width="0.1297%" height="15" fill="rgb(230,213,21)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="735.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (2 samples, 0.13%)</title><rect x="75.4864%" y="709" width="0.1297%" height="15" fill="rgb(248,50,36)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="719.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u16 (2 samples, 0.13%)</title><rect x="75.4864%" y="693" width="0.1297%" height="15" fill="rgb(226,19,31)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="75.4864%" y="677" width="0.1297%" height="15" fill="rgb(205,132,21)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="75.4864%" y="661" width="0.1297%" height="15" fill="rgb(207,42,19)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="75.4864%" y="645" width="0.1297%" height="15" fill="rgb(229,69,35)" fg:x="1164" fg:w="2"/><text x="75.7364%" y="655.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (6 samples, 0.39%)</title><rect x="75.2918%" y="933" width="0.3891%" height="15" fill="rgb(226,96,11)" fg:x="1161" fg:w="6"/><text x="75.5418%" y="943.50"></text></g><g><title>bincode::config::Options::serialize (4 samples, 0.26%)</title><rect x="75.4215%" y="917" width="0.2594%" height="15" fill="rgb(236,133,54)" fg:x="1163" fg:w="4"/><text x="75.6715%" y="927.50"></text></g><g><title>bincode::internal::serialize (4 samples, 0.26%)</title><rect x="75.4215%" y="901" width="0.2594%" height="15" fill="rgb(247,166,21)" fg:x="1163" fg:w="4"/><text x="75.6715%" y="911.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="75.6161%" y="885" width="0.0649%" height="15" fill="rgb(220,132,12)" fg:x="1166" fg:w="1"/><text x="75.8661%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="75.6161%" y="869" width="0.0649%" height="15" fill="rgb(233,27,30)" fg:x="1166" fg:w="1"/><text x="75.8661%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.6161%" y="853" width="0.0649%" height="15" fill="rgb(246,161,27)" fg:x="1166" fg:w="1"/><text x="75.8661%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.6161%" y="837" width="0.0649%" height="15" fill="rgb(240,56,3)" fg:x="1166" fg:w="1"/><text x="75.8661%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.6161%" y="821" width="0.0649%" height="15" fill="rgb(242,190,9)" fg:x="1166" fg:w="1"/><text x="75.8661%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="75.6809%" y="933" width="0.0649%" height="15" fill="rgb(234,3,52)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="75.6809%" y="917" width="0.0649%" height="15" fill="rgb(220,221,19)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="927.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="75.6809%" y="901" width="0.0649%" height="15" fill="rgb(247,178,30)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="75.6809%" y="885" width="0.0649%" height="15" fill="rgb(234,212,27)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.6809%" y="869" width="0.0649%" height="15" fill="rgb(226,199,38)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.6809%" y="853" width="0.0649%" height="15" fill="rgb(248,114,22)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.6809%" y="837" width="0.0649%" height="15" fill="rgb(221,180,4)" fg:x="1167" fg:w="1"/><text x="75.9309%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="75.7458%" y="917" width="0.0649%" height="15" fill="rgb(220,229,24)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="75.7458%" y="901" width="0.0649%" height="15" fill="rgb(226,184,27)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="911.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="75.7458%" y="885" width="0.0649%" height="15" fill="rgb(232,99,15)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="895.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="75.7458%" y="869" width="0.0649%" height="15" fill="rgb(250,167,16)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="879.50"></text></g><g><title>std::sync::poison::map_result (1 samples, 0.06%)</title><rect x="75.7458%" y="853" width="0.0649%" height="15" fill="rgb(243,113,6)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.7458%" y="837" width="0.0649%" height="15" fill="rgb(244,147,52)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.7458%" y="821" width="0.0649%" height="15" fill="rgb(235,59,50)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.7458%" y="805" width="0.0649%" height="15" fill="rgb(250,188,6)" fg:x="1168" fg:w="1"/><text x="75.9958%" y="815.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="75.8106%" y="709" width="0.0649%" height="15" fill="rgb(236,173,11)" fg:x="1169" fg:w="1"/><text x="76.0606%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="75.8106%" y="693" width="0.0649%" height="15" fill="rgb(233,64,3)" fg:x="1169" fg:w="1"/><text x="76.0606%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="75.8106%" y="677" width="0.0649%" height="15" fill="rgb(207,92,7)" fg:x="1169" fg:w="1"/><text x="76.0606%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="75.8106%" y="661" width="0.0649%" height="15" fill="rgb(221,30,19)" fg:x="1169" fg:w="1"/><text x="76.0606%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="75.8755%" y="709" width="0.1297%" height="15" fill="rgb(245,22,49)" fg:x="1170" fg:w="2"/><text x="76.1255%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="75.8755%" y="693" width="0.1297%" height="15" fill="rgb(218,39,20)" fg:x="1170" fg:w="2"/><text x="76.1255%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="75.8755%" y="677" width="0.1297%" height="15" fill="rgb(222,144,21)" fg:x="1170" fg:w="2"/><text x="76.1255%" y="687.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="76.0052%" y="661" width="0.0649%" height="15" fill="rgb(222,78,51)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="76.0052%" y="645" width="0.0649%" height="15" fill="rgb(248,213,53)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="655.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="76.0052%" y="629" width="0.0649%" height="15" fill="rgb(245,28,34)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="639.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="76.0052%" y="613" width="0.0649%" height="15" fill="rgb(229,186,26)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="623.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="76.0052%" y="597" width="0.0649%" height="15" fill="rgb(224,0,41)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="607.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="76.0052%" y="581" width="0.0649%" height="15" fill="rgb(223,136,51)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="591.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="76.0052%" y="565" width="0.0649%" height="15" fill="rgb(234,50,9)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.0052%" y="549" width="0.0649%" height="15" fill="rgb(242,164,20)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.0052%" y="533" width="0.0649%" height="15" fill="rgb(230,169,22)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.0052%" y="517" width="0.0649%" height="15" fill="rgb(228,82,26)" fg:x="1172" fg:w="1"/><text x="76.2552%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.0700%" y="597" width="0.0649%" height="15" fill="rgb(244,220,31)" fg:x="1173" fg:w="1"/><text x="76.3200%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.0700%" y="581" width="0.0649%" height="15" fill="rgb(214,35,25)" fg:x="1173" fg:w="1"/><text x="76.3200%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.0700%" y="565" width="0.0649%" height="15" fill="rgb(245,162,54)" fg:x="1173" fg:w="1"/><text x="76.3200%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="76.1349%" y="549" width="0.0649%" height="15" fill="rgb(210,43,24)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="76.1349%" y="533" width="0.0649%" height="15" fill="rgb(226,145,51)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="543.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="76.1349%" y="517" width="0.0649%" height="15" fill="rgb(237,52,53)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="76.1349%" y="501" width="0.0649%" height="15" fill="rgb(216,226,7)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="76.1349%" y="485" width="0.0649%" height="15" fill="rgb(206,223,18)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="495.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="76.1349%" y="469" width="0.0649%" height="15" fill="rgb(221,1,10)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="76.1349%" y="453" width="0.0649%" height="15" fill="rgb(221,151,42)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="76.1349%" y="437" width="0.0649%" height="15" fill="rgb(205,183,46)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="76.1349%" y="421" width="0.0649%" height="15" fill="rgb(239,229,1)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="76.1349%" y="405" width="0.0649%" height="15" fill="rgb(236,192,23)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="415.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="76.1349%" y="389" width="0.0649%" height="15" fill="rgb(215,146,3)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="76.1349%" y="373" width="0.0649%" height="15" fill="rgb(235,52,27)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="383.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="76.1349%" y="357" width="0.0649%" height="15" fill="rgb(236,45,20)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.1349%" y="341" width="0.0649%" height="15" fill="rgb(235,86,41)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.1349%" y="325" width="0.0649%" height="15" fill="rgb(235,27,27)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.1349%" y="309" width="0.0649%" height="15" fill="rgb(232,4,34)" fg:x="1174" fg:w="1"/><text x="76.3849%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.1997%" y="277" width="0.0649%" height="15" fill="rgb(215,22,10)" fg:x="1175" fg:w="1"/><text x="76.4497%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.1997%" y="261" width="0.0649%" height="15" fill="rgb(230,228,27)" fg:x="1175" fg:w="1"/><text x="76.4497%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.1997%" y="245" width="0.0649%" height="15" fill="rgb(216,26,51)" fg:x="1175" fg:w="1"/><text x="76.4497%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="76.1997%" y="325" width="0.1297%" height="15" fill="rgb(225,180,50)" fg:x="1175" fg:w="2"/><text x="76.4497%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="76.1997%" y="309" width="0.1297%" height="15" fill="rgb(236,211,2)" fg:x="1175" fg:w="2"/><text x="76.4497%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="76.1997%" y="293" width="0.1297%" height="15" fill="rgb(250,51,20)" fg:x="1175" fg:w="2"/><text x="76.4497%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="76.2646%" y="277" width="0.0649%" height="15" fill="rgb(232,70,37)" fg:x="1176" fg:w="1"/><text x="76.5146%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="76.2646%" y="261" width="0.0649%" height="15" fill="rgb(226,183,39)" fg:x="1176" fg:w="1"/><text x="76.5146%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.2646%" y="245" width="0.0649%" height="15" fill="rgb(232,228,21)" fg:x="1176" fg:w="1"/><text x="76.5146%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.2646%" y="229" width="0.0649%" height="15" fill="rgb(251,118,32)" fg:x="1176" fg:w="1"/><text x="76.5146%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.2646%" y="213" width="0.0649%" height="15" fill="rgb(235,172,38)" fg:x="1176" fg:w="1"/><text x="76.5146%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.3294%" y="245" width="0.0649%" height="15" fill="rgb(235,63,18)" fg:x="1177" fg:w="1"/><text x="76.5794%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.3294%" y="229" width="0.0649%" height="15" fill="rgb(225,4,7)" fg:x="1177" fg:w="1"/><text x="76.5794%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.3294%" y="213" width="0.0649%" height="15" fill="rgb(231,61,1)" fg:x="1177" fg:w="1"/><text x="76.5794%" y="223.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (4 samples, 0.26%)</title><rect x="76.1997%" y="437" width="0.2594%" height="15" fill="rgb(241,155,22)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="76.1997%" y="421" width="0.2594%" height="15" fill="rgb(209,100,26)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="431.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="76.1997%" y="405" width="0.2594%" height="15" fill="rgb(248,181,15)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="415.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (4 samples, 0.26%)</title><rect x="76.1997%" y="389" width="0.2594%" height="15" fill="rgb(214,94,31)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="399.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (4 samples, 0.26%)</title><rect x="76.1997%" y="373" width="0.2594%" height="15" fill="rgb(207,16,42)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (4 samples, 0.26%)</title><rect x="76.1997%" y="357" width="0.2594%" height="15" fill="rgb(208,127,13)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (4 samples, 0.26%)</title><rect x="76.1997%" y="341" width="0.2594%" height="15" fill="rgb(220,211,18)" fg:x="1175" fg:w="4"/><text x="76.4497%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="76.3294%" y="325" width="0.1297%" height="15" fill="rgb(221,55,38)" fg:x="1177" fg:w="2"/><text x="76.5794%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="76.3294%" y="309" width="0.1297%" height="15" fill="rgb(252,219,45)" fg:x="1177" fg:w="2"/><text x="76.5794%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="76.3294%" y="293" width="0.1297%" height="15" fill="rgb(248,53,35)" fg:x="1177" fg:w="2"/><text x="76.5794%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="76.3294%" y="277" width="0.1297%" height="15" fill="rgb(210,87,2)" fg:x="1177" fg:w="2"/><text x="76.5794%" y="287.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="76.3294%" y="261" width="0.1297%" height="15" fill="rgb(239,133,9)" fg:x="1177" fg:w="2"/><text x="76.5794%" y="271.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="76.3943%" y="245" width="0.0649%" height="15" fill="rgb(214,114,5)" fg:x="1178" fg:w="1"/><text x="76.6443%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.3943%" y="229" width="0.0649%" height="15" fill="rgb(206,124,24)" fg:x="1178" fg:w="1"/><text x="76.6443%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.3943%" y="213" width="0.0649%" height="15" fill="rgb(212,57,33)" fg:x="1178" fg:w="1"/><text x="76.6443%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.3943%" y="197" width="0.0649%" height="15" fill="rgb(246,21,20)" fg:x="1178" fg:w="1"/><text x="76.6443%" y="207.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="76.4591%" y="245" width="0.0649%" height="15" fill="rgb(253,210,39)" fg:x="1179" fg:w="1"/><text x="76.7091%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="76.4591%" y="229" width="0.0649%" height="15" fill="rgb(209,187,24)" fg:x="1179" fg:w="1"/><text x="76.7091%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="76.4591%" y="213" width="0.0649%" height="15" fill="rgb(246,136,17)" fg:x="1179" fg:w="1"/><text x="76.7091%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.4591%" y="197" width="0.0649%" height="15" fill="rgb(211,0,30)" fg:x="1179" fg:w="1"/><text x="76.7091%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.4591%" y="181" width="0.0649%" height="15" fill="rgb(216,199,7)" fg:x="1179" fg:w="1"/><text x="76.7091%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.4591%" y="165" width="0.0649%" height="15" fill="rgb(207,210,19)" fg:x="1179" fg:w="1"/><text x="76.7091%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="76.5240%" y="213" width="0.0649%" height="15" fill="rgb(237,187,39)" fg:x="1180" fg:w="1"/><text x="76.7740%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.5240%" y="197" width="0.0649%" height="15" fill="rgb(243,194,42)" fg:x="1180" fg:w="1"/><text x="76.7740%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.5240%" y="181" width="0.0649%" height="15" fill="rgb(225,194,19)" fg:x="1180" fg:w="1"/><text x="76.7740%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.5240%" y="165" width="0.0649%" height="15" fill="rgb(224,192,14)" fg:x="1180" fg:w="1"/><text x="76.7740%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="76.1997%" y="453" width="0.4540%" height="15" fill="rgb(252,21,18)" fg:x="1175" fg:w="7"/><text x="76.4497%" y="463.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="76.4591%" y="437" width="0.1946%" height="15" fill="rgb(229,69,19)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="76.4591%" y="421" width="0.1946%" height="15" fill="rgb(251,31,53)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="76.4591%" y="405" width="0.1946%" height="15" fill="rgb(218,39,50)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="415.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="76.4591%" y="389" width="0.1946%" height="15" fill="rgb(231,50,17)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="399.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="76.4591%" y="373" width="0.1946%" height="15" fill="rgb(223,217,31)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="383.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="76.4591%" y="357" width="0.1946%" height="15" fill="rgb(225,91,12)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="76.4591%" y="341" width="0.1946%" height="15" fill="rgb(242,58,43)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="76.4591%" y="325" width="0.1946%" height="15" fill="rgb(242,32,21)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="335.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="76.4591%" y="309" width="0.1946%" height="15" fill="rgb(211,127,1)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="319.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="76.4591%" y="293" width="0.1946%" height="15" fill="rgb(231,93,13)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="303.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="76.4591%" y="277" width="0.1946%" height="15" fill="rgb(218,83,4)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="287.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="76.4591%" y="261" width="0.1946%" height="15" fill="rgb(230,218,10)" fg:x="1179" fg:w="3"/><text x="76.7091%" y="271.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="76.5240%" y="245" width="0.1297%" height="15" fill="rgb(235,127,18)" fg:x="1180" fg:w="2"/><text x="76.7740%" y="255.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="76.5240%" y="229" width="0.1297%" height="15" fill="rgb(213,137,46)" fg:x="1180" fg:w="2"/><text x="76.7740%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="76.5888%" y="213" width="0.0649%" height="15" fill="rgb(235,179,24)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="76.5888%" y="197" width="0.0649%" height="15" fill="rgb(247,58,49)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="76.5888%" y="181" width="0.0649%" height="15" fill="rgb(242,222,5)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="76.5888%" y="165" width="0.0649%" height="15" fill="rgb(230,16,48)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="76.5888%" y="149" width="0.0649%" height="15" fill="rgb(241,192,16)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="76.5888%" y="133" width="0.0649%" height="15" fill="rgb(209,25,37)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="76.5888%" y="117" width="0.0649%" height="15" fill="rgb(229,215,13)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="127.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.5888%" y="101" width="0.0649%" height="15" fill="rgb(213,199,8)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="111.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.5888%" y="85" width="0.0649%" height="15" fill="rgb(226,151,19)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="95.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.5888%" y="69" width="0.0649%" height="15" fill="rgb(254,183,12)" fg:x="1181" fg:w="1"/><text x="76.8388%" y="79.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.91%)</title><rect x="75.8106%" y="789" width="0.9079%" height="15" fill="rgb(245,8,3)" fg:x="1169" fg:w="14"/><text x="76.0606%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (14 samples, 0.91%)</title><rect x="75.8106%" y="773" width="0.9079%" height="15" fill="rgb(229,159,35)" fg:x="1169" fg:w="14"/><text x="76.0606%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (14 samples, 0.91%)</title><rect x="75.8106%" y="757" width="0.9079%" height="15" fill="rgb(209,145,1)" fg:x="1169" fg:w="14"/><text x="76.0606%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (14 samples, 0.91%)</title><rect x="75.8106%" y="741" width="0.9079%" height="15" fill="rgb(228,183,16)" fg:x="1169" fg:w="14"/><text x="76.0606%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (14 samples, 0.91%)</title><rect x="75.8106%" y="725" width="0.9079%" height="15" fill="rgb(222,68,0)" fg:x="1169" fg:w="14"/><text x="76.0606%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (11 samples, 0.71%)</title><rect x="76.0052%" y="709" width="0.7134%" height="15" fill="rgb(209,130,50)" fg:x="1172" fg:w="11"/><text x="76.2552%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11 samples, 0.71%)</title><rect x="76.0052%" y="693" width="0.7134%" height="15" fill="rgb(228,176,44)" fg:x="1172" fg:w="11"/><text x="76.2552%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="76.0052%" y="677" width="0.7134%" height="15" fill="rgb(221,164,2)" fg:x="1172" fg:w="11"/><text x="76.2552%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (10 samples, 0.65%)</title><rect x="76.0700%" y="661" width="0.6485%" height="15" fill="rgb(249,199,49)" fg:x="1173" fg:w="10"/><text x="76.3200%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (10 samples, 0.65%)</title><rect x="76.0700%" y="645" width="0.6485%" height="15" fill="rgb(228,205,53)" fg:x="1173" fg:w="10"/><text x="76.3200%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (10 samples, 0.65%)</title><rect x="76.0700%" y="629" width="0.6485%" height="15" fill="rgb(235,77,20)" fg:x="1173" fg:w="10"/><text x="76.3200%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (10 samples, 0.65%)</title><rect x="76.0700%" y="613" width="0.6485%" height="15" fill="rgb(227,147,34)" fg:x="1173" fg:w="10"/><text x="76.3200%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="76.1349%" y="597" width="0.5837%" height="15" fill="rgb(226,203,52)" fg:x="1174" fg:w="9"/><text x="76.3849%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="76.1349%" y="581" width="0.5837%" height="15" fill="rgb(226,186,23)" fg:x="1174" fg:w="9"/><text x="76.3849%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="76.1349%" y="565" width="0.5837%" height="15" fill="rgb(236,13,30)" fg:x="1174" fg:w="9"/><text x="76.3849%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="76.1997%" y="549" width="0.5188%" height="15" fill="rgb(228,121,22)" fg:x="1175" fg:w="8"/><text x="76.4497%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="76.1997%" y="533" width="0.5188%" height="15" fill="rgb(248,222,26)" fg:x="1175" fg:w="8"/><text x="76.4497%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="76.1997%" y="517" width="0.5188%" height="15" fill="rgb(251,72,25)" fg:x="1175" fg:w="8"/><text x="76.4497%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="76.1997%" y="501" width="0.5188%" height="15" fill="rgb(223,114,24)" fg:x="1175" fg:w="8"/><text x="76.4497%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="76.1997%" y="485" width="0.5188%" height="15" fill="rgb(232,190,43)" fg:x="1175" fg:w="8"/><text x="76.4497%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="76.1997%" y="469" width="0.5188%" height="15" fill="rgb(208,90,0)" fg:x="1175" fg:w="8"/><text x="76.4497%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="76.6537%" y="453" width="0.0649%" height="15" fill="rgb(234,149,31)" fg:x="1182" fg:w="1"/><text x="76.9037%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.6537%" y="437" width="0.0649%" height="15" fill="rgb(235,188,36)" fg:x="1182" fg:w="1"/><text x="76.9037%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.6537%" y="421" width="0.0649%" height="15" fill="rgb(219,59,51)" fg:x="1182" fg:w="1"/><text x="76.9037%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.6537%" y="405" width="0.0649%" height="15" fill="rgb(236,101,40)" fg:x="1182" fg:w="1"/><text x="76.9037%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="76.7185%" y="789" width="0.0649%" height="15" fill="rgb(235,33,7)" fg:x="1183" fg:w="1"/><text x="76.9685%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.7185%" y="773" width="0.0649%" height="15" fill="rgb(213,169,26)" fg:x="1183" fg:w="1"/><text x="76.9685%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.7185%" y="757" width="0.0649%" height="15" fill="rgb(218,99,34)" fg:x="1183" fg:w="1"/><text x="76.9685%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.7185%" y="741" width="0.0649%" height="15" fill="rgb(210,57,24)" fg:x="1183" fg:w="1"/><text x="76.9685%" y="751.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (16 samples, 1.04%)</title><rect x="75.8106%" y="917" width="1.0376%" height="15" fill="rgb(231,181,54)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (16 samples, 1.04%)</title><rect x="75.8106%" y="901" width="1.0376%" height="15" fill="rgb(251,188,48)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (16 samples, 1.04%)</title><rect x="75.8106%" y="885" width="1.0376%" height="15" fill="rgb(243,12,45)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (16 samples, 1.04%)</title><rect x="75.8106%" y="869" width="1.0376%" height="15" fill="rgb(250,197,9)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (16 samples, 1.04%)</title><rect x="75.8106%" y="853" width="1.0376%" height="15" fill="rgb(235,149,35)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (16 samples, 1.04%)</title><rect x="75.8106%" y="837" width="1.0376%" height="15" fill="rgb(219,27,19)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="847.50"></text></g><g><title>bincode::internal::deserialize (16 samples, 1.04%)</title><rect x="75.8106%" y="821" width="1.0376%" height="15" fill="rgb(244,78,31)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (16 samples, 1.04%)</title><rect x="75.8106%" y="805" width="1.0376%" height="15" fill="rgb(241,13,4)" fg:x="1169" fg:w="16"/><text x="76.0606%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.7834%" y="789" width="0.0649%" height="15" fill="rgb(212,194,26)" fg:x="1184" fg:w="1"/><text x="77.0334%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.7834%" y="773" width="0.0649%" height="15" fill="rgb(236,80,11)" fg:x="1184" fg:w="1"/><text x="77.0334%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.7834%" y="757" width="0.0649%" height="15" fill="rgb(206,1,24)" fg:x="1184" fg:w="1"/><text x="77.0334%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.8482%" y="629" width="0.0649%" height="15" fill="rgb(238,215,50)" fg:x="1185" fg:w="1"/><text x="77.0982%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.8482%" y="613" width="0.0649%" height="15" fill="rgb(254,126,32)" fg:x="1185" fg:w="1"/><text x="77.0982%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.8482%" y="597" width="0.0649%" height="15" fill="rgb(206,111,53)" fg:x="1185" fg:w="1"/><text x="77.0982%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="76.9131%" y="581" width="0.0649%" height="15" fill="rgb(218,72,44)" fg:x="1186" fg:w="1"/><text x="77.1631%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="76.9131%" y="565" width="0.0649%" height="15" fill="rgb(238,25,3)" fg:x="1186" fg:w="1"/><text x="77.1631%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="76.9131%" y="549" width="0.0649%" height="15" fill="rgb(250,191,7)" fg:x="1186" fg:w="1"/><text x="77.1631%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.9131%" y="533" width="0.0649%" height="15" fill="rgb(238,56,30)" fg:x="1186" fg:w="1"/><text x="77.1631%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.9131%" y="517" width="0.0649%" height="15" fill="rgb(210,27,45)" fg:x="1186" fg:w="1"/><text x="77.1631%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.9131%" y="501" width="0.0649%" height="15" fill="rgb(207,10,50)" fg:x="1186" fg:w="1"/><text x="77.1631%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="76.8482%" y="693" width="0.1946%" height="15" fill="rgb(249,30,23)" fg:x="1185" fg:w="3"/><text x="77.0982%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="76.8482%" y="677" width="0.1946%" height="15" fill="rgb(250,80,12)" fg:x="1185" fg:w="3"/><text x="77.0982%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="76.8482%" y="661" width="0.1946%" height="15" fill="rgb(210,221,37)" fg:x="1185" fg:w="3"/><text x="77.0982%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="76.8482%" y="645" width="0.1946%" height="15" fill="rgb(205,96,24)" fg:x="1185" fg:w="3"/><text x="77.0982%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="76.9131%" y="629" width="0.1297%" height="15" fill="rgb(247,104,22)" fg:x="1186" fg:w="2"/><text x="77.1631%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="76.9131%" y="613" width="0.1297%" height="15" fill="rgb(222,61,53)" fg:x="1186" fg:w="2"/><text x="77.1631%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="76.9131%" y="597" width="0.1297%" height="15" fill="rgb(241,11,53)" fg:x="1186" fg:w="2"/><text x="77.1631%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="76.9780%" y="581" width="0.0649%" height="15" fill="rgb(230,111,47)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="76.9780%" y="565" width="0.0649%" height="15" fill="rgb(218,187,29)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="76.9780%" y="549" width="0.0649%" height="15" fill="rgb(210,121,46)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="76.9780%" y="533" width="0.0649%" height="15" fill="rgb(250,43,19)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="76.9780%" y="517" width="0.0649%" height="15" fill="rgb(238,61,12)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="527.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="76.9780%" y="501" width="0.0649%" height="15" fill="rgb(251,198,9)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="76.9780%" y="485" width="0.0649%" height="15" fill="rgb(214,192,38)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="76.9780%" y="469" width="0.0649%" height="15" fill="rgb(214,73,19)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="76.9780%" y="453" width="0.0649%" height="15" fill="rgb(249,222,49)" fg:x="1187" fg:w="1"/><text x="77.2280%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="77.0428%" y="517" width="0.1297%" height="15" fill="rgb(231,181,54)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="77.0428%" y="501" width="0.1297%" height="15" fill="rgb(240,1,13)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="77.0428%" y="485" width="0.1297%" height="15" fill="rgb(225,21,16)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="77.0428%" y="469" width="0.1297%" height="15" fill="rgb(246,176,50)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="77.0428%" y="453" width="0.1297%" height="15" fill="rgb(208,96,50)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="77.0428%" y="437" width="0.1297%" height="15" fill="rgb(240,219,19)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="77.0428%" y="421" width="0.1297%" height="15" fill="rgb(234,73,5)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="77.0428%" y="405" width="0.1297%" height="15" fill="rgb(225,52,53)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="77.0428%" y="389" width="0.1297%" height="15" fill="rgb(250,12,14)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="77.0428%" y="373" width="0.1297%" height="15" fill="rgb(242,185,54)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="77.0428%" y="357" width="0.1297%" height="15" fill="rgb(211,206,31)" fg:x="1188" fg:w="2"/><text x="77.2928%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="77.0428%" y="581" width="0.1946%" height="15" fill="rgb(252,10,33)" fg:x="1188" fg:w="3"/><text x="77.2928%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="77.0428%" y="565" width="0.1946%" height="15" fill="rgb(216,26,7)" fg:x="1188" fg:w="3"/><text x="77.2928%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="77.0428%" y="549" width="0.1946%" height="15" fill="rgb(228,112,40)" fg:x="1188" fg:w="3"/><text x="77.2928%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="77.0428%" y="533" width="0.1946%" height="15" fill="rgb(212,21,16)" fg:x="1188" fg:w="3"/><text x="77.2928%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="77.1725%" y="517" width="0.0649%" height="15" fill="rgb(249,3,29)" fg:x="1190" fg:w="1"/><text x="77.4225%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="77.1725%" y="501" width="0.0649%" height="15" fill="rgb(221,42,51)" fg:x="1190" fg:w="1"/><text x="77.4225%" y="511.50"></text></g><g><title>&lt;bincode::config::limit::Infinite as bincode::config::limit::SizeLimit&gt;::add (1 samples, 0.06%)</title><rect x="77.1725%" y="485" width="0.0649%" height="15" fill="rgb(225,90,21)" fg:x="1190" fg:w="1"/><text x="77.4225%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.1725%" y="469" width="0.0649%" height="15" fill="rgb(242,131,5)" fg:x="1190" fg:w="1"/><text x="77.4225%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.1725%" y="453" width="0.0649%" height="15" fill="rgb(220,187,28)" fg:x="1190" fg:w="1"/><text x="77.4225%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.1725%" y="437" width="0.0649%" height="15" fill="rgb(210,75,48)" fg:x="1190" fg:w="1"/><text x="77.4225%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.2374%" y="357" width="0.0649%" height="15" fill="rgb(211,91,40)" fg:x="1191" fg:w="1"/><text x="77.4874%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.2374%" y="341" width="0.0649%" height="15" fill="rgb(205,43,18)" fg:x="1191" fg:w="1"/><text x="77.4874%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.2374%" y="325" width="0.0649%" height="15" fill="rgb(207,123,11)" fg:x="1191" fg:w="1"/><text x="77.4874%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.3022%" y="309" width="0.0649%" height="15" fill="rgb(235,89,39)" fg:x="1192" fg:w="1"/><text x="77.5522%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.3022%" y="293" width="0.0649%" height="15" fill="rgb(245,217,27)" fg:x="1192" fg:w="1"/><text x="77.5522%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.3022%" y="277" width="0.0649%" height="15" fill="rgb(216,55,17)" fg:x="1192" fg:w="1"/><text x="77.5522%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="77.2374%" y="469" width="0.1946%" height="15" fill="rgb(252,116,44)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="77.2374%" y="453" width="0.1946%" height="15" fill="rgb(229,153,4)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="77.2374%" y="437" width="0.1946%" height="15" fill="rgb(222,24,35)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="77.2374%" y="421" width="0.1946%" height="15" fill="rgb(214,26,20)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="77.2374%" y="405" width="0.1946%" height="15" fill="rgb(215,14,45)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3 samples, 0.19%)</title><rect x="77.2374%" y="389" width="0.1946%" height="15" fill="rgb(217,212,50)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3 samples, 0.19%)</title><rect x="77.2374%" y="373" width="0.1946%" height="15" fill="rgb(230,172,52)" fg:x="1191" fg:w="3"/><text x="77.4874%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="77.3022%" y="357" width="0.1297%" height="15" fill="rgb(210,48,36)" fg:x="1192" fg:w="2"/><text x="77.5522%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="77.3022%" y="341" width="0.1297%" height="15" fill="rgb(216,213,32)" fg:x="1192" fg:w="2"/><text x="77.5522%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="77.3022%" y="325" width="0.1297%" height="15" fill="rgb(237,202,41)" fg:x="1192" fg:w="2"/><text x="77.5522%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="77.3671%" y="309" width="0.0649%" height="15" fill="rgb(209,14,29)" fg:x="1193" fg:w="1"/><text x="77.6171%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="77.3671%" y="293" width="0.0649%" height="15" fill="rgb(219,29,3)" fg:x="1193" fg:w="1"/><text x="77.6171%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.3671%" y="277" width="0.0649%" height="15" fill="rgb(229,13,49)" fg:x="1193" fg:w="1"/><text x="77.6171%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.3671%" y="261" width="0.0649%" height="15" fill="rgb(210,206,2)" fg:x="1193" fg:w="1"/><text x="77.6171%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.3671%" y="245" width="0.0649%" height="15" fill="rgb(216,154,46)" fg:x="1193" fg:w="1"/><text x="77.6171%" y="255.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="77.4319%" y="277" width="0.0649%" height="15" fill="rgb(211,170,52)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="77.4319%" y="261" width="0.0649%" height="15" fill="rgb(233,109,47)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="77.4319%" y="245" width="0.0649%" height="15" fill="rgb(208,212,30)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="255.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="77.4319%" y="229" width="0.0649%" height="15" fill="rgb(215,190,19)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="77.4319%" y="213" width="0.0649%" height="15" fill="rgb(207,164,53)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="77.4319%" y="197" width="0.0649%" height="15" fill="rgb(213,87,49)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="207.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.4319%" y="181" width="0.0649%" height="15" fill="rgb(241,216,24)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.4319%" y="165" width="0.0649%" height="15" fill="rgb(241,123,45)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.4319%" y="149" width="0.0649%" height="15" fill="rgb(220,36,15)" fg:x="1194" fg:w="1"/><text x="77.6819%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="77.4968%" y="245" width="0.0649%" height="15" fill="rgb(215,202,9)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="77.4968%" y="229" width="0.0649%" height="15" fill="rgb(252,71,26)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="77.4968%" y="213" width="0.0649%" height="15" fill="rgb(243,195,19)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="77.4968%" y="197" width="0.0649%" height="15" fill="rgb(207,167,27)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="77.4968%" y="181" width="0.0649%" height="15" fill="rgb(250,146,54)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="191.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.4968%" y="165" width="0.0649%" height="15" fill="rgb(245,79,9)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.4968%" y="149" width="0.0649%" height="15" fill="rgb(234,197,22)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.4968%" y="133" width="0.0649%" height="15" fill="rgb(221,52,48)" fg:x="1195" fg:w="1"/><text x="77.7468%" y="143.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="77.2374%" y="485" width="0.4540%" height="15" fill="rgb(235,80,0)" fg:x="1191" fg:w="7"/><text x="77.4874%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="77.4319%" y="469" width="0.2594%" height="15" fill="rgb(221,117,53)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="77.4319%" y="453" width="0.2594%" height="15" fill="rgb(239,48,47)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="77.4319%" y="437" width="0.2594%" height="15" fill="rgb(227,191,52)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="77.4319%" y="421" width="0.2594%" height="15" fill="rgb(241,118,1)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="77.4319%" y="405" width="0.2594%" height="15" fill="rgb(240,85,3)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="77.4319%" y="389" width="0.2594%" height="15" fill="rgb(237,68,37)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="77.4319%" y="373" width="0.2594%" height="15" fill="rgb(212,9,20)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (4 samples, 0.26%)</title><rect x="77.4319%" y="357" width="0.2594%" height="15" fill="rgb(218,84,17)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (4 samples, 0.26%)</title><rect x="77.4319%" y="341" width="0.2594%" height="15" fill="rgb(235,147,20)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (4 samples, 0.26%)</title><rect x="77.4319%" y="325" width="0.2594%" height="15" fill="rgb(208,224,1)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (4 samples, 0.26%)</title><rect x="77.4319%" y="309" width="0.2594%" height="15" fill="rgb(232,97,50)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (4 samples, 0.26%)</title><rect x="77.4319%" y="293" width="0.2594%" height="15" fill="rgb(238,15,45)" fg:x="1194" fg:w="4"/><text x="77.6819%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3 samples, 0.19%)</title><rect x="77.4968%" y="277" width="0.1946%" height="15" fill="rgb(231,46,18)" fg:x="1195" fg:w="3"/><text x="77.7468%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3 samples, 0.19%)</title><rect x="77.4968%" y="261" width="0.1946%" height="15" fill="rgb(254,169,10)" fg:x="1195" fg:w="3"/><text x="77.7468%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="77.5616%" y="245" width="0.1297%" height="15" fill="rgb(243,169,30)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="77.5616%" y="229" width="0.1297%" height="15" fill="rgb(236,90,49)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="77.5616%" y="213" width="0.1297%" height="15" fill="rgb(218,80,15)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="77.5616%" y="197" width="0.1297%" height="15" fill="rgb(222,115,37)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="77.5616%" y="181" width="0.1297%" height="15" fill="rgb(227,0,6)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="191.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (2 samples, 0.13%)</title><rect x="77.5616%" y="165" width="0.1297%" height="15" fill="rgb(217,189,13)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="77.5616%" y="149" width="0.1297%" height="15" fill="rgb(220,74,19)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="77.5616%" y="133" width="0.1297%" height="15" fill="rgb(224,81,18)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="77.5616%" y="117" width="0.1297%" height="15" fill="rgb(245,178,48)" fg:x="1196" fg:w="2"/><text x="77.8116%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="77.0428%" y="597" width="0.7134%" height="15" fill="rgb(207,78,24)" fg:x="1188" fg:w="11"/><text x="77.2928%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="77.2374%" y="581" width="0.5188%" height="15" fill="rgb(223,222,30)" fg:x="1191" fg:w="8"/><text x="77.4874%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="77.2374%" y="565" width="0.5188%" height="15" fill="rgb(234,101,12)" fg:x="1191" fg:w="8"/><text x="77.4874%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="77.2374%" y="549" width="0.5188%" height="15" fill="rgb(209,80,46)" fg:x="1191" fg:w="8"/><text x="77.4874%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="77.2374%" y="533" width="0.5188%" height="15" fill="rgb(228,79,14)" fg:x="1191" fg:w="8"/><text x="77.4874%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="77.2374%" y="517" width="0.5188%" height="15" fill="rgb(220,219,34)" fg:x="1191" fg:w="8"/><text x="77.4874%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="77.2374%" y="501" width="0.5188%" height="15" fill="rgb(207,80,21)" fg:x="1191" fg:w="8"/><text x="77.4874%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="77.6913%" y="485" width="0.0649%" height="15" fill="rgb(210,154,44)" fg:x="1198" fg:w="1"/><text x="77.9413%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.6913%" y="469" width="0.0649%" height="15" fill="rgb(246,44,39)" fg:x="1198" fg:w="1"/><text x="77.9413%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.6913%" y="453" width="0.0649%" height="15" fill="rgb(252,175,13)" fg:x="1198" fg:w="1"/><text x="77.9413%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.6913%" y="437" width="0.0649%" height="15" fill="rgb(211,50,39)" fg:x="1198" fg:w="1"/><text x="77.9413%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (15 samples, 0.97%)</title><rect x="76.8482%" y="773" width="0.9728%" height="15" fill="rgb(231,204,27)" fg:x="1185" fg:w="15"/><text x="77.0982%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (15 samples, 0.97%)</title><rect x="76.8482%" y="757" width="0.9728%" height="15" fill="rgb(253,26,34)" fg:x="1185" fg:w="15"/><text x="77.0982%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (15 samples, 0.97%)</title><rect x="76.8482%" y="741" width="0.9728%" height="15" fill="rgb(207,139,38)" fg:x="1185" fg:w="15"/><text x="77.0982%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (15 samples, 0.97%)</title><rect x="76.8482%" y="725" width="0.9728%" height="15" fill="rgb(248,54,27)" fg:x="1185" fg:w="15"/><text x="77.0982%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.97%)</title><rect x="76.8482%" y="709" width="0.9728%" height="15" fill="rgb(234,25,33)" fg:x="1185" fg:w="15"/><text x="77.0982%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (12 samples, 0.78%)</title><rect x="77.0428%" y="693" width="0.7782%" height="15" fill="rgb(249,107,47)" fg:x="1188" fg:w="12"/><text x="77.2928%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (12 samples, 0.78%)</title><rect x="77.0428%" y="677" width="0.7782%" height="15" fill="rgb(230,190,31)" fg:x="1188" fg:w="12"/><text x="77.2928%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.78%)</title><rect x="77.0428%" y="661" width="0.7782%" height="15" fill="rgb(238,173,45)" fg:x="1188" fg:w="12"/><text x="77.2928%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (12 samples, 0.78%)</title><rect x="77.0428%" y="645" width="0.7782%" height="15" fill="rgb(222,16,50)" fg:x="1188" fg:w="12"/><text x="77.2928%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 0.78%)</title><rect x="77.0428%" y="629" width="0.7782%" height="15" fill="rgb(251,204,47)" fg:x="1188" fg:w="12"/><text x="77.2928%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.78%)</title><rect x="77.0428%" y="613" width="0.7782%" height="15" fill="rgb(225,12,3)" fg:x="1188" fg:w="12"/><text x="77.2928%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.7562%" y="597" width="0.0649%" height="15" fill="rgb(214,208,22)" fg:x="1199" fg:w="1"/><text x="78.0062%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.7562%" y="581" width="0.0649%" height="15" fill="rgb(240,57,32)" fg:x="1199" fg:w="1"/><text x="78.0062%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.7562%" y="565" width="0.0649%" height="15" fill="rgb(243,113,48)" fg:x="1199" fg:w="1"/><text x="78.0062%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (16 samples, 1.04%)</title><rect x="76.8482%" y="821" width="1.0376%" height="15" fill="rgb(225,135,30)" fg:x="1185" fg:w="16"/><text x="77.0982%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (16 samples, 1.04%)</title><rect x="76.8482%" y="805" width="1.0376%" height="15" fill="rgb(222,3,53)" fg:x="1185" fg:w="16"/><text x="77.0982%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (16 samples, 1.04%)</title><rect x="76.8482%" y="789" width="1.0376%" height="15" fill="rgb(243,142,2)" fg:x="1185" fg:w="16"/><text x="77.0982%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.8210%" y="773" width="0.0649%" height="15" fill="rgb(233,67,14)" fg:x="1200" fg:w="1"/><text x="78.0710%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.8210%" y="757" width="0.0649%" height="15" fill="rgb(245,125,36)" fg:x="1200" fg:w="1"/><text x="78.0710%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.8210%" y="741" width="0.0649%" height="15" fill="rgb(225,199,6)" fg:x="1200" fg:w="1"/><text x="78.0710%" y="751.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (17 samples, 1.10%)</title><rect x="76.8482%" y="901" width="1.1025%" height="15" fill="rgb(244,71,6)" fg:x="1185" fg:w="17"/><text x="77.0982%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (17 samples, 1.10%)</title><rect x="76.8482%" y="885" width="1.1025%" height="15" fill="rgb(225,62,9)" fg:x="1185" fg:w="17"/><text x="77.0982%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (17 samples, 1.10%)</title><rect x="76.8482%" y="869" width="1.1025%" height="15" fill="rgb(246,139,53)" fg:x="1185" fg:w="17"/><text x="77.0982%" y="879.50"></text></g><g><title>bincode::internal::deserialize (17 samples, 1.10%)</title><rect x="76.8482%" y="853" width="1.1025%" height="15" fill="rgb(243,161,46)" fg:x="1185" fg:w="17"/><text x="77.0982%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (17 samples, 1.10%)</title><rect x="76.8482%" y="837" width="1.1025%" height="15" fill="rgb(236,153,7)" fg:x="1185" fg:w="17"/><text x="77.0982%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="77.8859%" y="821" width="0.0649%" height="15" fill="rgb(248,42,35)" fg:x="1201" fg:w="1"/><text x="78.1359%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.8859%" y="805" width="0.0649%" height="15" fill="rgb(250,17,31)" fg:x="1201" fg:w="1"/><text x="78.1359%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.8859%" y="789" width="0.0649%" height="15" fill="rgb(248,138,14)" fg:x="1201" fg:w="1"/><text x="78.1359%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.8859%" y="773" width="0.0649%" height="15" fill="rgb(228,161,3)" fg:x="1201" fg:w="1"/><text x="78.1359%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (18 samples, 1.17%)</title><rect x="76.8482%" y="917" width="1.1673%" height="15" fill="rgb(248,116,17)" fg:x="1185" fg:w="18"/><text x="77.0982%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="77.9507%" y="901" width="0.0649%" height="15" fill="rgb(207,78,24)" fg:x="1202" fg:w="1"/><text x="78.2007%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="77.9507%" y="885" width="0.0649%" height="15" fill="rgb(234,99,48)" fg:x="1202" fg:w="1"/><text x="78.2007%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="77.9507%" y="869" width="0.0649%" height="15" fill="rgb(242,22,26)" fg:x="1202" fg:w="1"/><text x="78.2007%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="77.9507%" y="853" width="0.0649%" height="15" fill="rgb(227,78,32)" fg:x="1202" fg:w="1"/><text x="78.2007%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="77.9507%" y="837" width="0.0649%" height="15" fill="rgb(226,189,43)" fg:x="1202" fg:w="1"/><text x="78.2007%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="78.0156%" y="917" width="0.0649%" height="15" fill="rgb(227,218,35)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="78.0156%" y="901" width="0.0649%" height="15" fill="rgb(206,111,40)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="78.0156%" y="885" width="0.0649%" height="15" fill="rgb(208,217,22)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="78.0156%" y="869" width="0.0649%" height="15" fill="rgb(248,20,20)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="853" width="0.0649%" height="15" fill="rgb(239,155,16)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="863.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="837" width="0.0649%" height="15" fill="rgb(238,171,46)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="78.0156%" y="821" width="0.0649%" height="15" fill="rgb(248,11,36)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="805" width="0.0649%" height="15" fill="rgb(220,148,37)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="789" width="0.0649%" height="15" fill="rgb(218,144,42)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="78.0156%" y="773" width="0.0649%" height="15" fill="rgb(245,20,20)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="78.0156%" y="757" width="0.0649%" height="15" fill="rgb(240,111,48)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="78.0156%" y="741" width="0.0649%" height="15" fill="rgb(237,225,32)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="78.0156%" y="725" width="0.0649%" height="15" fill="rgb(228,161,46)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="78.0156%" y="709" width="0.0649%" height="15" fill="rgb(235,196,21)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="693" width="0.0649%" height="15" fill="rgb(250,133,21)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="677" width="0.0649%" height="15" fill="rgb(236,94,32)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="78.0156%" y="661" width="0.0649%" height="15" fill="rgb(219,176,25)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="78.0156%" y="645" width="0.0649%" height="15" fill="rgb(211,17,43)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="78.0156%" y="629" width="0.0649%" height="15" fill="rgb(220,75,23)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="78.0156%" y="613" width="0.0649%" height="15" fill="rgb(215,122,32)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="78.0156%" y="597" width="0.0649%" height="15" fill="rgb(218,57,38)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="581" width="0.0649%" height="15" fill="rgb(233,208,46)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="78.0156%" y="565" width="0.0649%" height="15" fill="rgb(221,35,50)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="78.0156%" y="549" width="0.0649%" height="15" fill="rgb(229,213,29)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="78.0156%" y="533" width="0.0649%" height="15" fill="rgb(229,110,40)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="78.0156%" y="517" width="0.0649%" height="15" fill="rgb(247,206,19)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.0156%" y="501" width="0.0649%" height="15" fill="rgb(216,229,45)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.0156%" y="485" width="0.0649%" height="15" fill="rgb(205,184,31)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.0156%" y="469" width="0.0649%" height="15" fill="rgb(213,91,10)" fg:x="1203" fg:w="1"/><text x="78.2656%" y="479.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (45 samples, 2.92%)</title><rect x="75.2270%" y="965" width="2.9183%" height="15" fill="rgb(250,49,8)" fg:x="1160" fg:w="45"/><text x="75.4770%" y="975.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (45 samples, 2.92%)</title><rect x="75.2270%" y="949" width="2.9183%" height="15" fill="rgb(207,26,8)" fg:x="1160" fg:w="45"/><text x="75.4770%" y="959.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (37 samples, 2.40%)</title><rect x="75.7458%" y="933" width="2.3995%" height="15" fill="rgb(224,2,13)" fg:x="1168" fg:w="37"/><text x="75.9958%" y="943.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="78.0804%" y="917" width="0.0649%" height="15" fill="rgb(219,108,27)" fg:x="1204" fg:w="1"/><text x="78.3304%" y="927.50"></text></g><g><title>redb::tree_store::page_store::base::PageNumber::address_range (1 samples, 0.06%)</title><rect x="78.0804%" y="901" width="0.0649%" height="15" fill="rgb(240,89,32)" fg:x="1204" fg:w="1"/><text x="78.3304%" y="911.50"></text></g><g><title>redb::tree_store::page_store::base::PageNumber::page_size_bytes (1 samples, 0.06%)</title><rect x="78.0804%" y="885" width="0.0649%" height="15" fill="rgb(248,205,3)" fg:x="1204" fg:w="1"/><text x="78.3304%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.0804%" y="869" width="0.0649%" height="15" fill="rgb(236,197,47)" fg:x="1204" fg:w="1"/><text x="78.3304%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.0804%" y="853" width="0.0649%" height="15" fill="rgb(244,185,52)" fg:x="1204" fg:w="1"/><text x="78.3304%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.0804%" y="837" width="0.0649%" height="15" fill="rgb(210,206,23)" fg:x="1204" fg:w="1"/><text x="78.3304%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="78.1453%" y="949" width="0.0649%" height="15" fill="rgb(251,177,30)" fg:x="1205" fg:w="1"/><text x="78.3953%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="78.1453%" y="933" width="0.0649%" height="15" fill="rgb(243,27,45)" fg:x="1205" fg:w="1"/><text x="78.3953%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.1453%" y="917" width="0.0649%" height="15" fill="rgb(248,141,51)" fg:x="1205" fg:w="1"/><text x="78.3953%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.1453%" y="901" width="0.0649%" height="15" fill="rgb(235,102,15)" fg:x="1205" fg:w="1"/><text x="78.3953%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.1453%" y="885" width="0.0649%" height="15" fill="rgb(214,164,53)" fg:x="1205" fg:w="1"/><text x="78.3953%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.2101%" y="949" width="0.0649%" height="15" fill="rgb(228,18,51)" fg:x="1206" fg:w="1"/><text x="78.4601%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.2101%" y="933" width="0.0649%" height="15" fill="rgb(205,211,11)" fg:x="1206" fg:w="1"/><text x="78.4601%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.2101%" y="917" width="0.0649%" height="15" fill="rgb(208,63,6)" fg:x="1206" fg:w="1"/><text x="78.4601%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt; (1 samples, 0.06%)</title><rect x="78.2750%" y="949" width="0.0649%" height="15" fill="rgb(245,76,14)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::types::TypeName&gt; (1 samples, 0.06%)</title><rect x="78.2750%" y="933" width="0.0649%" height="15" fill="rgb(234,176,34)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.06%)</title><rect x="78.2750%" y="917" width="0.0649%" height="15" fill="rgb(243,156,42)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="78.2750%" y="901" width="0.0649%" height="15" fill="rgb(237,182,10)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="78.2750%" y="885" width="0.0649%" height="15" fill="rgb(244,117,0)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="895.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="78.2750%" y="869" width="0.0649%" height="15" fill="rgb(239,91,50)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="879.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="78.2750%" y="853" width="0.0649%" height="15" fill="rgb(206,38,9)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.2750%" y="837" width="0.0649%" height="15" fill="rgb(205,25,10)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.2750%" y="821" width="0.0649%" height="15" fill="rgb(206,224,7)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.2750%" y="805" width="0.0649%" height="15" fill="rgb(227,157,10)" fg:x="1207" fg:w="1"/><text x="78.5250%" y="815.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="78.3398%" y="901" width="0.0649%" height="15" fill="rgb(214,157,37)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="78.3398%" y="885" width="0.0649%" height="15" fill="rgb(209,180,35)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="78.3398%" y="869" width="0.0649%" height="15" fill="rgb(216,174,49)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="78.3398%" y="853" width="0.0649%" height="15" fill="rgb(205,96,20)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="78.3398%" y="837" width="0.0649%" height="15" fill="rgb(214,220,39)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="78.3398%" y="821" width="0.0649%" height="15" fill="rgb(245,126,30)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="78.3398%" y="805" width="0.0649%" height="15" fill="rgb(215,88,33)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="78.3398%" y="789" width="0.0649%" height="15" fill="rgb(210,1,49)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="78.3398%" y="773" width="0.0649%" height="15" fill="rgb(207,133,3)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="783.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="78.3398%" y="757" width="0.0649%" height="15" fill="rgb(231,47,43)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="767.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.06%)</title><rect x="78.3398%" y="741" width="0.0649%" height="15" fill="rgb(245,64,1)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.3398%" y="725" width="0.0649%" height="15" fill="rgb(253,145,20)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.3398%" y="709" width="0.0649%" height="15" fill="rgb(211,39,18)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.3398%" y="693" width="0.0649%" height="15" fill="rgb(223,225,18)" fg:x="1208" fg:w="1"/><text x="78.5898%" y="703.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (2 samples, 0.13%)</title><rect x="78.3398%" y="949" width="0.1297%" height="15" fill="rgb(210,202,44)" fg:x="1208" fg:w="2"/><text x="78.5898%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (2 samples, 0.13%)</title><rect x="78.3398%" y="933" width="0.1297%" height="15" fill="rgb(231,138,36)" fg:x="1208" fg:w="2"/><text x="78.5898%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="78.3398%" y="917" width="0.1297%" height="15" fill="rgb(237,115,25)" fg:x="1208" fg:w="2"/><text x="78.5898%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="78.4047%" y="901" width="0.0649%" height="15" fill="rgb(215,53,48)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="78.4047%" y="885" width="0.0649%" height="15" fill="rgb(243,193,24)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="78.4047%" y="869" width="0.0649%" height="15" fill="rgb(210,106,28)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="78.4047%" y="853" width="0.0649%" height="15" fill="rgb(249,192,0)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="78.4047%" y="837" width="0.0649%" height="15" fill="rgb(224,96,21)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="78.4047%" y="821" width="0.0649%" height="15" fill="rgb(243,160,19)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="78.4047%" y="805" width="0.0649%" height="15" fill="rgb(219,205,50)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="78.4047%" y="789" width="0.0649%" height="15" fill="rgb(218,175,44)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="78.4047%" y="773" width="0.0649%" height="15" fill="rgb(251,84,47)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.4047%" y="757" width="0.0649%" height="15" fill="rgb(241,14,16)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.4047%" y="741" width="0.0649%" height="15" fill="rgb(207,142,28)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.4047%" y="725" width="0.0649%" height="15" fill="rgb(208,116,22)" fg:x="1209" fg:w="1"/><text x="78.6547%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="78.4695%" y="917" width="0.0649%" height="15" fill="rgb(210,0,43)" fg:x="1210" fg:w="1"/><text x="78.7195%" y="927.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="78.4695%" y="901" width="0.0649%" height="15" fill="rgb(246,33,21)" fg:x="1210" fg:w="1"/><text x="78.7195%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.4695%" y="885" width="0.0649%" height="15" fill="rgb(208,158,54)" fg:x="1210" fg:w="1"/><text x="78.7195%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.4695%" y="869" width="0.0649%" height="15" fill="rgb(218,99,29)" fg:x="1210" fg:w="1"/><text x="78.7195%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.4695%" y="853" width="0.0649%" height="15" fill="rgb(226,29,7)" fg:x="1210" fg:w="1"/><text x="78.7195%" y="863.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="78.5344%" y="773" width="0.0649%" height="15" fill="rgb(206,178,46)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="783.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="78.5344%" y="757" width="0.0649%" height="15" fill="rgb(205,169,32)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="767.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="78.5344%" y="741" width="0.0649%" height="15" fill="rgb(217,4,13)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="78.5344%" y="725" width="0.0649%" height="15" fill="rgb(210,140,37)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.5344%" y="709" width="0.0649%" height="15" fill="rgb(229,80,10)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.5344%" y="693" width="0.0649%" height="15" fill="rgb(212,175,34)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.5344%" y="677" width="0.0649%" height="15" fill="rgb(216,207,24)" fg:x="1211" fg:w="1"/><text x="78.7844%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (2 samples, 0.13%)</title><rect x="78.5344%" y="917" width="0.1297%" height="15" fill="rgb(234,163,3)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="78.5344%" y="901" width="0.1297%" height="15" fill="rgb(248,101,16)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="78.5344%" y="885" width="0.1297%" height="15" fill="rgb(209,152,54)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="895.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="78.5344%" y="869" width="0.1297%" height="15" fill="rgb(229,124,51)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="78.5344%" y="853" width="0.1297%" height="15" fill="rgb(219,83,18)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="78.5344%" y="837" width="0.1297%" height="15" fill="rgb(206,29,38)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="78.5344%" y="821" width="0.1297%" height="15" fill="rgb(245,123,23)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="78.5344%" y="805" width="0.1297%" height="15" fill="rgb(238,50,33)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="815.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="78.5344%" y="789" width="0.1297%" height="15" fill="rgb(234,165,23)" fg:x="1211" fg:w="2"/><text x="78.7844%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="78.5992%" y="773" width="0.0649%" height="15" fill="rgb(211,82,31)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="783.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="78.5992%" y="757" width="0.0649%" height="15" fill="rgb(224,166,46)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="78.5992%" y="741" width="0.0649%" height="15" fill="rgb(211,13,8)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="78.5992%" y="725" width="0.0649%" height="15" fill="rgb(212,7,42)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="78.5992%" y="709" width="0.0649%" height="15" fill="rgb(249,102,19)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="78.5992%" y="693" width="0.0649%" height="15" fill="rgb(225,41,13)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="78.5992%" y="677" width="0.0649%" height="15" fill="rgb(220,65,27)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.5992%" y="661" width="0.0649%" height="15" fill="rgb(206,4,41)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.5992%" y="645" width="0.0649%" height="15" fill="rgb(219,60,39)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.5992%" y="629" width="0.0649%" height="15" fill="rgb(226,4,38)" fg:x="1212" fg:w="1"/><text x="78.8492%" y="639.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="78.6641%" y="789" width="0.0649%" height="15" fill="rgb(250,52,3)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="799.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="78.6641%" y="773" width="0.0649%" height="15" fill="rgb(234,93,0)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="783.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="78.6641%" y="757" width="0.0649%" height="15" fill="rgb(251,47,47)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="767.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="78.6641%" y="741" width="0.0649%" height="15" fill="rgb(205,166,47)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.6641%" y="725" width="0.0649%" height="15" fill="rgb(231,148,8)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.6641%" y="709" width="0.0649%" height="15" fill="rgb(244,185,19)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.6641%" y="693" width="0.0649%" height="15" fill="rgb(224,201,45)" fg:x="1213" fg:w="1"/><text x="78.9141%" y="703.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="78.6641%" y="885" width="0.1297%" height="15" fill="rgb(240,77,39)" fg:x="1213" fg:w="2"/><text x="78.9141%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="78.6641%" y="869" width="0.1297%" height="15" fill="rgb(248,211,29)" fg:x="1213" fg:w="2"/><text x="78.9141%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="78.6641%" y="853" width="0.1297%" height="15" fill="rgb(232,214,46)" fg:x="1213" fg:w="2"/><text x="78.9141%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (2 samples, 0.13%)</title><rect x="78.6641%" y="837" width="0.1297%" height="15" fill="rgb(213,99,54)" fg:x="1213" fg:w="2"/><text x="78.9141%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (2 samples, 0.13%)</title><rect x="78.6641%" y="821" width="0.1297%" height="15" fill="rgb(240,19,46)" fg:x="1213" fg:w="2"/><text x="78.9141%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (2 samples, 0.13%)</title><rect x="78.6641%" y="805" width="0.1297%" height="15" fill="rgb(243,89,10)" fg:x="1213" fg:w="2"/><text x="78.9141%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.7289%" y="789" width="0.0649%" height="15" fill="rgb(249,28,32)" fg:x="1214" fg:w="1"/><text x="78.9789%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.7289%" y="773" width="0.0649%" height="15" fill="rgb(253,30,9)" fg:x="1214" fg:w="1"/><text x="78.9789%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.7289%" y="757" width="0.0649%" height="15" fill="rgb(217,2,26)" fg:x="1214" fg:w="1"/><text x="78.9789%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.7938%" y="853" width="0.0649%" height="15" fill="rgb(220,28,10)" fg:x="1215" fg:w="1"/><text x="79.0438%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.7938%" y="837" width="0.0649%" height="15" fill="rgb(228,167,49)" fg:x="1215" fg:w="1"/><text x="79.0438%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.7938%" y="821" width="0.0649%" height="15" fill="rgb(238,212,3)" fg:x="1215" fg:w="1"/><text x="79.0438%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="78.7938%" y="885" width="0.1297%" height="15" fill="rgb(229,134,44)" fg:x="1215" fg:w="2"/><text x="79.0438%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (2 samples, 0.13%)</title><rect x="78.7938%" y="869" width="0.1297%" height="15" fill="rgb(208,71,4)" fg:x="1215" fg:w="2"/><text x="79.0438%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="78.8586%" y="853" width="0.0649%" height="15" fill="rgb(221,205,45)" fg:x="1216" fg:w="1"/><text x="79.1086%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="78.8586%" y="837" width="0.0649%" height="15" fill="rgb(215,132,38)" fg:x="1216" fg:w="1"/><text x="79.1086%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.8586%" y="821" width="0.0649%" height="15" fill="rgb(227,158,6)" fg:x="1216" fg:w="1"/><text x="79.1086%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.8586%" y="805" width="0.0649%" height="15" fill="rgb(250,10,38)" fg:x="1216" fg:w="1"/><text x="79.1086%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.8586%" y="789" width="0.0649%" height="15" fill="rgb(225,171,40)" fg:x="1216" fg:w="1"/><text x="79.1086%" y="799.50"></text></g><g><title>core::mem::drop (1 samples, 0.06%)</title><rect x="78.9235%" y="869" width="0.0649%" height="15" fill="rgb(238,17,43)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::set::HashSet&lt;redb::tree_store::page_store::base::PageNumber&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="78.9235%" y="853" width="0.0649%" height="15" fill="rgb(208,145,4)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="863.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="78.9235%" y="837" width="0.0649%" height="15" fill="rgb(232,82,7)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="847.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (1 samples, 0.06%)</title><rect x="78.9235%" y="821" width="0.0649%" height="15" fill="rgb(205,166,38)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.06%)</title><rect x="78.9235%" y="805" width="0.0649%" height="15" fill="rgb(240,228,4)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.06%)</title><rect x="78.9235%" y="789" width="0.0649%" height="15" fill="rgb(233,121,40)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.9235%" y="773" width="0.0649%" height="15" fill="rgb(243,84,30)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.9235%" y="757" width="0.0649%" height="15" fill="rgb(235,81,48)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.9235%" y="741" width="0.0649%" height="15" fill="rgb(218,137,0)" fg:x="1217" fg:w="1"/><text x="79.1735%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="78.9883%" y="757" width="0.0649%" height="15" fill="rgb(223,151,48)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="78.9883%" y="741" width="0.0649%" height="15" fill="rgb(247,30,19)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="78.9883%" y="725" width="0.0649%" height="15" fill="rgb(205,129,29)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="78.9883%" y="709" width="0.0649%" height="15" fill="rgb(222,29,2)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="78.9883%" y="693" width="0.0649%" height="15" fill="rgb(232,145,33)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="78.9883%" y="677" width="0.0649%" height="15" fill="rgb(217,30,31)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="78.9883%" y="661" width="0.0649%" height="15" fill="rgb(243,22,52)" fg:x="1218" fg:w="1"/><text x="79.2383%" y="671.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (2 samples, 0.13%)</title><rect x="78.9883%" y="869" width="0.1297%" height="15" fill="rgb(254,228,14)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="879.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (2 samples, 0.13%)</title><rect x="78.9883%" y="853" width="0.1297%" height="15" fill="rgb(231,45,50)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.13%)</title><rect x="78.9883%" y="837" width="0.1297%" height="15" fill="rgb(248,125,3)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.13%)</title><rect x="78.9883%" y="821" width="0.1297%" height="15" fill="rgb(213,76,9)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.13%)</title><rect x="78.9883%" y="805" width="0.1297%" height="15" fill="rgb(238,108,21)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="78.9883%" y="789" width="0.1297%" height="15" fill="rgb(229,214,19)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="78.9883%" y="773" width="0.1297%" height="15" fill="rgb(252,201,5)" fg:x="1218" fg:w="2"/><text x="79.2383%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="79.0532%" y="757" width="0.0649%" height="15" fill="rgb(233,165,49)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.06%)</title><rect x="79.0532%" y="741" width="0.0649%" height="15" fill="rgb(208,165,19)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.06%)</title><rect x="79.0532%" y="725" width="0.0649%" height="15" fill="rgb(216,220,31)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="79.0532%" y="709" width="0.0649%" height="15" fill="rgb(214,8,31)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="79.0532%" y="693" width="0.0649%" height="15" fill="rgb(220,32,32)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="79.0532%" y="677" width="0.0649%" height="15" fill="rgb(237,172,34)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.0532%" y="661" width="0.0649%" height="15" fill="rgb(240,209,5)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.0532%" y="645" width="0.0649%" height="15" fill="rgb(221,219,1)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.0532%" y="629" width="0.0649%" height="15" fill="rgb(237,90,36)" fg:x="1219" fg:w="1"/><text x="79.3032%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="79.1180%" y="837" width="0.0649%" height="15" fill="rgb(245,14,51)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="79.1180%" y="821" width="0.0649%" height="15" fill="rgb(211,71,49)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="79.1180%" y="805" width="0.0649%" height="15" fill="rgb(230,223,9)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="79.1180%" y="789" width="0.0649%" height="15" fill="rgb(212,33,31)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="79.1180%" y="773" width="0.0649%" height="15" fill="rgb(218,141,5)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="79.1180%" y="757" width="0.0649%" height="15" fill="rgb(239,194,8)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.1180%" y="741" width="0.0649%" height="15" fill="rgb(225,119,29)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.1180%" y="725" width="0.0649%" height="15" fill="rgb(233,32,3)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.1180%" y="709" width="0.0649%" height="15" fill="rgb(248,126,40)" fg:x="1220" fg:w="1"/><text x="79.3680%" y="719.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (9 samples, 0.58%)</title><rect x="78.6641%" y="917" width="0.5837%" height="15" fill="rgb(213,102,53)" fg:x="1213" fg:w="9"/><text x="78.9141%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (9 samples, 0.58%)</title><rect x="78.6641%" y="901" width="0.5837%" height="15" fill="rgb(212,69,15)" fg:x="1213" fg:w="9"/><text x="78.9141%" y="911.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (5 samples, 0.32%)</title><rect x="78.9235%" y="885" width="0.3243%" height="15" fill="rgb(253,39,34)" fg:x="1217" fg:w="5"/><text x="79.1735%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="79.1180%" y="869" width="0.1297%" height="15" fill="rgb(205,189,54)" fg:x="1220" fg:w="2"/><text x="79.3680%" y="879.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="79.1180%" y="853" width="0.1297%" height="15" fill="rgb(234,229,45)" fg:x="1220" fg:w="2"/><text x="79.3680%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="79.1829%" y="837" width="0.0649%" height="15" fill="rgb(243,79,48)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="79.1829%" y="821" width="0.0649%" height="15" fill="rgb(206,71,50)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="79.1829%" y="805" width="0.0649%" height="15" fill="rgb(209,32,17)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="79.1829%" y="789" width="0.0649%" height="15" fill="rgb(219,229,6)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="79.1829%" y="773" width="0.0649%" height="15" fill="rgb(226,25,27)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="79.1829%" y="757" width="0.0649%" height="15" fill="rgb(218,185,23)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="767.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="79.1829%" y="741" width="0.0649%" height="15" fill="rgb(242,123,5)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="751.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="79.1829%" y="725" width="0.0649%" height="15" fill="rgb(215,53,19)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="79.1829%" y="709" width="0.0649%" height="15" fill="rgb(233,20,30)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="79.1829%" y="693" width="0.0649%" height="15" fill="rgb(209,67,20)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="79.1829%" y="677" width="0.0649%" height="15" fill="rgb(227,181,50)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.1829%" y="661" width="0.0649%" height="15" fill="rgb(252,75,38)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.1829%" y="645" width="0.0649%" height="15" fill="rgb(235,9,33)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.1829%" y="629" width="0.0649%" height="15" fill="rgb(208,87,30)" fg:x="1221" fg:w="1"/><text x="79.4329%" y="639.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (13 samples, 0.84%)</title><rect x="78.4695%" y="933" width="0.8431%" height="15" fill="rgb(215,199,39)" fg:x="1210" fg:w="13"/><text x="78.7195%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="79.2477%" y="917" width="0.0649%" height="15" fill="rgb(246,208,12)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="927.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="79.2477%" y="901" width="0.0649%" height="15" fill="rgb(206,195,10)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="911.50"></text></g><g><title>redb::types::TypeName::from_bytes (1 samples, 0.06%)</title><rect x="79.2477%" y="885" width="0.0649%" height="15" fill="rgb(244,1,30)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="895.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.06%)</title><rect x="79.2477%" y="869" width="0.0649%" height="15" fill="rgb(230,83,5)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="79.2477%" y="853" width="0.0649%" height="15" fill="rgb(239,62,17)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="863.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="79.2477%" y="837" width="0.0649%" height="15" fill="rgb(252,193,41)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="79.2477%" y="821" width="0.0649%" height="15" fill="rgb(216,142,19)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="831.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="79.2477%" y="805" width="0.0649%" height="15" fill="rgb(240,81,38)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.2477%" y="789" width="0.0649%" height="15" fill="rgb(240,109,40)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.2477%" y="773" width="0.0649%" height="15" fill="rgb(230,123,10)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.2477%" y="757" width="0.0649%" height="15" fill="rgb(253,42,32)" fg:x="1222" fg:w="1"/><text x="79.4977%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.3126%" y="917" width="0.0649%" height="15" fill="rgb(218,154,8)" fg:x="1223" fg:w="1"/><text x="79.5626%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.3126%" y="901" width="0.0649%" height="15" fill="rgb(216,197,10)" fg:x="1223" fg:w="1"/><text x="79.5626%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.3126%" y="885" width="0.0649%" height="15" fill="rgb(223,107,12)" fg:x="1223" fg:w="1"/><text x="79.5626%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="79.3774%" y="789" width="0.0649%" height="15" fill="rgb(241,174,42)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="799.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.06%)</title><rect x="79.3774%" y="773" width="0.0649%" height="15" fill="rgb(231,78,20)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="79.3774%" y="757" width="0.0649%" height="15" fill="rgb(230,208,49)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="79.3774%" y="741" width="0.0649%" height="15" fill="rgb(238,11,34)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="79.3774%" y="725" width="0.0649%" height="15" fill="rgb(210,130,26)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="79.3774%" y="709" width="0.0649%" height="15" fill="rgb(242,131,11)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="79.3774%" y="693" width="0.0649%" height="15" fill="rgb(237,38,28)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.3774%" y="677" width="0.0649%" height="15" fill="rgb(244,180,43)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.3774%" y="661" width="0.0649%" height="15" fill="rgb(214,171,19)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.3774%" y="645" width="0.0649%" height="15" fill="rgb(252,101,45)" fg:x="1224" fg:w="1"/><text x="79.6274%" y="655.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (21 samples, 1.36%)</title><rect x="78.1453%" y="965" width="1.3619%" height="15" fill="rgb(211,96,33)" fg:x="1205" fg:w="21"/><text x="78.3953%" y="975.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (16 samples, 1.04%)</title><rect x="78.4695%" y="949" width="1.0376%" height="15" fill="rgb(207,80,25)" fg:x="1210" fg:w="16"/><text x="78.7195%" y="959.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (3 samples, 0.19%)</title><rect x="79.3126%" y="933" width="0.1946%" height="15" fill="rgb(225,15,35)" fg:x="1223" fg:w="3"/><text x="79.5626%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (2 samples, 0.13%)</title><rect x="79.3774%" y="917" width="0.1297%" height="15" fill="rgb(214,93,43)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="927.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.13%)</title><rect x="79.3774%" y="901" width="0.1297%" height="15" fill="rgb(248,42,37)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2 samples, 0.13%)</title><rect x="79.3774%" y="885" width="0.1297%" height="15" fill="rgb(217,135,32)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="895.50"></text></g><g><title>alloc::fmt::format::{{closure}} (2 samples, 0.13%)</title><rect x="79.3774%" y="869" width="0.1297%" height="15" fill="rgb(216,74,28)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="879.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.13%)</title><rect x="79.3774%" y="853" width="0.1297%" height="15" fill="rgb(247,108,16)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="863.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.13%)</title><rect x="79.3774%" y="837" width="0.1297%" height="15" fill="rgb(205,219,30)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="847.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (2 samples, 0.13%)</title><rect x="79.3774%" y="821" width="0.1297%" height="15" fill="rgb(241,122,9)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="831.50"></text></g><g><title>core::fmt::write (2 samples, 0.13%)</title><rect x="79.3774%" y="805" width="0.1297%" height="15" fill="rgb(216,148,50)" fg:x="1224" fg:w="2"/><text x="79.6274%" y="815.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="79.4423%" y="789" width="0.0649%" height="15" fill="rgb(226,154,2)" fg:x="1225" fg:w="1"/><text x="79.6923%" y="799.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="79.4423%" y="773" width="0.0649%" height="15" fill="rgb(220,128,1)" fg:x="1225" fg:w="1"/><text x="79.6923%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="79.4423%" y="757" width="0.0649%" height="15" fill="rgb(245,185,29)" fg:x="1225" fg:w="1"/><text x="79.6923%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.4423%" y="741" width="0.0649%" height="15" fill="rgb(243,161,2)" fg:x="1225" fg:w="1"/><text x="79.6923%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.4423%" y="725" width="0.0649%" height="15" fill="rgb(249,215,17)" fg:x="1225" fg:w="1"/><text x="79.6923%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.4423%" y="709" width="0.0649%" height="15" fill="rgb(237,67,11)" fg:x="1225" fg:w="1"/><text x="79.6923%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.5071%" y="917" width="0.0649%" height="15" fill="rgb(239,17,24)" fg:x="1226" fg:w="1"/><text x="79.7571%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.5071%" y="901" width="0.0649%" height="15" fill="rgb(215,97,29)" fg:x="1226" fg:w="1"/><text x="79.7571%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.5071%" y="885" width="0.0649%" height="15" fill="rgb(253,228,42)" fg:x="1226" fg:w="1"/><text x="79.7571%" y="895.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.5720%" y="869" width="0.0649%" height="15" fill="rgb(240,85,2)" fg:x="1227" fg:w="1"/><text x="79.8220%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.06%)</title><rect x="79.5720%" y="853" width="0.0649%" height="15" fill="rgb(214,155,4)" fg:x="1227" fg:w="1"/><text x="79.8220%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="79.5720%" y="837" width="0.0649%" height="15" fill="rgb(247,120,22)" fg:x="1227" fg:w="1"/><text x="79.8220%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.5720%" y="821" width="0.0649%" height="15" fill="rgb(211,208,6)" fg:x="1227" fg:w="1"/><text x="79.8220%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.5720%" y="805" width="0.0649%" height="15" fill="rgb(235,99,41)" fg:x="1227" fg:w="1"/><text x="79.8220%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.5720%" y="789" width="0.0649%" height="15" fill="rgb(223,28,8)" fg:x="1227" fg:w="1"/><text x="79.8220%" y="799.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.6368%" y="645" width="0.0649%" height="15" fill="rgb(212,71,20)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="79.6368%" y="629" width="0.0649%" height="15" fill="rgb(206,85,3)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="639.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="79.6368%" y="613" width="0.0649%" height="15" fill="rgb(244,180,11)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="623.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="79.6368%" y="597" width="0.0649%" height="15" fill="rgb(223,16,21)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="607.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="79.6368%" y="581" width="0.0649%" height="15" fill="rgb(238,85,42)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="591.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="79.6368%" y="565" width="0.0649%" height="15" fill="rgb(205,85,8)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="79.6368%" y="549" width="0.0649%" height="15" fill="rgb(217,190,15)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="79.6368%" y="533" width="0.0649%" height="15" fill="rgb(243,192,23)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="543.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="79.6368%" y="517" width="0.0649%" height="15" fill="rgb(223,220,37)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="527.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="79.6368%" y="501" width="0.0649%" height="15" fill="rgb(208,41,17)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="79.6368%" y="485" width="0.0649%" height="15" fill="rgb(224,188,7)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="79.6368%" y="469" width="0.0649%" height="15" fill="rgb(236,16,50)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="79.6368%" y="453" width="0.0649%" height="15" fill="rgb(238,6,24)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.6368%" y="437" width="0.0649%" height="15" fill="rgb(253,67,45)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.6368%" y="421" width="0.0649%" height="15" fill="rgb(210,89,32)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.6368%" y="405" width="0.0649%" height="15" fill="rgb(208,89,9)" fg:x="1228" fg:w="1"/><text x="79.8868%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.7017%" y="533" width="0.0649%" height="15" fill="rgb(222,180,44)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="79.7017%" y="517" width="0.0649%" height="15" fill="rgb(250,181,46)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="527.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="79.7017%" y="501" width="0.0649%" height="15" fill="rgb(210,190,26)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="79.7017%" y="485" width="0.0649%" height="15" fill="rgb(253,49,13)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="495.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="79.7017%" y="469" width="0.0649%" height="15" fill="rgb(240,184,42)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="79.7017%" y="453" width="0.0649%" height="15" fill="rgb(246,59,37)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="79.7017%" y="437" width="0.0649%" height="15" fill="rgb(207,134,54)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="79.7017%" y="421" width="0.0649%" height="15" fill="rgb(250,122,24)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.7017%" y="405" width="0.0649%" height="15" fill="rgb(239,206,3)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.7017%" y="389" width="0.0649%" height="15" fill="rgb(253,220,32)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.7017%" y="373" width="0.0649%" height="15" fill="rgb(209,217,48)" fg:x="1229" fg:w="1"/><text x="79.9517%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.7665%" y="373" width="0.0649%" height="15" fill="rgb(242,91,39)" fg:x="1230" fg:w="1"/><text x="80.0165%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.7665%" y="357" width="0.0649%" height="15" fill="rgb(228,4,13)" fg:x="1230" fg:w="1"/><text x="80.0165%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.7665%" y="341" width="0.0649%" height="15" fill="rgb(223,133,4)" fg:x="1230" fg:w="1"/><text x="80.0165%" y="351.50"></text></g><g><title>utxo::Transaction::all (124 samples, 8.04%)</title><rect x="71.8547%" y="1061" width="8.0415%" height="15" fill="rgb(215,105,30)" fg:x="1108" fg:w="124"/><text x="72.1047%" y="1071.50">utxo::Trans..</text></g><g><title>utxo::Transaction::compose (124 samples, 8.04%)</title><rect x="71.8547%" y="1045" width="8.0415%" height="15" fill="rgb(230,9,4)" fg:x="1108" fg:w="124"/><text x="72.1047%" y="1055.50">utxo::Trans..</text></g><g><title>utxo::Utxo::range (123 samples, 7.98%)</title><rect x="71.9196%" y="1029" width="7.9767%" height="15" fill="rgb(248,15,2)" fg:x="1109" fg:w="123"/><text x="72.1696%" y="1039.50">utxo::Utxo:..</text></g><g><title>utxo::Utxo::compose (121 samples, 7.85%)</title><rect x="72.0493%" y="1013" width="7.8470%" height="15" fill="rgb(208,210,22)" fg:x="1111" fg:w="121"/><text x="72.2993%" y="1023.50">utxo::Utxo:..</text></g><g><title>utxo::Asset::range (103 samples, 6.68%)</title><rect x="73.2166%" y="997" width="6.6796%" height="15" fill="rgb(208,112,41)" fg:x="1129" fg:w="103"/><text x="73.4666%" y="1007.50">utxo::Ass..</text></g><g><title>utxo::Asset::compose (80 samples, 5.19%)</title><rect x="74.7082%" y="981" width="5.1881%" height="15" fill="rgb(232,83,14)" fg:x="1152" fg:w="80"/><text x="74.9582%" y="991.50">utxo::..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (6 samples, 0.39%)</title><rect x="79.5071%" y="965" width="0.3891%" height="15" fill="rgb(229,65,11)" fg:x="1226" fg:w="6"/><text x="79.7571%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (6 samples, 0.39%)</title><rect x="79.5071%" y="949" width="0.3891%" height="15" fill="rgb(228,126,24)" fg:x="1226" fg:w="6"/><text x="79.7571%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (6 samples, 0.39%)</title><rect x="79.5071%" y="933" width="0.3891%" height="15" fill="rgb(218,66,33)" fg:x="1226" fg:w="6"/><text x="79.7571%" y="943.50"></text></g><g><title>bincode::internal::deserialize (5 samples, 0.32%)</title><rect x="79.5720%" y="917" width="0.3243%" height="15" fill="rgb(251,49,52)" fg:x="1227" fg:w="5"/><text x="79.8220%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (5 samples, 0.32%)</title><rect x="79.5720%" y="901" width="0.3243%" height="15" fill="rgb(219,46,37)" fg:x="1227" fg:w="5"/><text x="79.8220%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="79.5720%" y="885" width="0.3243%" height="15" fill="rgb(213,53,49)" fg:x="1227" fg:w="5"/><text x="79.8220%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="79.6368%" y="869" width="0.2594%" height="15" fill="rgb(214,134,1)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="79.6368%" y="853" width="0.2594%" height="15" fill="rgb(208,139,43)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="79.6368%" y="837" width="0.2594%" height="15" fill="rgb(231,105,35)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="79.6368%" y="821" width="0.2594%" height="15" fill="rgb(247,189,9)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="79.6368%" y="805" width="0.2594%" height="15" fill="rgb(252,48,51)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="79.6368%" y="789" width="0.2594%" height="15" fill="rgb(209,121,1)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="79.6368%" y="773" width="0.2594%" height="15" fill="rgb(231,40,26)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="79.6368%" y="757" width="0.2594%" height="15" fill="rgb(251,8,13)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="79.6368%" y="741" width="0.2594%" height="15" fill="rgb(231,110,2)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="79.6368%" y="725" width="0.2594%" height="15" fill="rgb(216,153,22)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="79.6368%" y="709" width="0.2594%" height="15" fill="rgb(249,116,49)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="79.6368%" y="693" width="0.2594%" height="15" fill="rgb(230,89,2)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="79.6368%" y="677" width="0.2594%" height="15" fill="rgb(231,125,23)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="79.6368%" y="661" width="0.2594%" height="15" fill="rgb(212,217,18)" fg:x="1228" fg:w="4"/><text x="79.8868%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="79.7017%" y="645" width="0.1946%" height="15" fill="rgb(210,21,33)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="79.7017%" y="629" width="0.1946%" height="15" fill="rgb(241,97,9)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="79.7017%" y="613" width="0.1946%" height="15" fill="rgb(221,35,31)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="79.7017%" y="597" width="0.1946%" height="15" fill="rgb(251,23,23)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="79.7017%" y="581" width="0.1946%" height="15" fill="rgb(227,165,2)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="79.7017%" y="565" width="0.1946%" height="15" fill="rgb(242,24,2)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="79.7017%" y="549" width="0.1946%" height="15" fill="rgb(242,138,51)" fg:x="1229" fg:w="3"/><text x="79.9517%" y="559.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="79.7665%" y="533" width="0.1297%" height="15" fill="rgb(220,219,5)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="79.7665%" y="517" width="0.1297%" height="15" fill="rgb(247,53,29)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="79.7665%" y="501" width="0.1297%" height="15" fill="rgb(233,43,39)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="511.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="79.7665%" y="485" width="0.1297%" height="15" fill="rgb(230,128,54)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="79.7665%" y="469" width="0.1297%" height="15" fill="rgb(218,20,12)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="79.7665%" y="453" width="0.1297%" height="15" fill="rgb(206,51,14)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="463.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="79.7665%" y="437" width="0.1297%" height="15" fill="rgb(223,16,35)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="79.7665%" y="421" width="0.1297%" height="15" fill="rgb(226,165,37)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="79.7665%" y="405" width="0.1297%" height="15" fill="rgb(240,26,21)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="415.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="79.7665%" y="389" width="0.1297%" height="15" fill="rgb(240,72,46)" fg:x="1230" fg:w="2"/><text x="80.0165%" y="399.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="79.8314%" y="373" width="0.0649%" height="15" fill="rgb(211,33,41)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="383.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="79.8314%" y="357" width="0.0649%" height="15" fill="rgb(224,157,46)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="79.8314%" y="341" width="0.0649%" height="15" fill="rgb(223,59,19)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="79.8314%" y="325" width="0.0649%" height="15" fill="rgb(239,187,1)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.8314%" y="309" width="0.0649%" height="15" fill="rgb(226,95,9)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.8314%" y="293" width="0.0649%" height="15" fill="rgb(234,61,54)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.8314%" y="277" width="0.0649%" height="15" fill="rgb(205,209,47)" fg:x="1231" fg:w="1"/><text x="80.0814%" y="287.50"></text></g><g><title>utxo::Transaction::first (1 samples, 0.06%)</title><rect x="79.8962%" y="1061" width="0.0649%" height="15" fill="rgb(228,7,43)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="1071.50"></text></g><g><title>utxo::Transaction::compose (1 samples, 0.06%)</title><rect x="79.8962%" y="1045" width="0.0649%" height="15" fill="rgb(240,217,52)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="1055.50"></text></g><g><title>utxo::Utxo::range (1 samples, 0.06%)</title><rect x="79.8962%" y="1029" width="0.0649%" height="15" fill="rgb(211,178,21)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="1039.50"></text></g><g><title>utxo::Utxo::compose (1 samples, 0.06%)</title><rect x="79.8962%" y="1013" width="0.0649%" height="15" fill="rgb(205,25,34)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="1023.50"></text></g><g><title>utxo::Asset::range (1 samples, 0.06%)</title><rect x="79.8962%" y="997" width="0.0649%" height="15" fill="rgb(209,57,11)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="1007.50"></text></g><g><title>utxo::Asset::compose (1 samples, 0.06%)</title><rect x="79.8962%" y="981" width="0.0649%" height="15" fill="rgb(221,99,2)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="991.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="79.8962%" y="965" width="0.0649%" height="15" fill="rgb(232,79,22)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="79.8962%" y="949" width="0.0649%" height="15" fill="rgb(221,145,32)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="79.8962%" y="933" width="0.0649%" height="15" fill="rgb(236,133,36)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="79.8962%" y="917" width="0.0649%" height="15" fill="rgb(208,224,44)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="79.8962%" y="901" width="0.0649%" height="15" fill="rgb(235,143,15)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="79.8962%" y="885" width="0.0649%" height="15" fill="rgb(249,83,27)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="79.8962%" y="869" width="0.0649%" height="15" fill="rgb(238,226,19)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="79.8962%" y="853" width="0.0649%" height="15" fill="rgb(226,206,27)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="837" width="0.0649%" height="15" fill="rgb(251,182,9)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="821" width="0.0649%" height="15" fill="rgb(212,140,41)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="79.8962%" y="805" width="0.0649%" height="15" fill="rgb(220,106,18)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="789" width="0.0649%" height="15" fill="rgb(252,46,41)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="773" width="0.0649%" height="15" fill="rgb(209,222,15)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.8962%" y="757" width="0.0649%" height="15" fill="rgb(233,83,50)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="79.8962%" y="741" width="0.0649%" height="15" fill="rgb(205,212,0)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="79.8962%" y="725" width="0.0649%" height="15" fill="rgb(235,117,51)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="79.8962%" y="709" width="0.0649%" height="15" fill="rgb(233,133,48)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="79.8962%" y="693" width="0.0649%" height="15" fill="rgb(219,3,2)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="677" width="0.0649%" height="15" fill="rgb(225,80,52)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="661" width="0.0649%" height="15" fill="rgb(235,195,42)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.8962%" y="645" width="0.0649%" height="15" fill="rgb(240,207,46)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="79.8962%" y="629" width="0.0649%" height="15" fill="rgb(236,112,50)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="79.8962%" y="613" width="0.0649%" height="15" fill="rgb(249,151,27)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="79.8962%" y="597" width="0.0649%" height="15" fill="rgb(253,223,52)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="79.8962%" y="581" width="0.0649%" height="15" fill="rgb(215,55,33)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="565" width="0.0649%" height="15" fill="rgb(207,24,17)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.8962%" y="549" width="0.0649%" height="15" fill="rgb(218,169,32)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.8962%" y="533" width="0.0649%" height="15" fill="rgb(209,210,6)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.8962%" y="517" width="0.0649%" height="15" fill="rgb(225,208,8)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.8962%" y="501" width="0.0649%" height="15" fill="rgb(238,14,32)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.8962%" y="485" width="0.0649%" height="15" fill="rgb(211,137,3)" fg:x="1232" fg:w="1"/><text x="80.1462%" y="495.50"></text></g><g><title>utxo::Transaction::get (1 samples, 0.06%)</title><rect x="79.9611%" y="1061" width="0.0649%" height="15" fill="rgb(207,171,19)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="1071.50"></text></g><g><title>utxo::Transaction::compose (1 samples, 0.06%)</title><rect x="79.9611%" y="1045" width="0.0649%" height="15" fill="rgb(250,80,8)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="1055.50"></text></g><g><title>utxo::Utxo::range (1 samples, 0.06%)</title><rect x="79.9611%" y="1029" width="0.0649%" height="15" fill="rgb(209,103,53)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="1039.50"></text></g><g><title>utxo::Utxo::compose (1 samples, 0.06%)</title><rect x="79.9611%" y="1013" width="0.0649%" height="15" fill="rgb(233,198,10)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="1023.50"></text></g><g><title>utxo::Asset::range (1 samples, 0.06%)</title><rect x="79.9611%" y="997" width="0.0649%" height="15" fill="rgb(236,125,25)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="1007.50"></text></g><g><title>utxo::Asset::compose (1 samples, 0.06%)</title><rect x="79.9611%" y="981" width="0.0649%" height="15" fill="rgb(254,182,48)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="991.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="79.9611%" y="965" width="0.0649%" height="15" fill="rgb(216,108,44)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="79.9611%" y="949" width="0.0649%" height="15" fill="rgb(222,72,39)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="79.9611%" y="933" width="0.0649%" height="15" fill="rgb(252,70,39)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="79.9611%" y="917" width="0.0649%" height="15" fill="rgb(243,99,34)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="79.9611%" y="901" width="0.0649%" height="15" fill="rgb(252,109,12)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="79.9611%" y="885" width="0.0649%" height="15" fill="rgb(211,186,10)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="869" width="0.0649%" height="15" fill="rgb(246,90,8)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="853" width="0.0649%" height="15" fill="rgb(226,91,24)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="79.9611%" y="837" width="0.0649%" height="15" fill="rgb(216,28,44)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="821" width="0.0649%" height="15" fill="rgb(229,36,0)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="805" width="0.0649%" height="15" fill="rgb(245,97,18)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.9611%" y="789" width="0.0649%" height="15" fill="rgb(241,97,54)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="79.9611%" y="773" width="0.0649%" height="15" fill="rgb(234,125,17)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="79.9611%" y="757" width="0.0649%" height="15" fill="rgb(228,172,39)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="79.9611%" y="741" width="0.0649%" height="15" fill="rgb(227,169,1)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="79.9611%" y="725" width="0.0649%" height="15" fill="rgb(206,13,35)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="709" width="0.0649%" height="15" fill="rgb(211,117,30)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="693" width="0.0649%" height="15" fill="rgb(230,198,4)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.9611%" y="677" width="0.0649%" height="15" fill="rgb(213,87,54)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="79.9611%" y="661" width="0.0649%" height="15" fill="rgb(248,43,22)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="79.9611%" y="645" width="0.0649%" height="15" fill="rgb(213,175,48)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="79.9611%" y="629" width="0.0649%" height="15" fill="rgb(252,55,9)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="79.9611%" y="613" width="0.0649%" height="15" fill="rgb(231,72,33)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="597" width="0.0649%" height="15" fill="rgb(213,2,54)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="581" width="0.0649%" height="15" fill="rgb(208,88,25)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.9611%" y="565" width="0.0649%" height="15" fill="rgb(215,117,13)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="79.9611%" y="549" width="0.0649%" height="15" fill="rgb(243,147,21)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="79.9611%" y="533" width="0.0649%" height="15" fill="rgb(208,215,36)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="79.9611%" y="517" width="0.0649%" height="15" fill="rgb(238,187,24)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="79.9611%" y="501" width="0.0649%" height="15" fill="rgb(214,173,11)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="485" width="0.0649%" height="15" fill="rgb(222,71,20)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="469" width="0.0649%" height="15" fill="rgb(242,125,4)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="79.9611%" y="453" width="0.0649%" height="15" fill="rgb(217,101,52)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="79.9611%" y="437" width="0.0649%" height="15" fill="rgb(223,2,50)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="79.9611%" y="421" width="0.0649%" height="15" fill="rgb(225,197,9)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="79.9611%" y="405" width="0.0649%" height="15" fill="rgb(234,76,27)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="79.9611%" y="389" width="0.0649%" height="15" fill="rgb(213,161,26)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="373" width="0.0649%" height="15" fill="rgb(210,228,2)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="79.9611%" y="357" width="0.0649%" height="15" fill="rgb(235,4,16)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="79.9611%" y="341" width="0.0649%" height="15" fill="rgb(235,83,42)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="79.9611%" y="325" width="0.0649%" height="15" fill="rgb(207,116,39)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="79.9611%" y="309" width="0.0649%" height="15" fill="rgb(253,206,9)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="79.9611%" y="293" width="0.0649%" height="15" fill="rgb(234,32,47)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="79.9611%" y="277" width="0.0649%" height="15" fill="rgb(247,40,39)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="79.9611%" y="261" width="0.0649%" height="15" fill="rgb(236,199,13)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="79.9611%" y="245" width="0.0649%" height="15" fill="rgb(240,127,44)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="79.9611%" y="229" width="0.0649%" height="15" fill="rgb(248,220,47)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="79.9611%" y="213" width="0.0649%" height="15" fill="rgb(240,78,9)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="79.9611%" y="197" width="0.0649%" height="15" fill="rgb(245,119,5)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="79.9611%" y="181" width="0.0649%" height="15" fill="rgb(238,175,31)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="79.9611%" y="165" width="0.0649%" height="15" fill="rgb(232,140,42)" fg:x="1233" fg:w="1"/><text x="80.2111%" y="175.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="80.0259%" y="949" width="0.0649%" height="15" fill="rgb(218,179,7)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="80.0259%" y="933" width="0.0649%" height="15" fill="rgb(232,79,27)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="80.0259%" y="917" width="0.0649%" height="15" fill="rgb(247,11,19)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="80.0259%" y="901" width="0.0649%" height="15" fill="rgb(216,171,54)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="80.0259%" y="885" width="0.0649%" height="15" fill="rgb(233,158,36)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="869" width="0.0649%" height="15" fill="rgb(215,48,47)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="879.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="853" width="0.0649%" height="15" fill="rgb(230,223,15)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="80.0259%" y="837" width="0.0649%" height="15" fill="rgb(234,49,19)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="821" width="0.0649%" height="15" fill="rgb(232,89,25)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="805" width="0.0649%" height="15" fill="rgb(237,206,28)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.0259%" y="789" width="0.0649%" height="15" fill="rgb(249,68,37)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.0259%" y="773" width="0.0649%" height="15" fill="rgb(226,99,43)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.0259%" y="757" width="0.0649%" height="15" fill="rgb(216,46,28)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.0259%" y="741" width="0.0649%" height="15" fill="rgb(216,33,9)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.0259%" y="725" width="0.0649%" height="15" fill="rgb(216,129,4)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="709" width="0.0649%" height="15" fill="rgb(216,106,3)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="693" width="0.0649%" height="15" fill="rgb(217,79,45)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.0259%" y="677" width="0.0649%" height="15" fill="rgb(239,98,13)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.0259%" y="661" width="0.0649%" height="15" fill="rgb(221,115,4)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.0259%" y="645" width="0.0649%" height="15" fill="rgb(215,85,0)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.0259%" y="629" width="0.0649%" height="15" fill="rgb(230,62,15)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.0259%" y="613" width="0.0649%" height="15" fill="rgb(247,162,2)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="597" width="0.0649%" height="15" fill="rgb(212,112,32)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0259%" y="581" width="0.0649%" height="15" fill="rgb(216,137,9)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.0259%" y="565" width="0.0649%" height="15" fill="rgb(250,149,33)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="575.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize::PrimitiveVisitor as serde::de::Visitor&gt;::visit_u16 (1 samples, 0.06%)</title><rect x="80.0259%" y="549" width="0.0649%" height="15" fill="rgb(246,124,31)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.0259%" y="533" width="0.0649%" height="15" fill="rgb(216,210,22)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.0259%" y="517" width="0.0649%" height="15" fill="rgb(228,128,36)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.0259%" y="501" width="0.0649%" height="15" fill="rgb(231,41,0)" fg:x="1234" fg:w="1"/><text x="80.2759%" y="511.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="80.0259%" y="997" width="0.1297%" height="15" fill="rgb(232,61,26)" fg:x="1234" fg:w="2"/><text x="80.2759%" y="1007.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="80.0259%" y="981" width="0.1297%" height="15" fill="rgb(217,60,9)" fg:x="1234" fg:w="2"/><text x="80.2759%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="80.0259%" y="965" width="0.1297%" height="15" fill="rgb(233,41,35)" fg:x="1234" fg:w="2"/><text x="80.2759%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="80.0908%" y="949" width="0.0649%" height="15" fill="rgb(253,139,43)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="80.0908%" y="933" width="0.0649%" height="15" fill="rgb(245,100,51)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="80.0908%" y="917" width="0.0649%" height="15" fill="rgb(250,208,18)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="80.0908%" y="901" width="0.0649%" height="15" fill="rgb(245,33,2)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="911.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="80.0908%" y="885" width="0.0649%" height="15" fill="rgb(244,171,31)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="80.0908%" y="869" width="0.0649%" height="15" fill="rgb(229,1,43)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0908%" y="853" width="0.0649%" height="15" fill="rgb(223,153,28)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0908%" y="837" width="0.0649%" height="15" fill="rgb(241,4,46)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.0908%" y="821" width="0.0649%" height="15" fill="rgb(230,81,11)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.0908%" y="805" width="0.0649%" height="15" fill="rgb(253,204,39)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.0908%" y="789" width="0.0649%" height="15" fill="rgb(250,96,8)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.0908%" y="773" width="0.0649%" height="15" fill="rgb(219,89,54)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.0908%" y="757" width="0.0649%" height="15" fill="rgb(235,136,39)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0908%" y="741" width="0.0649%" height="15" fill="rgb(230,155,37)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.0908%" y="725" width="0.0649%" height="15" fill="rgb(235,199,50)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.0908%" y="709" width="0.0649%" height="15" fill="rgb(227,81,32)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.0908%" y="693" width="0.0649%" height="15" fill="rgb(225,6,28)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.0908%" y="677" width="0.0649%" height="15" fill="rgb(207,211,17)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.0908%" y="661" width="0.0649%" height="15" fill="rgb(228,31,49)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.0908%" y="645" width="0.0649%" height="15" fill="rgb(230,185,3)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.0908%" y="629" width="0.0649%" height="15" fill="rgb(206,167,15)" fg:x="1235" fg:w="1"/><text x="80.3408%" y="639.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="80.1556%" y="981" width="0.0649%" height="15" fill="rgb(234,2,36)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (1 samples, 0.06%)</title><rect x="80.1556%" y="965" width="0.0649%" height="15" fill="rgb(239,160,29)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="80.1556%" y="949" width="0.0649%" height="15" fill="rgb(236,117,2)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="80.1556%" y="933" width="0.0649%" height="15" fill="rgb(215,117,37)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="80.1556%" y="917" width="0.0649%" height="15" fill="rgb(244,48,36)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="80.1556%" y="901" width="0.0649%" height="15" fill="rgb(223,101,37)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="80.1556%" y="885" width="0.0649%" height="15" fill="rgb(205,200,1)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="80.1556%" y="869" width="0.0649%" height="15" fill="rgb(209,193,20)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="80.1556%" y="853" width="0.0649%" height="15" fill="rgb(214,63,13)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="80.1556%" y="837" width="0.0649%" height="15" fill="rgb(253,113,46)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="80.1556%" y="821" width="0.0649%" height="15" fill="rgb(237,103,34)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="80.1556%" y="805" width="0.0649%" height="15" fill="rgb(223,38,25)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="80.1556%" y="789" width="0.0649%" height="15" fill="rgb(251,32,32)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.1556%" y="773" width="0.0649%" height="15" fill="rgb(228,65,22)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.1556%" y="757" width="0.0649%" height="15" fill="rgb(205,11,46)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.1556%" y="741" width="0.0649%" height="15" fill="rgb(220,35,2)" fg:x="1236" fg:w="1"/><text x="80.4056%" y="751.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="80.2205%" y="965" width="0.0649%" height="15" fill="rgb(217,151,17)" fg:x="1237" fg:w="1"/><text x="80.4705%" y="975.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.2205%" y="949" width="0.0649%" height="15" fill="rgb(243,227,35)" fg:x="1237" fg:w="1"/><text x="80.4705%" y="959.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.2205%" y="933" width="0.0649%" height="15" fill="rgb(214,0,34)" fg:x="1237" fg:w="1"/><text x="80.4705%" y="943.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.2205%" y="917" width="0.0649%" height="15" fill="rgb(209,42,37)" fg:x="1237" fg:w="1"/><text x="80.4705%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="80.2853%" y="917" width="0.0649%" height="15" fill="rgb(251,176,30)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="80.2853%" y="901" width="0.0649%" height="15" fill="rgb(223,64,40)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="80.2853%" y="885" width="0.0649%" height="15" fill="rgb(227,180,23)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="80.2853%" y="869" width="0.0649%" height="15" fill="rgb(220,137,31)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="879.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="80.2853%" y="853" width="0.0649%" height="15" fill="rgb(245,124,25)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="863.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="837" width="0.0649%" height="15" fill="rgb(217,157,5)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="847.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="821" width="0.0649%" height="15" fill="rgb(225,59,2)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="831.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="80.2853%" y="805" width="0.0649%" height="15" fill="rgb(220,182,9)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="789" width="0.0649%" height="15" fill="rgb(249,54,24)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="799.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="773" width="0.0649%" height="15" fill="rgb(216,89,17)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.2853%" y="757" width="0.0649%" height="15" fill="rgb(245,20,45)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.2853%" y="741" width="0.0649%" height="15" fill="rgb(230,83,14)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="751.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.2853%" y="725" width="0.0649%" height="15" fill="rgb(246,109,11)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="735.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.2853%" y="709" width="0.0649%" height="15" fill="rgb(235,85,23)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="719.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.2853%" y="693" width="0.0649%" height="15" fill="rgb(215,101,36)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="677" width="0.0649%" height="15" fill="rgb(228,140,31)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="687.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="661" width="0.0649%" height="15" fill="rgb(234,162,37)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.2853%" y="645" width="0.0649%" height="15" fill="rgb(221,0,24)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.2853%" y="629" width="0.0649%" height="15" fill="rgb(230,161,41)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="639.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.2853%" y="613" width="0.0649%" height="15" fill="rgb(224,46,24)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="623.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.2853%" y="597" width="0.0649%" height="15" fill="rgb(205,59,32)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="607.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.2853%" y="581" width="0.0649%" height="15" fill="rgb(239,31,20)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="565" width="0.0649%" height="15" fill="rgb(233,149,44)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="575.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.2853%" y="549" width="0.0649%" height="15" fill="rgb(243,47,26)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.2853%" y="533" width="0.0649%" height="15" fill="rgb(233,107,5)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.2853%" y="517" width="0.0649%" height="15" fill="rgb(248,140,33)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="527.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.2853%" y="501" width="0.0649%" height="15" fill="rgb(228,178,19)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="511.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.2853%" y="485" width="0.0649%" height="15" fill="rgb(224,39,49)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="495.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.2853%" y="469" width="0.0649%" height="15" fill="rgb(246,56,47)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="80.2853%" y="453" width="0.0649%" height="15" fill="rgb(220,73,27)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.2853%" y="437" width="0.0649%" height="15" fill="rgb(239,112,21)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.2853%" y="421" width="0.0649%" height="15" fill="rgb(253,14,51)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.2853%" y="405" width="0.0649%" height="15" fill="rgb(215,58,12)" fg:x="1238" fg:w="1"/><text x="80.5353%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.3502%" y="805" width="0.0649%" height="15" fill="rgb(207,181,19)" fg:x="1239" fg:w="1"/><text x="80.6002%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.3502%" y="789" width="0.0649%" height="15" fill="rgb(211,214,34)" fg:x="1239" fg:w="1"/><text x="80.6002%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.3502%" y="773" width="0.0649%" height="15" fill="rgb(243,124,39)" fg:x="1239" fg:w="1"/><text x="80.6002%" y="783.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.4150%" y="581" width="0.0649%" height="15" fill="rgb(248,135,21)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.4150%" y="565" width="0.0649%" height="15" fill="rgb(245,218,3)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.4150%" y="549" width="0.0649%" height="15" fill="rgb(225,144,22)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="80.4150%" y="533" width="0.0649%" height="15" fill="rgb(250,90,15)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="80.4150%" y="517" width="0.0649%" height="15" fill="rgb(224,64,29)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="80.4150%" y="501" width="0.0649%" height="15" fill="rgb(217,50,47)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.4150%" y="485" width="0.0649%" height="15" fill="rgb(231,159,47)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.4150%" y="469" width="0.0649%" height="15" fill="rgb(213,89,29)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.4150%" y="453" width="0.0649%" height="15" fill="rgb(243,90,23)" fg:x="1240" fg:w="1"/><text x="80.6650%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="80.4150%" y="789" width="0.1297%" height="15" fill="rgb(213,21,6)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="80.4150%" y="773" width="0.1297%" height="15" fill="rgb(237,139,17)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="80.4150%" y="757" width="0.1297%" height="15" fill="rgb(250,147,17)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="80.4150%" y="741" width="0.1297%" height="15" fill="rgb(212,208,42)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="80.4150%" y="725" width="0.1297%" height="15" fill="rgb(215,229,40)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="80.4150%" y="709" width="0.1297%" height="15" fill="rgb(206,204,1)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="80.4150%" y="693" width="0.1297%" height="15" fill="rgb(230,62,32)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="80.4150%" y="677" width="0.1297%" height="15" fill="rgb(223,22,42)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="80.4150%" y="661" width="0.1297%" height="15" fill="rgb(244,6,23)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="80.4150%" y="645" width="0.1297%" height="15" fill="rgb(240,221,42)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="80.4150%" y="629" width="0.1297%" height="15" fill="rgb(222,74,7)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="80.4150%" y="613" width="0.1297%" height="15" fill="rgb(227,191,38)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="80.4150%" y="597" width="0.1297%" height="15" fill="rgb(227,89,34)" fg:x="1240" fg:w="2"/><text x="80.6650%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.4799%" y="581" width="0.0649%" height="15" fill="rgb(215,153,25)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.4799%" y="565" width="0.0649%" height="15" fill="rgb(215,153,46)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.4799%" y="549" width="0.0649%" height="15" fill="rgb(242,38,52)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.4799%" y="533" width="0.0649%" height="15" fill="rgb(218,112,4)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.4799%" y="517" width="0.0649%" height="15" fill="rgb(231,210,31)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.4799%" y="501" width="0.0649%" height="15" fill="rgb(245,223,36)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.4799%" y="485" width="0.0649%" height="15" fill="rgb(246,41,2)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.4799%" y="469" width="0.0649%" height="15" fill="rgb(227,51,31)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.4799%" y="453" width="0.0649%" height="15" fill="rgb(222,95,26)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.4799%" y="437" width="0.0649%" height="15" fill="rgb(224,190,1)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="80.4799%" y="421" width="0.0649%" height="15" fill="rgb(209,90,42)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="80.4799%" y="405" width="0.0649%" height="15" fill="rgb(232,225,50)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="80.4799%" y="389" width="0.0649%" height="15" fill="rgb(239,89,47)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="80.4799%" y="373" width="0.0649%" height="15" fill="rgb(230,212,50)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="80.4799%" y="357" width="0.0649%" height="15" fill="rgb(252,1,27)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="80.4799%" y="341" width="0.0649%" height="15" fill="rgb(237,179,41)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="80.4799%" y="325" width="0.0649%" height="15" fill="rgb(214,151,37)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="80.4799%" y="309" width="0.0649%" height="15" fill="rgb(211,74,11)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="80.4799%" y="293" width="0.0649%" height="15" fill="rgb(242,21,21)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="80.4799%" y="277" width="0.0649%" height="15" fill="rgb(226,106,43)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="80.4799%" y="261" width="0.0649%" height="15" fill="rgb(229,162,39)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="80.4799%" y="245" width="0.0649%" height="15" fill="rgb(228,159,25)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.4799%" y="229" width="0.0649%" height="15" fill="rgb(237,32,23)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.4799%" y="213" width="0.0649%" height="15" fill="rgb(212,35,32)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.4799%" y="197" width="0.0649%" height="15" fill="rgb(215,199,1)" fg:x="1241" fg:w="1"/><text x="80.7299%" y="207.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (5 samples, 0.32%)</title><rect x="80.2853%" y="965" width="0.3243%" height="15" fill="rgb(215,67,13)" fg:x="1238" fg:w="5"/><text x="80.5353%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (5 samples, 0.32%)</title><rect x="80.2853%" y="949" width="0.3243%" height="15" fill="rgb(216,20,47)" fg:x="1238" fg:w="5"/><text x="80.5353%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (5 samples, 0.32%)</title><rect x="80.2853%" y="933" width="0.3243%" height="15" fill="rgb(249,183,48)" fg:x="1238" fg:w="5"/><text x="80.5353%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (4 samples, 0.26%)</title><rect x="80.3502%" y="917" width="0.2594%" height="15" fill="rgb(208,86,37)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="80.3502%" y="901" width="0.2594%" height="15" fill="rgb(251,192,7)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="80.3502%" y="885" width="0.2594%" height="15" fill="rgb(234,196,3)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="80.3502%" y="869" width="0.2594%" height="15" fill="rgb(229,150,39)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="879.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="80.3502%" y="853" width="0.2594%" height="15" fill="rgb(226,19,29)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="80.3502%" y="837" width="0.2594%" height="15" fill="rgb(226,222,2)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="80.3502%" y="821" width="0.2594%" height="15" fill="rgb(235,85,29)" fg:x="1239" fg:w="4"/><text x="80.6002%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="80.4150%" y="805" width="0.1946%" height="15" fill="rgb(237,194,43)" fg:x="1240" fg:w="3"/><text x="80.6650%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.5447%" y="789" width="0.0649%" height="15" fill="rgb(211,4,42)" fg:x="1242" fg:w="1"/><text x="80.7947%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.5447%" y="773" width="0.0649%" height="15" fill="rgb(221,80,37)" fg:x="1242" fg:w="1"/><text x="80.7947%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.5447%" y="757" width="0.0649%" height="15" fill="rgb(222,47,31)" fg:x="1242" fg:w="1"/><text x="80.7947%" y="767.50"></text></g><g><title>utxo::Transaction::get_by_hash (10 samples, 0.65%)</title><rect x="80.0259%" y="1061" width="0.6485%" height="15" fill="rgb(249,82,52)" fg:x="1234" fg:w="10"/><text x="80.2759%" y="1071.50"></text></g><g><title>utxo::Transaction::compose (10 samples, 0.65%)</title><rect x="80.0259%" y="1045" width="0.6485%" height="15" fill="rgb(218,203,2)" fg:x="1234" fg:w="10"/><text x="80.2759%" y="1055.50"></text></g><g><title>utxo::Utxo::range (10 samples, 0.65%)</title><rect x="80.0259%" y="1029" width="0.6485%" height="15" fill="rgb(210,175,14)" fg:x="1234" fg:w="10"/><text x="80.2759%" y="1039.50"></text></g><g><title>utxo::Utxo::compose (10 samples, 0.65%)</title><rect x="80.0259%" y="1013" width="0.6485%" height="15" fill="rgb(216,210,12)" fg:x="1234" fg:w="10"/><text x="80.2759%" y="1023.50"></text></g><g><title>utxo::Asset::range (8 samples, 0.52%)</title><rect x="80.1556%" y="997" width="0.5188%" height="15" fill="rgb(229,120,18)" fg:x="1236" fg:w="8"/><text x="80.4056%" y="1007.50"></text></g><g><title>utxo::Asset::compose (7 samples, 0.45%)</title><rect x="80.2205%" y="981" width="0.4540%" height="15" fill="rgb(231,174,12)" fg:x="1237" fg:w="7"/><text x="80.4705%" y="991.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (1 samples, 0.06%)</title><rect x="80.6096%" y="965" width="0.0649%" height="15" fill="rgb(214,101,53)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="975.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (1 samples, 0.06%)</title><rect x="80.6096%" y="949" width="0.0649%" height="15" fill="rgb(246,89,43)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="959.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (1 samples, 0.06%)</title><rect x="80.6096%" y="933" width="0.0649%" height="15" fill="rgb(222,9,51)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="943.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="80.6096%" y="917" width="0.0649%" height="15" fill="rgb(252,221,9)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="927.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="80.6096%" y="901" width="0.0649%" height="15" fill="rgb(248,28,15)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="911.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="80.6096%" y="885" width="0.0649%" height="15" fill="rgb(213,54,52)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="80.6096%" y="869" width="0.0649%" height="15" fill="rgb(240,3,45)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="80.6096%" y="853" width="0.0649%" height="15" fill="rgb(239,138,24)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="80.6096%" y="837" width="0.0649%" height="15" fill="rgb(233,45,54)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="80.6096%" y="821" width="0.0649%" height="15" fill="rgb(220,131,2)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="831.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="80.6096%" y="805" width="0.0649%" height="15" fill="rgb(240,154,36)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="815.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="80.6096%" y="789" width="0.0649%" height="15" fill="rgb(251,221,1)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="799.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="80.6096%" y="773" width="0.0649%" height="15" fill="rgb(225,217,1)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="783.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="80.6096%" y="757" width="0.0649%" height="15" fill="rgb(241,105,49)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.6096%" y="741" width="0.0649%" height="15" fill="rgb(215,44,32)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.6096%" y="725" width="0.0649%" height="15" fill="rgb(213,222,14)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.6096%" y="709" width="0.0649%" height="15" fill="rgb(207,99,52)" fg:x="1243" fg:w="1"/><text x="80.8596%" y="719.50"></text></g><g><title>utxo::Transaction::get_utxos (1 samples, 0.06%)</title><rect x="80.6744%" y="1061" width="0.0649%" height="15" fill="rgb(214,208,52)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="1071.50"></text></g><g><title>utxo::Utxo::range (1 samples, 0.06%)</title><rect x="80.6744%" y="1045" width="0.0649%" height="15" fill="rgb(244,169,0)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="1055.50"></text></g><g><title>utxo::Utxo::compose (1 samples, 0.06%)</title><rect x="80.6744%" y="1029" width="0.0649%" height="15" fill="rgb(216,193,37)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="1039.50"></text></g><g><title>utxo::Asset::range (1 samples, 0.06%)</title><rect x="80.6744%" y="1013" width="0.0649%" height="15" fill="rgb(212,158,10)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="1023.50"></text></g><g><title>utxo::Asset::compose (1 samples, 0.06%)</title><rect x="80.6744%" y="997" width="0.0649%" height="15" fill="rgb(213,110,20)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="1007.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="80.6744%" y="981" width="0.0649%" height="15" fill="rgb(226,5,42)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (1 samples, 0.06%)</title><rect x="80.6744%" y="965" width="0.0649%" height="15" fill="rgb(211,93,8)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="80.6744%" y="949" width="0.0649%" height="15" fill="rgb(240,208,12)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="80.6744%" y="933" width="0.0649%" height="15" fill="rgb(233,127,50)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="80.6744%" y="917" width="0.0649%" height="15" fill="rgb(227,199,53)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="80.6744%" y="901" width="0.0649%" height="15" fill="rgb(235,199,10)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="80.6744%" y="885" width="0.0649%" height="15" fill="rgb(228,148,35)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="80.6744%" y="869" width="0.0649%" height="15" fill="rgb(217,87,19)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="853" width="0.0649%" height="15" fill="rgb(239,9,32)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="863.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="837" width="0.0649%" height="15" fill="rgb(229,101,29)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="80.6744%" y="821" width="0.0649%" height="15" fill="rgb(208,143,26)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="805" width="0.0649%" height="15" fill="rgb(214,10,2)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="789" width="0.0649%" height="15" fill="rgb(254,203,30)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.6744%" y="773" width="0.0649%" height="15" fill="rgb(242,45,3)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.6744%" y="757" width="0.0649%" height="15" fill="rgb(209,146,51)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.6744%" y="741" width="0.0649%" height="15" fill="rgb(222,80,5)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.6744%" y="725" width="0.0649%" height="15" fill="rgb(252,80,35)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.6744%" y="709" width="0.0649%" height="15" fill="rgb(246,125,28)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="693" width="0.0649%" height="15" fill="rgb(224,143,51)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="677" width="0.0649%" height="15" fill="rgb(205,24,17)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.6744%" y="661" width="0.0649%" height="15" fill="rgb(253,128,30)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.6744%" y="645" width="0.0649%" height="15" fill="rgb(214,153,25)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.6744%" y="629" width="0.0649%" height="15" fill="rgb(214,4,28)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.6744%" y="613" width="0.0649%" height="15" fill="rgb(235,179,52)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.6744%" y="597" width="0.0649%" height="15" fill="rgb(233,27,42)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="581" width="0.0649%" height="15" fill="rgb(238,35,25)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="565" width="0.0649%" height="15" fill="rgb(227,44,31)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.6744%" y="549" width="0.0649%" height="15" fill="rgb(232,201,13)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.6744%" y="533" width="0.0649%" height="15" fill="rgb(224,172,52)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.6744%" y="517" width="0.0649%" height="15" fill="rgb(214,27,26)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.6744%" y="501" width="0.0649%" height="15" fill="rgb(210,185,52)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.6744%" y="485" width="0.0649%" height="15" fill="rgb(249,59,32)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="469" width="0.0649%" height="15" fill="rgb(242,209,18)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="479.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="453" width="0.0649%" height="15" fill="rgb(229,0,18)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.6744%" y="437" width="0.0649%" height="15" fill="rgb(217,138,29)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="447.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.6744%" y="421" width="0.0649%" height="15" fill="rgb(215,72,42)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="431.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.6744%" y="405" width="0.0649%" height="15" fill="rgb(254,115,11)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="415.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.6744%" y="389" width="0.0649%" height="15" fill="rgb(205,133,39)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="399.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.6744%" y="373" width="0.0649%" height="15" fill="rgb(211,36,27)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="357" width="0.0649%" height="15" fill="rgb(221,48,10)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.6744%" y="341" width="0.0649%" height="15" fill="rgb(230,172,50)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="351.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="80.6744%" y="325" width="0.0649%" height="15" fill="rgb(249,72,18)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="335.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="80.6744%" y="309" width="0.0649%" height="15" fill="rgb(237,58,48)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="319.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="80.6744%" y="293" width="0.0649%" height="15" fill="rgb(242,123,3)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="303.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="80.6744%" y="277" width="0.0649%" height="15" fill="rgb(232,111,32)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="80.6744%" y="261" width="0.0649%" height="15" fill="rgb(229,108,3)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="271.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="80.6744%" y="245" width="0.0649%" height="15" fill="rgb(222,158,10)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="80.6744%" y="229" width="0.0649%" height="15" fill="rgb(205,34,49)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="80.6744%" y="213" width="0.0649%" height="15" fill="rgb(232,21,14)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="80.6744%" y="197" width="0.0649%" height="15" fill="rgb(229,127,44)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="80.6744%" y="181" width="0.0649%" height="15" fill="rgb(232,171,4)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="80.6744%" y="165" width="0.0649%" height="15" fill="rgb(250,92,16)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="175.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="80.6744%" y="149" width="0.0649%" height="15" fill="rgb(230,103,38)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="159.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.6744%" y="133" width="0.0649%" height="15" fill="rgb(253,167,9)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.6744%" y="117" width="0.0649%" height="15" fill="rgb(222,118,11)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.6744%" y="101" width="0.0649%" height="15" fill="rgb(240,202,0)" fg:x="1244" fg:w="1"/><text x="80.9244%" y="111.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (1 samples, 0.06%)</title><rect x="80.7393%" y="933" width="0.0649%" height="15" fill="rgb(236,124,4)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (1 samples, 0.06%)</title><rect x="80.7393%" y="917" width="0.0649%" height="15" fill="rgb(244,128,18)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="80.7393%" y="901" width="0.0649%" height="15" fill="rgb(231,206,5)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="80.7393%" y="885" width="0.0649%" height="15" fill="rgb(237,111,8)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="80.7393%" y="869" width="0.0649%" height="15" fill="rgb(225,127,3)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="80.7393%" y="853" width="0.0649%" height="15" fill="rgb(222,85,48)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="863.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="80.7393%" y="837" width="0.0649%" height="15" fill="rgb(221,108,37)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="80.7393%" y="821" width="0.0649%" height="15" fill="rgb(226,169,36)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.7393%" y="805" width="0.0649%" height="15" fill="rgb(237,76,12)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.7393%" y="789" width="0.0649%" height="15" fill="rgb(210,227,32)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.7393%" y="773" width="0.0649%" height="15" fill="rgb(214,117,20)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.7393%" y="757" width="0.0649%" height="15" fill="rgb(234,119,41)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.7393%" y="741" width="0.0649%" height="15" fill="rgb(230,130,47)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.7393%" y="725" width="0.0649%" height="15" fill="rgb(215,21,41)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.7393%" y="709" width="0.0649%" height="15" fill="rgb(226,26,53)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.7393%" y="693" width="0.0649%" height="15" fill="rgb(221,92,23)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.7393%" y="677" width="0.0649%" height="15" fill="rgb(213,156,21)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.7393%" y="661" width="0.0649%" height="15" fill="rgb(254,166,29)" fg:x="1245" fg:w="1"/><text x="80.9893%" y="671.50"></text></g><g><title>utxo::Transaction::last (2 samples, 0.13%)</title><rect x="80.7393%" y="1061" width="0.1297%" height="15" fill="rgb(213,71,1)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="1071.50"></text></g><g><title>utxo::Transaction::compose (2 samples, 0.13%)</title><rect x="80.7393%" y="1045" width="0.1297%" height="15" fill="rgb(245,8,13)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="1055.50"></text></g><g><title>utxo::Utxo::range (2 samples, 0.13%)</title><rect x="80.7393%" y="1029" width="0.1297%" height="15" fill="rgb(213,32,32)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="1039.50"></text></g><g><title>utxo::Utxo::compose (2 samples, 0.13%)</title><rect x="80.7393%" y="1013" width="0.1297%" height="15" fill="rgb(251,86,50)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="1023.50"></text></g><g><title>utxo::Asset::range (2 samples, 0.13%)</title><rect x="80.7393%" y="997" width="0.1297%" height="15" fill="rgb(252,92,41)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="1007.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (2 samples, 0.13%)</title><rect x="80.7393%" y="981" width="0.1297%" height="15" fill="rgb(234,70,35)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (2 samples, 0.13%)</title><rect x="80.7393%" y="965" width="0.1297%" height="15" fill="rgb(210,157,19)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (2 samples, 0.13%)</title><rect x="80.7393%" y="949" width="0.1297%" height="15" fill="rgb(206,20,45)" fg:x="1245" fg:w="2"/><text x="80.9893%" y="959.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (1 samples, 0.06%)</title><rect x="80.8042%" y="933" width="0.0649%" height="15" fill="rgb(207,34,7)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="943.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (1 samples, 0.06%)</title><rect x="80.8042%" y="917" width="0.0649%" height="15" fill="rgb(253,151,14)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="80.8042%" y="901" width="0.0649%" height="15" fill="rgb(252,1,18)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="80.8042%" y="885" width="0.0649%" height="15" fill="rgb(214,77,52)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="80.8042%" y="869" width="0.0649%" height="15" fill="rgb(254,106,35)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="879.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="80.8042%" y="853" width="0.0649%" height="15" fill="rgb(212,67,40)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="863.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="80.8042%" y="837" width="0.0649%" height="15" fill="rgb(228,76,23)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="847.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="80.8042%" y="821" width="0.0649%" height="15" fill="rgb(250,198,5)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.8042%" y="805" width="0.0649%" height="15" fill="rgb(209,20,25)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.8042%" y="789" width="0.0649%" height="15" fill="rgb(236,32,4)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.8042%" y="773" width="0.0649%" height="15" fill="rgb(215,31,6)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.8042%" y="757" width="0.0649%" height="15" fill="rgb(207,186,49)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.8042%" y="741" width="0.0649%" height="15" fill="rgb(211,212,49)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.8042%" y="725" width="0.0649%" height="15" fill="rgb(229,51,41)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.8042%" y="709" width="0.0649%" height="15" fill="rgb(205,225,36)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.8042%" y="693" width="0.0649%" height="15" fill="rgb(209,213,45)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.8042%" y="677" width="0.0649%" height="15" fill="rgb(219,35,49)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.8042%" y="661" width="0.0649%" height="15" fill="rgb(215,205,22)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.8042%" y="645" width="0.0649%" height="15" fill="rgb(248,204,34)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.8042%" y="629" width="0.0649%" height="15" fill="rgb(219,223,31)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.8042%" y="613" width="0.0649%" height="15" fill="rgb(236,14,8)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.8042%" y="597" width="0.0649%" height="15" fill="rgb(243,129,23)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.8042%" y="581" width="0.0649%" height="15" fill="rgb(205,204,5)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.8042%" y="565" width="0.0649%" height="15" fill="rgb(244,115,32)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.8042%" y="549" width="0.0649%" height="15" fill="rgb(229,123,14)" fg:x="1246" fg:w="1"/><text x="81.0542%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.8690%" y="613" width="0.0649%" height="15" fill="rgb(250,85,1)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.8690%" y="597" width="0.0649%" height="15" fill="rgb(209,141,54)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="80.8690%" y="581" width="0.0649%" height="15" fill="rgb(244,107,39)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="80.8690%" y="565" width="0.0649%" height="15" fill="rgb(230,68,26)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="80.8690%" y="549" width="0.0649%" height="15" fill="rgb(220,178,33)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="80.8690%" y="533" width="0.0649%" height="15" fill="rgb(220,77,53)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="80.8690%" y="517" width="0.0649%" height="15" fill="rgb(224,108,19)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="80.8690%" y="501" width="0.0649%" height="15" fill="rgb(223,203,27)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="80.8690%" y="485" width="0.0649%" height="15" fill="rgb(211,32,46)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="80.8690%" y="469" width="0.0649%" height="15" fill="rgb(240,101,27)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="80.8690%" y="453" width="0.0649%" height="15" fill="rgb(217,210,11)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="80.8690%" y="437" width="0.0649%" height="15" fill="rgb(236,130,21)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="447.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="80.8690%" y="421" width="0.0649%" height="15" fill="rgb(250,136,8)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.8690%" y="405" width="0.0649%" height="15" fill="rgb(243,223,36)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.8690%" y="389" width="0.0649%" height="15" fill="rgb(246,184,8)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.8690%" y="373" width="0.0649%" height="15" fill="rgb(222,158,36)" fg:x="1247" fg:w="1"/><text x="81.1190%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="80.8690%" y="741" width="0.1297%" height="15" fill="rgb(210,220,19)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="80.8690%" y="725" width="0.1297%" height="15" fill="rgb(246,44,38)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="80.8690%" y="709" width="0.1297%" height="15" fill="rgb(246,186,14)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="80.8690%" y="693" width="0.1297%" height="15" fill="rgb(233,193,20)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="80.8690%" y="677" width="0.1297%" height="15" fill="rgb(215,60,5)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="80.8690%" y="661" width="0.1297%" height="15" fill="rgb(207,128,10)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="80.8690%" y="645" width="0.1297%" height="15" fill="rgb(238,84,54)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="80.8690%" y="629" width="0.1297%" height="15" fill="rgb(213,130,11)" fg:x="1247" fg:w="2"/><text x="81.1190%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.9339%" y="613" width="0.0649%" height="15" fill="rgb(235,62,9)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="80.9339%" y="597" width="0.0649%" height="15" fill="rgb(222,64,24)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="80.9339%" y="581" width="0.0649%" height="15" fill="rgb(238,193,42)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="80.9339%" y="565" width="0.0649%" height="15" fill="rgb(243,204,46)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="80.9339%" y="549" width="0.0649%" height="15" fill="rgb(243,196,11)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="80.9339%" y="533" width="0.0649%" height="15" fill="rgb(232,77,22)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.9339%" y="517" width="0.0649%" height="15" fill="rgb(215,80,25)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="80.9339%" y="501" width="0.0649%" height="15" fill="rgb(210,173,7)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="80.9339%" y="485" width="0.0649%" height="15" fill="rgb(207,101,10)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="80.9339%" y="469" width="0.0649%" height="15" fill="rgb(246,57,48)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="80.9339%" y="453" width="0.0649%" height="15" fill="rgb(236,184,40)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="80.9339%" y="437" width="0.0649%" height="15" fill="rgb(210,205,13)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="80.9339%" y="421" width="0.0649%" height="15" fill="rgb(231,129,42)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="80.9339%" y="405" width="0.0649%" height="15" fill="rgb(220,229,54)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="80.9339%" y="389" width="0.0649%" height="15" fill="rgb(230,192,26)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="80.9339%" y="373" width="0.0649%" height="15" fill="rgb(253,18,30)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="80.9339%" y="357" width="0.0649%" height="15" fill="rgb(216,62,53)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.9339%" y="341" width="0.0649%" height="15" fill="rgb(230,79,29)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.9339%" y="325" width="0.0649%" height="15" fill="rgb(242,26,26)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.9339%" y="309" width="0.0649%" height="15" fill="rgb(227,125,21)" fg:x="1248" fg:w="1"/><text x="81.1839%" y="319.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="80.8690%" y="981" width="0.1946%" height="15" fill="rgb(229,93,26)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (3 samples, 0.19%)</title><rect x="80.8690%" y="965" width="0.1946%" height="15" fill="rgb(227,228,8)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="80.8690%" y="949" width="0.1946%" height="15" fill="rgb(233,56,0)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="80.8690%" y="933" width="0.1946%" height="15" fill="rgb(225,185,17)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="80.8690%" y="917" width="0.1946%" height="15" fill="rgb(238,202,30)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="80.8690%" y="901" width="0.1946%" height="15" fill="rgb(236,60,13)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="911.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="80.8690%" y="885" width="0.1946%" height="15" fill="rgb(244,92,0)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="80.8690%" y="869" width="0.1946%" height="15" fill="rgb(225,57,15)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="80.8690%" y="853" width="0.1946%" height="15" fill="rgb(228,5,28)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="80.8690%" y="837" width="0.1946%" height="15" fill="rgb(252,34,51)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="80.8690%" y="821" width="0.1946%" height="15" fill="rgb(235,58,7)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="80.8690%" y="805" width="0.1946%" height="15" fill="rgb(250,132,20)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="80.8690%" y="789" width="0.1946%" height="15" fill="rgb(217,164,0)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="80.8690%" y="773" width="0.1946%" height="15" fill="rgb(208,220,35)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="80.8690%" y="757" width="0.1946%" height="15" fill="rgb(227,42,51)" fg:x="1247" fg:w="3"/><text x="81.1190%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="80.9987%" y="741" width="0.0649%" height="15" fill="rgb(225,146,38)" fg:x="1249" fg:w="1"/><text x="81.2487%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="80.9987%" y="725" width="0.0649%" height="15" fill="rgb(252,108,37)" fg:x="1249" fg:w="1"/><text x="81.2487%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="80.9987%" y="709" width="0.0649%" height="15" fill="rgb(244,101,24)" fg:x="1249" fg:w="1"/><text x="81.2487%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="81.0636%" y="805" width="0.0649%" height="15" fill="rgb(213,161,50)" fg:x="1250" fg:w="1"/><text x="81.3136%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.0636%" y="789" width="0.0649%" height="15" fill="rgb(248,159,19)" fg:x="1250" fg:w="1"/><text x="81.3136%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.0636%" y="773" width="0.0649%" height="15" fill="rgb(233,179,15)" fg:x="1250" fg:w="1"/><text x="81.3136%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.0636%" y="757" width="0.0649%" height="15" fill="rgb(248,178,3)" fg:x="1250" fg:w="1"/><text x="81.3136%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="81.1284%" y="421" width="0.0649%" height="15" fill="rgb(245,190,41)" fg:x="1251" fg:w="1"/><text x="81.3784%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="81.1284%" y="405" width="0.0649%" height="15" fill="rgb(218,151,19)" fg:x="1251" fg:w="1"/><text x="81.3784%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="81.1284%" y="389" width="0.0649%" height="15" fill="rgb(245,25,44)" fg:x="1251" fg:w="1"/><text x="81.3784%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.1284%" y="373" width="0.0649%" height="15" fill="rgb(235,172,47)" fg:x="1251" fg:w="1"/><text x="81.3784%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.1284%" y="357" width="0.0649%" height="15" fill="rgb(246,33,12)" fg:x="1251" fg:w="1"/><text x="81.3784%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.1284%" y="341" width="0.0649%" height="15" fill="rgb(214,124,7)" fg:x="1251" fg:w="1"/><text x="81.3784%" y="351.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="80.8690%" y="1029" width="0.3891%" height="15" fill="rgb(246,186,18)" fg:x="1247" fg:w="6"/><text x="81.1190%" y="1039.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="80.8690%" y="1013" width="0.3891%" height="15" fill="rgb(231,94,1)" fg:x="1247" fg:w="6"/><text x="81.1190%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (6 samples, 0.39%)</title><rect x="80.8690%" y="997" width="0.3891%" height="15" fill="rgb(208,33,48)" fg:x="1247" fg:w="6"/><text x="81.1190%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (3 samples, 0.19%)</title><rect x="81.0636%" y="981" width="0.1946%" height="15" fill="rgb(208,195,44)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="81.0636%" y="965" width="0.1946%" height="15" fill="rgb(226,13,52)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="81.0636%" y="949" width="0.1946%" height="15" fill="rgb(217,219,45)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="81.0636%" y="933" width="0.1946%" height="15" fill="rgb(223,45,25)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="943.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="81.0636%" y="917" width="0.1946%" height="15" fill="rgb(241,163,0)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="81.0636%" y="901" width="0.1946%" height="15" fill="rgb(216,68,47)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="81.0636%" y="885" width="0.1946%" height="15" fill="rgb(236,119,45)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="81.0636%" y="869" width="0.1946%" height="15" fill="rgb(209,188,24)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="81.0636%" y="853" width="0.1946%" height="15" fill="rgb(221,118,7)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="81.0636%" y="837" width="0.1946%" height="15" fill="rgb(213,148,43)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="81.0636%" y="821" width="0.1946%" height="15" fill="rgb(231,21,43)" fg:x="1250" fg:w="3"/><text x="81.3136%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="81.1284%" y="805" width="0.1297%" height="15" fill="rgb(232,213,43)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="81.1284%" y="789" width="0.1297%" height="15" fill="rgb(239,145,50)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="81.1284%" y="773" width="0.1297%" height="15" fill="rgb(222,131,18)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="81.1284%" y="757" width="0.1297%" height="15" fill="rgb(243,181,13)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="81.1284%" y="741" width="0.1297%" height="15" fill="rgb(212,74,41)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="81.1284%" y="725" width="0.1297%" height="15" fill="rgb(237,143,34)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="81.1284%" y="709" width="0.1297%" height="15" fill="rgb(228,139,0)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="81.1284%" y="693" width="0.1297%" height="15" fill="rgb(227,214,11)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="81.1284%" y="677" width="0.1297%" height="15" fill="rgb(228,118,39)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="81.1284%" y="661" width="0.1297%" height="15" fill="rgb(207,117,22)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="81.1284%" y="645" width="0.1297%" height="15" fill="rgb(225,91,8)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="81.1284%" y="629" width="0.1297%" height="15" fill="rgb(230,219,48)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="81.1284%" y="613" width="0.1297%" height="15" fill="rgb(244,0,23)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="81.1284%" y="597" width="0.1297%" height="15" fill="rgb(206,212,23)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="81.1284%" y="581" width="0.1297%" height="15" fill="rgb(254,62,10)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="81.1284%" y="565" width="0.1297%" height="15" fill="rgb(236,58,8)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="81.1284%" y="549" width="0.1297%" height="15" fill="rgb(232,212,17)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="81.1284%" y="533" width="0.1297%" height="15" fill="rgb(206,132,9)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="81.1284%" y="517" width="0.1297%" height="15" fill="rgb(234,97,28)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="527.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="81.1284%" y="501" width="0.1297%" height="15" fill="rgb(254,144,9)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="81.1284%" y="485" width="0.1297%" height="15" fill="rgb(244,204,43)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="495.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="81.1284%" y="469" width="0.1297%" height="15" fill="rgb(248,177,16)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="81.1284%" y="453" width="0.1297%" height="15" fill="rgb(219,110,15)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="81.1284%" y="437" width="0.1297%" height="15" fill="rgb(212,203,25)" fg:x="1251" fg:w="2"/><text x="81.3784%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="81.1933%" y="421" width="0.0649%" height="15" fill="rgb(205,50,1)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="81.1933%" y="405" width="0.0649%" height="15" fill="rgb(222,152,41)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="81.1933%" y="389" width="0.0649%" height="15" fill="rgb(236,83,3)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="81.1933%" y="373" width="0.0649%" height="15" fill="rgb(214,30,54)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="383.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="81.1933%" y="357" width="0.0649%" height="15" fill="rgb(250,117,31)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="367.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="81.1933%" y="341" width="0.0649%" height="15" fill="rgb(228,77,14)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.1933%" y="325" width="0.0649%" height="15" fill="rgb(241,3,28)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.1933%" y="309" width="0.0649%" height="15" fill="rgb(221,175,52)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.1933%" y="293" width="0.0649%" height="15" fill="rgb(237,91,6)" fg:x="1252" fg:w="1"/><text x="81.4433%" y="303.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="81.2581%" y="1013" width="0.0649%" height="15" fill="rgb(246,46,42)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="81.2581%" y="997" width="0.0649%" height="15" fill="rgb(235,199,0)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="81.2581%" y="981" width="0.0649%" height="15" fill="rgb(224,44,40)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="81.2581%" y="965" width="0.0649%" height="15" fill="rgb(209,24,35)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="81.2581%" y="949" width="0.0649%" height="15" fill="rgb(244,46,22)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="81.2581%" y="933" width="0.0649%" height="15" fill="rgb(235,99,8)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="81.2581%" y="917" width="0.0649%" height="15" fill="rgb(218,127,36)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="927.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.2581%" y="901" width="0.0649%" height="15" fill="rgb(238,47,46)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="911.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.2581%" y="885" width="0.0649%" height="15" fill="rgb(233,65,17)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.2581%" y="869" width="0.0649%" height="15" fill="rgb(239,22,33)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="81.2581%" y="853" width="0.0649%" height="15" fill="rgb(243,66,43)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.2581%" y="837" width="0.0649%" height="15" fill="rgb(235,210,28)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.2581%" y="821" width="0.0649%" height="15" fill="rgb(205,191,50)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.2581%" y="805" width="0.0649%" height="15" fill="rgb(251,217,19)" fg:x="1253" fg:w="1"/><text x="81.5081%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.3230%" y="997" width="0.0649%" height="15" fill="rgb(205,174,37)" fg:x="1254" fg:w="1"/><text x="81.5730%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.3230%" y="981" width="0.0649%" height="15" fill="rgb(212,158,42)" fg:x="1254" fg:w="1"/><text x="81.5730%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.3230%" y="965" width="0.0649%" height="15" fill="rgb(212,208,51)" fg:x="1254" fg:w="1"/><text x="81.5730%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="81.3878%" y="965" width="0.0649%" height="15" fill="rgb(225,198,20)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="81.3878%" y="949" width="0.0649%" height="15" fill="rgb(247,41,44)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="81.3878%" y="933" width="0.0649%" height="15" fill="rgb(228,33,41)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="81.3878%" y="917" width="0.0649%" height="15" fill="rgb(215,47,52)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="81.3878%" y="901" width="0.0649%" height="15" fill="rgb(248,106,37)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="81.3878%" y="885" width="0.0649%" height="15" fill="rgb(238,91,29)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="81.3878%" y="869" width="0.0649%" height="15" fill="rgb(226,111,40)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="81.3878%" y="853" width="0.0649%" height="15" fill="rgb(229,159,36)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="81.3878%" y="837" width="0.0649%" height="15" fill="rgb(221,109,4)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="81.3878%" y="821" width="0.0649%" height="15" fill="rgb(236,56,25)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="81.3878%" y="805" width="0.0649%" height="15" fill="rgb(244,113,23)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="81.3878%" y="789" width="0.0649%" height="15" fill="rgb(249,132,2)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="81.3878%" y="773" width="0.0649%" height="15" fill="rgb(205,185,21)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="81.3878%" y="757" width="0.0649%" height="15" fill="rgb(245,130,2)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="81.3878%" y="741" width="0.0649%" height="15" fill="rgb(246,71,26)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="81.3878%" y="725" width="0.0649%" height="15" fill="rgb(234,194,6)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.3878%" y="709" width="0.0649%" height="15" fill="rgb(206,24,32)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.3878%" y="693" width="0.0649%" height="15" fill="rgb(233,7,54)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.3878%" y="677" width="0.0649%" height="15" fill="rgb(252,46,1)" fg:x="1255" fg:w="1"/><text x="81.6378%" y="687.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="81.4527%" y="933" width="0.0649%" height="15" fill="rgb(216,113,53)" fg:x="1256" fg:w="1"/><text x="81.7027%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="81.4527%" y="917" width="0.0649%" height="15" fill="rgb(215,40,24)" fg:x="1256" fg:w="1"/><text x="81.7027%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.4527%" y="901" width="0.0649%" height="15" fill="rgb(233,222,8)" fg:x="1256" fg:w="1"/><text x="81.7027%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.4527%" y="885" width="0.0649%" height="15" fill="rgb(248,73,28)" fg:x="1256" fg:w="1"/><text x="81.7027%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.4527%" y="869" width="0.0649%" height="15" fill="rgb(247,126,28)" fg:x="1256" fg:w="1"/><text x="81.7027%" y="879.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="81.4527%" y="949" width="0.1297%" height="15" fill="rgb(242,173,54)" fg:x="1256" fg:w="2"/><text x="81.7027%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="81.5175%" y="933" width="0.0649%" height="15" fill="rgb(244,186,22)" fg:x="1257" fg:w="1"/><text x="81.7675%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="81.5175%" y="917" width="0.0649%" height="15" fill="rgb(231,187,4)" fg:x="1257" fg:w="1"/><text x="81.7675%" y="927.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="81.5175%" y="901" width="0.0649%" height="15" fill="rgb(252,66,47)" fg:x="1257" fg:w="1"/><text x="81.7675%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.5175%" y="885" width="0.0649%" height="15" fill="rgb(240,228,28)" fg:x="1257" fg:w="1"/><text x="81.7675%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.5175%" y="869" width="0.0649%" height="15" fill="rgb(237,63,43)" fg:x="1257" fg:w="1"/><text x="81.7675%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.5175%" y="853" width="0.0649%" height="15" fill="rgb(214,1,44)" fg:x="1257" fg:w="1"/><text x="81.7675%" y="863.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="81.3878%" y="981" width="0.2594%" height="15" fill="rgb(212,2,46)" fg:x="1255" fg:w="4"/><text x="81.6378%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="81.4527%" y="965" width="0.1946%" height="15" fill="rgb(213,142,5)" fg:x="1256" fg:w="3"/><text x="81.7027%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="81.5824%" y="949" width="0.0649%" height="15" fill="rgb(229,135,1)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="81.5824%" y="933" width="0.0649%" height="15" fill="rgb(252,98,38)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="81.5824%" y="917" width="0.0649%" height="15" fill="rgb(206,89,40)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="81.5824%" y="901" width="0.0649%" height="15" fill="rgb(219,73,36)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="81.5824%" y="885" width="0.0649%" height="15" fill="rgb(207,168,32)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.5824%" y="869" width="0.0649%" height="15" fill="rgb(215,113,21)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.5824%" y="853" width="0.0649%" height="15" fill="rgb(217,144,43)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.5824%" y="837" width="0.0649%" height="15" fill="rgb(249,48,50)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="81.5824%" y="821" width="0.0649%" height="15" fill="rgb(242,1,26)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.5824%" y="805" width="0.0649%" height="15" fill="rgb(231,167,42)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.5824%" y="789" width="0.0649%" height="15" fill="rgb(242,177,45)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.5824%" y="773" width="0.0649%" height="15" fill="rgb(232,121,42)" fg:x="1258" fg:w="1"/><text x="81.8324%" y="783.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (7 samples, 0.45%)</title><rect x="81.2581%" y="1029" width="0.4540%" height="15" fill="rgb(205,8,42)" fg:x="1253" fg:w="7"/><text x="81.5081%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (6 samples, 0.39%)</title><rect x="81.3230%" y="1013" width="0.3891%" height="15" fill="rgb(238,199,24)" fg:x="1254" fg:w="6"/><text x="81.5730%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (5 samples, 0.32%)</title><rect x="81.3878%" y="997" width="0.3243%" height="15" fill="rgb(228,112,2)" fg:x="1255" fg:w="5"/><text x="81.6378%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="81.6472%" y="981" width="0.0649%" height="15" fill="rgb(215,115,33)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="991.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="81.6472%" y="965" width="0.0649%" height="15" fill="rgb(230,209,34)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="975.50"></text></g><g><title>redb::types::TypeName::from_bytes (1 samples, 0.06%)</title><rect x="81.6472%" y="949" width="0.0649%" height="15" fill="rgb(246,76,12)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="959.50"></text></g><g><title>redb::types::TypeClassification::from_byte (1 samples, 0.06%)</title><rect x="81.6472%" y="933" width="0.0649%" height="15" fill="rgb(240,110,9)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.6472%" y="917" width="0.0649%" height="15" fill="rgb(224,94,46)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.6472%" y="901" width="0.0649%" height="15" fill="rgb(247,150,22)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.6472%" y="885" width="0.0649%" height="15" fill="rgb(249,85,13)" fg:x="1259" fg:w="1"/><text x="81.8972%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="81.7121%" y="1029" width="0.0649%" height="15" fill="rgb(208,77,41)" fg:x="1260" fg:w="1"/><text x="81.9621%" y="1039.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.7121%" y="1013" width="0.0649%" height="15" fill="rgb(240,42,44)" fg:x="1260" fg:w="1"/><text x="81.9621%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.7121%" y="997" width="0.0649%" height="15" fill="rgb(222,10,51)" fg:x="1260" fg:w="1"/><text x="81.9621%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.7121%" y="981" width="0.0649%" height="15" fill="rgb(208,146,53)" fg:x="1260" fg:w="1"/><text x="81.9621%" y="991.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="81.7769%" y="997" width="0.0649%" height="15" fill="rgb(236,162,23)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="81.7769%" y="981" width="0.0649%" height="15" fill="rgb(218,66,21)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="991.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="81.7769%" y="965" width="0.0649%" height="15" fill="rgb(233,6,47)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="81.7769%" y="949" width="0.0649%" height="15" fill="rgb(236,59,51)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="81.7769%" y="933" width="0.0649%" height="15" fill="rgb(242,12,46)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="81.7769%" y="917" width="0.0649%" height="15" fill="rgb(243,142,19)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="81.7769%" y="901" width="0.0649%" height="15" fill="rgb(217,28,17)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="81.7769%" y="885" width="0.0649%" height="15" fill="rgb(228,2,27)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.7769%" y="869" width="0.0649%" height="15" fill="rgb(214,221,4)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.7769%" y="853" width="0.0649%" height="15" fill="rgb(224,69,26)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.7769%" y="837" width="0.0649%" height="15" fill="rgb(219,70,4)" fg:x="1261" fg:w="1"/><text x="82.0269%" y="847.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="81.7769%" y="1013" width="0.1297%" height="15" fill="rgb(218,157,39)" fg:x="1261" fg:w="2"/><text x="82.0269%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="81.8418%" y="997" width="0.0649%" height="15" fill="rgb(238,36,28)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="1007.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="81.8418%" y="981" width="0.0649%" height="15" fill="rgb(232,29,0)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="991.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="81.8418%" y="965" width="0.0649%" height="15" fill="rgb(243,138,46)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="975.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}}::{{closure}} (1 samples, 0.06%)</title><rect x="81.8418%" y="949" width="0.0649%" height="15" fill="rgb(232,186,41)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="81.8418%" y="933" width="0.0649%" height="15" fill="rgb(252,166,17)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="81.8418%" y="917" width="0.0649%" height="15" fill="rgb(228,179,12)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="81.8418%" y="901" width="0.0649%" height="15" fill="rgb(254,205,53)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="81.8418%" y="885" width="0.0649%" height="15" fill="rgb(224,163,47)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="81.8418%" y="869" width="0.0649%" height="15" fill="rgb(208,43,47)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="81.8418%" y="853" width="0.0649%" height="15" fill="rgb(224,198,38)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.8418%" y="837" width="0.0649%" height="15" fill="rgb(234,12,40)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.8418%" y="821" width="0.0649%" height="15" fill="rgb(237,212,39)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="81.8418%" y="805" width="0.0649%" height="15" fill="rgb(253,2,33)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="81.8418%" y="789" width="0.0649%" height="15" fill="rgb(251,29,16)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="81.8418%" y="773" width="0.0649%" height="15" fill="rgb(214,38,29)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.8418%" y="757" width="0.0649%" height="15" fill="rgb(226,226,29)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.8418%" y="741" width="0.0649%" height="15" fill="rgb(236,79,42)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.8418%" y="725" width="0.0649%" height="15" fill="rgb(222,12,36)" fg:x="1262" fg:w="1"/><text x="82.0918%" y="735.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="81.9066%" y="949" width="0.0649%" height="15" fill="rgb(232,123,44)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="81.9066%" y="933" width="0.0649%" height="15" fill="rgb(234,93,50)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="81.9066%" y="917" width="0.0649%" height="15" fill="rgb(210,86,49)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="901" width="0.0649%" height="15" fill="rgb(224,91,54)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="911.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="885" width="0.0649%" height="15" fill="rgb(239,169,9)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="81.9066%" y="869" width="0.0649%" height="15" fill="rgb(238,29,17)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="853" width="0.0649%" height="15" fill="rgb(227,160,22)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="837" width="0.0649%" height="15" fill="rgb(231,129,52)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="81.9066%" y="821" width="0.0649%" height="15" fill="rgb(241,184,9)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="81.9066%" y="805" width="0.0649%" height="15" fill="rgb(217,43,48)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="81.9066%" y="789" width="0.0649%" height="15" fill="rgb(213,49,1)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="81.9066%" y="773" width="0.0649%" height="15" fill="rgb(223,79,39)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="81.9066%" y="757" width="0.0649%" height="15" fill="rgb(228,227,46)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="741" width="0.0649%" height="15" fill="rgb(245,89,41)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="725" width="0.0649%" height="15" fill="rgb(253,83,21)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="81.9066%" y="709" width="0.0649%" height="15" fill="rgb(229,116,51)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="81.9066%" y="693" width="0.0649%" height="15" fill="rgb(246,67,26)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="81.9066%" y="677" width="0.0649%" height="15" fill="rgb(250,117,20)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="81.9066%" y="661" width="0.0649%" height="15" fill="rgb(207,88,17)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="81.9066%" y="645" width="0.0649%" height="15" fill="rgb(212,98,36)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="629" width="0.0649%" height="15" fill="rgb(221,72,6)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="81.9066%" y="613" width="0.0649%" height="15" fill="rgb(235,129,19)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="81.9066%" y="597" width="0.0649%" height="15" fill="rgb(237,200,6)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="81.9066%" y="581" width="0.0649%" height="15" fill="rgb(239,69,54)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="81.9066%" y="565" width="0.0649%" height="15" fill="rgb(214,68,45)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="81.9066%" y="549" width="0.0649%" height="15" fill="rgb(254,160,8)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="81.9066%" y="533" width="0.0649%" height="15" fill="rgb(215,226,31)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.9066%" y="517" width="0.0649%" height="15" fill="rgb(253,6,35)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.9066%" y="501" width="0.0649%" height="15" fill="rgb(219,96,42)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.9066%" y="485" width="0.0649%" height="15" fill="rgb(207,170,13)" fg:x="1263" fg:w="1"/><text x="82.1566%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="81.9715%" y="917" width="0.0649%" height="15" fill="rgb(239,101,5)" fg:x="1264" fg:w="1"/><text x="82.2215%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="81.9715%" y="901" width="0.0649%" height="15" fill="rgb(228,183,34)" fg:x="1264" fg:w="1"/><text x="82.2215%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="81.9715%" y="885" width="0.0649%" height="15" fill="rgb(205,28,31)" fg:x="1264" fg:w="1"/><text x="82.2215%" y="895.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="82.0363%" y="725" width="0.0649%" height="15" fill="rgb(214,118,50)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="82.0363%" y="709" width="0.0649%" height="15" fill="rgb(213,108,51)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="82.0363%" y="693" width="0.0649%" height="15" fill="rgb(238,56,37)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="82.0363%" y="677" width="0.0649%" height="15" fill="rgb(214,136,28)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="82.0363%" y="661" width="0.0649%" height="15" fill="rgb(221,201,54)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="82.0363%" y="645" width="0.0649%" height="15" fill="rgb(228,216,39)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="82.0363%" y="629" width="0.0649%" height="15" fill="rgb(207,229,49)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="82.0363%" y="613" width="0.0649%" height="15" fill="rgb(224,23,43)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="82.0363%" y="597" width="0.0649%" height="15" fill="rgb(247,97,18)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="82.0363%" y="581" width="0.0649%" height="15" fill="rgb(232,53,32)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="82.0363%" y="565" width="0.0649%" height="15" fill="rgb(247,38,23)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="575.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="82.0363%" y="549" width="0.0649%" height="15" fill="rgb(228,101,52)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="559.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="82.0363%" y="533" width="0.0649%" height="15" fill="rgb(231,45,36)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="82.0363%" y="517" width="0.0649%" height="15" fill="rgb(221,183,50)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.0363%" y="501" width="0.0649%" height="15" fill="rgb(251,132,12)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.0363%" y="485" width="0.0649%" height="15" fill="rgb(252,50,16)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.0363%" y="469" width="0.0649%" height="15" fill="rgb(224,60,15)" fg:x="1265" fg:w="1"/><text x="82.2863%" y="479.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (4 samples, 0.26%)</title><rect x="81.9066%" y="965" width="0.2594%" height="15" fill="rgb(254,2,34)" fg:x="1263" fg:w="4"/><text x="82.1566%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (3 samples, 0.19%)</title><rect x="81.9715%" y="949" width="0.1946%" height="15" fill="rgb(232,154,8)" fg:x="1264" fg:w="3"/><text x="82.2215%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="81.9715%" y="933" width="0.1946%" height="15" fill="rgb(235,190,52)" fg:x="1264" fg:w="3"/><text x="82.2215%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="82.0363%" y="917" width="0.1297%" height="15" fill="rgb(213,218,38)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="82.0363%" y="901" width="0.1297%" height="15" fill="rgb(237,50,37)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="82.0363%" y="885" width="0.1297%" height="15" fill="rgb(235,51,35)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="895.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="82.0363%" y="869" width="0.1297%" height="15" fill="rgb(244,40,52)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="82.0363%" y="853" width="0.1297%" height="15" fill="rgb(217,225,45)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="82.0363%" y="837" width="0.1297%" height="15" fill="rgb(247,191,36)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="82.0363%" y="821" width="0.1297%" height="15" fill="rgb(251,144,31)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="82.0363%" y="805" width="0.1297%" height="15" fill="rgb(227,155,41)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="82.0363%" y="789" width="0.1297%" height="15" fill="rgb(236,121,36)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="82.0363%" y="773" width="0.1297%" height="15" fill="rgb(221,128,28)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="82.0363%" y="757" width="0.1297%" height="15" fill="rgb(249,67,50)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="82.0363%" y="741" width="0.1297%" height="15" fill="rgb(241,126,38)" fg:x="1265" fg:w="2"/><text x="82.2863%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.1012%" y="725" width="0.0649%" height="15" fill="rgb(239,33,14)" fg:x="1266" fg:w="1"/><text x="82.3512%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.1012%" y="709" width="0.0649%" height="15" fill="rgb(207,221,54)" fg:x="1266" fg:w="1"/><text x="82.3512%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.1012%" y="693" width="0.0649%" height="15" fill="rgb(242,138,43)" fg:x="1266" fg:w="1"/><text x="82.3512%" y="703.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (1 samples, 0.06%)</title><rect x="82.1660%" y="965" width="0.0649%" height="15" fill="rgb(231,118,19)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="82.1660%" y="949" width="0.0649%" height="15" fill="rgb(214,128,54)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="82.1660%" y="933" width="0.0649%" height="15" fill="rgb(236,136,6)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="82.1660%" y="917" width="0.0649%" height="15" fill="rgb(247,30,38)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="82.1660%" y="901" width="0.0649%" height="15" fill="rgb(249,189,40)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="82.1660%" y="885" width="0.0649%" height="15" fill="rgb(247,179,7)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="82.1660%" y="869" width="0.0649%" height="15" fill="rgb(239,46,52)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="82.1660%" y="853" width="0.0649%" height="15" fill="rgb(225,28,52)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="82.1660%" y="837" width="0.0649%" height="15" fill="rgb(217,208,44)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="82.1660%" y="821" width="0.0649%" height="15" fill="rgb(224,11,34)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="82.1660%" y="805" width="0.0649%" height="15" fill="rgb(205,134,17)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.1660%" y="789" width="0.0649%" height="15" fill="rgb(237,125,9)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.1660%" y="773" width="0.0649%" height="15" fill="rgb(208,139,47)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.1660%" y="757" width="0.0649%" height="15" fill="rgb(242,5,5)" fg:x="1267" fg:w="1"/><text x="82.4160%" y="767.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (6 samples, 0.39%)</title><rect x="81.9066%" y="1013" width="0.3891%" height="15" fill="rgb(218,78,2)" fg:x="1263" fg:w="6"/><text x="82.1566%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (6 samples, 0.39%)</title><rect x="81.9066%" y="997" width="0.3891%" height="15" fill="rgb(217,75,16)" fg:x="1263" fg:w="6"/><text x="82.1566%" y="1007.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (6 samples, 0.39%)</title><rect x="81.9066%" y="981" width="0.3891%" height="15" fill="rgb(212,56,17)" fg:x="1263" fg:w="6"/><text x="82.1566%" y="991.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="82.2309%" y="965" width="0.0649%" height="15" fill="rgb(228,61,29)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="82.2309%" y="949" width="0.0649%" height="15" fill="rgb(247,202,38)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="82.2309%" y="933" width="0.0649%" height="15" fill="rgb(211,216,43)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="82.2309%" y="917" width="0.0649%" height="15" fill="rgb(220,7,49)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="82.2309%" y="901" width="0.0649%" height="15" fill="rgb(219,158,7)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="82.2309%" y="885" width="0.0649%" height="15" fill="rgb(206,127,9)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="82.2309%" y="869" width="0.0649%" height="15" fill="rgb(206,103,43)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="82.2309%" y="853" width="0.0649%" height="15" fill="rgb(240,108,41)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="82.2309%" y="837" width="0.0649%" height="15" fill="rgb(252,212,6)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="82.2309%" y="821" width="0.0649%" height="15" fill="rgb(248,105,31)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.2309%" y="805" width="0.0649%" height="15" fill="rgb(241,123,4)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.2309%" y="789" width="0.0649%" height="15" fill="rgb(223,74,37)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.2309%" y="773" width="0.0649%" height="15" fill="rgb(251,219,28)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.2309%" y="757" width="0.0649%" height="15" fill="rgb(218,36,31)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.2309%" y="741" width="0.0649%" height="15" fill="rgb(229,40,15)" fg:x="1268" fg:w="1"/><text x="82.4809%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (1 samples, 0.06%)</title><rect x="82.2957%" y="965" width="0.0649%" height="15" fill="rgb(208,138,37)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="82.2957%" y="949" width="0.0649%" height="15" fill="rgb(208,40,52)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="82.2957%" y="933" width="0.0649%" height="15" fill="rgb(246,181,48)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.2957%" y="917" width="0.0649%" height="15" fill="rgb(253,178,36)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="82.2957%" y="901" width="0.0649%" height="15" fill="rgb(210,170,6)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="82.2957%" y="885" width="0.0649%" height="15" fill="rgb(243,62,22)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="82.2957%" y="869" width="0.0649%" height="15" fill="rgb(213,145,26)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="82.2957%" y="853" width="0.0649%" height="15" fill="rgb(237,177,23)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="863.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="82.2957%" y="837" width="0.0649%" height="15" fill="rgb(252,5,24)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="82.2957%" y="821" width="0.0649%" height="15" fill="rgb(230,108,54)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="831.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="82.2957%" y="805" width="0.0649%" height="15" fill="rgb(252,192,41)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="815.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="82.2957%" y="789" width="0.0649%" height="15" fill="rgb(218,125,20)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="799.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="82.2957%" y="773" width="0.0649%" height="15" fill="rgb(230,223,15)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.2957%" y="757" width="0.0649%" height="15" fill="rgb(239,99,47)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.2957%" y="741" width="0.0649%" height="15" fill="rgb(222,214,23)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.2957%" y="725" width="0.0649%" height="15" fill="rgb(250,98,43)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="735.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="82.2957%" y="709" width="0.0649%" height="15" fill="rgb(226,140,11)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="82.2957%" y="693" width="0.0649%" height="15" fill="rgb(239,2,22)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="82.2957%" y="677" width="0.0649%" height="15" fill="rgb(209,106,26)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="687.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="82.2957%" y="661" width="0.0649%" height="15" fill="rgb(209,135,11)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="671.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="82.2957%" y="645" width="0.0649%" height="15" fill="rgb(241,58,6)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="82.2957%" y="629" width="0.0649%" height="15" fill="rgb(214,78,1)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="82.2957%" y="613" width="0.0649%" height="15" fill="rgb(229,135,33)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="82.2957%" y="597" width="0.0649%" height="15" fill="rgb(245,87,50)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.2957%" y="581" width="0.0649%" height="15" fill="rgb(222,222,8)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.2957%" y="565" width="0.0649%" height="15" fill="rgb(214,97,50)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.2957%" y="549" width="0.0649%" height="15" fill="rgb(244,161,51)" fg:x="1269" fg:w="1"/><text x="82.5457%" y="559.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="82.3606%" y="933" width="0.0649%" height="15" fill="rgb(225,17,4)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="82.3606%" y="917" width="0.0649%" height="15" fill="rgb(238,10,13)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="82.3606%" y="901" width="0.0649%" height="15" fill="rgb(239,169,14)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="911.50"></text></g><g><title>&lt;&amp;str as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="82.3606%" y="885" width="0.0649%" height="15" fill="rgb(213,105,25)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="895.50"></text></g><g><title>&lt;&amp;str as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="82.3606%" y="869" width="0.0649%" height="15" fill="rgb(233,4,17)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="879.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="82.3606%" y="853" width="0.0649%" height="15" fill="rgb(212,5,35)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="863.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="82.3606%" y="837" width="0.0649%" height="15" fill="rgb(216,3,14)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.3606%" y="821" width="0.0649%" height="15" fill="rgb(240,105,33)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.3606%" y="805" width="0.0649%" height="15" fill="rgb(216,73,0)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.3606%" y="789" width="0.0649%" height="15" fill="rgb(217,153,48)" fg:x="1270" fg:w="1"/><text x="82.6106%" y="799.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (3 samples, 0.19%)</title><rect x="82.2957%" y="1013" width="0.1946%" height="15" fill="rgb(218,180,8)" fg:x="1269" fg:w="3"/><text x="82.5457%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (3 samples, 0.19%)</title><rect x="82.2957%" y="997" width="0.1946%" height="15" fill="rgb(252,168,2)" fg:x="1269" fg:w="3"/><text x="82.5457%" y="1007.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (3 samples, 0.19%)</title><rect x="82.2957%" y="981" width="0.1946%" height="15" fill="rgb(224,116,33)" fg:x="1269" fg:w="3"/><text x="82.5457%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (2 samples, 0.13%)</title><rect x="82.3606%" y="965" width="0.1297%" height="15" fill="rgb(229,205,17)" fg:x="1270" fg:w="2"/><text x="82.6106%" y="975.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="82.3606%" y="949" width="0.1297%" height="15" fill="rgb(234,1,41)" fg:x="1270" fg:w="2"/><text x="82.6106%" y="959.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="82.4254%" y="933" width="0.0649%" height="15" fill="rgb(244,185,8)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="82.4254%" y="917" width="0.0649%" height="15" fill="rgb(248,51,21)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="82.4254%" y="901" width="0.0649%" height="15" fill="rgb(248,157,31)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="82.4254%" y="885" width="0.0649%" height="15" fill="rgb(210,34,47)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="82.4254%" y="869" width="0.0649%" height="15" fill="rgb(227,139,53)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="879.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="82.4254%" y="853" width="0.0649%" height="15" fill="rgb(232,211,37)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="863.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="82.4254%" y="837" width="0.0649%" height="15" fill="rgb(236,133,10)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="82.4254%" y="821" width="0.0649%" height="15" fill="rgb(243,202,25)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="82.4254%" y="805" width="0.0649%" height="15" fill="rgb(224,59,9)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.4254%" y="789" width="0.0649%" height="15" fill="rgb(206,146,16)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.4254%" y="773" width="0.0649%" height="15" fill="rgb(220,47,2)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.4254%" y="757" width="0.0649%" height="15" fill="rgb(225,124,51)" fg:x="1271" fg:w="1"/><text x="82.6754%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="82.4903%" y="997" width="0.1297%" height="15" fill="rgb(241,220,50)" fg:x="1272" fg:w="2"/><text x="82.7403%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="82.4903%" y="981" width="0.1297%" height="15" fill="rgb(232,168,5)" fg:x="1272" fg:w="2"/><text x="82.7403%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="82.4903%" y="965" width="0.1297%" height="15" fill="rgb(243,90,22)" fg:x="1272" fg:w="2"/><text x="82.7403%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6200%" y="997" width="0.0649%" height="15" fill="rgb(223,153,32)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6200%" y="981" width="0.0649%" height="15" fill="rgb(243,124,20)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6200%" y="965" width="0.0649%" height="15" fill="rgb(246,168,39)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="82.6200%" y="949" width="0.0649%" height="15" fill="rgb(222,165,54)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.6200%" y="933" width="0.0649%" height="15" fill="rgb(251,142,27)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6200%" y="917" width="0.0649%" height="15" fill="rgb(207,168,50)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="927.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.6200%" y="901" width="0.0649%" height="15" fill="rgb(250,139,25)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="911.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.06%)</title><rect x="82.6200%" y="885" width="0.0649%" height="15" fill="rgb(214,194,48)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="895.50"></text></g><g><title>std::thread::panicking (1 samples, 0.06%)</title><rect x="82.6200%" y="869" width="0.0649%" height="15" fill="rgb(227,138,47)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="879.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.06%)</title><rect x="82.6200%" y="853" width="0.0649%" height="15" fill="rgb(250,162,5)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="863.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.06%)</title><rect x="82.6200%" y="837" width="0.0649%" height="15" fill="rgb(229,74,25)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="82.6200%" y="821" width="0.0649%" height="15" fill="rgb(221,124,34)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="82.6200%" y="805" width="0.0649%" height="15" fill="rgb(225,94,25)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.6200%" y="789" width="0.0649%" height="15" fill="rgb(210,100,12)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.6200%" y="773" width="0.0649%" height="15" fill="rgb(206,62,48)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.6200%" y="757" width="0.0649%" height="15" fill="rgb(222,181,9)" fg:x="1274" fg:w="1"/><text x="82.8700%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6848%" y="997" width="0.0649%" height="15" fill="rgb(248,42,38)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6848%" y="981" width="0.0649%" height="15" fill="rgb(213,40,6)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="82.6848%" y="965" width="0.0649%" height="15" fill="rgb(211,108,15)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="82.6848%" y="949" width="0.0649%" height="15" fill="rgb(249,62,9)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.6848%" y="933" width="0.0649%" height="15" fill="rgb(233,26,54)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="82.6848%" y="917" width="0.0649%" height="15" fill="rgb(210,175,26)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="82.6848%" y="901" width="0.0649%" height="15" fill="rgb(210,43,33)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="82.6848%" y="885" width="0.0649%" height="15" fill="rgb(224,46,17)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="82.6848%" y="869" width="0.0649%" height="15" fill="rgb(254,24,38)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="82.6848%" y="853" width="0.0649%" height="15" fill="rgb(248,32,0)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="82.6848%" y="837" width="0.0649%" height="15" fill="rgb(224,37,41)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="82.6848%" y="821" width="0.0649%" height="15" fill="rgb(252,70,22)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="82.6848%" y="805" width="0.0649%" height="15" fill="rgb(241,123,50)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="82.6848%" y="789" width="0.0649%" height="15" fill="rgb(246,138,33)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.6848%" y="773" width="0.0649%" height="15" fill="rgb(218,39,32)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.6848%" y="757" width="0.0649%" height="15" fill="rgb(241,229,10)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="82.6848%" y="741" width="0.0649%" height="15" fill="rgb(212,160,10)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.6848%" y="725" width="0.0649%" height="15" fill="rgb(227,48,51)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.6848%" y="709" width="0.0649%" height="15" fill="rgb(238,159,21)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.6848%" y="693" width="0.0649%" height="15" fill="rgb(216,1,10)" fg:x="1275" fg:w="1"/><text x="82.9348%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.06%)</title><rect x="82.7497%" y="981" width="0.0649%" height="15" fill="rgb(209,228,25)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="82.7497%" y="965" width="0.0649%" height="15" fill="rgb(234,160,10)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="82.7497%" y="949" width="0.0649%" height="15" fill="rgb(212,66,25)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="959.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="82.7497%" y="933" width="0.0649%" height="15" fill="rgb(254,121,18)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.7497%" y="917" width="0.0649%" height="15" fill="rgb(219,127,1)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.7497%" y="901" width="0.0649%" height="15" fill="rgb(219,224,42)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.7497%" y="885" width="0.0649%" height="15" fill="rgb(253,130,22)" fg:x="1276" fg:w="1"/><text x="82.9997%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="82.7497%" y="997" width="0.1297%" height="15" fill="rgb(253,39,28)" fg:x="1276" fg:w="2"/><text x="82.9997%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.8145%" y="981" width="0.0649%" height="15" fill="rgb(231,126,37)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="82.8145%" y="965" width="0.0649%" height="15" fill="rgb(251,145,14)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="82.8145%" y="949" width="0.0649%" height="15" fill="rgb(229,164,30)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.8145%" y="933" width="0.0649%" height="15" fill="rgb(233,227,54)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="82.8145%" y="917" width="0.0649%" height="15" fill="rgb(240,94,22)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="82.8145%" y="901" width="0.0649%" height="15" fill="rgb(217,56,16)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="82.8145%" y="885" width="0.0649%" height="15" fill="rgb(229,133,38)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="82.8145%" y="869" width="0.0649%" height="15" fill="rgb(225,139,35)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="82.8145%" y="853" width="0.0649%" height="15" fill="rgb(223,100,16)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="82.8145%" y="837" width="0.0649%" height="15" fill="rgb(207,43,50)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="82.8145%" y="821" width="0.0649%" height="15" fill="rgb(237,221,9)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.8145%" y="805" width="0.0649%" height="15" fill="rgb(236,134,24)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.8145%" y="789" width="0.0649%" height="15" fill="rgb(222,173,4)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.8145%" y="773" width="0.0649%" height="15" fill="rgb(234,144,52)" fg:x="1277" fg:w="1"/><text x="83.0645%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.8794%" y="997" width="0.0649%" height="15" fill="rgb(223,41,7)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="82.8794%" y="981" width="0.0649%" height="15" fill="rgb(226,143,9)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="82.8794%" y="965" width="0.0649%" height="15" fill="rgb(234,43,37)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.8794%" y="949" width="0.0649%" height="15" fill="rgb(224,188,11)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.8794%" y="933" width="0.0649%" height="15" fill="rgb(233,113,28)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.8794%" y="917" width="0.0649%" height="15" fill="rgb(215,16,1)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.8794%" y="901" width="0.0649%" height="15" fill="rgb(238,74,38)" fg:x="1278" fg:w="1"/><text x="83.1294%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="82.9442%" y="997" width="0.0649%" height="15" fill="rgb(221,66,35)" fg:x="1279" fg:w="1"/><text x="83.1942%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::btree_base::AccessGuard&lt;V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="82.9442%" y="981" width="0.0649%" height="15" fill="rgb(251,225,2)" fg:x="1279" fg:w="1"/><text x="83.1942%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="82.9442%" y="965" width="0.0649%" height="15" fill="rgb(240,169,18)" fg:x="1279" fg:w="1"/><text x="83.1942%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="82.9442%" y="949" width="0.0649%" height="15" fill="rgb(243,130,50)" fg:x="1279" fg:w="1"/><text x="83.1942%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="82.9442%" y="933" width="0.0649%" height="15" fill="rgb(228,75,13)" fg:x="1279" fg:w="1"/><text x="83.1942%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="83.0091%" y="997" width="0.0649%" height="15" fill="rgb(252,95,35)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="83.0091%" y="981" width="0.0649%" height="15" fill="rgb(222,180,54)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="83.0091%" y="965" width="0.0649%" height="15" fill="rgb(250,110,34)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="83.0091%" y="949" width="0.0649%" height="15" fill="rgb(208,100,21)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.0091%" y="933" width="0.0649%" height="15" fill="rgb(209,123,47)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.0091%" y="917" width="0.0649%" height="15" fill="rgb(237,147,9)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="83.0091%" y="901" width="0.0649%" height="15" fill="rgb(228,206,23)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.0091%" y="885" width="0.0649%" height="15" fill="rgb(217,174,46)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="83.0091%" y="869" width="0.0649%" height="15" fill="rgb(231,126,21)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="83.0091%" y="853" width="0.0649%" height="15" fill="rgb(245,26,1)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.0091%" y="837" width="0.0649%" height="15" fill="rgb(224,138,39)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.0091%" y="821" width="0.0649%" height="15" fill="rgb(208,97,3)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.0091%" y="805" width="0.0649%" height="15" fill="rgb(222,77,29)" fg:x="1280" fg:w="1"/><text x="83.2591%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.0739%" y="981" width="0.0649%" height="15" fill="rgb(243,188,36)" fg:x="1281" fg:w="1"/><text x="83.3239%" y="991.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.0739%" y="965" width="0.0649%" height="15" fill="rgb(218,214,3)" fg:x="1281" fg:w="1"/><text x="83.3239%" y="975.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.0739%" y="949" width="0.0649%" height="15" fill="rgb(211,183,45)" fg:x="1281" fg:w="1"/><text x="83.3239%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="83.1388%" y="965" width="0.0649%" height="15" fill="rgb(230,218,25)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.1388%" y="949" width="0.0649%" height="15" fill="rgb(233,86,6)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.1388%" y="933" width="0.0649%" height="15" fill="rgb(220,59,24)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="83.1388%" y="917" width="0.0649%" height="15" fill="rgb(227,60,1)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="83.1388%" y="901" width="0.0649%" height="15" fill="rgb(216,212,54)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="83.1388%" y="885" width="0.0649%" height="15" fill="rgb(227,81,54)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="83.1388%" y="869" width="0.0649%" height="15" fill="rgb(206,204,43)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="83.1388%" y="853" width="0.0649%" height="15" fill="rgb(219,29,26)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="83.1388%" y="837" width="0.0649%" height="15" fill="rgb(252,40,36)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="83.1388%" y="821" width="0.0649%" height="15" fill="rgb(224,205,39)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="83.1388%" y="805" width="0.0649%" height="15" fill="rgb(222,13,21)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.1388%" y="789" width="0.0649%" height="15" fill="rgb(243,139,6)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.1388%" y="773" width="0.0649%" height="15" fill="rgb(237,101,11)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.1388%" y="757" width="0.0649%" height="15" fill="rgb(254,49,28)" fg:x="1282" fg:w="1"/><text x="83.3888%" y="767.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="83.2036%" y="917" width="0.0649%" height="15" fill="rgb(223,41,21)" fg:x="1283" fg:w="1"/><text x="83.4536%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="83.2036%" y="901" width="0.0649%" height="15" fill="rgb(225,103,29)" fg:x="1283" fg:w="1"/><text x="83.4536%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.2036%" y="885" width="0.0649%" height="15" fill="rgb(244,82,43)" fg:x="1283" fg:w="1"/><text x="83.4536%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.2036%" y="869" width="0.0649%" height="15" fill="rgb(217,39,3)" fg:x="1283" fg:w="1"/><text x="83.4536%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.2036%" y="853" width="0.0649%" height="15" fill="rgb(239,128,25)" fg:x="1283" fg:w="1"/><text x="83.4536%" y="863.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="83.2036%" y="965" width="0.1297%" height="15" fill="rgb(210,192,37)" fg:x="1283" fg:w="2"/><text x="83.4536%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="83.2036%" y="949" width="0.1297%" height="15" fill="rgb(219,98,18)" fg:x="1283" fg:w="2"/><text x="83.4536%" y="959.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="83.2036%" y="933" width="0.1297%" height="15" fill="rgb(224,228,38)" fg:x="1283" fg:w="2"/><text x="83.4536%" y="943.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="83.2685%" y="917" width="0.0649%" height="15" fill="rgb(241,129,43)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="83.2685%" y="901" width="0.0649%" height="15" fill="rgb(223,8,51)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="911.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="83.2685%" y="885" width="0.0649%" height="15" fill="rgb(233,76,24)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="83.2685%" y="869" width="0.0649%" height="15" fill="rgb(219,115,10)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="83.2685%" y="853" width="0.0649%" height="15" fill="rgb(222,137,12)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.2685%" y="837" width="0.0649%" height="15" fill="rgb(216,192,16)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.2685%" y="821" width="0.0649%" height="15" fill="rgb(247,6,27)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.2685%" y="805" width="0.0649%" height="15" fill="rgb(254,39,44)" fg:x="1284" fg:w="1"/><text x="83.5185%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="83.3333%" y="949" width="0.0649%" height="15" fill="rgb(251,116,35)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="83.3333%" y="933" width="0.0649%" height="15" fill="rgb(208,61,44)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.3333%" y="917" width="0.0649%" height="15" fill="rgb(250,34,5)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="83.3333%" y="901" width="0.0649%" height="15" fill="rgb(241,40,15)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.3333%" y="885" width="0.0649%" height="15" fill="rgb(229,182,2)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.3333%" y="869" width="0.0649%" height="15" fill="rgb(244,148,52)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.3333%" y="853" width="0.0649%" height="15" fill="rgb(225,211,4)" fg:x="1285" fg:w="1"/><text x="83.5833%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="83.3982%" y="933" width="0.0649%" height="15" fill="rgb(208,222,47)" fg:x="1286" fg:w="1"/><text x="83.6482%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.3982%" y="917" width="0.0649%" height="15" fill="rgb(233,162,0)" fg:x="1286" fg:w="1"/><text x="83.6482%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.3982%" y="901" width="0.0649%" height="15" fill="rgb(241,54,13)" fg:x="1286" fg:w="1"/><text x="83.6482%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.3982%" y="885" width="0.0649%" height="15" fill="rgb(213,89,18)" fg:x="1286" fg:w="1"/><text x="83.6482%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="83.4630%" y="581" width="0.0649%" height="15" fill="rgb(215,170,37)" fg:x="1287" fg:w="1"/><text x="83.7130%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="83.4630%" y="565" width="0.0649%" height="15" fill="rgb(216,133,15)" fg:x="1287" fg:w="1"/><text x="83.7130%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="83.4630%" y="549" width="0.0649%" height="15" fill="rgb(230,42,19)" fg:x="1287" fg:w="1"/><text x="83.7130%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.4630%" y="533" width="0.0649%" height="15" fill="rgb(221,103,41)" fg:x="1287" fg:w="1"/><text x="83.7130%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.4630%" y="517" width="0.0649%" height="15" fill="rgb(220,142,31)" fg:x="1287" fg:w="1"/><text x="83.7130%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.4630%" y="501" width="0.0649%" height="15" fill="rgb(239,218,4)" fg:x="1287" fg:w="1"/><text x="83.7130%" y="511.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="83.4630%" y="661" width="0.1297%" height="15" fill="rgb(232,16,4)" fg:x="1287" fg:w="2"/><text x="83.7130%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="83.4630%" y="645" width="0.1297%" height="15" fill="rgb(226,213,25)" fg:x="1287" fg:w="2"/><text x="83.7130%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="83.4630%" y="629" width="0.1297%" height="15" fill="rgb(235,135,19)" fg:x="1287" fg:w="2"/><text x="83.7130%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="83.4630%" y="613" width="0.1297%" height="15" fill="rgb(240,107,29)" fg:x="1287" fg:w="2"/><text x="83.7130%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="83.4630%" y="597" width="0.1297%" height="15" fill="rgb(206,164,44)" fg:x="1287" fg:w="2"/><text x="83.7130%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="83.5279%" y="581" width="0.0649%" height="15" fill="rgb(210,23,48)" fg:x="1288" fg:w="1"/><text x="83.7779%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="83.5279%" y="565" width="0.0649%" height="15" fill="rgb(212,138,25)" fg:x="1288" fg:w="1"/><text x="83.7779%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="83.5279%" y="549" width="0.0649%" height="15" fill="rgb(224,152,3)" fg:x="1288" fg:w="1"/><text x="83.7779%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.5279%" y="533" width="0.0649%" height="15" fill="rgb(214,38,23)" fg:x="1288" fg:w="1"/><text x="83.7779%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.5279%" y="517" width="0.0649%" height="15" fill="rgb(215,161,10)" fg:x="1288" fg:w="1"/><text x="83.7779%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.5279%" y="501" width="0.0649%" height="15" fill="rgb(240,185,7)" fg:x="1288" fg:w="1"/><text x="83.7779%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="83.4630%" y="693" width="0.1946%" height="15" fill="rgb(244,104,25)" fg:x="1287" fg:w="3"/><text x="83.7130%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="83.4630%" y="677" width="0.1946%" height="15" fill="rgb(242,140,44)" fg:x="1287" fg:w="3"/><text x="83.7130%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.5927%" y="661" width="0.0649%" height="15" fill="rgb(245,30,19)" fg:x="1289" fg:w="1"/><text x="83.8427%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.5927%" y="645" width="0.0649%" height="15" fill="rgb(219,208,35)" fg:x="1289" fg:w="1"/><text x="83.8427%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.5927%" y="629" width="0.0649%" height="15" fill="rgb(235,200,7)" fg:x="1289" fg:w="1"/><text x="83.8427%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="83.6576%" y="581" width="0.0649%" height="15" fill="rgb(220,193,10)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="83.6576%" y="565" width="0.0649%" height="15" fill="rgb(212,216,39)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="83.6576%" y="549" width="0.0649%" height="15" fill="rgb(212,134,19)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="83.6576%" y="533" width="0.0649%" height="15" fill="rgb(230,57,24)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="83.6576%" y="517" width="0.0649%" height="15" fill="rgb(238,209,37)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.6576%" y="501" width="0.0649%" height="15" fill="rgb(247,11,45)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.6576%" y="485" width="0.0649%" height="15" fill="rgb(222,126,6)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.6576%" y="469" width="0.0649%" height="15" fill="rgb(245,77,24)" fg:x="1290" fg:w="1"/><text x="83.9076%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="83.7224%" y="517" width="0.0649%" height="15" fill="rgb(227,14,24)" fg:x="1291" fg:w="1"/><text x="83.9724%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.7224%" y="501" width="0.0649%" height="15" fill="rgb(211,112,42)" fg:x="1291" fg:w="1"/><text x="83.9724%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.7224%" y="485" width="0.0649%" height="15" fill="rgb(230,103,42)" fg:x="1291" fg:w="1"/><text x="83.9724%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.7224%" y="469" width="0.0649%" height="15" fill="rgb(228,125,42)" fg:x="1291" fg:w="1"/><text x="83.9724%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="83.7873%" y="469" width="0.0649%" height="15" fill="rgb(243,33,6)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="83.7873%" y="453" width="0.0649%" height="15" fill="rgb(231,2,40)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="83.7873%" y="437" width="0.0649%" height="15" fill="rgb(224,200,53)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="83.7873%" y="421" width="0.0649%" height="15" fill="rgb(215,116,36)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="83.7873%" y="405" width="0.0649%" height="15" fill="rgb(240,23,51)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="83.7873%" y="389" width="0.0649%" height="15" fill="rgb(221,72,5)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="83.7873%" y="373" width="0.0649%" height="15" fill="rgb(245,142,9)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="83.7873%" y="357" width="0.0649%" height="15" fill="rgb(207,34,16)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="83.7873%" y="341" width="0.0649%" height="15" fill="rgb(252,101,12)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="83.7873%" y="325" width="0.0649%" height="15" fill="rgb(239,89,37)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="83.7873%" y="309" width="0.0649%" height="15" fill="rgb(252,227,37)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="83.7873%" y="293" width="0.0649%" height="15" fill="rgb(212,164,17)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.7873%" y="277" width="0.0649%" height="15" fill="rgb(240,86,13)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.7873%" y="261" width="0.0649%" height="15" fill="rgb(233,183,32)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.7873%" y="245" width="0.0649%" height="15" fill="rgb(205,201,38)" fg:x="1292" fg:w="1"/><text x="84.0373%" y="255.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="83.8521%" y="277" width="0.0649%" height="15" fill="rgb(210,122,38)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="83.8521%" y="261" width="0.0649%" height="15" fill="rgb(241,174,26)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="83.8521%" y="245" width="0.0649%" height="15" fill="rgb(219,89,7)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="255.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="83.8521%" y="229" width="0.0649%" height="15" fill="rgb(246,9,24)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="83.8521%" y="213" width="0.0649%" height="15" fill="rgb(205,132,21)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.8521%" y="197" width="0.0649%" height="15" fill="rgb(210,11,17)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.8521%" y="181" width="0.0649%" height="15" fill="rgb(226,138,14)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.8521%" y="165" width="0.0649%" height="15" fill="rgb(224,108,44)" fg:x="1293" fg:w="1"/><text x="84.1021%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.9170%" y="197" width="0.0649%" height="15" fill="rgb(247,114,36)" fg:x="1294" fg:w="1"/><text x="84.1670%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.9170%" y="181" width="0.0649%" height="15" fill="rgb(231,183,14)" fg:x="1294" fg:w="1"/><text x="84.1670%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.9170%" y="165" width="0.0649%" height="15" fill="rgb(218,168,4)" fg:x="1294" fg:w="1"/><text x="84.1670%" y="175.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="83.4630%" y="773" width="0.5837%" height="15" fill="rgb(210,8,3)" fg:x="1287" fg:w="9"/><text x="83.7130%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="83.4630%" y="757" width="0.5837%" height="15" fill="rgb(216,165,0)" fg:x="1287" fg:w="9"/><text x="83.7130%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="83.4630%" y="741" width="0.5837%" height="15" fill="rgb(245,120,5)" fg:x="1287" fg:w="9"/><text x="83.7130%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="83.4630%" y="725" width="0.5837%" height="15" fill="rgb(249,121,32)" fg:x="1287" fg:w="9"/><text x="83.7130%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="83.4630%" y="709" width="0.5837%" height="15" fill="rgb(211,55,33)" fg:x="1287" fg:w="9"/><text x="83.7130%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (6 samples, 0.39%)</title><rect x="83.6576%" y="693" width="0.3891%" height="15" fill="rgb(254,46,35)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.39%)</title><rect x="83.6576%" y="677" width="0.3891%" height="15" fill="rgb(213,213,19)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (6 samples, 0.39%)</title><rect x="83.6576%" y="661" width="0.3891%" height="15" fill="rgb(207,152,44)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.39%)</title><rect x="83.6576%" y="645" width="0.3891%" height="15" fill="rgb(227,195,36)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.39%)</title><rect x="83.6576%" y="629" width="0.3891%" height="15" fill="rgb(210,137,36)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.39%)</title><rect x="83.6576%" y="613" width="0.3891%" height="15" fill="rgb(253,47,47)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.39%)</title><rect x="83.6576%" y="597" width="0.3891%" height="15" fill="rgb(230,147,18)" fg:x="1290" fg:w="6"/><text x="83.9076%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="83.7224%" y="581" width="0.3243%" height="15" fill="rgb(247,33,49)" fg:x="1291" fg:w="5"/><text x="83.9724%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="83.7224%" y="565" width="0.3243%" height="15" fill="rgb(239,26,29)" fg:x="1291" fg:w="5"/><text x="83.9724%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="83.7224%" y="549" width="0.3243%" height="15" fill="rgb(245,145,52)" fg:x="1291" fg:w="5"/><text x="83.9724%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="83.7224%" y="533" width="0.3243%" height="15" fill="rgb(224,139,32)" fg:x="1291" fg:w="5"/><text x="83.9724%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="83.7873%" y="517" width="0.2594%" height="15" fill="rgb(238,202,19)" fg:x="1292" fg:w="4"/><text x="84.0373%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="83.7873%" y="501" width="0.2594%" height="15" fill="rgb(249,211,53)" fg:x="1292" fg:w="4"/><text x="84.0373%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="83.7873%" y="485" width="0.2594%" height="15" fill="rgb(237,229,33)" fg:x="1292" fg:w="4"/><text x="84.0373%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="83.8521%" y="469" width="0.1946%" height="15" fill="rgb(208,97,40)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="83.8521%" y="453" width="0.1946%" height="15" fill="rgb(254,36,16)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="83.8521%" y="437" width="0.1946%" height="15" fill="rgb(221,7,12)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="83.8521%" y="421" width="0.1946%" height="15" fill="rgb(205,11,12)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="83.8521%" y="405" width="0.1946%" height="15" fill="rgb(227,72,28)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="83.8521%" y="389" width="0.1946%" height="15" fill="rgb(228,7,34)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="83.8521%" y="373" width="0.1946%" height="15" fill="rgb(230,52,42)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="83.8521%" y="357" width="0.1946%" height="15" fill="rgb(219,177,53)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="83.8521%" y="341" width="0.1946%" height="15" fill="rgb(243,196,34)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="83.8521%" y="325" width="0.1946%" height="15" fill="rgb(213,66,49)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="83.8521%" y="309" width="0.1946%" height="15" fill="rgb(233,11,50)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="83.8521%" y="293" width="0.1946%" height="15" fill="rgb(235,190,6)" fg:x="1293" fg:w="3"/><text x="84.1021%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="83.9170%" y="277" width="0.1297%" height="15" fill="rgb(212,64,44)" fg:x="1294" fg:w="2"/><text x="84.1670%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="83.9170%" y="261" width="0.1297%" height="15" fill="rgb(206,95,44)" fg:x="1294" fg:w="2"/><text x="84.1670%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="83.9170%" y="245" width="0.1297%" height="15" fill="rgb(227,136,25)" fg:x="1294" fg:w="2"/><text x="84.1670%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="83.9170%" y="229" width="0.1297%" height="15" fill="rgb(206,178,17)" fg:x="1294" fg:w="2"/><text x="84.1670%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="83.9170%" y="213" width="0.1297%" height="15" fill="rgb(208,168,35)" fg:x="1294" fg:w="2"/><text x="84.1670%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="83.9818%" y="197" width="0.0649%" height="15" fill="rgb(213,210,40)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="83.9818%" y="181" width="0.0649%" height="15" fill="rgb(236,60,6)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="83.9818%" y="165" width="0.0649%" height="15" fill="rgb(220,186,36)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="83.9818%" y="149" width="0.0649%" height="15" fill="rgb(225,120,49)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="83.9818%" y="133" width="0.0649%" height="15" fill="rgb(250,115,20)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="143.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="83.9818%" y="117" width="0.0649%" height="15" fill="rgb(207,214,23)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="127.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="83.9818%" y="101" width="0.0649%" height="15" fill="rgb(240,9,18)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="111.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="83.9818%" y="85" width="0.0649%" height="15" fill="rgb(232,170,48)" fg:x="1295" fg:w="1"/><text x="84.2318%" y="95.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="83.4630%" y="821" width="0.7134%" height="15" fill="rgb(236,149,23)" fg:x="1287" fg:w="11"/><text x="83.7130%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (11 samples, 0.71%)</title><rect x="83.4630%" y="805" width="0.7134%" height="15" fill="rgb(210,125,42)" fg:x="1287" fg:w="11"/><text x="83.7130%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 0.71%)</title><rect x="83.4630%" y="789" width="0.7134%" height="15" fill="rgb(207,201,52)" fg:x="1287" fg:w="11"/><text x="83.7130%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="84.0467%" y="773" width="0.1297%" height="15" fill="rgb(250,187,37)" fg:x="1296" fg:w="2"/><text x="84.2967%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="84.0467%" y="757" width="0.1297%" height="15" fill="rgb(214,186,2)" fg:x="1296" fg:w="2"/><text x="84.2967%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="84.0467%" y="741" width="0.1297%" height="15" fill="rgb(207,189,15)" fg:x="1296" fg:w="2"/><text x="84.2967%" y="751.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (13 samples, 0.84%)</title><rect x="83.3982%" y="949" width="0.8431%" height="15" fill="rgb(221,99,21)" fg:x="1286" fg:w="13"/><text x="83.6482%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (12 samples, 0.78%)</title><rect x="83.4630%" y="933" width="0.7782%" height="15" fill="rgb(212,67,18)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (12 samples, 0.78%)</title><rect x="83.4630%" y="917" width="0.7782%" height="15" fill="rgb(226,24,24)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (12 samples, 0.78%)</title><rect x="83.4630%" y="901" width="0.7782%" height="15" fill="rgb(252,123,31)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (12 samples, 0.78%)</title><rect x="83.4630%" y="885" width="0.7782%" height="15" fill="rgb(251,227,47)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (12 samples, 0.78%)</title><rect x="83.4630%" y="869" width="0.7782%" height="15" fill="rgb(233,84,53)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="879.50"></text></g><g><title>bincode::internal::deserialize (12 samples, 0.78%)</title><rect x="83.4630%" y="853" width="0.7782%" height="15" fill="rgb(228,57,19)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (12 samples, 0.78%)</title><rect x="83.4630%" y="837" width="0.7782%" height="15" fill="rgb(251,81,5)" fg:x="1287" fg:w="12"/><text x="83.7130%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.1764%" y="821" width="0.0649%" height="15" fill="rgb(236,211,27)" fg:x="1298" fg:w="1"/><text x="84.4264%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.1764%" y="805" width="0.0649%" height="15" fill="rgb(218,21,6)" fg:x="1298" fg:w="1"/><text x="84.4264%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.1764%" y="789" width="0.0649%" height="15" fill="rgb(239,104,19)" fg:x="1298" fg:w="1"/><text x="84.4264%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.2412%" y="661" width="0.0649%" height="15" fill="rgb(234,179,27)" fg:x="1299" fg:w="1"/><text x="84.4912%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.2412%" y="645" width="0.0649%" height="15" fill="rgb(221,154,39)" fg:x="1299" fg:w="1"/><text x="84.4912%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.2412%" y="629" width="0.0649%" height="15" fill="rgb(228,190,1)" fg:x="1299" fg:w="1"/><text x="84.4912%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.3061%" y="613" width="0.0649%" height="15" fill="rgb(244,122,33)" fg:x="1300" fg:w="1"/><text x="84.5561%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.3061%" y="597" width="0.0649%" height="15" fill="rgb(227,56,37)" fg:x="1300" fg:w="1"/><text x="84.5561%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.3061%" y="581" width="0.0649%" height="15" fill="rgb(207,158,16)" fg:x="1300" fg:w="1"/><text x="84.5561%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="84.3709%" y="613" width="0.1297%" height="15" fill="rgb(251,222,30)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="84.3709%" y="597" width="0.1297%" height="15" fill="rgb(240,22,49)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="84.3709%" y="581" width="0.1297%" height="15" fill="rgb(224,207,37)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="84.3709%" y="565" width="0.1297%" height="15" fill="rgb(249,188,40)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="84.3709%" y="549" width="0.1297%" height="15" fill="rgb(254,141,11)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="84.3709%" y="533" width="0.1297%" height="15" fill="rgb(231,177,6)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="84.3709%" y="517" width="0.1297%" height="15" fill="rgb(241,6,16)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="84.3709%" y="501" width="0.1297%" height="15" fill="rgb(230,50,14)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="84.3709%" y="485" width="0.1297%" height="15" fill="rgb(254,36,3)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="84.3709%" y="469" width="0.1297%" height="15" fill="rgb(226,149,37)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="84.3709%" y="453" width="0.1297%" height="15" fill="rgb(253,49,27)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="84.3709%" y="437" width="0.1297%" height="15" fill="rgb(249,182,52)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="447.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (2 samples, 0.13%)</title><rect x="84.3709%" y="421" width="0.1297%" height="15" fill="rgb(223,42,15)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="431.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (2 samples, 0.13%)</title><rect x="84.3709%" y="405" width="0.1297%" height="15" fill="rgb(232,31,42)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.13%)</title><rect x="84.3709%" y="389" width="0.1297%" height="15" fill="rgb(233,56,46)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="84.3709%" y="373" width="0.1297%" height="15" fill="rgb(241,143,21)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="84.3709%" y="357" width="0.1297%" height="15" fill="rgb(251,222,15)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="84.3709%" y="341" width="0.1297%" height="15" fill="rgb(242,101,40)" fg:x="1301" fg:w="2"/><text x="84.6209%" y="351.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="84.5006%" y="421" width="0.0649%" height="15" fill="rgb(247,60,44)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="84.5006%" y="405" width="0.0649%" height="15" fill="rgb(254,48,47)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="84.5006%" y="389" width="0.0649%" height="15" fill="rgb(253,30,33)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="399.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="84.5006%" y="373" width="0.0649%" height="15" fill="rgb(253,214,47)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="383.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="84.5006%" y="357" width="0.0649%" height="15" fill="rgb(241,108,29)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="84.5006%" y="341" width="0.0649%" height="15" fill="rgb(240,36,2)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="84.5006%" y="325" width="0.0649%" height="15" fill="rgb(243,198,24)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="84.5006%" y="309" width="0.0649%" height="15" fill="rgb(225,98,27)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.5006%" y="293" width="0.0649%" height="15" fill="rgb(208,86,30)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.5006%" y="277" width="0.0649%" height="15" fill="rgb(242,157,11)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.5006%" y="261" width="0.0649%" height="15" fill="rgb(244,84,16)" fg:x="1303" fg:w="1"/><text x="84.7506%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.5655%" y="389" width="0.0649%" height="15" fill="rgb(247,20,46)" fg:x="1304" fg:w="1"/><text x="84.8155%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.5655%" y="373" width="0.0649%" height="15" fill="rgb(240,157,20)" fg:x="1304" fg:w="1"/><text x="84.8155%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.5655%" y="357" width="0.0649%" height="15" fill="rgb(212,151,38)" fg:x="1304" fg:w="1"/><text x="84.8155%" y="367.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="84.5006%" y="437" width="0.1946%" height="15" fill="rgb(233,197,14)" fg:x="1303" fg:w="3"/><text x="84.7506%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="84.5655%" y="421" width="0.1297%" height="15" fill="rgb(226,148,28)" fg:x="1304" fg:w="2"/><text x="84.8155%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="84.5655%" y="405" width="0.1297%" height="15" fill="rgb(244,141,30)" fg:x="1304" fg:w="2"/><text x="84.8155%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="84.6304%" y="389" width="0.0649%" height="15" fill="rgb(215,73,38)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="84.6304%" y="373" width="0.0649%" height="15" fill="rgb(230,148,29)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="84.6304%" y="357" width="0.0649%" height="15" fill="rgb(250,41,52)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="84.6304%" y="341" width="0.0649%" height="15" fill="rgb(215,48,1)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="84.6304%" y="325" width="0.0649%" height="15" fill="rgb(205,223,38)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="335.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="84.6304%" y="309" width="0.0649%" height="15" fill="rgb(213,51,8)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.6304%" y="293" width="0.0649%" height="15" fill="rgb(248,53,11)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.6304%" y="277" width="0.0649%" height="15" fill="rgb(218,140,4)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.6304%" y="261" width="0.0649%" height="15" fill="rgb(248,161,31)" fg:x="1305" fg:w="1"/><text x="84.8804%" y="271.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (4 samples, 0.26%)</title><rect x="84.5006%" y="501" width="0.2594%" height="15" fill="rgb(239,88,32)" fg:x="1303" fg:w="4"/><text x="84.7506%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="84.5006%" y="485" width="0.2594%" height="15" fill="rgb(234,14,28)" fg:x="1303" fg:w="4"/><text x="84.7506%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (4 samples, 0.26%)</title><rect x="84.5006%" y="469" width="0.2594%" height="15" fill="rgb(235,173,11)" fg:x="1303" fg:w="4"/><text x="84.7506%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (4 samples, 0.26%)</title><rect x="84.5006%" y="453" width="0.2594%" height="15" fill="rgb(222,70,2)" fg:x="1303" fg:w="4"/><text x="84.7506%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_literal_type (1 samples, 0.06%)</title><rect x="84.6952%" y="437" width="0.0649%" height="15" fill="rgb(228,196,41)" fg:x="1306" fg:w="1"/><text x="84.9452%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_bytes (1 samples, 0.06%)</title><rect x="84.6952%" y="421" width="0.0649%" height="15" fill="rgb(249,19,9)" fg:x="1306" fg:w="1"/><text x="84.9452%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.6952%" y="405" width="0.0649%" height="15" fill="rgb(221,16,43)" fg:x="1306" fg:w="1"/><text x="84.9452%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.6952%" y="389" width="0.0649%" height="15" fill="rgb(225,207,6)" fg:x="1306" fg:w="1"/><text x="84.9452%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.6952%" y="373" width="0.0649%" height="15" fill="rgb(249,32,32)" fg:x="1306" fg:w="1"/><text x="84.9452%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.7601%" y="437" width="0.0649%" height="15" fill="rgb(232,163,43)" fg:x="1307" fg:w="1"/><text x="85.0101%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.7601%" y="421" width="0.0649%" height="15" fill="rgb(236,158,54)" fg:x="1307" fg:w="1"/><text x="85.0101%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.7601%" y="405" width="0.0649%" height="15" fill="rgb(205,126,44)" fg:x="1307" fg:w="1"/><text x="85.0101%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.8249%" y="389" width="0.0649%" height="15" fill="rgb(210,162,12)" fg:x="1308" fg:w="1"/><text x="85.0749%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.8249%" y="373" width="0.0649%" height="15" fill="rgb(218,156,48)" fg:x="1308" fg:w="1"/><text x="85.0749%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.8249%" y="357" width="0.0649%" height="15" fill="rgb(248,210,3)" fg:x="1308" fg:w="1"/><text x="85.0749%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="84.8898%" y="277" width="0.0649%" height="15" fill="rgb(212,43,27)" fg:x="1309" fg:w="1"/><text x="85.1398%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="84.8898%" y="261" width="0.0649%" height="15" fill="rgb(241,52,6)" fg:x="1309" fg:w="1"/><text x="85.1398%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="84.8898%" y="245" width="0.0649%" height="15" fill="rgb(222,178,35)" fg:x="1309" fg:w="1"/><text x="85.1398%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.8898%" y="229" width="0.0649%" height="15" fill="rgb(205,121,46)" fg:x="1309" fg:w="1"/><text x="85.1398%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.8898%" y="213" width="0.0649%" height="15" fill="rgb(249,67,1)" fg:x="1309" fg:w="1"/><text x="85.1398%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.8898%" y="197" width="0.0649%" height="15" fill="rgb(238,168,42)" fg:x="1309" fg:w="1"/><text x="85.1398%" y="207.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="84.9546%" y="229" width="0.0649%" height="15" fill="rgb(205,36,48)" fg:x="1310" fg:w="1"/><text x="85.2046%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="84.9546%" y="213" width="0.0649%" height="15" fill="rgb(240,85,12)" fg:x="1310" fg:w="1"/><text x="85.2046%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="84.9546%" y="197" width="0.0649%" height="15" fill="rgb(245,27,39)" fg:x="1310" fg:w="1"/><text x="85.2046%" y="207.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.78%)</title><rect x="84.3061%" y="645" width="0.7782%" height="15" fill="rgb(218,129,34)" fg:x="1300" fg:w="12"/><text x="84.5561%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="84.3061%" y="629" width="0.7782%" height="15" fill="rgb(221,157,12)" fg:x="1300" fg:w="12"/><text x="84.5561%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="84.5006%" y="613" width="0.5837%" height="15" fill="rgb(213,206,20)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="84.5006%" y="597" width="0.5837%" height="15" fill="rgb(227,115,30)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="84.5006%" y="581" width="0.5837%" height="15" fill="rgb(221,40,47)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="84.5006%" y="565" width="0.5837%" height="15" fill="rgb(239,96,49)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="84.5006%" y="549" width="0.5837%" height="15" fill="rgb(223,24,38)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.58%)</title><rect x="84.5006%" y="533" width="0.5837%" height="15" fill="rgb(242,35,45)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="84.5006%" y="517" width="0.5837%" height="15" fill="rgb(236,20,9)" fg:x="1303" fg:w="9"/><text x="84.7506%" y="527.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="84.7601%" y="501" width="0.3243%" height="15" fill="rgb(239,124,8)" fg:x="1307" fg:w="5"/><text x="85.0101%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="84.7601%" y="485" width="0.3243%" height="15" fill="rgb(228,92,29)" fg:x="1307" fg:w="5"/><text x="85.0101%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="84.7601%" y="469" width="0.3243%" height="15" fill="rgb(251,53,39)" fg:x="1307" fg:w="5"/><text x="85.0101%" y="479.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="84.7601%" y="453" width="0.3243%" height="15" fill="rgb(224,44,10)" fg:x="1307" fg:w="5"/><text x="85.0101%" y="463.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="84.8249%" y="437" width="0.2594%" height="15" fill="rgb(254,10,15)" fg:x="1308" fg:w="4"/><text x="85.0749%" y="447.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="84.8249%" y="421" width="0.2594%" height="15" fill="rgb(245,173,6)" fg:x="1308" fg:w="4"/><text x="85.0749%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="84.8249%" y="405" width="0.2594%" height="15" fill="rgb(228,74,0)" fg:x="1308" fg:w="4"/><text x="85.0749%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="84.8898%" y="389" width="0.1946%" height="15" fill="rgb(206,138,29)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="84.8898%" y="373" width="0.1946%" height="15" fill="rgb(253,27,43)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="383.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="84.8898%" y="357" width="0.1946%" height="15" fill="rgb(231,73,0)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="84.8898%" y="341" width="0.1946%" height="15" fill="rgb(218,9,23)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="84.8898%" y="325" width="0.1946%" height="15" fill="rgb(251,55,29)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="335.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3 samples, 0.19%)</title><rect x="84.8898%" y="309" width="0.1946%" height="15" fill="rgb(223,180,22)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3 samples, 0.19%)</title><rect x="84.8898%" y="293" width="0.1946%" height="15" fill="rgb(223,29,21)" fg:x="1309" fg:w="3"/><text x="85.1398%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="84.9546%" y="277" width="0.1297%" height="15" fill="rgb(251,103,37)" fg:x="1310" fg:w="2"/><text x="85.2046%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="84.9546%" y="261" width="0.1297%" height="15" fill="rgb(214,11,21)" fg:x="1310" fg:w="2"/><text x="85.2046%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="84.9546%" y="245" width="0.1297%" height="15" fill="rgb(205,137,13)" fg:x="1310" fg:w="2"/><text x="85.2046%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="85.0195%" y="229" width="0.0649%" height="15" fill="rgb(225,58,47)" fg:x="1311" fg:w="1"/><text x="85.2695%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="85.0195%" y="213" width="0.0649%" height="15" fill="rgb(222,197,14)" fg:x="1311" fg:w="1"/><text x="85.2695%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.0195%" y="197" width="0.0649%" height="15" fill="rgb(215,210,33)" fg:x="1311" fg:w="1"/><text x="85.2695%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.0195%" y="181" width="0.0649%" height="15" fill="rgb(242,13,9)" fg:x="1311" fg:w="1"/><text x="85.2695%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.0195%" y="165" width="0.0649%" height="15" fill="rgb(218,31,39)" fg:x="1311" fg:w="1"/><text x="85.2695%" y="175.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.91%)</title><rect x="84.2412%" y="741" width="0.9079%" height="15" fill="rgb(211,214,23)" fg:x="1299" fg:w="14"/><text x="84.4912%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (14 samples, 0.91%)</title><rect x="84.2412%" y="725" width="0.9079%" height="15" fill="rgb(237,92,14)" fg:x="1299" fg:w="14"/><text x="84.4912%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (14 samples, 0.91%)</title><rect x="84.2412%" y="709" width="0.9079%" height="15" fill="rgb(220,78,5)" fg:x="1299" fg:w="14"/><text x="84.4912%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (14 samples, 0.91%)</title><rect x="84.2412%" y="693" width="0.9079%" height="15" fill="rgb(237,23,21)" fg:x="1299" fg:w="14"/><text x="84.4912%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (14 samples, 0.91%)</title><rect x="84.2412%" y="677" width="0.9079%" height="15" fill="rgb(251,207,51)" fg:x="1299" fg:w="14"/><text x="84.4912%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (13 samples, 0.84%)</title><rect x="84.3061%" y="661" width="0.8431%" height="15" fill="rgb(249,206,18)" fg:x="1300" fg:w="13"/><text x="84.5561%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.0843%" y="645" width="0.0649%" height="15" fill="rgb(236,20,19)" fg:x="1312" fg:w="1"/><text x="85.3343%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.0843%" y="629" width="0.0649%" height="15" fill="rgb(214,227,29)" fg:x="1312" fg:w="1"/><text x="85.3343%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.0843%" y="613" width="0.0649%" height="15" fill="rgb(209,183,4)" fg:x="1312" fg:w="1"/><text x="85.3343%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.97%)</title><rect x="84.2412%" y="853" width="0.9728%" height="15" fill="rgb(233,111,23)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (15 samples, 0.97%)</title><rect x="84.2412%" y="837" width="0.9728%" height="15" fill="rgb(238,121,27)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (15 samples, 0.97%)</title><rect x="84.2412%" y="821" width="0.9728%" height="15" fill="rgb(236,120,41)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (15 samples, 0.97%)</title><rect x="84.2412%" y="805" width="0.9728%" height="15" fill="rgb(241,143,10)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (15 samples, 0.97%)</title><rect x="84.2412%" y="789" width="0.9728%" height="15" fill="rgb(224,86,31)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (15 samples, 0.97%)</title><rect x="84.2412%" y="773" width="0.9728%" height="15" fill="rgb(236,212,27)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (15 samples, 0.97%)</title><rect x="84.2412%" y="757" width="0.9728%" height="15" fill="rgb(219,43,51)" fg:x="1299" fg:w="15"/><text x="84.4912%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.1492%" y="741" width="0.0649%" height="15" fill="rgb(232,216,8)" fg:x="1313" fg:w="1"/><text x="85.3992%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.1492%" y="725" width="0.0649%" height="15" fill="rgb(206,222,39)" fg:x="1313" fg:w="1"/><text x="85.3992%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.1492%" y="709" width="0.0649%" height="15" fill="rgb(209,149,48)" fg:x="1313" fg:w="1"/><text x="85.3992%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="85.2140%" y="853" width="0.0649%" height="15" fill="rgb(229,155,21)" fg:x="1314" fg:w="1"/><text x="85.4640%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.2140%" y="837" width="0.0649%" height="15" fill="rgb(246,152,26)" fg:x="1314" fg:w="1"/><text x="85.4640%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.2140%" y="821" width="0.0649%" height="15" fill="rgb(206,70,42)" fg:x="1314" fg:w="1"/><text x="85.4640%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.2140%" y="805" width="0.0649%" height="15" fill="rgb(236,9,11)" fg:x="1314" fg:w="1"/><text x="85.4640%" y="815.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (17 samples, 1.10%)</title><rect x="84.2412%" y="933" width="1.1025%" height="15" fill="rgb(238,145,47)" fg:x="1299" fg:w="17"/><text x="84.4912%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (17 samples, 1.10%)</title><rect x="84.2412%" y="917" width="1.1025%" height="15" fill="rgb(252,189,7)" fg:x="1299" fg:w="17"/><text x="84.4912%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (17 samples, 1.10%)</title><rect x="84.2412%" y="901" width="1.1025%" height="15" fill="rgb(254,168,51)" fg:x="1299" fg:w="17"/><text x="84.4912%" y="911.50"></text></g><g><title>bincode::internal::deserialize (17 samples, 1.10%)</title><rect x="84.2412%" y="885" width="1.1025%" height="15" fill="rgb(227,105,46)" fg:x="1299" fg:w="17"/><text x="84.4912%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (17 samples, 1.10%)</title><rect x="84.2412%" y="869" width="1.1025%" height="15" fill="rgb(227,74,30)" fg:x="1299" fg:w="17"/><text x="84.4912%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.2789%" y="853" width="0.0649%" height="15" fill="rgb(206,212,44)" fg:x="1315" fg:w="1"/><text x="85.5289%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.2789%" y="837" width="0.0649%" height="15" fill="rgb(252,69,11)" fg:x="1315" fg:w="1"/><text x="85.5289%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.2789%" y="821" width="0.0649%" height="15" fill="rgb(239,116,0)" fg:x="1315" fg:w="1"/><text x="85.5289%" y="831.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="85.3437%" y="901" width="0.0649%" height="15" fill="rgb(246,189,23)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="911.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="85.3437%" y="885" width="0.0649%" height="15" fill="rgb(229,50,41)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="895.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="85.3437%" y="869" width="0.0649%" height="15" fill="rgb(214,66,37)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="879.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (1 samples, 0.06%)</title><rect x="85.3437%" y="853" width="0.0649%" height="15" fill="rgb(226,28,6)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.3437%" y="837" width="0.0649%" height="15" fill="rgb(239,154,0)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.3437%" y="821" width="0.0649%" height="15" fill="rgb(233,97,11)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.3437%" y="805" width="0.0649%" height="15" fill="rgb(236,215,16)" fg:x="1316" fg:w="1"/><text x="85.5937%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (20 samples, 1.30%)</title><rect x="84.2412%" y="949" width="1.2970%" height="15" fill="rgb(246,188,29)" fg:x="1299" fg:w="20"/><text x="84.4912%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (3 samples, 0.19%)</title><rect x="85.3437%" y="933" width="0.1946%" height="15" fill="rgb(207,7,29)" fg:x="1316" fg:w="3"/><text x="85.5937%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (3 samples, 0.19%)</title><rect x="85.3437%" y="917" width="0.1946%" height="15" fill="rgb(238,112,43)" fg:x="1316" fg:w="3"/><text x="85.5937%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="85.4086%" y="901" width="0.1297%" height="15" fill="rgb(230,110,32)" fg:x="1317" fg:w="2"/><text x="85.6586%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="85.4086%" y="885" width="0.1297%" height="15" fill="rgb(218,197,32)" fg:x="1317" fg:w="2"/><text x="85.6586%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="85.4086%" y="869" width="0.1297%" height="15" fill="rgb(252,61,9)" fg:x="1317" fg:w="2"/><text x="85.6586%" y="879.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="85.5383%" y="709" width="0.0649%" height="15" fill="rgb(244,140,14)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="85.5383%" y="693" width="0.0649%" height="15" fill="rgb(216,14,47)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="85.5383%" y="677" width="0.0649%" height="15" fill="rgb(224,130,52)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="85.5383%" y="661" width="0.0649%" height="15" fill="rgb(210,229,51)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="85.5383%" y="645" width="0.0649%" height="15" fill="rgb(242,13,9)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="85.5383%" y="629" width="0.0649%" height="15" fill="rgb(252,71,50)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="85.5383%" y="613" width="0.0649%" height="15" fill="rgb(218,225,6)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="85.5383%" y="597" width="0.0649%" height="15" fill="rgb(219,27,35)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="85.5383%" y="581" width="0.0649%" height="15" fill="rgb(226,30,1)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="85.5383%" y="565" width="0.0649%" height="15" fill="rgb(227,164,34)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="575.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="85.5383%" y="549" width="0.0649%" height="15" fill="rgb(206,103,4)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="85.5383%" y="533" width="0.0649%" height="15" fill="rgb(214,166,19)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="543.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="85.5383%" y="517" width="0.0649%" height="15" fill="rgb(240,56,20)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.5383%" y="501" width="0.0649%" height="15" fill="rgb(224,25,3)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.5383%" y="485" width="0.0649%" height="15" fill="rgb(216,206,54)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.5383%" y="469" width="0.0649%" height="15" fill="rgb(225,142,10)" fg:x="1319" fg:w="1"/><text x="85.7883%" y="479.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="85.6031%" y="453" width="0.0649%" height="15" fill="rgb(246,9,18)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="85.6031%" y="437" width="0.0649%" height="15" fill="rgb(247,140,18)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="447.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="85.6031%" y="421" width="0.0649%" height="15" fill="rgb(239,184,22)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="431.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="85.6031%" y="405" width="0.0649%" height="15" fill="rgb(227,94,44)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="85.6031%" y="389" width="0.0649%" height="15" fill="rgb(219,43,3)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="85.6031%" y="373" width="0.0649%" height="15" fill="rgb(210,76,31)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="383.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="85.6031%" y="357" width="0.0649%" height="15" fill="rgb(225,85,12)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.6031%" y="341" width="0.0649%" height="15" fill="rgb(214,191,28)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.6031%" y="325" width="0.0649%" height="15" fill="rgb(214,43,14)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.6031%" y="309" width="0.0649%" height="15" fill="rgb(253,117,5)" fg:x="1320" fg:w="1"/><text x="85.8531%" y="319.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="85.6031%" y="693" width="0.1297%" height="15" fill="rgb(208,124,26)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="85.6031%" y="677" width="0.1297%" height="15" fill="rgb(228,208,39)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="85.6031%" y="661" width="0.1297%" height="15" fill="rgb(206,180,39)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="85.6031%" y="645" width="0.1297%" height="15" fill="rgb(205,111,37)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="85.6031%" y="629" width="0.1297%" height="15" fill="rgb(208,121,24)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="85.6031%" y="613" width="0.1297%" height="15" fill="rgb(218,215,32)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="85.6031%" y="597" width="0.1297%" height="15" fill="rgb(244,168,53)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="85.6031%" y="581" width="0.1297%" height="15" fill="rgb(214,9,36)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="85.6031%" y="565" width="0.1297%" height="15" fill="rgb(231,4,34)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="85.6031%" y="549" width="0.1297%" height="15" fill="rgb(210,83,51)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="85.6031%" y="533" width="0.1297%" height="15" fill="rgb(224,112,1)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="85.6031%" y="517" width="0.1297%" height="15" fill="rgb(216,33,41)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="85.6031%" y="501" width="0.1297%" height="15" fill="rgb(215,179,42)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="85.6031%" y="485" width="0.1297%" height="15" fill="rgb(205,81,48)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="85.6031%" y="469" width="0.1297%" height="15" fill="rgb(246,17,30)" fg:x="1320" fg:w="2"/><text x="85.8531%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.6680%" y="453" width="0.0649%" height="15" fill="rgb(226,19,16)" fg:x="1321" fg:w="1"/><text x="85.9180%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.6680%" y="437" width="0.0649%" height="15" fill="rgb(207,3,14)" fg:x="1321" fg:w="1"/><text x="85.9180%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.6680%" y="421" width="0.0649%" height="15" fill="rgb(226,77,12)" fg:x="1321" fg:w="1"/><text x="85.9180%" y="431.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (4 samples, 0.26%)</title><rect x="85.5383%" y="949" width="0.2594%" height="15" fill="rgb(226,76,25)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="85.5383%" y="933" width="0.2594%" height="15" fill="rgb(217,216,25)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="85.5383%" y="917" width="0.2594%" height="15" fill="rgb(247,127,42)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="85.5383%" y="901" width="0.2594%" height="15" fill="rgb(226,10,34)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="85.5383%" y="885" width="0.2594%" height="15" fill="rgb(249,78,0)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="895.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="85.5383%" y="869" width="0.2594%" height="15" fill="rgb(226,218,38)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="85.5383%" y="853" width="0.2594%" height="15" fill="rgb(240,92,1)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="85.5383%" y="837" width="0.2594%" height="15" fill="rgb(237,224,33)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="85.5383%" y="821" width="0.2594%" height="15" fill="rgb(211,46,1)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="85.5383%" y="805" width="0.2594%" height="15" fill="rgb(239,190,4)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="85.5383%" y="789" width="0.2594%" height="15" fill="rgb(221,50,22)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="85.5383%" y="773" width="0.2594%" height="15" fill="rgb(207,176,8)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="85.5383%" y="757" width="0.2594%" height="15" fill="rgb(244,114,50)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="85.5383%" y="741" width="0.2594%" height="15" fill="rgb(226,206,19)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="85.5383%" y="725" width="0.2594%" height="15" fill="rgb(208,199,16)" fg:x="1319" fg:w="4"/><text x="85.7883%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="85.6031%" y="709" width="0.1946%" height="15" fill="rgb(208,38,14)" fg:x="1320" fg:w="3"/><text x="85.8531%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.7328%" y="693" width="0.0649%" height="15" fill="rgb(221,211,49)" fg:x="1322" fg:w="1"/><text x="85.9828%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.7328%" y="677" width="0.0649%" height="15" fill="rgb(227,214,34)" fg:x="1322" fg:w="1"/><text x="85.9828%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.7328%" y="661" width="0.0649%" height="15" fill="rgb(234,5,54)" fg:x="1322" fg:w="1"/><text x="85.9828%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="85.7977%" y="869" width="0.0649%" height="15" fill="rgb(236,215,22)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="85.7977%" y="853" width="0.0649%" height="15" fill="rgb(244,0,11)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="85.7977%" y="837" width="0.0649%" height="15" fill="rgb(212,140,16)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="85.7977%" y="821" width="0.0649%" height="15" fill="rgb(238,101,37)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="85.7977%" y="805" width="0.0649%" height="15" fill="rgb(247,46,3)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.7977%" y="789" width="0.0649%" height="15" fill="rgb(208,106,19)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.7977%" y="773" width="0.0649%" height="15" fill="rgb(240,227,15)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.7977%" y="757" width="0.0649%" height="15" fill="rgb(226,173,6)" fg:x="1323" fg:w="1"/><text x="86.0477%" y="767.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (44 samples, 2.85%)</title><rect x="83.0739%" y="997" width="2.8534%" height="15" fill="rgb(213,191,1)" fg:x="1281" fg:w="44"/><text x="83.3239%" y="1007.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (43 samples, 2.79%)</title><rect x="83.1388%" y="981" width="2.7886%" height="15" fill="rgb(246,51,36)" fg:x="1282" fg:w="43"/><text x="83.3888%" y="991.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (40 samples, 2.59%)</title><rect x="83.3333%" y="965" width="2.5940%" height="15" fill="rgb(238,40,32)" fg:x="1285" fg:w="40"/><text x="83.5833%" y="975.50">re..</text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="85.7977%" y="949" width="0.1297%" height="15" fill="rgb(208,126,27)" fg:x="1323" fg:w="2"/><text x="86.0477%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="85.7977%" y="933" width="0.1297%" height="15" fill="rgb(227,117,38)" fg:x="1323" fg:w="2"/><text x="86.0477%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="85.7977%" y="917" width="0.1297%" height="15" fill="rgb(232,16,1)" fg:x="1323" fg:w="2"/><text x="86.0477%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="85.7977%" y="901" width="0.1297%" height="15" fill="rgb(212,111,31)" fg:x="1323" fg:w="2"/><text x="86.0477%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="85.7977%" y="885" width="0.1297%" height="15" fill="rgb(253,227,2)" fg:x="1323" fg:w="2"/><text x="86.0477%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="85.8625%" y="869" width="0.0649%" height="15" fill="rgb(216,122,17)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="85.8625%" y="853" width="0.0649%" height="15" fill="rgb(227,37,2)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="85.8625%" y="837" width="0.0649%" height="15" fill="rgb(244,113,40)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="85.8625%" y="821" width="0.0649%" height="15" fill="rgb(217,193,34)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="85.8625%" y="805" width="0.0649%" height="15" fill="rgb(212,223,15)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="85.8625%" y="789" width="0.0649%" height="15" fill="rgb(238,143,18)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.8625%" y="773" width="0.0649%" height="15" fill="rgb(231,18,49)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.8625%" y="757" width="0.0649%" height="15" fill="rgb(249,122,4)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.8625%" y="741" width="0.0649%" height="15" fill="rgb(245,138,54)" fg:x="1324" fg:w="1"/><text x="86.1125%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.9274%" y="981" width="0.0649%" height="15" fill="rgb(218,130,18)" fg:x="1325" fg:w="1"/><text x="86.1774%" y="991.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.9274%" y="965" width="0.0649%" height="15" fill="rgb(235,94,13)" fg:x="1325" fg:w="1"/><text x="86.1774%" y="975.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.9274%" y="949" width="0.0649%" height="15" fill="rgb(247,143,5)" fg:x="1325" fg:w="1"/><text x="86.1774%" y="959.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="85.9922%" y="981" width="0.0649%" height="15" fill="rgb(212,59,54)" fg:x="1326" fg:w="1"/><text x="86.2422%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="85.9922%" y="965" width="0.0649%" height="15" fill="rgb(206,121,24)" fg:x="1326" fg:w="1"/><text x="86.2422%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="85.9922%" y="949" width="0.0649%" height="15" fill="rgb(235,38,8)" fg:x="1326" fg:w="1"/><text x="86.2422%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="85.9922%" y="933" width="0.0649%" height="15" fill="rgb(227,102,26)" fg:x="1326" fg:w="1"/><text x="86.2422%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt; (1 samples, 0.06%)</title><rect x="86.0571%" y="981" width="0.0649%" height="15" fill="rgb(240,183,46)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::types::TypeName&gt; (1 samples, 0.06%)</title><rect x="86.0571%" y="965" width="0.0649%" height="15" fill="rgb(208,177,23)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.06%)</title><rect x="86.0571%" y="949" width="0.0649%" height="15" fill="rgb(216,152,5)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="86.0571%" y="933" width="0.0649%" height="15" fill="rgb(238,199,2)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.06%)</title><rect x="86.0571%" y="917" width="0.0649%" height="15" fill="rgb(235,142,28)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="927.50"></text></g><g><title>__GI___libc_free (1 samples, 0.06%)</title><rect x="86.0571%" y="901" width="0.0649%" height="15" fill="rgb(225,97,25)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.0571%" y="885" width="0.0649%" height="15" fill="rgb(208,75,46)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.0571%" y="869" width="0.0649%" height="15" fill="rgb(240,136,15)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.0571%" y="853" width="0.0649%" height="15" fill="rgb(235,36,27)" fg:x="1327" fg:w="1"/><text x="86.3071%" y="863.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="86.1219%" y="933" width="0.0649%" height="15" fill="rgb(231,132,23)" fg:x="1328" fg:w="1"/><text x="86.3719%" y="943.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="86.1219%" y="917" width="0.0649%" height="15" fill="rgb(205,208,20)" fg:x="1328" fg:w="1"/><text x="86.3719%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.1219%" y="901" width="0.0649%" height="15" fill="rgb(215,26,40)" fg:x="1328" fg:w="1"/><text x="86.3719%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.1219%" y="885" width="0.0649%" height="15" fill="rgb(238,183,34)" fg:x="1328" fg:w="1"/><text x="86.3719%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.1219%" y="869" width="0.0649%" height="15" fill="rgb(207,96,10)" fg:x="1328" fg:w="1"/><text x="86.3719%" y="879.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="86.1868%" y="933" width="0.0649%" height="15" fill="rgb(218,88,6)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="943.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="86.1868%" y="917" width="0.0649%" height="15" fill="rgb(217,22,49)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="86.1868%" y="901" width="0.0649%" height="15" fill="rgb(240,195,14)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="86.1868%" y="885" width="0.0649%" height="15" fill="rgb(229,48,27)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.06%)</title><rect x="86.1868%" y="869" width="0.0649%" height="15" fill="rgb(220,194,45)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.06%)</title><rect x="86.1868%" y="853" width="0.0649%" height="15" fill="rgb(252,60,20)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.06%)</title><rect x="86.1868%" y="837" width="0.0649%" height="15" fill="rgb(244,169,33)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="847.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="86.1868%" y="821" width="0.0649%" height="15" fill="rgb(234,141,34)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.1868%" y="805" width="0.0649%" height="15" fill="rgb(241,141,9)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.1868%" y="789" width="0.0649%" height="15" fill="rgb(246,27,36)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.1868%" y="773" width="0.0649%" height="15" fill="rgb(216,188,42)" fg:x="1329" fg:w="1"/><text x="86.4368%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="86.2516%" y="901" width="0.0649%" height="15" fill="rgb(234,205,22)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="86.2516%" y="885" width="0.0649%" height="15" fill="rgb(210,202,32)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="86.2516%" y="869" width="0.0649%" height="15" fill="rgb(217,0,48)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="86.2516%" y="853" width="0.0649%" height="15" fill="rgb(207,115,37)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="86.2516%" y="837" width="0.0649%" height="15" fill="rgb(237,221,44)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.2516%" y="821" width="0.0649%" height="15" fill="rgb(249,78,2)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.2516%" y="805" width="0.0649%" height="15" fill="rgb(211,169,23)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.2516%" y="789" width="0.0649%" height="15" fill="rgb(207,116,29)" fg:x="1330" fg:w="1"/><text x="86.5016%" y="799.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="86.2516%" y="933" width="0.1297%" height="15" fill="rgb(240,84,33)" fg:x="1330" fg:w="2"/><text x="86.5016%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="86.2516%" y="917" width="0.1297%" height="15" fill="rgb(229,224,31)" fg:x="1330" fg:w="2"/><text x="86.5016%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="86.3165%" y="901" width="0.0649%" height="15" fill="rgb(227,90,31)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="86.3165%" y="885" width="0.0649%" height="15" fill="rgb(249,22,41)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="895.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="86.3165%" y="869" width="0.0649%" height="15" fill="rgb(239,65,11)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="86.3165%" y="853" width="0.0649%" height="15" fill="rgb(205,5,23)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.3165%" y="837" width="0.0649%" height="15" fill="rgb(254,78,52)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.3165%" y="821" width="0.0649%" height="15" fill="rgb(214,156,33)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.3165%" y="805" width="0.0649%" height="15" fill="rgb(208,20,30)" fg:x="1331" fg:w="1"/><text x="86.5665%" y="815.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (5 samples, 0.32%)</title><rect x="86.1219%" y="981" width="0.3243%" height="15" fill="rgb(223,133,18)" fg:x="1328" fg:w="5"/><text x="86.3719%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (5 samples, 0.32%)</title><rect x="86.1219%" y="965" width="0.3243%" height="15" fill="rgb(222,91,41)" fg:x="1328" fg:w="5"/><text x="86.3719%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (5 samples, 0.32%)</title><rect x="86.1219%" y="949" width="0.3243%" height="15" fill="rgb(247,137,48)" fg:x="1328" fg:w="5"/><text x="86.3719%" y="959.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="86.3813%" y="933" width="0.0649%" height="15" fill="rgb(239,156,11)" fg:x="1332" fg:w="1"/><text x="86.6313%" y="943.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="86.3813%" y="917" width="0.0649%" height="15" fill="rgb(244,56,26)" fg:x="1332" fg:w="1"/><text x="86.6313%" y="927.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="86.3813%" y="901" width="0.0649%" height="15" fill="rgb(205,131,49)" fg:x="1332" fg:w="1"/><text x="86.6313%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.3813%" y="885" width="0.0649%" height="15" fill="rgb(224,0,2)" fg:x="1332" fg:w="1"/><text x="86.6313%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.3813%" y="869" width="0.0649%" height="15" fill="rgb(247,59,36)" fg:x="1332" fg:w="1"/><text x="86.6313%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.3813%" y="853" width="0.0649%" height="15" fill="rgb(215,4,47)" fg:x="1332" fg:w="1"/><text x="86.6313%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="86.4462%" y="821" width="0.0649%" height="15" fill="rgb(242,72,42)" fg:x="1333" fg:w="1"/><text x="86.6962%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="86.4462%" y="805" width="0.0649%" height="15" fill="rgb(232,145,44)" fg:x="1333" fg:w="1"/><text x="86.6962%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.4462%" y="789" width="0.0649%" height="15" fill="rgb(205,108,43)" fg:x="1333" fg:w="1"/><text x="86.6962%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.4462%" y="773" width="0.0649%" height="15" fill="rgb(215,190,17)" fg:x="1333" fg:w="1"/><text x="86.6962%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.4462%" y="757" width="0.0649%" height="15" fill="rgb(223,90,34)" fg:x="1333" fg:w="1"/><text x="86.6962%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="86.4462%" y="885" width="0.1297%" height="15" fill="rgb(216,25,0)" fg:x="1333" fg:w="2"/><text x="86.6962%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="86.4462%" y="869" width="0.1297%" height="15" fill="rgb(223,51,28)" fg:x="1333" fg:w="2"/><text x="86.6962%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="86.4462%" y="853" width="0.1297%" height="15" fill="rgb(227,131,7)" fg:x="1333" fg:w="2"/><text x="86.6962%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="86.4462%" y="837" width="0.1297%" height="15" fill="rgb(216,72,36)" fg:x="1333" fg:w="2"/><text x="86.6962%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="86.5110%" y="821" width="0.0649%" height="15" fill="rgb(243,158,40)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="86.5110%" y="805" width="0.0649%" height="15" fill="rgb(218,60,54)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="86.5110%" y="789" width="0.0649%" height="15" fill="rgb(230,15,46)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="799.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="86.5110%" y="773" width="0.0649%" height="15" fill="rgb(250,22,26)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="86.5110%" y="757" width="0.0649%" height="15" fill="rgb(239,194,40)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="86.5110%" y="741" width="0.0649%" height="15" fill="rgb(219,62,9)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="86.5110%" y="725" width="0.0649%" height="15" fill="rgb(228,45,21)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="735.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="86.5110%" y="709" width="0.0649%" height="15" fill="rgb(242,56,44)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="719.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="86.5110%" y="693" width="0.0649%" height="15" fill="rgb(239,170,14)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="86.5110%" y="677" width="0.0649%" height="15" fill="rgb(236,150,13)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="86.5110%" y="661" width="0.0649%" height="15" fill="rgb(228,15,30)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="86.5110%" y="645" width="0.0649%" height="15" fill="rgb(217,43,28)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.5110%" y="629" width="0.0649%" height="15" fill="rgb(246,223,1)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.5110%" y="613" width="0.0649%" height="15" fill="rgb(247,103,7)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.5110%" y="597" width="0.0649%" height="15" fill="rgb(205,105,39)" fg:x="1334" fg:w="1"/><text x="86.7610%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (3 samples, 0.19%)</title><rect x="86.4462%" y="949" width="0.1946%" height="15" fill="rgb(216,134,18)" fg:x="1333" fg:w="3"/><text x="86.6962%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (3 samples, 0.19%)</title><rect x="86.4462%" y="933" width="0.1946%" height="15" fill="rgb(226,139,50)" fg:x="1333" fg:w="3"/><text x="86.6962%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (3 samples, 0.19%)</title><rect x="86.4462%" y="917" width="0.1946%" height="15" fill="rgb(251,152,38)" fg:x="1333" fg:w="3"/><text x="86.6962%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (3 samples, 0.19%)</title><rect x="86.4462%" y="901" width="0.1946%" height="15" fill="rgb(222,63,15)" fg:x="1333" fg:w="3"/><text x="86.6962%" y="911.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="86.5759%" y="885" width="0.0649%" height="15" fill="rgb(212,198,28)" fg:x="1335" fg:w="1"/><text x="86.8259%" y="895.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="86.5759%" y="869" width="0.0649%" height="15" fill="rgb(216,93,38)" fg:x="1335" fg:w="1"/><text x="86.8259%" y="879.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="86.5759%" y="853" width="0.0649%" height="15" fill="rgb(247,202,44)" fg:x="1335" fg:w="1"/><text x="86.8259%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.5759%" y="837" width="0.0649%" height="15" fill="rgb(237,204,46)" fg:x="1335" fg:w="1"/><text x="86.8259%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.5759%" y="821" width="0.0649%" height="15" fill="rgb(224,98,48)" fg:x="1335" fg:w="1"/><text x="86.8259%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.5759%" y="805" width="0.0649%" height="15" fill="rgb(247,105,21)" fg:x="1335" fg:w="1"/><text x="86.8259%" y="815.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="86.6407%" y="869" width="0.0649%" height="15" fill="rgb(212,137,52)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="86.6407%" y="853" width="0.0649%" height="15" fill="rgb(223,76,33)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="863.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="86.6407%" y="837" width="0.0649%" height="15" fill="rgb(209,156,27)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="847.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="86.6407%" y="821" width="0.0649%" height="15" fill="rgb(249,81,54)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="831.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="86.6407%" y="805" width="0.0649%" height="15" fill="rgb(241,46,29)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="815.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="86.6407%" y="789" width="0.0649%" height="15" fill="rgb(213,193,39)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.6407%" y="773" width="0.0649%" height="15" fill="rgb(214,85,16)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.6407%" y="757" width="0.0649%" height="15" fill="rgb(216,184,17)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.6407%" y="741" width="0.0649%" height="15" fill="rgb(254,219,29)" fg:x="1336" fg:w="1"/><text x="86.8907%" y="751.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="86.6407%" y="933" width="0.1297%" height="15" fill="rgb(209,148,34)" fg:x="1336" fg:w="2"/><text x="86.8907%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="86.6407%" y="917" width="0.1297%" height="15" fill="rgb(253,215,11)" fg:x="1336" fg:w="2"/><text x="86.8907%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="86.6407%" y="901" width="0.1297%" height="15" fill="rgb(232,126,20)" fg:x="1336" fg:w="2"/><text x="86.8907%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="86.6407%" y="885" width="0.1297%" height="15" fill="rgb(248,118,51)" fg:x="1336" fg:w="2"/><text x="86.8907%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="86.7056%" y="869" width="0.0649%" height="15" fill="rgb(226,121,21)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="86.7056%" y="853" width="0.0649%" height="15" fill="rgb(216,128,16)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="86.7056%" y="837" width="0.0649%" height="15" fill="rgb(205,17,9)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="86.7056%" y="821" width="0.0649%" height="15" fill="rgb(206,197,21)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.7056%" y="805" width="0.0649%" height="15" fill="rgb(212,202,9)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.7056%" y="789" width="0.0649%" height="15" fill="rgb(241,131,50)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.7056%" y="773" width="0.0649%" height="15" fill="rgb(228,115,51)" fg:x="1337" fg:w="1"/><text x="86.9556%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="86.7704%" y="917" width="0.0649%" height="15" fill="rgb(237,209,8)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="86.7704%" y="901" width="0.0649%" height="15" fill="rgb(241,121,28)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="86.7704%" y="885" width="0.0649%" height="15" fill="rgb(238,194,51)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="86.7704%" y="869" width="0.0649%" height="15" fill="rgb(208,41,39)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="86.7704%" y="853" width="0.0649%" height="15" fill="rgb(223,95,44)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="86.7704%" y="837" width="0.0649%" height="15" fill="rgb(253,98,40)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="86.7704%" y="821" width="0.0649%" height="15" fill="rgb(210,5,12)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="86.7704%" y="805" width="0.0649%" height="15" fill="rgb(233,201,23)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="86.7704%" y="789" width="0.0649%" height="15" fill="rgb(251,68,15)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="86.7704%" y="773" width="0.0649%" height="15" fill="rgb(243,10,46)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="86.7704%" y="757" width="0.0649%" height="15" fill="rgb(253,130,44)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="86.7704%" y="741" width="0.0649%" height="15" fill="rgb(244,5,26)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="86.7704%" y="725" width="0.0649%" height="15" fill="rgb(220,126,20)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="86.7704%" y="709" width="0.0649%" height="15" fill="rgb(212,188,29)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="86.7704%" y="693" width="0.0649%" height="15" fill="rgb(227,194,48)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.7704%" y="677" width="0.0649%" height="15" fill="rgb(245,64,28)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.7704%" y="661" width="0.0649%" height="15" fill="rgb(205,44,7)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.7704%" y="645" width="0.0649%" height="15" fill="rgb(213,193,11)" fg:x="1338" fg:w="1"/><text x="87.0204%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="86.8353%" y="901" width="0.0649%" height="15" fill="rgb(238,157,6)" fg:x="1339" fg:w="1"/><text x="87.0853%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.8353%" y="885" width="0.0649%" height="15" fill="rgb(222,73,7)" fg:x="1339" fg:w="1"/><text x="87.0853%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.8353%" y="869" width="0.0649%" height="15" fill="rgb(224,78,15)" fg:x="1339" fg:w="1"/><text x="87.0853%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.8353%" y="853" width="0.0649%" height="15" fill="rgb(218,149,46)" fg:x="1339" fg:w="1"/><text x="87.0853%" y="863.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="86.9001%" y="901" width="0.0649%" height="15" fill="rgb(218,175,44)" fg:x="1340" fg:w="1"/><text x="87.1501%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="86.9001%" y="885" width="0.0649%" height="15" fill="rgb(215,183,45)" fg:x="1340" fg:w="1"/><text x="87.1501%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.9001%" y="869" width="0.0649%" height="15" fill="rgb(226,116,37)" fg:x="1340" fg:w="1"/><text x="87.1501%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.9001%" y="853" width="0.0649%" height="15" fill="rgb(252,224,12)" fg:x="1340" fg:w="1"/><text x="87.1501%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.9001%" y="837" width="0.0649%" height="15" fill="rgb(232,212,21)" fg:x="1340" fg:w="1"/><text x="87.1501%" y="847.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (6 samples, 0.39%)</title><rect x="86.6407%" y="949" width="0.3891%" height="15" fill="rgb(226,191,16)" fg:x="1336" fg:w="6"/><text x="86.8907%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="86.7704%" y="933" width="0.2594%" height="15" fill="rgb(231,156,11)" fg:x="1338" fg:w="4"/><text x="87.0204%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (3 samples, 0.19%)</title><rect x="86.8353%" y="917" width="0.1946%" height="15" fill="rgb(225,134,49)" fg:x="1339" fg:w="3"/><text x="87.0853%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="86.9650%" y="901" width="0.0649%" height="15" fill="rgb(254,55,32)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="86.9650%" y="885" width="0.0649%" height="15" fill="rgb(242,195,29)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="86.9650%" y="869" width="0.0649%" height="15" fill="rgb(210,155,20)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="86.9650%" y="853" width="0.0649%" height="15" fill="rgb(243,170,23)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="86.9650%" y="837" width="0.0649%" height="15" fill="rgb(242,197,51)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="86.9650%" y="821" width="0.0649%" height="15" fill="rgb(248,48,13)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="86.9650%" y="805" width="0.0649%" height="15" fill="rgb(221,185,15)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="815.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="86.9650%" y="789" width="0.0649%" height="15" fill="rgb(244,49,7)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="86.9650%" y="773" width="0.0649%" height="15" fill="rgb(213,182,52)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="86.9650%" y="757" width="0.0649%" height="15" fill="rgb(209,15,45)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="86.9650%" y="741" width="0.0649%" height="15" fill="rgb(233,23,44)" fg:x="1341" fg:w="1"/><text x="87.2150%" y="751.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="87.0298%" y="917" width="0.0649%" height="15" fill="rgb(220,182,30)" fg:x="1342" fg:w="1"/><text x="87.2798%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.0298%" y="901" width="0.0649%" height="15" fill="rgb(219,116,33)" fg:x="1342" fg:w="1"/><text x="87.2798%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.0298%" y="885" width="0.0649%" height="15" fill="rgb(231,15,21)" fg:x="1342" fg:w="1"/><text x="87.2798%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.0298%" y="869" width="0.0649%" height="15" fill="rgb(238,119,25)" fg:x="1342" fg:w="1"/><text x="87.2798%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (2 samples, 0.13%)</title><rect x="87.0298%" y="949" width="0.1297%" height="15" fill="rgb(232,30,39)" fg:x="1342" fg:w="2"/><text x="87.2798%" y="959.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="87.0298%" y="933" width="0.1297%" height="15" fill="rgb(241,26,30)" fg:x="1342" fg:w="2"/><text x="87.2798%" y="943.50"></text></g><g><title>redb::types::TypeName::from_bytes (1 samples, 0.06%)</title><rect x="87.0947%" y="917" width="0.0649%" height="15" fill="rgb(234,154,4)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="927.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.06%)</title><rect x="87.0947%" y="901" width="0.0649%" height="15" fill="rgb(229,199,39)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="911.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.06%)</title><rect x="87.0947%" y="885" width="0.0649%" height="15" fill="rgb(236,213,10)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.06%)</title><rect x="87.0947%" y="869" width="0.0649%" height="15" fill="rgb(247,28,19)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="879.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.06%)</title><rect x="87.0947%" y="853" width="0.0649%" height="15" fill="rgb(239,199,24)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.06%)</title><rect x="87.0947%" y="837" width="0.0649%" height="15" fill="rgb(246,122,13)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="87.0947%" y="821" width="0.0649%" height="15" fill="rgb(210,203,29)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="87.0947%" y="805" width="0.0649%" height="15" fill="rgb(218,4,50)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="87.0947%" y="789" width="0.0649%" height="15" fill="rgb(236,142,48)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="87.0947%" y="773" width="0.0649%" height="15" fill="rgb(245,173,2)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="87.0947%" y="757" width="0.0649%" height="15" fill="rgb(244,196,18)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="87.0947%" y="741" width="0.0649%" height="15" fill="rgb(221,27,33)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="87.0947%" y="725" width="0.0649%" height="15" fill="rgb(210,206,16)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="87.0947%" y="709" width="0.0649%" height="15" fill="rgb(238,161,34)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="719.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="87.0947%" y="693" width="0.0649%" height="15" fill="rgb(243,118,39)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.0947%" y="677" width="0.0649%" height="15" fill="rgb(234,126,9)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.0947%" y="661" width="0.0649%" height="15" fill="rgb(234,167,42)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.0947%" y="645" width="0.0649%" height="15" fill="rgb(238,54,48)" fg:x="1343" fg:w="1"/><text x="87.3447%" y="655.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (20 samples, 1.30%)</title><rect x="85.9274%" y="997" width="1.2970%" height="15" fill="rgb(226,105,2)" fg:x="1325" fg:w="20"/><text x="86.1774%" y="1007.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (12 samples, 0.78%)</title><rect x="86.4462%" y="981" width="0.7782%" height="15" fill="rgb(223,95,23)" fg:x="1333" fg:w="12"/><text x="86.6962%" y="991.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (12 samples, 0.78%)</title><rect x="86.4462%" y="965" width="0.7782%" height="15" fill="rgb(249,212,19)" fg:x="1333" fg:w="12"/><text x="86.6962%" y="975.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match_untyped (1 samples, 0.06%)</title><rect x="87.1595%" y="949" width="0.0649%" height="15" fill="rgb(234,158,54)" fg:x="1344" fg:w="1"/><text x="87.4095%" y="959.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.1595%" y="933" width="0.0649%" height="15" fill="rgb(247,114,32)" fg:x="1344" fg:w="1"/><text x="87.4095%" y="943.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.1595%" y="917" width="0.0649%" height="15" fill="rgb(250,68,44)" fg:x="1344" fg:w="1"/><text x="87.4095%" y="927.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.1595%" y="901" width="0.0649%" height="15" fill="rgb(242,3,15)" fg:x="1344" fg:w="1"/><text x="87.4095%" y="911.50"></text></g><g><title>utxo::Utxo::all (99 samples, 6.42%)</title><rect x="80.8690%" y="1061" width="6.4202%" height="15" fill="rgb(223,110,32)" fg:x="1247" fg:w="99"/><text x="81.1190%" y="1071.50">utxo::Ut..</text></g><g><title>utxo::Utxo::compose (99 samples, 6.42%)</title><rect x="80.8690%" y="1045" width="6.4202%" height="15" fill="rgb(216,26,54)" fg:x="1247" fg:w="99"/><text x="81.1190%" y="1055.50">utxo::Ut..</text></g><g><title>utxo::Asset::range (85 samples, 5.51%)</title><rect x="81.7769%" y="1029" width="5.5123%" height="15" fill="rgb(209,145,42)" fg:x="1261" fg:w="85"/><text x="82.0269%" y="1039.50">utxo::A..</text></g><g><title>utxo::Asset::compose (74 samples, 4.80%)</title><rect x="82.4903%" y="1013" width="4.7990%" height="15" fill="rgb(240,111,53)" fg:x="1272" fg:w="74"/><text x="82.7403%" y="1023.50">utxo::..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="87.2244%" y="997" width="0.0649%" height="15" fill="rgb(209,101,4)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="1007.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="87.2244%" y="981" width="0.0649%" height="15" fill="rgb(231,74,29)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="991.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="965" width="0.0649%" height="15" fill="rgb(223,12,12)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="975.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="949" width="0.0649%" height="15" fill="rgb(207,162,2)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="959.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="87.2244%" y="933" width="0.0649%" height="15" fill="rgb(230,152,0)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="943.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="917" width="0.0649%" height="15" fill="rgb(254,156,19)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="901" width="0.0649%" height="15" fill="rgb(250,28,0)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="87.2244%" y="885" width="0.0649%" height="15" fill="rgb(253,27,5)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="87.2244%" y="869" width="0.0649%" height="15" fill="rgb(244,154,7)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="879.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="87.2244%" y="853" width="0.0649%" height="15" fill="rgb(242,108,21)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="863.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="87.2244%" y="837" width="0.0649%" height="15" fill="rgb(254,200,38)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="847.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="87.2244%" y="821" width="0.0649%" height="15" fill="rgb(250,145,41)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="805" width="0.0649%" height="15" fill="rgb(235,136,31)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="789" width="0.0649%" height="15" fill="rgb(215,13,18)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="87.2244%" y="773" width="0.0649%" height="15" fill="rgb(238,199,12)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="87.2244%" y="757" width="0.0649%" height="15" fill="rgb(242,179,49)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="87.2244%" y="741" width="0.0649%" height="15" fill="rgb(214,10,44)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="87.2244%" y="725" width="0.0649%" height="15" fill="rgb(229,181,11)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="87.2244%" y="709" width="0.0649%" height="15" fill="rgb(244,155,10)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="693" width="0.0649%" height="15" fill="rgb(254,13,48)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="677" width="0.0649%" height="15" fill="rgb(210,164,6)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="87.2244%" y="661" width="0.0649%" height="15" fill="rgb(216,187,40)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="87.2244%" y="645" width="0.0649%" height="15" fill="rgb(208,143,21)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="87.2244%" y="629" width="0.0649%" height="15" fill="rgb(211,73,41)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="87.2244%" y="613" width="0.0649%" height="15" fill="rgb(244,69,21)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="87.2244%" y="597" width="0.0649%" height="15" fill="rgb(230,152,32)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="581" width="0.0649%" height="15" fill="rgb(208,110,18)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.2244%" y="565" width="0.0649%" height="15" fill="rgb(214,201,49)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="87.2244%" y="549" width="0.0649%" height="15" fill="rgb(253,153,27)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="559.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="87.2244%" y="533" width="0.0649%" height="15" fill="rgb(238,61,11)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="87.2244%" y="517" width="0.0649%" height="15" fill="rgb(227,84,2)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="527.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="87.2244%" y="501" width="0.0649%" height="15" fill="rgb(233,52,8)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="87.2244%" y="485" width="0.0649%" height="15" fill="rgb(209,136,13)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="87.2244%" y="469" width="0.0649%" height="15" fill="rgb(229,86,25)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.2244%" y="453" width="0.0649%" height="15" fill="rgb(235,47,16)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.2244%" y="437" width="0.0649%" height="15" fill="rgb(231,186,4)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.2244%" y="421" width="0.0649%" height="15" fill="rgb(209,213,23)" fg:x="1345" fg:w="1"/><text x="87.4744%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.2892%" y="1013" width="0.0649%" height="15" fill="rgb(212,142,47)" fg:x="1346" fg:w="1"/><text x="87.5392%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.2892%" y="997" width="0.0649%" height="15" fill="rgb(251,86,24)" fg:x="1346" fg:w="1"/><text x="87.5392%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.2892%" y="981" width="0.0649%" height="15" fill="rgb(206,217,17)" fg:x="1346" fg:w="1"/><text x="87.5392%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="87.3541%" y="1013" width="0.0649%" height="15" fill="rgb(248,92,38)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="87.3541%" y="997" width="0.0649%" height="15" fill="rgb(214,25,29)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="1007.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="87.3541%" y="981" width="0.0649%" height="15" fill="rgb(245,117,13)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="87.3541%" y="965" width="0.0649%" height="15" fill="rgb(205,169,9)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.3541%" y="949" width="0.0649%" height="15" fill="rgb(223,134,38)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.3541%" y="933" width="0.0649%" height="15" fill="rgb(249,129,49)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="87.3541%" y="917" width="0.0649%" height="15" fill="rgb(229,157,45)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.3541%" y="901" width="0.0649%" height="15" fill="rgb(232,159,11)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="87.3541%" y="885" width="0.0649%" height="15" fill="rgb(230,134,26)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="87.3541%" y="869" width="0.0649%" height="15" fill="rgb(234,149,40)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="879.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="87.3541%" y="853" width="0.0649%" height="15" fill="rgb(221,122,15)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="863.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="87.3541%" y="837" width="0.0649%" height="15" fill="rgb(228,127,0)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.3541%" y="821" width="0.0649%" height="15" fill="rgb(248,37,7)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.3541%" y="805" width="0.0649%" height="15" fill="rgb(215,140,49)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.3541%" y="789" width="0.0649%" height="15" fill="rgb(236,65,39)" fg:x="1347" fg:w="1"/><text x="87.6041%" y="799.50"></text></g><g><title>&lt;redb::multimap_table::MultimapValue&lt;V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.19%)</title><rect x="87.2892%" y="1045" width="0.1946%" height="15" fill="rgb(253,102,38)" fg:x="1346" fg:w="3"/><text x="87.5392%" y="1055.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.19%)</title><rect x="87.2892%" y="1029" width="0.1946%" height="15" fill="rgb(244,100,34)" fg:x="1346" fg:w="3"/><text x="87.5392%" y="1039.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (1 samples, 0.06%)</title><rect x="87.4189%" y="1013" width="0.0649%" height="15" fill="rgb(210,179,47)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="87.4189%" y="997" width="0.0649%" height="15" fill="rgb(231,41,37)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="1007.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.4189%" y="981" width="0.0649%" height="15" fill="rgb(226,209,17)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.4189%" y="965" width="0.0649%" height="15" fill="rgb(231,154,20)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="87.4189%" y="949" width="0.0649%" height="15" fill="rgb(216,134,24)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="87.4189%" y="933" width="0.0649%" height="15" fill="rgb(224,71,42)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="87.4189%" y="917" width="0.0649%" height="15" fill="rgb(250,65,23)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="87.4189%" y="901" width="0.0649%" height="15" fill="rgb(209,160,35)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="87.4189%" y="885" width="0.0649%" height="15" fill="rgb(215,8,11)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="87.4189%" y="869" width="0.0649%" height="15" fill="rgb(227,27,12)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="879.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="87.4189%" y="853" width="0.0649%" height="15" fill="rgb(226,111,41)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="87.4189%" y="837" width="0.0649%" height="15" fill="rgb(212,195,15)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="87.4189%" y="821" width="0.0649%" height="15" fill="rgb(216,191,17)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.4189%" y="805" width="0.0649%" height="15" fill="rgb(215,57,44)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.4189%" y="789" width="0.0649%" height="15" fill="rgb(209,38,4)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.4189%" y="773" width="0.0649%" height="15" fill="rgb(238,49,31)" fg:x="1348" fg:w="1"/><text x="87.6689%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="87.4838%" y="1045" width="0.0649%" height="15" fill="rgb(219,48,39)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="1055.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="87.4838%" y="1029" width="0.0649%" height="15" fill="rgb(252,223,43)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="1039.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="87.4838%" y="1013" width="0.0649%" height="15" fill="rgb(247,205,46)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="1023.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="87.4838%" y="997" width="0.0649%" height="15" fill="rgb(231,16,40)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="1007.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="87.4838%" y="981" width="0.0649%" height="15" fill="rgb(231,115,5)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.4838%" y="965" width="0.0649%" height="15" fill="rgb(206,127,43)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="975.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.4838%" y="949" width="0.0649%" height="15" fill="rgb(218,101,9)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="959.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="87.4838%" y="933" width="0.0649%" height="15" fill="rgb(235,138,50)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="87.4838%" y="917" width="0.0649%" height="15" fill="rgb(214,197,52)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="927.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="87.4838%" y="901" width="0.0649%" height="15" fill="rgb(230,80,19)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="911.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="87.4838%" y="885" width="0.0649%" height="15" fill="rgb(224,77,16)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="895.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="87.4838%" y="869" width="0.0649%" height="15" fill="rgb(246,4,13)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.4838%" y="853" width="0.0649%" height="15" fill="rgb(220,177,26)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="87.4838%" y="837" width="0.0649%" height="15" fill="rgb(215,114,45)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="87.4838%" y="821" width="0.0649%" height="15" fill="rgb(215,71,54)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="87.4838%" y="805" width="0.0649%" height="15" fill="rgb(211,155,22)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="87.4838%" y="789" width="0.0649%" height="15" fill="rgb(245,206,18)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="87.4838%" y="773" width="0.0649%" height="15" fill="rgb(248,216,48)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="87.4838%" y="757" width="0.0649%" height="15" fill="rgb(244,84,45)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.4838%" y="741" width="0.0649%" height="15" fill="rgb(245,13,45)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.4838%" y="725" width="0.0649%" height="15" fill="rgb(247,163,2)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.4838%" y="709" width="0.0649%" height="15" fill="rgb(211,175,10)" fg:x="1349" fg:w="1"/><text x="87.7338%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="87.5486%" y="1029" width="0.0649%" height="15" fill="rgb(215,186,31)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="87.5486%" y="1013" width="0.0649%" height="15" fill="rgb(207,42,11)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="87.5486%" y="997" width="0.0649%" height="15" fill="rgb(224,197,20)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="87.5486%" y="981" width="0.0649%" height="15" fill="rgb(244,119,36)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.5486%" y="965" width="0.0649%" height="15" fill="rgb(250,60,27)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.5486%" y="949" width="0.0649%" height="15" fill="rgb(252,202,1)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="87.5486%" y="933" width="0.0649%" height="15" fill="rgb(206,53,25)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.5486%" y="917" width="0.0649%" height="15" fill="rgb(210,88,4)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="87.5486%" y="901" width="0.0649%" height="15" fill="rgb(211,144,28)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="87.5486%" y="885" width="0.0649%" height="15" fill="rgb(247,81,32)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="895.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="87.5486%" y="869" width="0.0649%" height="15" fill="rgb(225,192,11)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="879.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="87.5486%" y="853" width="0.0649%" height="15" fill="rgb(232,212,27)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.5486%" y="837" width="0.0649%" height="15" fill="rgb(239,3,29)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.5486%" y="821" width="0.0649%" height="15" fill="rgb(252,225,29)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.5486%" y="805" width="0.0649%" height="15" fill="rgb(205,151,9)" fg:x="1350" fg:w="1"/><text x="87.7986%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="87.6135%" y="997" width="0.0649%" height="15" fill="rgb(216,171,47)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="1007.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.6135%" y="981" width="0.0649%" height="15" fill="rgb(206,181,1)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="87.6135%" y="965" width="0.0649%" height="15" fill="rgb(232,218,10)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="87.6135%" y="949" width="0.0649%" height="15" fill="rgb(244,222,51)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="87.6135%" y="933" width="0.0649%" height="15" fill="rgb(252,215,16)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="87.6135%" y="917" width="0.0649%" height="15" fill="rgb(212,130,13)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="87.6135%" y="901" width="0.0649%" height="15" fill="rgb(227,103,37)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="911.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="87.6135%" y="885" width="0.0649%" height="15" fill="rgb(249,48,15)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="87.6135%" y="869" width="0.0649%" height="15" fill="rgb(225,96,9)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="879.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="87.6135%" y="853" width="0.0649%" height="15" fill="rgb(213,81,41)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="87.6135%" y="837" width="0.0649%" height="15" fill="rgb(230,15,12)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="87.6135%" y="821" width="0.0649%" height="15" fill="rgb(218,106,37)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="87.6135%" y="805" width="0.0649%" height="15" fill="rgb(223,172,47)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="815.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="87.6135%" y="789" width="0.0649%" height="15" fill="rgb(246,180,49)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="87.6135%" y="773" width="0.0649%" height="15" fill="rgb(231,63,37)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.6135%" y="757" width="0.0649%" height="15" fill="rgb(235,70,40)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.6135%" y="741" width="0.0649%" height="15" fill="rgb(250,54,26)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.6135%" y="725" width="0.0649%" height="15" fill="rgb(214,190,1)" fg:x="1351" fg:w="1"/><text x="87.8635%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.06%)</title><rect x="87.6783%" y="949" width="0.0649%" height="15" fill="rgb(212,40,35)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="87.6783%" y="933" width="0.0649%" height="15" fill="rgb(239,183,47)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="87.6783%" y="917" width="0.0649%" height="15" fill="rgb(211,171,49)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="87.6783%" y="901" width="0.0649%" height="15" fill="rgb(249,186,27)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (1 samples, 0.06%)</title><rect x="87.6783%" y="885" width="0.0649%" height="15" fill="rgb(223,23,48)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="895.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.06%)</title><rect x="87.6783%" y="869" width="0.0649%" height="15" fill="rgb(209,203,21)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.6783%" y="853" width="0.0649%" height="15" fill="rgb(229,33,27)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.6783%" y="837" width="0.0649%" height="15" fill="rgb(207,8,53)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.6783%" y="821" width="0.0649%" height="15" fill="rgb(221,42,0)" fg:x="1352" fg:w="1"/><text x="87.9283%" y="831.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="87.6783%" y="997" width="0.1297%" height="15" fill="rgb(223,115,3)" fg:x="1352" fg:w="2"/><text x="87.9283%" y="1007.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="87.6783%" y="981" width="0.1297%" height="15" fill="rgb(239,35,26)" fg:x="1352" fg:w="2"/><text x="87.9283%" y="991.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="87.6783%" y="965" width="0.1297%" height="15" fill="rgb(233,22,9)" fg:x="1352" fg:w="2"/><text x="87.9283%" y="975.50"></text></g><g><title>bincode::internal::serialize_into (1 samples, 0.06%)</title><rect x="87.7432%" y="949" width="0.0649%" height="15" fill="rgb(236,221,48)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="959.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="87.7432%" y="933" width="0.0649%" height="15" fill="rgb(235,52,30)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="943.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="87.7432%" y="917" width="0.0649%" height="15" fill="rgb(238,133,51)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="87.7432%" y="901" width="0.0649%" height="15" fill="rgb(213,122,23)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="87.7432%" y="885" width="0.0649%" height="15" fill="rgb(225,8,15)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="87.7432%" y="869" width="0.0649%" height="15" fill="rgb(219,126,35)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="87.7432%" y="853" width="0.0649%" height="15" fill="rgb(246,113,21)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="863.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="87.7432%" y="837" width="0.0649%" height="15" fill="rgb(241,193,32)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="87.7432%" y="821" width="0.0649%" height="15" fill="rgb(218,99,18)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="831.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="87.7432%" y="805" width="0.0649%" height="15" fill="rgb(225,114,4)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="815.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="87.7432%" y="789" width="0.0649%" height="15" fill="rgb(235,0,15)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="799.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="87.7432%" y="773" width="0.0649%" height="15" fill="rgb(247,45,27)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.7432%" y="757" width="0.0649%" height="15" fill="rgb(249,88,53)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.7432%" y="741" width="0.0649%" height="15" fill="rgb(207,58,45)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.7432%" y="725" width="0.0649%" height="15" fill="rgb(216,7,11)" fg:x="1353" fg:w="1"/><text x="87.9932%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="87.8080%" y="501" width="0.0649%" height="15" fill="rgb(230,40,33)" fg:x="1354" fg:w="1"/><text x="88.0580%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.8080%" y="485" width="0.0649%" height="15" fill="rgb(232,24,46)" fg:x="1354" fg:w="1"/><text x="88.0580%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.8080%" y="469" width="0.0649%" height="15" fill="rgb(219,222,45)" fg:x="1354" fg:w="1"/><text x="88.0580%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.8080%" y="453" width="0.0649%" height="15" fill="rgb(229,85,44)" fg:x="1354" fg:w="1"/><text x="88.0580%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="87.8080%" y="613" width="0.1297%" height="15" fill="rgb(243,71,36)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="87.8080%" y="597" width="0.1297%" height="15" fill="rgb(230,203,45)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="87.8080%" y="581" width="0.1297%" height="15" fill="rgb(224,77,49)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="87.8080%" y="565" width="0.1297%" height="15" fill="rgb(210,186,47)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="87.8080%" y="549" width="0.1297%" height="15" fill="rgb(232,146,10)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="87.8080%" y="533" width="0.1297%" height="15" fill="rgb(236,185,51)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="87.8080%" y="517" width="0.1297%" height="15" fill="rgb(223,206,43)" fg:x="1354" fg:w="2"/><text x="88.0580%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="87.8729%" y="501" width="0.0649%" height="15" fill="rgb(227,212,9)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="87.8729%" y="485" width="0.0649%" height="15" fill="rgb(205,82,3)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="87.8729%" y="469" width="0.0649%" height="15" fill="rgb(214,2,27)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="87.8729%" y="453" width="0.0649%" height="15" fill="rgb(241,37,22)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="87.8729%" y="437" width="0.0649%" height="15" fill="rgb(219,182,1)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="447.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="87.8729%" y="421" width="0.0649%" height="15" fill="rgb(208,224,23)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.8729%" y="405" width="0.0649%" height="15" fill="rgb(219,121,32)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.8729%" y="389" width="0.0649%" height="15" fill="rgb(253,13,40)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.8729%" y="373" width="0.0649%" height="15" fill="rgb(233,6,28)" fg:x="1355" fg:w="1"/><text x="88.1229%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="87.9377%" y="389" width="0.0649%" height="15" fill="rgb(233,73,8)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="87.9377%" y="373" width="0.0649%" height="15" fill="rgb(223,48,27)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="87.9377%" y="357" width="0.0649%" height="15" fill="rgb(231,98,37)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="367.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="87.9377%" y="341" width="0.0649%" height="15" fill="rgb(249,43,32)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="351.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="87.9377%" y="325" width="0.0649%" height="15" fill="rgb(246,184,20)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.06%)</title><rect x="87.9377%" y="309" width="0.0649%" height="15" fill="rgb(251,216,0)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime (1 samples, 0.06%)</title><rect x="87.9377%" y="293" width="0.0649%" height="15" fill="rgb(238,41,42)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="87.9377%" y="277" width="0.0649%" height="15" fill="rgb(227,224,50)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="87.9377%" y="261" width="0.0649%" height="15" fill="rgb(237,189,18)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="87.9377%" y="245" width="0.0649%" height="15" fill="rgb(238,108,6)" fg:x="1356" fg:w="1"/><text x="88.1877%" y="255.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="87.8080%" y="981" width="0.2594%" height="15" fill="rgb(214,197,53)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (4 samples, 0.26%)</title><rect x="87.8080%" y="965" width="0.2594%" height="15" fill="rgb(206,183,15)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="87.8080%" y="949" width="0.2594%" height="15" fill="rgb(208,130,32)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="87.8080%" y="933" width="0.2594%" height="15" fill="rgb(226,128,52)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="87.8080%" y="917" width="0.2594%" height="15" fill="rgb(231,183,21)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="901" width="0.2594%" height="15" fill="rgb(216,8,35)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="911.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="885" width="0.2594%" height="15" fill="rgb(224,221,8)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="87.8080%" y="869" width="0.2594%" height="15" fill="rgb(210,111,33)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="853" width="0.2594%" height="15" fill="rgb(232,211,38)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="837" width="0.2594%" height="15" fill="rgb(216,190,27)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="87.8080%" y="821" width="0.2594%" height="15" fill="rgb(237,215,27)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="87.8080%" y="805" width="0.2594%" height="15" fill="rgb(251,121,39)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="87.8080%" y="789" width="0.2594%" height="15" fill="rgb(244,21,14)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="87.8080%" y="773" width="0.2594%" height="15" fill="rgb(221,192,22)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="87.8080%" y="757" width="0.2594%" height="15" fill="rgb(251,190,28)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="741" width="0.2594%" height="15" fill="rgb(217,4,51)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="725" width="0.2594%" height="15" fill="rgb(215,183,49)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="87.8080%" y="709" width="0.2594%" height="15" fill="rgb(249,28,49)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="87.8080%" y="693" width="0.2594%" height="15" fill="rgb(214,42,20)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="87.8080%" y="677" width="0.2594%" height="15" fill="rgb(222,77,27)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="87.8080%" y="661" width="0.2594%" height="15" fill="rgb(252,198,32)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="87.8080%" y="645" width="0.2594%" height="15" fill="rgb(207,140,50)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="87.8080%" y="629" width="0.2594%" height="15" fill="rgb(251,170,16)" fg:x="1354" fg:w="4"/><text x="88.0580%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="87.9377%" y="613" width="0.1297%" height="15" fill="rgb(249,111,45)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="87.9377%" y="597" width="0.1297%" height="15" fill="rgb(241,99,35)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="87.9377%" y="581" width="0.1297%" height="15" fill="rgb(216,188,17)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="87.9377%" y="565" width="0.1297%" height="15" fill="rgb(254,209,53)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="87.9377%" y="549" width="0.1297%" height="15" fill="rgb(231,105,41)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="87.9377%" y="533" width="0.1297%" height="15" fill="rgb(242,93,23)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="87.9377%" y="517" width="0.1297%" height="15" fill="rgb(218,159,11)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="527.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="87.9377%" y="501" width="0.1297%" height="15" fill="rgb(209,90,32)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="87.9377%" y="485" width="0.1297%" height="15" fill="rgb(253,118,46)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="87.9377%" y="469" width="0.1297%" height="15" fill="rgb(219,121,2)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="87.9377%" y="453" width="0.1297%" height="15" fill="rgb(207,57,47)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="87.9377%" y="437" width="0.1297%" height="15" fill="rgb(235,113,43)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="87.9377%" y="421" width="0.1297%" height="15" fill="rgb(238,30,50)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="87.9377%" y="405" width="0.1297%" height="15" fill="rgb(237,47,29)" fg:x="1356" fg:w="2"/><text x="88.1877%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="88.0026%" y="389" width="0.0649%" height="15" fill="rgb(245,102,24)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="88.0026%" y="373" width="0.0649%" height="15" fill="rgb(245,152,9)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="88.0026%" y="357" width="0.0649%" height="15" fill="rgb(223,213,17)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="88.0026%" y="341" width="0.0649%" height="15" fill="rgb(241,164,4)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="88.0026%" y="325" width="0.0649%" height="15" fill="rgb(205,209,31)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="335.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="88.0026%" y="309" width="0.0649%" height="15" fill="rgb(248,173,2)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="319.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="88.0026%" y="293" width="0.0649%" height="15" fill="rgb(207,67,32)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.0026%" y="277" width="0.0649%" height="15" fill="rgb(239,109,13)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.0026%" y="261" width="0.0649%" height="15" fill="rgb(233,123,24)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.0026%" y="245" width="0.0649%" height="15" fill="rgb(232,120,19)" fg:x="1357" fg:w="1"/><text x="88.2526%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.0674%" y="757" width="0.0649%" height="15" fill="rgb(225,17,50)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="88.0674%" y="741" width="0.0649%" height="15" fill="rgb(239,216,13)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="751.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="88.0674%" y="725" width="0.0649%" height="15" fill="rgb(232,213,26)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="735.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="88.0674%" y="709" width="0.0649%" height="15" fill="rgb(244,59,39)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="719.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="88.0674%" y="693" width="0.0649%" height="15" fill="rgb(234,61,35)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="703.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="88.0674%" y="677" width="0.0649%" height="15" fill="rgb(245,94,24)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="88.0674%" y="661" width="0.0649%" height="15" fill="rgb(238,190,44)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="88.0674%" y="645" width="0.0649%" height="15" fill="rgb(205,145,25)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="655.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="88.0674%" y="629" width="0.0649%" height="15" fill="rgb(229,158,41)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="639.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="88.0674%" y="613" width="0.0649%" height="15" fill="rgb(224,121,5)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="88.0674%" y="597" width="0.0649%" height="15" fill="rgb(238,168,35)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.0674%" y="581" width="0.0649%" height="15" fill="rgb(231,11,42)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.0674%" y="565" width="0.0649%" height="15" fill="rgb(241,105,19)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.0674%" y="549" width="0.0649%" height="15" fill="rgb(253,210,20)" fg:x="1358" fg:w="1"/><text x="88.3174%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.1323%" y="645" width="0.0649%" height="15" fill="rgb(215,72,52)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="88.1323%" y="629" width="0.0649%" height="15" fill="rgb(223,225,30)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="639.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="88.1323%" y="613" width="0.0649%" height="15" fill="rgb(220,138,44)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="623.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="88.1323%" y="597" width="0.0649%" height="15" fill="rgb(206,128,12)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="607.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="88.1323%" y="581" width="0.0649%" height="15" fill="rgb(245,194,0)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="591.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="88.1323%" y="565" width="0.0649%" height="15" fill="rgb(235,175,41)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="575.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="88.1323%" y="549" width="0.0649%" height="15" fill="rgb(216,15,48)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="88.1323%" y="533" width="0.0649%" height="15" fill="rgb(223,179,5)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="88.1323%" y="517" width="0.0649%" height="15" fill="rgb(220,80,15)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="88.1323%" y="501" width="0.0649%" height="15" fill="rgb(228,20,30)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="511.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="88.1323%" y="485" width="0.0649%" height="15" fill="rgb(229,194,27)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="495.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="88.1323%" y="469" width="0.0649%" height="15" fill="rgb(238,202,32)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="479.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="88.1323%" y="453" width="0.0649%" height="15" fill="rgb(207,82,27)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.1323%" y="437" width="0.0649%" height="15" fill="rgb(246,122,46)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.1323%" y="421" width="0.0649%" height="15" fill="rgb(220,101,26)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.1323%" y="405" width="0.0649%" height="15" fill="rgb(251,63,9)" fg:x="1359" fg:w="1"/><text x="88.3823%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="88.0674%" y="885" width="0.1946%" height="15" fill="rgb(235,186,5)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="88.0674%" y="869" width="0.1946%" height="15" fill="rgb(241,139,37)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="88.0674%" y="853" width="0.1946%" height="15" fill="rgb(252,177,51)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="88.0674%" y="837" width="0.1946%" height="15" fill="rgb(214,131,22)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="88.0674%" y="821" width="0.1946%" height="15" fill="rgb(246,53,19)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="88.0674%" y="805" width="0.1946%" height="15" fill="rgb(231,158,27)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="88.0674%" y="789" width="0.1946%" height="15" fill="rgb(226,166,46)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="88.0674%" y="773" width="0.1946%" height="15" fill="rgb(218,178,26)" fg:x="1358" fg:w="3"/><text x="88.3174%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="88.1323%" y="757" width="0.1297%" height="15" fill="rgb(206,25,39)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="88.1323%" y="741" width="0.1297%" height="15" fill="rgb(232,218,41)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="88.1323%" y="725" width="0.1297%" height="15" fill="rgb(212,151,15)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="88.1323%" y="709" width="0.1297%" height="15" fill="rgb(213,49,22)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="88.1323%" y="693" width="0.1297%" height="15" fill="rgb(247,116,21)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="88.1323%" y="677" width="0.1297%" height="15" fill="rgb(248,98,14)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="88.1323%" y="661" width="0.1297%" height="15" fill="rgb(247,72,6)" fg:x="1359" fg:w="2"/><text x="88.3823%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.1971%" y="645" width="0.0649%" height="15" fill="rgb(213,9,22)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="88.1971%" y="629" width="0.0649%" height="15" fill="rgb(213,122,30)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="88.1971%" y="613" width="0.0649%" height="15" fill="rgb(244,11,30)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="88.1971%" y="597" width="0.0649%" height="15" fill="rgb(236,102,26)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.1971%" y="581" width="0.0649%" height="15" fill="rgb(231,166,37)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.1971%" y="565" width="0.0649%" height="15" fill="rgb(220,224,29)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.1971%" y="549" width="0.0649%" height="15" fill="rgb(227,30,40)" fg:x="1360" fg:w="1"/><text x="88.4471%" y="559.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (11 samples, 0.71%)</title><rect x="87.6135%" y="1029" width="0.7134%" height="15" fill="rgb(235,8,36)" fg:x="1351" fg:w="11"/><text x="87.8635%" y="1039.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (11 samples, 0.71%)</title><rect x="87.6135%" y="1013" width="0.7134%" height="15" fill="rgb(232,175,19)" fg:x="1351" fg:w="11"/><text x="87.8635%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (8 samples, 0.52%)</title><rect x="87.8080%" y="997" width="0.5188%" height="15" fill="rgb(217,114,10)" fg:x="1354" fg:w="8"/><text x="88.0580%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (4 samples, 0.26%)</title><rect x="88.0674%" y="981" width="0.2594%" height="15" fill="rgb(214,112,41)" fg:x="1358" fg:w="4"/><text x="88.3174%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="88.0674%" y="965" width="0.2594%" height="15" fill="rgb(226,69,34)" fg:x="1358" fg:w="4"/><text x="88.3174%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="88.0674%" y="949" width="0.2594%" height="15" fill="rgb(219,23,46)" fg:x="1358" fg:w="4"/><text x="88.3174%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="88.0674%" y="933" width="0.2594%" height="15" fill="rgb(233,3,8)" fg:x="1358" fg:w="4"/><text x="88.3174%" y="943.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="88.0674%" y="917" width="0.2594%" height="15" fill="rgb(251,34,42)" fg:x="1358" fg:w="4"/><text x="88.3174%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="88.0674%" y="901" width="0.2594%" height="15" fill="rgb(215,84,9)" fg:x="1358" fg:w="4"/><text x="88.3174%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.2620%" y="885" width="0.0649%" height="15" fill="rgb(231,75,52)" fg:x="1361" fg:w="1"/><text x="88.5120%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.2620%" y="869" width="0.0649%" height="15" fill="rgb(247,201,31)" fg:x="1361" fg:w="1"/><text x="88.5120%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.2620%" y="853" width="0.0649%" height="15" fill="rgb(215,171,37)" fg:x="1361" fg:w="1"/><text x="88.5120%" y="863.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="88.3268%" y="1013" width="0.0649%" height="15" fill="rgb(208,208,44)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="88.3268%" y="997" width="0.0649%" height="15" fill="rgb(247,146,54)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="88.3268%" y="981" width="0.0649%" height="15" fill="rgb(209,0,40)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="88.3268%" y="965" width="0.0649%" height="15" fill="rgb(221,59,4)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="88.3268%" y="949" width="0.0649%" height="15" fill="rgb(227,153,47)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="88.3268%" y="933" width="0.0649%" height="15" fill="rgb(253,225,10)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="88.3268%" y="917" width="0.0649%" height="15" fill="rgb(237,201,24)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="927.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="88.3268%" y="901" width="0.0649%" height="15" fill="rgb(238,23,27)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="911.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="88.3268%" y="885" width="0.0649%" height="15" fill="rgb(236,54,50)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="895.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="88.3268%" y="869" width="0.0649%" height="15" fill="rgb(216,106,0)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="879.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="88.3268%" y="853" width="0.0649%" height="15" fill="rgb(234,179,35)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.3268%" y="837" width="0.0649%" height="15" fill="rgb(210,35,8)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.3268%" y="821" width="0.0649%" height="15" fill="rgb(238,144,16)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.3268%" y="805" width="0.0649%" height="15" fill="rgb(244,54,7)" fg:x="1362" fg:w="1"/><text x="88.5768%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="88.3917%" y="917" width="0.0649%" height="15" fill="rgb(233,225,40)" fg:x="1363" fg:w="1"/><text x="88.6417%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.3917%" y="901" width="0.0649%" height="15" fill="rgb(249,227,23)" fg:x="1363" fg:w="1"/><text x="88.6417%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.3917%" y="885" width="0.0649%" height="15" fill="rgb(215,42,44)" fg:x="1363" fg:w="1"/><text x="88.6417%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.3917%" y="869" width="0.0649%" height="15" fill="rgb(220,145,40)" fg:x="1363" fg:w="1"/><text x="88.6417%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (2 samples, 0.13%)</title><rect x="88.3917%" y="981" width="0.1297%" height="15" fill="rgb(228,218,40)" fg:x="1363" fg:w="2"/><text x="88.6417%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="88.3917%" y="965" width="0.1297%" height="15" fill="rgb(217,52,54)" fg:x="1363" fg:w="2"/><text x="88.6417%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="88.3917%" y="949" width="0.1297%" height="15" fill="rgb(223,90,22)" fg:x="1363" fg:w="2"/><text x="88.6417%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="88.3917%" y="933" width="0.1297%" height="15" fill="rgb(232,114,35)" fg:x="1363" fg:w="2"/><text x="88.6417%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="88.4565%" y="917" width="0.0649%" height="15" fill="rgb(227,223,50)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="88.4565%" y="901" width="0.0649%" height="15" fill="rgb(249,175,7)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="88.4565%" y="885" width="0.0649%" height="15" fill="rgb(249,173,15)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="88.4565%" y="869" width="0.0649%" height="15" fill="rgb(240,131,6)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="88.4565%" y="853" width="0.0649%" height="15" fill="rgb(246,117,16)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="88.4565%" y="837" width="0.0649%" height="15" fill="rgb(209,32,16)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="88.4565%" y="821" width="0.0649%" height="15" fill="rgb(207,45,44)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="88.4565%" y="805" width="0.0649%" height="15" fill="rgb(210,66,3)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="88.4565%" y="789" width="0.0649%" height="15" fill="rgb(246,133,30)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="88.4565%" y="773" width="0.0649%" height="15" fill="rgb(224,37,17)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="88.4565%" y="757" width="0.0649%" height="15" fill="rgb(237,218,18)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="88.4565%" y="741" width="0.0649%" height="15" fill="rgb(240,57,8)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="88.4565%" y="725" width="0.0649%" height="15" fill="rgb(231,51,38)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="88.4565%" y="709" width="0.0649%" height="15" fill="rgb(230,89,50)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="88.4565%" y="693" width="0.0649%" height="15" fill="rgb(234,103,34)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="88.4565%" y="677" width="0.0649%" height="15" fill="rgb(220,45,48)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="687.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="88.4565%" y="661" width="0.0649%" height="15" fill="rgb(250,210,3)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="88.4565%" y="645" width="0.0649%" height="15" fill="rgb(210,118,12)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.4565%" y="629" width="0.0649%" height="15" fill="rgb(238,154,21)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.4565%" y="613" width="0.0649%" height="15" fill="rgb(227,220,4)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.4565%" y="597" width="0.0649%" height="15" fill="rgb(207,179,27)" fg:x="1364" fg:w="1"/><text x="88.7065%" y="607.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (1 samples, 0.06%)</title><rect x="88.5214%" y="949" width="0.0649%" height="15" fill="rgb(240,111,30)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (1 samples, 0.06%)</title><rect x="88.5214%" y="933" width="0.0649%" height="15" fill="rgb(251,29,1)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (1 samples, 0.06%)</title><rect x="88.5214%" y="917" width="0.0649%" height="15" fill="rgb(224,141,39)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="88.5214%" y="901" width="0.0649%" height="15" fill="rgb(207,98,26)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="88.5214%" y="885" width="0.0649%" height="15" fill="rgb(221,37,6)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="88.5214%" y="869" width="0.0649%" height="15" fill="rgb(217,32,44)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="879.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="88.5214%" y="853" width="0.0649%" height="15" fill="rgb(253,149,2)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="863.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="88.5214%" y="837" width="0.0649%" height="15" fill="rgb(220,165,39)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="847.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="88.5214%" y="821" width="0.0649%" height="15" fill="rgb(235,33,48)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.5214%" y="805" width="0.0649%" height="15" fill="rgb(221,89,6)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.5214%" y="789" width="0.0649%" height="15" fill="rgb(215,214,6)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.5214%" y="773" width="0.0649%" height="15" fill="rgb(241,1,30)" fg:x="1365" fg:w="1"/><text x="88.7714%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="88.5863%" y="949" width="0.0649%" height="15" fill="rgb(211,140,32)" fg:x="1366" fg:w="1"/><text x="88.8363%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="88.5863%" y="933" width="0.0649%" height="15" fill="rgb(232,48,21)" fg:x="1366" fg:w="1"/><text x="88.8363%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="88.5863%" y="917" width="0.0649%" height="15" fill="rgb(252,217,9)" fg:x="1366" fg:w="1"/><text x="88.8363%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.5863%" y="901" width="0.0649%" height="15" fill="rgb(206,123,34)" fg:x="1366" fg:w="1"/><text x="88.8363%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.5863%" y="885" width="0.0649%" height="15" fill="rgb(245,161,38)" fg:x="1366" fg:w="1"/><text x="88.8363%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.5863%" y="869" width="0.0649%" height="15" fill="rgb(233,205,7)" fg:x="1366" fg:w="1"/><text x="88.8363%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="88.6511%" y="949" width="0.0649%" height="15" fill="rgb(217,119,18)" fg:x="1367" fg:w="1"/><text x="88.9011%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as redb::tree_store::page_store::base::Page&gt;::memory (1 samples, 0.06%)</title><rect x="88.6511%" y="933" width="0.0649%" height="15" fill="rgb(252,126,3)" fg:x="1367" fg:w="1"/><text x="88.9011%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (1 samples, 0.06%)</title><rect x="88.6511%" y="917" width="0.0649%" height="15" fill="rgb(252,188,15)" fg:x="1367" fg:w="1"/><text x="88.9011%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.6511%" y="901" width="0.0649%" height="15" fill="rgb(228,1,48)" fg:x="1367" fg:w="1"/><text x="88.9011%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.6511%" y="885" width="0.0649%" height="15" fill="rgb(205,187,8)" fg:x="1367" fg:w="1"/><text x="88.9011%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.6511%" y="869" width="0.0649%" height="15" fill="rgb(205,105,50)" fg:x="1367" fg:w="1"/><text x="88.9011%" y="879.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="88.5214%" y="981" width="0.2594%" height="15" fill="rgb(211,31,46)" fg:x="1365" fg:w="4"/><text x="88.7714%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (4 samples, 0.26%)</title><rect x="88.5214%" y="965" width="0.2594%" height="15" fill="rgb(213,126,5)" fg:x="1365" fg:w="4"/><text x="88.7714%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="88.7160%" y="949" width="0.0649%" height="15" fill="rgb(231,87,9)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="959.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="88.7160%" y="933" width="0.0649%" height="15" fill="rgb(219,224,20)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="943.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="88.7160%" y="917" width="0.0649%" height="15" fill="rgb(230,84,21)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="88.7160%" y="901" width="0.0649%" height="15" fill="rgb(224,169,42)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.06%)</title><rect x="88.7160%" y="885" width="0.0649%" height="15" fill="rgb(227,182,13)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.06%)</title><rect x="88.7160%" y="869" width="0.0649%" height="15" fill="rgb(249,57,41)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_hash (1 samples, 0.06%)</title><rect x="88.7160%" y="853" width="0.0649%" height="15" fill="rgb(214,93,52)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.06%)</title><rect x="88.7160%" y="837" width="0.0649%" height="15" fill="rgb(229,161,34)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.7160%" y="821" width="0.0649%" height="15" fill="rgb(227,193,17)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.7160%" y="805" width="0.0649%" height="15" fill="rgb(242,164,46)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.7160%" y="789" width="0.0649%" height="15" fill="rgb(242,142,47)" fg:x="1368" fg:w="1"/><text x="88.9660%" y="799.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (8 samples, 0.52%)</title><rect x="88.3268%" y="1029" width="0.5188%" height="15" fill="rgb(208,23,18)" fg:x="1362" fg:w="8"/><text x="88.5768%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (7 samples, 0.45%)</title><rect x="88.3917%" y="1013" width="0.4540%" height="15" fill="rgb(219,54,38)" fg:x="1363" fg:w="7"/><text x="88.6417%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (7 samples, 0.45%)</title><rect x="88.3917%" y="997" width="0.4540%" height="15" fill="rgb(206,97,35)" fg:x="1363" fg:w="7"/><text x="88.6417%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="88.7808%" y="981" width="0.0649%" height="15" fill="rgb(208,76,8)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="991.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="88.7808%" y="965" width="0.0649%" height="15" fill="rgb(220,92,28)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::BtreeHeader::from_le_bytes (1 samples, 0.06%)</title><rect x="88.7808%" y="949" width="0.0649%" height="15" fill="rgb(209,158,39)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="959.50"></text></g><g><title>redb::tree_store::page_store::base::PageNumber::from_le_bytes (1 samples, 0.06%)</title><rect x="88.7808%" y="933" width="0.0649%" height="15" fill="rgb(238,175,9)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.7808%" y="917" width="0.0649%" height="15" fill="rgb(240,116,17)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.7808%" y="901" width="0.0649%" height="15" fill="rgb(208,7,2)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.7808%" y="885" width="0.0649%" height="15" fill="rgb(252,52,4)" fg:x="1369" fg:w="1"/><text x="89.0308%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;,redb::tree_store::btree_base::AccessGuard&lt;()&gt;)&gt; (1 samples, 0.06%)</title><rect x="88.8457%" y="1013" width="0.0649%" height="15" fill="rgb(222,68,34)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="88.8457%" y="997" width="0.0649%" height="15" fill="rgb(242,154,35)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="88.8457%" y="981" width="0.0649%" height="15" fill="rgb(210,125,54)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="88.8457%" y="965" width="0.0649%" height="15" fill="rgb(247,121,18)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="88.8457%" y="949" width="0.0649%" height="15" fill="rgb(223,48,51)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::transactions::SystemTable&lt;redb::transaction_tracker::SavepointId,redb::tree_store::page_store::savepoint::SerializedSavepoint&gt;&gt; (1 samples, 0.06%)</title><rect x="88.8457%" y="933" width="0.0649%" height="15" fill="rgb(211,156,48)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.8457%" y="917" width="0.0649%" height="15" fill="rgb(236,56,31)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.8457%" y="901" width="0.0649%" height="15" fill="rgb(247,157,52)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.8457%" y="885" width="0.0649%" height="15" fill="rgb(244,121,39)" fg:x="1370" fg:w="1"/><text x="89.0957%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="88.9105%" y="933" width="0.0649%" height="15" fill="rgb(239,4,40)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="88.9105%" y="917" width="0.0649%" height="15" fill="rgb(213,204,45)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="901" width="0.0649%" height="15" fill="rgb(242,107,0)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="911.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="885" width="0.0649%" height="15" fill="rgb(215,152,25)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="88.9105%" y="869" width="0.0649%" height="15" fill="rgb(233,151,6)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="853" width="0.0649%" height="15" fill="rgb(206,126,44)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="837" width="0.0649%" height="15" fill="rgb(209,145,15)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="88.9105%" y="821" width="0.0649%" height="15" fill="rgb(235,214,8)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="88.9105%" y="805" width="0.0649%" height="15" fill="rgb(216,140,51)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="88.9105%" y="789" width="0.0649%" height="15" fill="rgb(213,83,34)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="88.9105%" y="773" width="0.0649%" height="15" fill="rgb(218,186,44)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="88.9105%" y="757" width="0.0649%" height="15" fill="rgb(225,147,10)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="741" width="0.0649%" height="15" fill="rgb(209,214,20)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="725" width="0.0649%" height="15" fill="rgb(252,61,32)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="88.9105%" y="709" width="0.0649%" height="15" fill="rgb(237,204,10)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="88.9105%" y="693" width="0.0649%" height="15" fill="rgb(246,118,16)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="88.9105%" y="677" width="0.0649%" height="15" fill="rgb(214,50,9)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="88.9105%" y="661" width="0.0649%" height="15" fill="rgb(212,41,1)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="88.9105%" y="645" width="0.0649%" height="15" fill="rgb(228,172,32)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="629" width="0.0649%" height="15" fill="rgb(231,85,38)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="88.9105%" y="613" width="0.0649%" height="15" fill="rgb(223,120,31)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="88.9105%" y="597" width="0.0649%" height="15" fill="rgb(254,174,9)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="88.9105%" y="581" width="0.0649%" height="15" fill="rgb(243,197,0)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="88.9105%" y="565" width="0.0649%" height="15" fill="rgb(226,186,17)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="88.9105%" y="549" width="0.0649%" height="15" fill="rgb(229,38,38)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="559.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="88.9105%" y="533" width="0.0649%" height="15" fill="rgb(238,82,14)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="88.9105%" y="517" width="0.0649%" height="15" fill="rgb(230,154,54)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="88.9105%" y="501" width="0.0649%" height="15" fill="rgb(243,84,17)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="511.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="88.9105%" y="485" width="0.0649%" height="15" fill="rgb(226,41,37)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="495.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="88.9105%" y="469" width="0.0649%" height="15" fill="rgb(219,20,18)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.9105%" y="453" width="0.0649%" height="15" fill="rgb(243,173,39)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.9105%" y="437" width="0.0649%" height="15" fill="rgb(245,79,20)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.9105%" y="421" width="0.0649%" height="15" fill="rgb(229,101,45)" fg:x="1371" fg:w="1"/><text x="89.1605%" y="431.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="88.9105%" y="949" width="0.1297%" height="15" fill="rgb(215,123,52)" fg:x="1371" fg:w="2"/><text x="89.1605%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_page (1 samples, 0.06%)</title><rect x="88.9754%" y="933" width="0.0649%" height="15" fill="rgb(215,11,33)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as redb::tree_store::page_store::base::Page&gt;::memory (1 samples, 0.06%)</title><rect x="88.9754%" y="917" width="0.0649%" height="15" fill="rgb(245,105,20)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (1 samples, 0.06%)</title><rect x="88.9754%" y="901" width="0.0649%" height="15" fill="rgb(231,132,30)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="88.9754%" y="885" width="0.0649%" height="15" fill="rgb(224,62,21)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.06%)</title><rect x="88.9754%" y="869" width="0.0649%" height="15" fill="rgb(209,221,38)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.06%)</title><rect x="88.9754%" y="853" width="0.0649%" height="15" fill="rgb(229,200,30)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="88.9754%" y="837" width="0.0649%" height="15" fill="rgb(237,142,41)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="88.9754%" y="821" width="0.0649%" height="15" fill="rgb(238,37,22)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="88.9754%" y="805" width="0.0649%" height="15" fill="rgb(234,182,17)" fg:x="1372" fg:w="1"/><text x="89.2254%" y="815.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.0402%" y="709" width="0.0649%" height="15" fill="rgb(237,58,48)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.0402%" y="693" width="0.0649%" height="15" fill="rgb(226,112,37)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.0402%" y="677" width="0.0649%" height="15" fill="rgb(230,201,20)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="89.0402%" y="661" width="0.0649%" height="15" fill="rgb(252,95,39)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="89.0402%" y="645" width="0.0649%" height="15" fill="rgb(240,150,33)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="655.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="89.0402%" y="629" width="0.0649%" height="15" fill="rgb(208,202,37)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="89.0402%" y="613" width="0.0649%" height="15" fill="rgb(251,37,12)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="89.0402%" y="597" width="0.0649%" height="15" fill="rgb(247,150,26)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.0402%" y="581" width="0.0649%" height="15" fill="rgb(232,28,8)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.0402%" y="565" width="0.0649%" height="15" fill="rgb(226,121,34)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.0402%" y="549" width="0.0649%" height="15" fill="rgb(237,23,13)" fg:x="1373" fg:w="1"/><text x="89.2902%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="89.0402%" y="725" width="0.1297%" height="15" fill="rgb(214,42,29)" fg:x="1373" fg:w="2"/><text x="89.2902%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.1051%" y="709" width="0.0649%" height="15" fill="rgb(246,204,29)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="89.1051%" y="693" width="0.0649%" height="15" fill="rgb(242,28,40)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="89.1051%" y="677" width="0.0649%" height="15" fill="rgb(243,64,49)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="89.1051%" y="661" width="0.0649%" height="15" fill="rgb(226,93,13)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="89.1051%" y="645" width="0.0649%" height="15" fill="rgb(241,113,26)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="89.1051%" y="629" width="0.0649%" height="15" fill="rgb(209,209,0)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.1051%" y="613" width="0.0649%" height="15" fill="rgb(251,183,50)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.1051%" y="597" width="0.0649%" height="15" fill="rgb(248,24,43)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.1051%" y="581" width="0.0649%" height="15" fill="rgb(218,102,9)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="591.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.1051%" y="565" width="0.0649%" height="15" fill="rgb(249,209,39)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="575.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="89.1051%" y="549" width="0.0649%" height="15" fill="rgb(210,37,6)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="559.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="89.1051%" y="533" width="0.0649%" height="15" fill="rgb(212,99,4)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="89.1051%" y="517" width="0.0649%" height="15" fill="rgb(253,59,46)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="89.1051%" y="501" width="0.0649%" height="15" fill="rgb(229,96,9)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="89.1051%" y="485" width="0.0649%" height="15" fill="rgb(207,103,49)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="89.1051%" y="469" width="0.0649%" height="15" fill="rgb(250,226,20)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="89.1051%" y="453" width="0.0649%" height="15" fill="rgb(238,220,11)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.1051%" y="437" width="0.0649%" height="15" fill="rgb(236,74,15)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.1051%" y="421" width="0.0649%" height="15" fill="rgb(218,43,40)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.1051%" y="405" width="0.0649%" height="15" fill="rgb(245,206,37)" fg:x="1374" fg:w="1"/><text x="89.3551%" y="415.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (5 samples, 0.32%)</title><rect x="88.9105%" y="965" width="0.3243%" height="15" fill="rgb(206,30,3)" fg:x="1371" fg:w="5"/><text x="89.1605%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (3 samples, 0.19%)</title><rect x="89.0402%" y="949" width="0.1946%" height="15" fill="rgb(211,29,35)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (3 samples, 0.19%)</title><rect x="89.0402%" y="933" width="0.1946%" height="15" fill="rgb(218,49,50)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="89.0402%" y="917" width="0.1946%" height="15" fill="rgb(211,114,30)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="89.0402%" y="901" width="0.1946%" height="15" fill="rgb(238,70,33)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="89.0402%" y="885" width="0.1946%" height="15" fill="rgb(238,141,50)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="895.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="89.0402%" y="869" width="0.1946%" height="15" fill="rgb(205,69,6)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="89.0402%" y="853" width="0.1946%" height="15" fill="rgb(229,65,0)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="89.0402%" y="837" width="0.1946%" height="15" fill="rgb(211,3,37)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="89.0402%" y="821" width="0.1946%" height="15" fill="rgb(223,196,42)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="89.0402%" y="805" width="0.1946%" height="15" fill="rgb(227,191,15)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="89.0402%" y="789" width="0.1946%" height="15" fill="rgb(229,210,53)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="89.0402%" y="773" width="0.1946%" height="15" fill="rgb(250,203,10)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="89.0402%" y="757" width="0.1946%" height="15" fill="rgb(247,8,37)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="89.0402%" y="741" width="0.1946%" height="15" fill="rgb(240,52,9)" fg:x="1373" fg:w="3"/><text x="89.2902%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.1699%" y="725" width="0.0649%" height="15" fill="rgb(243,100,52)" fg:x="1375" fg:w="1"/><text x="89.4199%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.1699%" y="709" width="0.0649%" height="15" fill="rgb(224,149,30)" fg:x="1375" fg:w="1"/><text x="89.4199%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.1699%" y="693" width="0.0649%" height="15" fill="rgb(232,27,45)" fg:x="1375" fg:w="1"/><text x="89.4199%" y="703.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.2348%" y="725" width="0.0649%" height="15" fill="rgb(242,161,36)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.2348%" y="709" width="0.0649%" height="15" fill="rgb(235,223,32)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.2348%" y="693" width="0.0649%" height="15" fill="rgb(242,78,19)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="89.2348%" y="677" width="0.0649%" height="15" fill="rgb(233,157,47)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="89.2348%" y="661" width="0.0649%" height="15" fill="rgb(251,213,5)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="671.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="89.2348%" y="645" width="0.0649%" height="15" fill="rgb(215,223,5)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="89.2348%" y="629" width="0.0649%" height="15" fill="rgb(230,14,7)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.2348%" y="613" width="0.0649%" height="15" fill="rgb(249,179,20)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.2348%" y="597" width="0.0649%" height="15" fill="rgb(230,204,44)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.2348%" y="581" width="0.0649%" height="15" fill="rgb(233,229,46)" fg:x="1376" fg:w="1"/><text x="89.4848%" y="591.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="89.2348%" y="949" width="0.1297%" height="15" fill="rgb(210,154,35)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="89.2348%" y="933" width="0.1297%" height="15" fill="rgb(220,178,16)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="89.2348%" y="917" width="0.1297%" height="15" fill="rgb(243,0,53)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="89.2348%" y="901" width="0.1297%" height="15" fill="rgb(223,221,47)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="911.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="89.2348%" y="885" width="0.1297%" height="15" fill="rgb(233,82,15)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="89.2348%" y="869" width="0.1297%" height="15" fill="rgb(222,8,38)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="89.2348%" y="853" width="0.1297%" height="15" fill="rgb(241,28,48)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="89.2348%" y="837" width="0.1297%" height="15" fill="rgb(209,227,15)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="89.2348%" y="821" width="0.1297%" height="15" fill="rgb(234,189,48)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="89.2348%" y="805" width="0.1297%" height="15" fill="rgb(212,27,44)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="89.2348%" y="789" width="0.1297%" height="15" fill="rgb(249,55,42)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="89.2348%" y="773" width="0.1297%" height="15" fill="rgb(215,211,28)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="89.2348%" y="757" width="0.1297%" height="15" fill="rgb(221,155,16)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="89.2348%" y="741" width="0.1297%" height="15" fill="rgb(247,106,30)" fg:x="1376" fg:w="2"/><text x="89.4848%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.2996%" y="725" width="0.0649%" height="15" fill="rgb(230,76,31)" fg:x="1377" fg:w="1"/><text x="89.5496%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="89.2996%" y="709" width="0.0649%" height="15" fill="rgb(222,6,48)" fg:x="1377" fg:w="1"/><text x="89.5496%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.2996%" y="693" width="0.0649%" height="15" fill="rgb(228,82,3)" fg:x="1377" fg:w="1"/><text x="89.5496%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.2996%" y="677" width="0.0649%" height="15" fill="rgb(245,208,52)" fg:x="1377" fg:w="1"/><text x="89.5496%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.2996%" y="661" width="0.0649%" height="15" fill="rgb(218,65,17)" fg:x="1377" fg:w="1"/><text x="89.5496%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.3645%" y="725" width="0.0649%" height="15" fill="rgb(242,63,26)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="89.3645%" y="709" width="0.0649%" height="15" fill="rgb(224,119,39)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.3645%" y="693" width="0.0649%" height="15" fill="rgb(229,106,3)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="703.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="89.3645%" y="677" width="0.0649%" height="15" fill="rgb(248,6,33)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="89.3645%" y="661" width="0.0649%" height="15" fill="rgb(226,3,49)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="89.3645%" y="645" width="0.0649%" height="15" fill="rgb(228,142,14)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="89.3645%" y="629" width="0.0649%" height="15" fill="rgb(241,141,54)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="639.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="89.3645%" y="613" width="0.0649%" height="15" fill="rgb(252,17,50)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="89.3645%" y="597" width="0.0649%" height="15" fill="rgb(221,120,48)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="89.3645%" y="581" width="0.0649%" height="15" fill="rgb(229,171,33)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="89.3645%" y="565" width="0.0649%" height="15" fill="rgb(236,207,21)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="575.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="89.3645%" y="549" width="0.0649%" height="15" fill="rgb(218,93,35)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="559.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="89.3645%" y="533" width="0.0649%" height="15" fill="rgb(207,101,8)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="89.3645%" y="517" width="0.0649%" height="15" fill="rgb(237,67,44)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.3645%" y="501" width="0.0649%" height="15" fill="rgb(236,218,7)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.3645%" y="485" width="0.0649%" height="15" fill="rgb(252,207,10)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.3645%" y="469" width="0.0649%" height="15" fill="rgb(221,175,6)" fg:x="1378" fg:w="1"/><text x="89.6145%" y="479.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (9 samples, 0.58%)</title><rect x="88.9105%" y="1013" width="0.5837%" height="15" fill="rgb(230,105,53)" fg:x="1371" fg:w="9"/><text x="89.1605%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (9 samples, 0.58%)</title><rect x="88.9105%" y="997" width="0.5837%" height="15" fill="rgb(253,83,6)" fg:x="1371" fg:w="9"/><text x="89.1605%" y="1007.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (9 samples, 0.58%)</title><rect x="88.9105%" y="981" width="0.5837%" height="15" fill="rgb(206,198,44)" fg:x="1371" fg:w="9"/><text x="89.1605%" y="991.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (4 samples, 0.26%)</title><rect x="89.2348%" y="965" width="0.2594%" height="15" fill="rgb(206,164,29)" fg:x="1376" fg:w="4"/><text x="89.4848%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (2 samples, 0.13%)</title><rect x="89.3645%" y="949" width="0.1297%" height="15" fill="rgb(215,2,50)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="89.3645%" y="933" width="0.1297%" height="15" fill="rgb(246,127,18)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="89.3645%" y="917" width="0.1297%" height="15" fill="rgb(232,6,21)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="89.3645%" y="901" width="0.1297%" height="15" fill="rgb(224,154,1)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="89.3645%" y="885" width="0.1297%" height="15" fill="rgb(248,135,32)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="895.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="89.3645%" y="869" width="0.1297%" height="15" fill="rgb(253,129,38)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="89.3645%" y="853" width="0.1297%" height="15" fill="rgb(214,110,11)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="89.3645%" y="837" width="0.1297%" height="15" fill="rgb(246,150,22)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="89.3645%" y="821" width="0.1297%" height="15" fill="rgb(219,170,39)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="89.3645%" y="805" width="0.1297%" height="15" fill="rgb(221,143,52)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="89.3645%" y="789" width="0.1297%" height="15" fill="rgb(237,122,11)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="89.3645%" y="773" width="0.1297%" height="15" fill="rgb(217,114,13)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="89.3645%" y="757" width="0.1297%" height="15" fill="rgb(218,184,28)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="89.3645%" y="741" width="0.1297%" height="15" fill="rgb(237,33,22)" fg:x="1378" fg:w="2"/><text x="89.6145%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.4293%" y="725" width="0.0649%" height="15" fill="rgb(224,56,42)" fg:x="1379" fg:w="1"/><text x="89.6793%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.4293%" y="709" width="0.0649%" height="15" fill="rgb(216,138,53)" fg:x="1379" fg:w="1"/><text x="89.6793%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.4293%" y="693" width="0.0649%" height="15" fill="rgb(233,229,40)" fg:x="1379" fg:w="1"/><text x="89.6793%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="89.4942%" y="997" width="0.0649%" height="15" fill="rgb(252,105,0)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="89.4942%" y="981" width="0.0649%" height="15" fill="rgb(212,75,24)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (1 samples, 0.06%)</title><rect x="89.4942%" y="965" width="0.0649%" height="15" fill="rgb(235,168,50)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="89.4942%" y="949" width="0.0649%" height="15" fill="rgb(247,204,12)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="89.4942%" y="933" width="0.0649%" height="15" fill="rgb(250,203,27)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="89.4942%" y="917" width="0.0649%" height="15" fill="rgb(221,215,2)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="927.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="89.4942%" y="901" width="0.0649%" height="15" fill="rgb(242,163,47)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="911.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.06%)</title><rect x="89.4942%" y="885" width="0.0649%" height="15" fill="rgb(237,136,50)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="895.50"></text></g><g><title>std::thread::panicking (1 samples, 0.06%)</title><rect x="89.4942%" y="869" width="0.0649%" height="15" fill="rgb(217,201,47)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="879.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.06%)</title><rect x="89.4942%" y="853" width="0.0649%" height="15" fill="rgb(212,38,47)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="863.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.06%)</title><rect x="89.4942%" y="837" width="0.0649%" height="15" fill="rgb(254,113,41)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="89.4942%" y="821" width="0.0649%" height="15" fill="rgb(236,7,22)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="89.4942%" y="805" width="0.0649%" height="15" fill="rgb(235,81,25)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.4942%" y="789" width="0.0649%" height="15" fill="rgb(216,41,31)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.4942%" y="773" width="0.0649%" height="15" fill="rgb(249,219,15)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.4942%" y="757" width="0.0649%" height="15" fill="rgb(248,201,3)" fg:x="1380" fg:w="1"/><text x="89.7442%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;redb::tree_store::page_store::page_manager::TransactionalMemory&gt;&gt; (1 samples, 0.06%)</title><rect x="89.5590%" y="965" width="0.0649%" height="15" fill="rgb(249,141,18)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="89.5590%" y="949" width="0.0649%" height="15" fill="rgb(222,32,39)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.06%)</title><rect x="89.5590%" y="933" width="0.0649%" height="15" fill="rgb(237,139,51)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.06%)</title><rect x="89.5590%" y="917" width="0.0649%" height="15" fill="rgb(218,210,4)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.5590%" y="901" width="0.0649%" height="15" fill="rgb(217,199,13)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.5590%" y="885" width="0.0649%" height="15" fill="rgb(222,118,25)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.5590%" y="869" width="0.0649%" height="15" fill="rgb(241,70,28)" fg:x="1381" fg:w="1"/><text x="89.8090%" y="879.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="89.6239%" y="869" width="0.0649%" height="15" fill="rgb(205,51,41)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="89.6239%" y="853" width="0.0649%" height="15" fill="rgb(237,165,49)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="89.6239%" y="837" width="0.0649%" height="15" fill="rgb(213,10,51)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="89.6239%" y="821" width="0.0649%" height="15" fill="rgb(245,89,32)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="89.6239%" y="805" width="0.0649%" height="15" fill="rgb(249,81,54)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="89.6239%" y="789" width="0.0649%" height="15" fill="rgb(223,134,14)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.6239%" y="773" width="0.0649%" height="15" fill="rgb(233,62,37)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.6239%" y="757" width="0.0649%" height="15" fill="rgb(219,117,42)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.6239%" y="741" width="0.0649%" height="15" fill="rgb(248,40,28)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="89.6239%" y="725" width="0.0649%" height="15" fill="rgb(246,66,35)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="89.6239%" y="709" width="0.0649%" height="15" fill="rgb(250,229,22)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.6239%" y="693" width="0.0649%" height="15" fill="rgb(213,89,18)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.6239%" y="677" width="0.0649%" height="15" fill="rgb(213,122,9)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.6239%" y="661" width="0.0649%" height="15" fill="rgb(220,213,48)" fg:x="1382" fg:w="1"/><text x="89.8739%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="89.5590%" y="997" width="0.1946%" height="15" fill="rgb(244,109,54)" fg:x="1381" fg:w="3"/><text x="89.8090%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (3 samples, 0.19%)</title><rect x="89.5590%" y="981" width="0.1946%" height="15" fill="rgb(254,104,49)" fg:x="1381" fg:w="3"/><text x="89.8090%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (2 samples, 0.13%)</title><rect x="89.6239%" y="965" width="0.1297%" height="15" fill="rgb(219,28,32)" fg:x="1382" fg:w="2"/><text x="89.8739%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="89.6239%" y="949" width="0.1297%" height="15" fill="rgb(249,153,33)" fg:x="1382" fg:w="2"/><text x="89.8739%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="89.6239%" y="933" width="0.1297%" height="15" fill="rgb(230,116,21)" fg:x="1382" fg:w="2"/><text x="89.8739%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="89.6239%" y="917" width="0.1297%" height="15" fill="rgb(247,110,3)" fg:x="1382" fg:w="2"/><text x="89.8739%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="89.6239%" y="901" width="0.1297%" height="15" fill="rgb(227,128,3)" fg:x="1382" fg:w="2"/><text x="89.8739%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="89.6239%" y="885" width="0.1297%" height="15" fill="rgb(208,21,1)" fg:x="1382" fg:w="2"/><text x="89.8739%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="89.6887%" y="869" width="0.0649%" height="15" fill="rgb(225,24,20)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="89.6887%" y="853" width="0.0649%" height="15" fill="rgb(250,159,24)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="89.6887%" y="837" width="0.0649%" height="15" fill="rgb(214,30,53)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="89.6887%" y="821" width="0.0649%" height="15" fill="rgb(243,198,11)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="89.6887%" y="805" width="0.0649%" height="15" fill="rgb(232,33,1)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="89.6887%" y="789" width="0.0649%" height="15" fill="rgb(242,60,11)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.6887%" y="773" width="0.0649%" height="15" fill="rgb(241,229,34)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.6887%" y="757" width="0.0649%" height="15" fill="rgb(230,92,51)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.6887%" y="741" width="0.0649%" height="15" fill="rgb(212,209,8)" fg:x="1383" fg:w="1"/><text x="89.9387%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="89.7536%" y="997" width="0.0649%" height="15" fill="rgb(241,55,35)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="89.7536%" y="981" width="0.0649%" height="15" fill="rgb(208,187,52)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="89.7536%" y="965" width="0.0649%" height="15" fill="rgb(251,110,17)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="89.7536%" y="949" width="0.0649%" height="15" fill="rgb(246,225,54)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="89.7536%" y="933" width="0.0649%" height="15" fill="rgb(220,109,6)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="89.7536%" y="917" width="0.0649%" height="15" fill="rgb(228,56,50)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="89.7536%" y="901" width="0.0649%" height="15" fill="rgb(230,34,30)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="89.7536%" y="885" width="0.0649%" height="15" fill="rgb(205,28,42)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="89.7536%" y="869" width="0.0649%" height="15" fill="rgb(215,68,0)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="89.7536%" y="853" width="0.0649%" height="15" fill="rgb(206,91,47)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="89.7536%" y="837" width="0.0649%" height="15" fill="rgb(241,159,43)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="89.7536%" y="821" width="0.0649%" height="15" fill="rgb(232,191,38)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="89.7536%" y="805" width="0.0649%" height="15" fill="rgb(212,180,41)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="815.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.06%)</title><rect x="89.7536%" y="789" width="0.0649%" height="15" fill="rgb(236,134,49)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.7536%" y="773" width="0.0649%" height="15" fill="rgb(221,83,26)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.7536%" y="757" width="0.0649%" height="15" fill="rgb(215,87,39)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.7536%" y="741" width="0.0649%" height="15" fill="rgb(242,28,29)" fg:x="1384" fg:w="1"/><text x="90.0036%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="89.8184%" y="997" width="0.0649%" height="15" fill="rgb(212,219,47)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="89.8184%" y="981" width="0.0649%" height="15" fill="rgb(221,35,20)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="89.8184%" y="965" width="0.0649%" height="15" fill="rgb(234,144,13)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="89.8184%" y="949" width="0.0649%" height="15" fill="rgb(237,41,27)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="89.8184%" y="933" width="0.0649%" height="15" fill="rgb(253,175,5)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="89.8184%" y="917" width="0.0649%" height="15" fill="rgb(235,210,51)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="89.8184%" y="901" width="0.0649%" height="15" fill="rgb(241,180,35)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="89.8184%" y="885" width="0.0649%" height="15" fill="rgb(219,45,16)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="89.8184%" y="869" width="0.0649%" height="15" fill="rgb(247,212,4)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="89.8184%" y="853" width="0.0649%" height="15" fill="rgb(224,211,1)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="863.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="89.8184%" y="837" width="0.0649%" height="15" fill="rgb(210,193,36)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="89.8184%" y="821" width="0.0649%" height="15" fill="rgb(215,121,20)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="831.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="89.8184%" y="805" width="0.0649%" height="15" fill="rgb(238,146,2)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.8184%" y="789" width="0.0649%" height="15" fill="rgb(254,123,45)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.8184%" y="773" width="0.0649%" height="15" fill="rgb(225,126,11)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.8184%" y="757" width="0.0649%" height="15" fill="rgb(239,12,5)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="767.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="89.8184%" y="741" width="0.0649%" height="15" fill="rgb(241,207,14)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.8184%" y="725" width="0.0649%" height="15" fill="rgb(227,134,33)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.8184%" y="709" width="0.0649%" height="15" fill="rgb(221,40,52)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.8184%" y="693" width="0.0649%" height="15" fill="rgb(206,93,8)" fg:x="1385" fg:w="1"/><text x="90.0684%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="89.8833%" y="997" width="0.0649%" height="15" fill="rgb(242,160,22)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="89.8833%" y="981" width="0.0649%" height="15" fill="rgb(232,204,40)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="89.8833%" y="965" width="0.0649%" height="15" fill="rgb(247,210,47)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="89.8833%" y="949" width="0.0649%" height="15" fill="rgb(211,91,7)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="89.8833%" y="933" width="0.0649%" height="15" fill="rgb(252,160,34)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="89.8833%" y="917" width="0.0649%" height="15" fill="rgb(220,34,39)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="89.8833%" y="901" width="0.0649%" height="15" fill="rgb(247,49,38)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="89.8833%" y="885" width="0.0649%" height="15" fill="rgb(228,175,44)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="89.8833%" y="869" width="0.0649%" height="15" fill="rgb(218,214,32)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="89.8833%" y="853" width="0.0649%" height="15" fill="rgb(213,50,12)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="863.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="89.8833%" y="837" width="0.0649%" height="15" fill="rgb(219,35,41)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="89.8833%" y="821" width="0.0649%" height="15" fill="rgb(219,18,38)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="831.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="89.8833%" y="805" width="0.0649%" height="15" fill="rgb(223,217,6)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.8833%" y="789" width="0.0649%" height="15" fill="rgb(208,193,35)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.8833%" y="773" width="0.0649%" height="15" fill="rgb(254,212,54)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="89.8833%" y="757" width="0.0649%" height="15" fill="rgb(205,10,2)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="767.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="89.8833%" y="741" width="0.0649%" height="15" fill="rgb(230,133,29)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="89.8833%" y="725" width="0.0649%" height="15" fill="rgb(226,14,15)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="89.8833%" y="709" width="0.0649%" height="15" fill="rgb(226,140,54)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="719.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="89.8833%" y="693" width="0.0649%" height="15" fill="rgb(250,47,41)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="89.8833%" y="677" width="0.0649%" height="15" fill="rgb(227,218,41)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.8833%" y="661" width="0.0649%" height="15" fill="rgb(254,183,7)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.8833%" y="645" width="0.0649%" height="15" fill="rgb(206,84,53)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.8833%" y="629" width="0.0649%" height="15" fill="rgb(213,177,2)" fg:x="1386" fg:w="1"/><text x="90.1333%" y="639.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="89.9481%" y="965" width="0.0649%" height="15" fill="rgb(234,28,29)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="89.9481%" y="949" width="0.0649%" height="15" fill="rgb(248,211,38)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="89.9481%" y="933" width="0.0649%" height="15" fill="rgb(246,30,0)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="89.9481%" y="917" width="0.0649%" height="15" fill="rgb(244,115,24)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="89.9481%" y="901" width="0.0649%" height="15" fill="rgb(226,193,14)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="89.9481%" y="885" width="0.0649%" height="15" fill="rgb(211,196,48)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="89.9481%" y="869" width="0.0649%" height="15" fill="rgb(235,32,20)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="879.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="89.9481%" y="853" width="0.0649%" height="15" fill="rgb(251,151,49)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="89.9481%" y="837" width="0.0649%" height="15" fill="rgb(254,141,38)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="89.9481%" y="821" width="0.0649%" height="15" fill="rgb(209,118,44)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="89.9481%" y="805" width="0.0649%" height="15" fill="rgb(205,81,4)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="89.9481%" y="789" width="0.0649%" height="15" fill="rgb(241,25,6)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="89.9481%" y="773" width="0.0649%" height="15" fill="rgb(212,179,29)" fg:x="1387" fg:w="1"/><text x="90.1981%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="90.0130%" y="917" width="0.0649%" height="15" fill="rgb(241,40,32)" fg:x="1388" fg:w="1"/><text x="90.2630%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.0130%" y="901" width="0.0649%" height="15" fill="rgb(223,35,2)" fg:x="1388" fg:w="1"/><text x="90.2630%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.0130%" y="885" width="0.0649%" height="15" fill="rgb(221,125,54)" fg:x="1388" fg:w="1"/><text x="90.2630%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.0130%" y="869" width="0.0649%" height="15" fill="rgb(230,5,49)" fg:x="1388" fg:w="1"/><text x="90.2630%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.0778%" y="709" width="0.0649%" height="15" fill="rgb(221,157,7)" fg:x="1389" fg:w="1"/><text x="90.3278%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.0778%" y="693" width="0.0649%" height="15" fill="rgb(242,163,10)" fg:x="1389" fg:w="1"/><text x="90.3278%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.0778%" y="677" width="0.0649%" height="15" fill="rgb(232,30,2)" fg:x="1389" fg:w="1"/><text x="90.3278%" y="687.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="90.0778%" y="917" width="0.1297%" height="15" fill="rgb(245,102,40)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="90.0778%" y="901" width="0.1297%" height="15" fill="rgb(242,10,41)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="90.0778%" y="885" width="0.1297%" height="15" fill="rgb(236,184,36)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="90.0778%" y="869" width="0.1297%" height="15" fill="rgb(247,147,48)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="90.0778%" y="853" width="0.1297%" height="15" fill="rgb(226,166,2)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="90.0778%" y="837" width="0.1297%" height="15" fill="rgb(251,196,7)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="90.0778%" y="821" width="0.1297%" height="15" fill="rgb(241,40,13)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="90.0778%" y="805" width="0.1297%" height="15" fill="rgb(254,4,12)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="815.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="90.0778%" y="789" width="0.1297%" height="15" fill="rgb(244,139,49)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="799.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (2 samples, 0.13%)</title><rect x="90.0778%" y="773" width="0.1297%" height="15" fill="rgb(227,28,42)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (2 samples, 0.13%)</title><rect x="90.0778%" y="757" width="0.1297%" height="15" fill="rgb(231,135,32)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="767.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (2 samples, 0.13%)</title><rect x="90.0778%" y="741" width="0.1297%" height="15" fill="rgb(244,182,3)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="751.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (2 samples, 0.13%)</title><rect x="90.0778%" y="725" width="0.1297%" height="15" fill="rgb(247,46,19)" fg:x="1389" fg:w="2"/><text x="90.3278%" y="735.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="90.1427%" y="709" width="0.0649%" height="15" fill="rgb(251,179,10)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="90.1427%" y="693" width="0.0649%" height="15" fill="rgb(229,222,18)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="90.1427%" y="677" width="0.0649%" height="15" fill="rgb(251,107,20)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="90.1427%" y="661" width="0.0649%" height="15" fill="rgb(233,193,19)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="90.1427%" y="645" width="0.0649%" height="15" fill="rgb(229,146,53)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="90.1427%" y="629" width="0.0649%" height="15" fill="rgb(244,52,11)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="90.1427%" y="613" width="0.0649%" height="15" fill="rgb(245,211,46)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="90.1427%" y="597" width="0.0649%" height="15" fill="rgb(213,8,31)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="607.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="90.1427%" y="581" width="0.0649%" height="15" fill="rgb(205,101,39)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="591.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="90.1427%" y="565" width="0.0649%" height="15" fill="rgb(212,157,1)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="90.1427%" y="549" width="0.0649%" height="15" fill="rgb(232,30,46)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="559.50"></text></g><g><title>core::fmt::Arguments::new_const (1 samples, 0.06%)</title><rect x="90.1427%" y="533" width="0.0649%" height="15" fill="rgb(216,201,6)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.1427%" y="517" width="0.0649%" height="15" fill="rgb(209,18,6)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.1427%" y="501" width="0.0649%" height="15" fill="rgb(219,138,3)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.1427%" y="485" width="0.0649%" height="15" fill="rgb(210,91,46)" fg:x="1390" fg:w="1"/><text x="90.3927%" y="495.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (4 samples, 0.26%)</title><rect x="90.0130%" y="965" width="0.2594%" height="15" fill="rgb(241,80,44)" fg:x="1388" fg:w="4"/><text x="90.2630%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (4 samples, 0.26%)</title><rect x="90.0130%" y="949" width="0.2594%" height="15" fill="rgb(236,205,36)" fg:x="1388" fg:w="4"/><text x="90.2630%" y="959.50"></text></g><g><title>bincode::internal::serialize (4 samples, 0.26%)</title><rect x="90.0130%" y="933" width="0.2594%" height="15" fill="rgb(205,59,37)" fg:x="1388" fg:w="4"/><text x="90.2630%" y="943.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="90.2075%" y="917" width="0.0649%" height="15" fill="rgb(239,166,39)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="90.2075%" y="901" width="0.0649%" height="15" fill="rgb(239,146,40)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="911.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="90.2075%" y="885" width="0.0649%" height="15" fill="rgb(231,11,52)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="90.2075%" y="869" width="0.0649%" height="15" fill="rgb(253,21,37)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="879.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="90.2075%" y="853" width="0.0649%" height="15" fill="rgb(224,87,39)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="90.2075%" y="837" width="0.0649%" height="15" fill="rgb(249,15,46)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.2075%" y="821" width="0.0649%" height="15" fill="rgb(250,37,51)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.2075%" y="805" width="0.0649%" height="15" fill="rgb(205,185,43)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.2075%" y="789" width="0.0649%" height="15" fill="rgb(206,65,41)" fg:x="1391" fg:w="1"/><text x="90.4575%" y="799.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as redb::tree_store::page_store::base::Page&gt;::memory (1 samples, 0.06%)</title><rect x="90.2724%" y="949" width="0.0649%" height="15" fill="rgb(236,159,32)" fg:x="1392" fg:w="1"/><text x="90.5224%" y="959.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (1 samples, 0.06%)</title><rect x="90.2724%" y="933" width="0.0649%" height="15" fill="rgb(228,199,27)" fg:x="1392" fg:w="1"/><text x="90.5224%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="90.2724%" y="917" width="0.0649%" height="15" fill="rgb(212,0,37)" fg:x="1392" fg:w="1"/><text x="90.5224%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.2724%" y="901" width="0.0649%" height="15" fill="rgb(248,50,11)" fg:x="1392" fg:w="1"/><text x="90.5224%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.2724%" y="885" width="0.0649%" height="15" fill="rgb(231,164,25)" fg:x="1392" fg:w="1"/><text x="90.5224%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.2724%" y="869" width="0.0649%" height="15" fill="rgb(238,38,39)" fg:x="1392" fg:w="1"/><text x="90.5224%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.3372%" y="757" width="0.0649%" height="15" fill="rgb(210,15,50)" fg:x="1393" fg:w="1"/><text x="90.5872%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.3372%" y="741" width="0.0649%" height="15" fill="rgb(251,126,36)" fg:x="1393" fg:w="1"/><text x="90.5872%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.3372%" y="725" width="0.0649%" height="15" fill="rgb(243,59,26)" fg:x="1393" fg:w="1"/><text x="90.5872%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.4021%" y="629" width="0.0649%" height="15" fill="rgb(215,24,30)" fg:x="1394" fg:w="1"/><text x="90.6521%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.4021%" y="613" width="0.0649%" height="15" fill="rgb(253,50,51)" fg:x="1394" fg:w="1"/><text x="90.6521%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.4021%" y="597" width="0.0649%" height="15" fill="rgb(252,2,16)" fg:x="1394" fg:w="1"/><text x="90.6521%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.4669%" y="565" width="0.0649%" height="15" fill="rgb(209,123,36)" fg:x="1395" fg:w="1"/><text x="90.7169%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.4669%" y="549" width="0.0649%" height="15" fill="rgb(245,60,15)" fg:x="1395" fg:w="1"/><text x="90.7169%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.4669%" y="533" width="0.0649%" height="15" fill="rgb(246,4,13)" fg:x="1395" fg:w="1"/><text x="90.7169%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="90.4669%" y="581" width="0.1297%" height="15" fill="rgb(210,223,46)" fg:x="1395" fg:w="2"/><text x="90.7169%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="90.5318%" y="565" width="0.0649%" height="15" fill="rgb(248,1,9)" fg:x="1396" fg:w="1"/><text x="90.7818%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="90.5318%" y="549" width="0.0649%" height="15" fill="rgb(254,2,34)" fg:x="1396" fg:w="1"/><text x="90.7818%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.5318%" y="533" width="0.0649%" height="15" fill="rgb(239,176,1)" fg:x="1396" fg:w="1"/><text x="90.7818%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.5318%" y="517" width="0.0649%" height="15" fill="rgb(250,25,32)" fg:x="1396" fg:w="1"/><text x="90.7818%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.5318%" y="501" width="0.0649%" height="15" fill="rgb(225,28,39)" fg:x="1396" fg:w="1"/><text x="90.7818%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (3 samples, 0.19%)</title><rect x="90.4669%" y="613" width="0.1946%" height="15" fill="rgb(230,166,37)" fg:x="1395" fg:w="3"/><text x="90.7169%" y="623.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (3 samples, 0.19%)</title><rect x="90.4669%" y="597" width="0.1946%" height="15" fill="rgb(246,220,4)" fg:x="1395" fg:w="3"/><text x="90.7169%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="90.5966%" y="581" width="0.0649%" height="15" fill="rgb(219,119,33)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="90.5966%" y="565" width="0.0649%" height="15" fill="rgb(221,207,38)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="90.5966%" y="549" width="0.0649%" height="15" fill="rgb(214,153,5)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="90.5966%" y="533" width="0.0649%" height="15" fill="rgb(223,50,16)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="90.5966%" y="517" width="0.0649%" height="15" fill="rgb(209,207,12)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="527.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="90.5966%" y="501" width="0.0649%" height="15" fill="rgb(207,3,46)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.5966%" y="485" width="0.0649%" height="15" fill="rgb(232,45,53)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.5966%" y="469" width="0.0649%" height="15" fill="rgb(206,140,15)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.5966%" y="453" width="0.0649%" height="15" fill="rgb(245,66,17)" fg:x="1397" fg:w="1"/><text x="90.8466%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (5 samples, 0.32%)</title><rect x="90.4021%" y="693" width="0.3243%" height="15" fill="rgb(221,25,37)" fg:x="1394" fg:w="5"/><text x="90.6521%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="90.4021%" y="677" width="0.3243%" height="15" fill="rgb(215,99,47)" fg:x="1394" fg:w="5"/><text x="90.6521%" y="687.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (5 samples, 0.32%)</title><rect x="90.4021%" y="661" width="0.3243%" height="15" fill="rgb(219,154,44)" fg:x="1394" fg:w="5"/><text x="90.6521%" y="671.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (5 samples, 0.32%)</title><rect x="90.4021%" y="645" width="0.3243%" height="15" fill="rgb(210,197,36)" fg:x="1394" fg:w="5"/><text x="90.6521%" y="655.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (4 samples, 0.26%)</title><rect x="90.4669%" y="629" width="0.2594%" height="15" fill="rgb(217,137,10)" fg:x="1395" fg:w="4"/><text x="90.7169%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.06%)</title><rect x="90.6615%" y="613" width="0.0649%" height="15" fill="rgb(240,216,26)" fg:x="1398" fg:w="1"/><text x="90.9115%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.6615%" y="597" width="0.0649%" height="15" fill="rgb(242,76,17)" fg:x="1398" fg:w="1"/><text x="90.9115%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.6615%" y="581" width="0.0649%" height="15" fill="rgb(243,142,51)" fg:x="1398" fg:w="1"/><text x="90.9115%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.6615%" y="565" width="0.0649%" height="15" fill="rgb(233,109,46)" fg:x="1398" fg:w="1"/><text x="90.9115%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.7263%" y="629" width="0.0649%" height="15" fill="rgb(252,45,32)" fg:x="1399" fg:w="1"/><text x="90.9763%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.7263%" y="613" width="0.0649%" height="15" fill="rgb(210,69,52)" fg:x="1399" fg:w="1"/><text x="90.9763%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.7263%" y="597" width="0.0649%" height="15" fill="rgb(242,30,2)" fg:x="1399" fg:w="1"/><text x="90.9763%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="90.7912%" y="517" width="0.0649%" height="15" fill="rgb(246,137,1)" fg:x="1400" fg:w="1"/><text x="91.0412%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.7912%" y="501" width="0.0649%" height="15" fill="rgb(221,205,25)" fg:x="1400" fg:w="1"/><text x="91.0412%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.7912%" y="485" width="0.0649%" height="15" fill="rgb(224,44,43)" fg:x="1400" fg:w="1"/><text x="91.0412%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.7912%" y="469" width="0.0649%" height="15" fill="rgb(209,81,13)" fg:x="1400" fg:w="1"/><text x="91.0412%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="90.8560%" y="501" width="0.0649%" height="15" fill="rgb(227,88,4)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="90.8560%" y="485" width="0.0649%" height="15" fill="rgb(228,118,49)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="90.8560%" y="469" width="0.0649%" height="15" fill="rgb(225,215,27)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="90.8560%" y="453" width="0.0649%" height="15" fill="rgb(235,226,1)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="90.8560%" y="437" width="0.0649%" height="15" fill="rgb(205,107,17)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.8560%" y="421" width="0.0649%" height="15" fill="rgb(247,85,8)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.8560%" y="405" width="0.0649%" height="15" fill="rgb(230,220,20)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.8560%" y="389" width="0.0649%" height="15" fill="rgb(237,22,6)" fg:x="1401" fg:w="1"/><text x="91.1060%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="90.7912%" y="581" width="0.1946%" height="15" fill="rgb(253,39,1)" fg:x="1400" fg:w="3"/><text x="91.0412%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="90.7912%" y="565" width="0.1946%" height="15" fill="rgb(251,206,50)" fg:x="1400" fg:w="3"/><text x="91.0412%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="90.7912%" y="549" width="0.1946%" height="15" fill="rgb(239,162,11)" fg:x="1400" fg:w="3"/><text x="91.0412%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="90.7912%" y="533" width="0.1946%" height="15" fill="rgb(234,164,6)" fg:x="1400" fg:w="3"/><text x="91.0412%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="90.8560%" y="517" width="0.1297%" height="15" fill="rgb(238,112,10)" fg:x="1401" fg:w="2"/><text x="91.1060%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.9209%" y="501" width="0.0649%" height="15" fill="rgb(232,78,29)" fg:x="1402" fg:w="1"/><text x="91.1709%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.9209%" y="485" width="0.0649%" height="15" fill="rgb(232,20,13)" fg:x="1402" fg:w="1"/><text x="91.1709%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.9209%" y="469" width="0.0649%" height="15" fill="rgb(222,175,9)" fg:x="1402" fg:w="1"/><text x="91.1709%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="90.9857%" y="293" width="0.0649%" height="15" fill="rgb(233,61,14)" fg:x="1403" fg:w="1"/><text x="91.2357%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="90.9857%" y="277" width="0.0649%" height="15" fill="rgb(224,152,29)" fg:x="1403" fg:w="1"/><text x="91.2357%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="90.9857%" y="261" width="0.0649%" height="15" fill="rgb(232,26,6)" fg:x="1403" fg:w="1"/><text x="91.2357%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="90.9857%" y="245" width="0.0649%" height="15" fill="rgb(210,116,11)" fg:x="1403" fg:w="1"/><text x="91.2357%" y="255.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="91.0506%" y="261" width="0.0649%" height="15" fill="rgb(238,213,15)" fg:x="1404" fg:w="1"/><text x="91.3006%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="91.0506%" y="245" width="0.0649%" height="15" fill="rgb(236,177,32)" fg:x="1404" fg:w="1"/><text x="91.3006%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.0506%" y="229" width="0.0649%" height="15" fill="rgb(230,36,43)" fg:x="1404" fg:w="1"/><text x="91.3006%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.0506%" y="213" width="0.0649%" height="15" fill="rgb(212,76,23)" fg:x="1404" fg:w="1"/><text x="91.3006%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.0506%" y="197" width="0.0649%" height="15" fill="rgb(225,168,24)" fg:x="1404" fg:w="1"/><text x="91.3006%" y="207.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="90.9857%" y="453" width="0.1946%" height="15" fill="rgb(206,40,44)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="90.9857%" y="437" width="0.1946%" height="15" fill="rgb(251,213,6)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="90.9857%" y="421" width="0.1946%" height="15" fill="rgb(220,7,47)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="90.9857%" y="405" width="0.1946%" height="15" fill="rgb(254,130,53)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="90.9857%" y="389" width="0.1946%" height="15" fill="rgb(240,2,46)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="90.9857%" y="373" width="0.1946%" height="15" fill="rgb(252,144,40)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="90.9857%" y="357" width="0.1946%" height="15" fill="rgb(226,23,10)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="90.9857%" y="341" width="0.1946%" height="15" fill="rgb(212,204,35)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="90.9857%" y="325" width="0.1946%" height="15" fill="rgb(218,201,15)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="90.9857%" y="309" width="0.1946%" height="15" fill="rgb(224,197,5)" fg:x="1403" fg:w="3"/><text x="91.2357%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="91.0506%" y="293" width="0.1297%" height="15" fill="rgb(224,185,18)" fg:x="1404" fg:w="2"/><text x="91.3006%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="91.0506%" y="277" width="0.1297%" height="15" fill="rgb(251,71,45)" fg:x="1404" fg:w="2"/><text x="91.3006%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="91.1154%" y="261" width="0.0649%" height="15" fill="rgb(216,74,24)" fg:x="1405" fg:w="1"/><text x="91.3654%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.1154%" y="245" width="0.0649%" height="15" fill="rgb(250,36,51)" fg:x="1405" fg:w="1"/><text x="91.3654%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.1154%" y="229" width="0.0649%" height="15" fill="rgb(209,224,28)" fg:x="1405" fg:w="1"/><text x="91.3654%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.1154%" y="213" width="0.0649%" height="15" fill="rgb(228,5,10)" fg:x="1405" fg:w="1"/><text x="91.3654%" y="223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="90.9857%" y="485" width="0.2594%" height="15" fill="rgb(250,57,40)" fg:x="1403" fg:w="4"/><text x="91.2357%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="90.9857%" y="469" width="0.2594%" height="15" fill="rgb(228,194,41)" fg:x="1403" fg:w="4"/><text x="91.2357%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.1803%" y="453" width="0.0649%" height="15" fill="rgb(206,68,23)" fg:x="1406" fg:w="1"/><text x="91.4303%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.1803%" y="437" width="0.0649%" height="15" fill="rgb(230,33,29)" fg:x="1406" fg:w="1"/><text x="91.4303%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.1803%" y="421" width="0.0649%" height="15" fill="rgb(210,39,32)" fg:x="1406" fg:w="1"/><text x="91.4303%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.91%)</title><rect x="90.4021%" y="709" width="0.9079%" height="15" fill="rgb(236,89,23)" fg:x="1394" fg:w="14"/><text x="90.6521%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="90.7263%" y="693" width="0.5837%" height="15" fill="rgb(218,52,52)" fg:x="1399" fg:w="9"/><text x="90.9763%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="90.7263%" y="677" width="0.5837%" height="15" fill="rgb(235,154,5)" fg:x="1399" fg:w="9"/><text x="90.9763%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="90.7263%" y="661" width="0.5837%" height="15" fill="rgb(223,168,9)" fg:x="1399" fg:w="9"/><text x="90.9763%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="90.7263%" y="645" width="0.5837%" height="15" fill="rgb(220,8,33)" fg:x="1399" fg:w="9"/><text x="90.9763%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="90.7912%" y="629" width="0.5188%" height="15" fill="rgb(216,176,3)" fg:x="1400" fg:w="8"/><text x="91.0412%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="90.7912%" y="613" width="0.5188%" height="15" fill="rgb(254,150,22)" fg:x="1400" fg:w="8"/><text x="91.0412%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="90.7912%" y="597" width="0.5188%" height="15" fill="rgb(231,61,53)" fg:x="1400" fg:w="8"/><text x="91.0412%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="90.9857%" y="581" width="0.3243%" height="15" fill="rgb(249,177,41)" fg:x="1403" fg:w="5"/><text x="91.2357%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="90.9857%" y="565" width="0.3243%" height="15" fill="rgb(221,122,7)" fg:x="1403" fg:w="5"/><text x="91.2357%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="90.9857%" y="549" width="0.3243%" height="15" fill="rgb(215,115,7)" fg:x="1403" fg:w="5"/><text x="91.2357%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="90.9857%" y="533" width="0.3243%" height="15" fill="rgb(218,108,33)" fg:x="1403" fg:w="5"/><text x="91.2357%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (5 samples, 0.32%)</title><rect x="90.9857%" y="517" width="0.3243%" height="15" fill="rgb(221,205,39)" fg:x="1403" fg:w="5"/><text x="91.2357%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (5 samples, 0.32%)</title><rect x="90.9857%" y="501" width="0.3243%" height="15" fill="rgb(220,171,18)" fg:x="1403" fg:w="5"/><text x="91.2357%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.2451%" y="485" width="0.0649%" height="15" fill="rgb(236,188,29)" fg:x="1407" fg:w="1"/><text x="91.4951%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.2451%" y="469" width="0.0649%" height="15" fill="rgb(239,29,5)" fg:x="1407" fg:w="1"/><text x="91.4951%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.2451%" y="453" width="0.0649%" height="15" fill="rgb(236,114,44)" fg:x="1407" fg:w="1"/><text x="91.4951%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (16 samples, 1.04%)</title><rect x="90.3372%" y="773" width="1.0376%" height="15" fill="rgb(239,214,48)" fg:x="1393" fg:w="16"/><text x="90.5872%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (15 samples, 0.97%)</title><rect x="90.4021%" y="757" width="0.9728%" height="15" fill="rgb(241,56,8)" fg:x="1394" fg:w="15"/><text x="90.6521%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (15 samples, 0.97%)</title><rect x="90.4021%" y="741" width="0.9728%" height="15" fill="rgb(228,201,0)" fg:x="1394" fg:w="15"/><text x="90.6521%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (15 samples, 0.97%)</title><rect x="90.4021%" y="725" width="0.9728%" height="15" fill="rgb(226,219,34)" fg:x="1394" fg:w="15"/><text x="90.6521%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.3100%" y="709" width="0.0649%" height="15" fill="rgb(209,204,54)" fg:x="1408" fg:w="1"/><text x="91.5600%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.3100%" y="693" width="0.0649%" height="15" fill="rgb(251,160,17)" fg:x="1408" fg:w="1"/><text x="91.5600%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.3100%" y="677" width="0.0649%" height="15" fill="rgb(235,15,25)" fg:x="1408" fg:w="1"/><text x="91.5600%" y="687.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (17 samples, 1.10%)</title><rect x="90.3372%" y="901" width="1.1025%" height="15" fill="rgb(216,209,28)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="911.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (17 samples, 1.10%)</title><rect x="90.3372%" y="885" width="1.1025%" height="15" fill="rgb(248,123,21)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (17 samples, 1.10%)</title><rect x="90.3372%" y="869" width="1.1025%" height="15" fill="rgb(226,138,44)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="879.50"></text></g><g><title>bincode::internal::deserialize (17 samples, 1.10%)</title><rect x="90.3372%" y="853" width="1.1025%" height="15" fill="rgb(211,104,54)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (17 samples, 1.10%)</title><rect x="90.3372%" y="837" width="1.1025%" height="15" fill="rgb(241,198,15)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 1.10%)</title><rect x="90.3372%" y="821" width="1.1025%" height="15" fill="rgb(227,155,54)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (17 samples, 1.10%)</title><rect x="90.3372%" y="805" width="1.1025%" height="15" fill="rgb(225,131,31)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (17 samples, 1.10%)</title><rect x="90.3372%" y="789" width="1.1025%" height="15" fill="rgb(242,40,17)" fg:x="1393" fg:w="17"/><text x="90.5872%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.3748%" y="773" width="0.0649%" height="15" fill="rgb(254,57,35)" fg:x="1409" fg:w="1"/><text x="91.6248%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.3748%" y="757" width="0.0649%" height="15" fill="rgb(240,64,32)" fg:x="1409" fg:w="1"/><text x="91.6248%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.3748%" y="741" width="0.0649%" height="15" fill="rgb(251,136,26)" fg:x="1409" fg:w="1"/><text x="91.6248%" y="751.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (18 samples, 1.17%)</title><rect x="90.3372%" y="933" width="1.1673%" height="15" fill="rgb(208,60,54)" fg:x="1393" fg:w="18"/><text x="90.5872%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (18 samples, 1.17%)</title><rect x="90.3372%" y="917" width="1.1673%" height="15" fill="rgb(220,13,12)" fg:x="1393" fg:w="18"/><text x="90.5872%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="91.4397%" y="901" width="0.0649%" height="15" fill="rgb(213,149,1)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="91.4397%" y="885" width="0.0649%" height="15" fill="rgb(212,191,39)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="895.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="91.4397%" y="869" width="0.0649%" height="15" fill="rgb(215,221,42)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="879.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="91.4397%" y="853" width="0.0649%" height="15" fill="rgb(244,79,23)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="863.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="91.4397%" y="837" width="0.0649%" height="15" fill="rgb(247,17,29)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.4397%" y="821" width="0.0649%" height="15" fill="rgb(251,221,21)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.4397%" y="805" width="0.0649%" height="15" fill="rgb(207,202,34)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.4397%" y="789" width="0.0649%" height="15" fill="rgb(217,4,34)" fg:x="1410" fg:w="1"/><text x="91.6897%" y="799.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (19 samples, 1.23%)</title><rect x="90.3372%" y="949" width="1.2322%" height="15" fill="rgb(253,17,16)" fg:x="1393" fg:w="19"/><text x="90.5872%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::new (1 samples, 0.06%)</title><rect x="91.5045%" y="933" width="0.0649%" height="15" fill="rgb(223,91,48)" fg:x="1411" fg:w="1"/><text x="91.7545%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.5045%" y="917" width="0.0649%" height="15" fill="rgb(244,191,22)" fg:x="1411" fg:w="1"/><text x="91.7545%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.5045%" y="901" width="0.0649%" height="15" fill="rgb(211,107,14)" fg:x="1411" fg:w="1"/><text x="91.7545%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.5045%" y="885" width="0.0649%" height="15" fill="rgb(232,81,23)" fg:x="1411" fg:w="1"/><text x="91.7545%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.5694%" y="661" width="0.0649%" height="15" fill="rgb(237,126,14)" fg:x="1412" fg:w="1"/><text x="91.8194%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.5694%" y="645" width="0.0649%" height="15" fill="rgb(230,65,39)" fg:x="1412" fg:w="1"/><text x="91.8194%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.5694%" y="629" width="0.0649%" height="15" fill="rgb(208,106,41)" fg:x="1412" fg:w="1"/><text x="91.8194%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="91.5694%" y="725" width="0.1297%" height="15" fill="rgb(206,125,25)" fg:x="1412" fg:w="2"/><text x="91.8194%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="91.5694%" y="709" width="0.1297%" height="15" fill="rgb(250,24,29)" fg:x="1412" fg:w="2"/><text x="91.8194%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="91.5694%" y="693" width="0.1297%" height="15" fill="rgb(226,49,32)" fg:x="1412" fg:w="2"/><text x="91.8194%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="91.5694%" y="677" width="0.1297%" height="15" fill="rgb(217,110,16)" fg:x="1412" fg:w="2"/><text x="91.8194%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="91.6342%" y="661" width="0.0649%" height="15" fill="rgb(252,16,53)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="671.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="91.6342%" y="645" width="0.0649%" height="15" fill="rgb(238,163,11)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="91.6342%" y="629" width="0.0649%" height="15" fill="rgb(206,210,1)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="91.6342%" y="613" width="0.0649%" height="15" fill="rgb(229,8,25)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="91.6342%" y="597" width="0.0649%" height="15" fill="rgb(247,155,23)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.6342%" y="581" width="0.0649%" height="15" fill="rgb(207,26,7)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="591.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.6342%" y="565" width="0.0649%" height="15" fill="rgb(215,179,12)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="575.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.6342%" y="549" width="0.0649%" height="15" fill="rgb(238,208,11)" fg:x="1413" fg:w="1"/><text x="91.8842%" y="559.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="91.6991%" y="533" width="0.0649%" height="15" fill="rgb(238,102,42)" fg:x="1414" fg:w="1"/><text x="91.9491%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="91.6991%" y="517" width="0.0649%" height="15" fill="rgb(239,35,9)" fg:x="1414" fg:w="1"/><text x="91.9491%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="91.6991%" y="501" width="0.0649%" height="15" fill="rgb(244,182,30)" fg:x="1414" fg:w="1"/><text x="91.9491%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.6991%" y="485" width="0.0649%" height="15" fill="rgb(232,181,23)" fg:x="1414" fg:w="1"/><text x="91.9491%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.6991%" y="469" width="0.0649%" height="15" fill="rgb(242,154,29)" fg:x="1414" fg:w="1"/><text x="91.9491%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.6991%" y="453" width="0.0649%" height="15" fill="rgb(219,23,2)" fg:x="1414" fg:w="1"/><text x="91.9491%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="91.7639%" y="517" width="0.0649%" height="15" fill="rgb(234,94,43)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="91.7639%" y="501" width="0.0649%" height="15" fill="rgb(223,55,45)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="91.7639%" y="485" width="0.0649%" height="15" fill="rgb(241,215,54)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="91.7639%" y="469" width="0.0649%" height="15" fill="rgb(247,63,53)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.7639%" y="453" width="0.0649%" height="15" fill="rgb(220,166,7)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.7639%" y="437" width="0.0649%" height="15" fill="rgb(248,53,45)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.7639%" y="421" width="0.0649%" height="15" fill="rgb(224,207,20)" fg:x="1415" fg:w="1"/><text x="92.0139%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="91.6991%" y="613" width="0.1946%" height="15" fill="rgb(244,185,11)" fg:x="1414" fg:w="3"/><text x="91.9491%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="91.6991%" y="597" width="0.1946%" height="15" fill="rgb(230,13,42)" fg:x="1414" fg:w="3"/><text x="91.9491%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="91.6991%" y="581" width="0.1946%" height="15" fill="rgb(243,191,18)" fg:x="1414" fg:w="3"/><text x="91.9491%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (3 samples, 0.19%)</title><rect x="91.6991%" y="565" width="0.1946%" height="15" fill="rgb(249,135,15)" fg:x="1414" fg:w="3"/><text x="91.9491%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (3 samples, 0.19%)</title><rect x="91.6991%" y="549" width="0.1946%" height="15" fill="rgb(229,26,35)" fg:x="1414" fg:w="3"/><text x="91.9491%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="91.7639%" y="533" width="0.1297%" height="15" fill="rgb(216,191,16)" fg:x="1415" fg:w="2"/><text x="92.0139%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="91.8288%" y="517" width="0.0649%" height="15" fill="rgb(242,18,7)" fg:x="1416" fg:w="1"/><text x="92.0788%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.8288%" y="501" width="0.0649%" height="15" fill="rgb(205,128,17)" fg:x="1416" fg:w="1"/><text x="92.0788%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.8288%" y="485" width="0.0649%" height="15" fill="rgb(229,199,44)" fg:x="1416" fg:w="1"/><text x="92.0788%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.8288%" y="469" width="0.0649%" height="15" fill="rgb(234,222,3)" fg:x="1416" fg:w="1"/><text x="92.0788%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.8936%" y="565" width="0.0649%" height="15" fill="rgb(220,170,20)" fg:x="1417" fg:w="1"/><text x="92.1436%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.8936%" y="549" width="0.0649%" height="15" fill="rgb(207,138,8)" fg:x="1417" fg:w="1"/><text x="92.1436%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.8936%" y="533" width="0.0649%" height="15" fill="rgb(244,130,36)" fg:x="1417" fg:w="1"/><text x="92.1436%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="91.9585%" y="389" width="0.0649%" height="15" fill="rgb(207,197,52)" fg:x="1418" fg:w="1"/><text x="92.2085%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="91.9585%" y="373" width="0.0649%" height="15" fill="rgb(206,9,21)" fg:x="1418" fg:w="1"/><text x="92.2085%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="91.9585%" y="357" width="0.0649%" height="15" fill="rgb(250,15,47)" fg:x="1418" fg:w="1"/><text x="92.2085%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="91.9585%" y="501" width="0.1297%" height="15" fill="rgb(235,202,14)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="91.9585%" y="485" width="0.1297%" height="15" fill="rgb(211,180,47)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="91.9585%" y="469" width="0.1297%" height="15" fill="rgb(209,61,11)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="91.9585%" y="453" width="0.1297%" height="15" fill="rgb(243,197,29)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="91.9585%" y="437" width="0.1297%" height="15" fill="rgb(216,185,16)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="447.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="91.9585%" y="421" width="0.1297%" height="15" fill="rgb(248,5,15)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="91.9585%" y="405" width="0.1297%" height="15" fill="rgb(240,39,41)" fg:x="1418" fg:w="2"/><text x="92.2085%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="92.0233%" y="389" width="0.0649%" height="15" fill="rgb(224,220,43)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="92.0233%" y="373" width="0.0649%" height="15" fill="rgb(215,21,24)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="92.0233%" y="357" width="0.0649%" height="15" fill="rgb(220,102,8)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="92.0233%" y="341" width="0.0649%" height="15" fill="rgb(225,185,10)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="92.0233%" y="325" width="0.0649%" height="15" fill="rgb(212,108,24)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="335.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="92.0233%" y="309" width="0.0649%" height="15" fill="rgb(237,27,0)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.0233%" y="293" width="0.0649%" height="15" fill="rgb(212,106,38)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.0233%" y="277" width="0.0649%" height="15" fill="rgb(210,125,30)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.0233%" y="261" width="0.0649%" height="15" fill="rgb(215,219,1)" fg:x="1419" fg:w="1"/><text x="92.2733%" y="271.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="92.0882%" y="357" width="0.0649%" height="15" fill="rgb(223,10,12)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="92.0882%" y="341" width="0.0649%" height="15" fill="rgb(245,40,34)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="92.0882%" y="325" width="0.0649%" height="15" fill="rgb(211,185,19)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="335.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="92.0882%" y="309" width="0.0649%" height="15" fill="rgb(243,190,43)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="92.0882%" y="293" width="0.0649%" height="15" fill="rgb(232,208,29)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="92.0882%" y="277" width="0.0649%" height="15" fill="rgb(234,134,27)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="92.0882%" y="261" width="0.0649%" height="15" fill="rgb(225,41,29)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="271.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="92.0882%" y="245" width="0.0649%" height="15" fill="rgb(241,214,44)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="92.0882%" y="229" width="0.0649%" height="15" fill="rgb(205,219,41)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="92.0882%" y="213" width="0.0649%" height="15" fill="rgb(226,15,26)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="92.0882%" y="197" width="0.0649%" height="15" fill="rgb(210,83,41)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="207.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.0882%" y="181" width="0.0649%" height="15" fill="rgb(247,9,39)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.0882%" y="165" width="0.0649%" height="15" fill="rgb(209,37,30)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.0882%" y="149" width="0.0649%" height="15" fill="rgb(248,170,46)" fg:x="1420" fg:w="1"/><text x="92.3382%" y="159.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="91.6991%" y="645" width="0.5188%" height="15" fill="rgb(237,129,44)" fg:x="1414" fg:w="8"/><text x="91.9491%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="91.6991%" y="629" width="0.5188%" height="15" fill="rgb(225,117,51)" fg:x="1414" fg:w="8"/><text x="91.9491%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="91.8936%" y="613" width="0.3243%" height="15" fill="rgb(212,165,2)" fg:x="1417" fg:w="5"/><text x="92.1436%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="91.8936%" y="597" width="0.3243%" height="15" fill="rgb(213,53,45)" fg:x="1417" fg:w="5"/><text x="92.1436%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="91.8936%" y="581" width="0.3243%" height="15" fill="rgb(220,148,3)" fg:x="1417" fg:w="5"/><text x="92.1436%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="91.9585%" y="565" width="0.2594%" height="15" fill="rgb(228,37,29)" fg:x="1418" fg:w="4"/><text x="92.2085%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="91.9585%" y="549" width="0.2594%" height="15" fill="rgb(209,76,29)" fg:x="1418" fg:w="4"/><text x="92.2085%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="91.9585%" y="533" width="0.2594%" height="15" fill="rgb(215,90,5)" fg:x="1418" fg:w="4"/><text x="92.2085%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="91.9585%" y="517" width="0.2594%" height="15" fill="rgb(227,207,32)" fg:x="1418" fg:w="4"/><text x="92.2085%" y="527.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.0882%" y="501" width="0.1297%" height="15" fill="rgb(251,218,44)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="92.0882%" y="485" width="0.1297%" height="15" fill="rgb(211,44,16)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="92.0882%" y="469" width="0.1297%" height="15" fill="rgb(242,170,37)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="479.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="92.0882%" y="453" width="0.1297%" height="15" fill="rgb(205,181,22)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="463.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="92.0882%" y="437" width="0.1297%" height="15" fill="rgb(228,130,19)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="447.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="92.0882%" y="421" width="0.1297%" height="15" fill="rgb(228,9,15)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.0882%" y="405" width="0.1297%" height="15" fill="rgb(219,66,48)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.0882%" y="389" width="0.1297%" height="15" fill="rgb(234,203,10)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="92.0882%" y="373" width="0.1297%" height="15" fill="rgb(219,209,1)" fg:x="1420" fg:w="2"/><text x="92.3382%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.1530%" y="357" width="0.0649%" height="15" fill="rgb(206,167,9)" fg:x="1421" fg:w="1"/><text x="92.4030%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.1530%" y="341" width="0.0649%" height="15" fill="rgb(210,11,39)" fg:x="1421" fg:w="1"/><text x="92.4030%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.1530%" y="325" width="0.0649%" height="15" fill="rgb(251,90,47)" fg:x="1421" fg:w="1"/><text x="92.4030%" y="335.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (11 samples, 0.71%)</title><rect x="91.5694%" y="757" width="0.7134%" height="15" fill="rgb(237,7,4)" fg:x="1412" fg:w="11"/><text x="91.8194%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (11 samples, 0.71%)</title><rect x="91.5694%" y="741" width="0.7134%" height="15" fill="rgb(232,205,47)" fg:x="1412" fg:w="11"/><text x="91.8194%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="91.6991%" y="725" width="0.5837%" height="15" fill="rgb(215,86,48)" fg:x="1414" fg:w="9"/><text x="91.9491%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="91.6991%" y="709" width="0.5837%" height="15" fill="rgb(232,14,47)" fg:x="1414" fg:w="9"/><text x="91.9491%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="91.6991%" y="693" width="0.5837%" height="15" fill="rgb(240,28,46)" fg:x="1414" fg:w="9"/><text x="91.9491%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="91.6991%" y="677" width="0.5837%" height="15" fill="rgb(224,85,5)" fg:x="1414" fg:w="9"/><text x="91.9491%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (9 samples, 0.58%)</title><rect x="91.6991%" y="661" width="0.5837%" height="15" fill="rgb(219,34,25)" fg:x="1414" fg:w="9"/><text x="91.9491%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.2179%" y="645" width="0.0649%" height="15" fill="rgb(247,137,45)" fg:x="1422" fg:w="1"/><text x="92.4679%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.2179%" y="629" width="0.0649%" height="15" fill="rgb(237,121,47)" fg:x="1422" fg:w="1"/><text x="92.4679%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.2179%" y="613" width="0.0649%" height="15" fill="rgb(247,148,27)" fg:x="1422" fg:w="1"/><text x="92.4679%" y="623.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (12 samples, 0.78%)</title><rect x="91.5694%" y="933" width="0.7782%" height="15" fill="rgb(220,44,0)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (12 samples, 0.78%)</title><rect x="91.5694%" y="917" width="0.7782%" height="15" fill="rgb(236,61,29)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (12 samples, 0.78%)</title><rect x="91.5694%" y="901" width="0.7782%" height="15" fill="rgb(244,180,35)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="911.50"></text></g><g><title>bincode::internal::deserialize (12 samples, 0.78%)</title><rect x="91.5694%" y="885" width="0.7782%" height="15" fill="rgb(242,14,54)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (12 samples, 0.78%)</title><rect x="91.5694%" y="869" width="0.7782%" height="15" fill="rgb(206,24,45)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="91.5694%" y="853" width="0.7782%" height="15" fill="rgb(215,211,6)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (12 samples, 0.78%)</title><rect x="91.5694%" y="837" width="0.7782%" height="15" fill="rgb(207,56,2)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (12 samples, 0.78%)</title><rect x="91.5694%" y="821" width="0.7782%" height="15" fill="rgb(220,135,9)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.78%)</title><rect x="91.5694%" y="805" width="0.7782%" height="15" fill="rgb(214,145,52)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (12 samples, 0.78%)</title><rect x="91.5694%" y="789" width="0.7782%" height="15" fill="rgb(241,83,53)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 0.78%)</title><rect x="91.5694%" y="773" width="0.7782%" height="15" fill="rgb(222,66,13)" fg:x="1412" fg:w="12"/><text x="91.8194%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.2827%" y="757" width="0.0649%" height="15" fill="rgb(239,164,54)" fg:x="1423" fg:w="1"/><text x="92.5327%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.2827%" y="741" width="0.0649%" height="15" fill="rgb(216,189,13)" fg:x="1423" fg:w="1"/><text x="92.5327%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.2827%" y="725" width="0.0649%" height="15" fill="rgb(228,212,51)" fg:x="1423" fg:w="1"/><text x="92.5327%" y="735.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (13 samples, 0.84%)</title><rect x="91.5694%" y="949" width="0.8431%" height="15" fill="rgb(207,190,21)" fg:x="1412" fg:w="13"/><text x="91.8194%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (1 samples, 0.06%)</title><rect x="92.3476%" y="933" width="0.0649%" height="15" fill="rgb(245,28,35)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="92.3476%" y="917" width="0.0649%" height="15" fill="rgb(239,23,40)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="92.3476%" y="901" width="0.0649%" height="15" fill="rgb(242,10,51)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="911.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.06%)</title><rect x="92.3476%" y="885" width="0.0649%" height="15" fill="rgb(207,186,5)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.3476%" y="869" width="0.0649%" height="15" fill="rgb(242,21,16)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.3476%" y="853" width="0.0649%" height="15" fill="rgb(237,0,53)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.3476%" y="837" width="0.0649%" height="15" fill="rgb(215,8,52)" fg:x="1424" fg:w="1"/><text x="92.5976%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.4125%" y="597" width="0.0649%" height="15" fill="rgb(248,62,44)" fg:x="1425" fg:w="1"/><text x="92.6625%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.4125%" y="581" width="0.0649%" height="15" fill="rgb(224,83,15)" fg:x="1425" fg:w="1"/><text x="92.6625%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.4125%" y="565" width="0.0649%" height="15" fill="rgb(249,100,46)" fg:x="1425" fg:w="1"/><text x="92.6625%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="92.4773%" y="261" width="0.0649%" height="15" fill="rgb(213,35,48)" fg:x="1426" fg:w="1"/><text x="92.7273%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="92.4773%" y="245" width="0.0649%" height="15" fill="rgb(251,2,13)" fg:x="1426" fg:w="1"/><text x="92.7273%" y="255.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="92.4773%" y="229" width="0.0649%" height="15" fill="rgb(212,132,21)" fg:x="1426" fg:w="1"/><text x="92.7273%" y="239.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.4773%" y="213" width="0.0649%" height="15" fill="rgb(247,17,21)" fg:x="1426" fg:w="1"/><text x="92.7273%" y="223.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.4773%" y="197" width="0.0649%" height="15" fill="rgb(220,177,38)" fg:x="1426" fg:w="1"/><text x="92.7273%" y="207.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.4773%" y="181" width="0.0649%" height="15" fill="rgb(233,219,21)" fg:x="1426" fg:w="1"/><text x="92.7273%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="92.4125%" y="725" width="0.1946%" height="15" fill="rgb(246,17,7)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="92.4125%" y="709" width="0.1946%" height="15" fill="rgb(212,4,22)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="92.4125%" y="693" width="0.1946%" height="15" fill="rgb(243,85,21)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="92.4125%" y="677" width="0.1946%" height="15" fill="rgb(232,218,2)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="92.4125%" y="661" width="0.1946%" height="15" fill="rgb(253,168,47)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="92.4125%" y="645" width="0.1946%" height="15" fill="rgb(238,101,25)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="92.4125%" y="629" width="0.1946%" height="15" fill="rgb(251,86,12)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="92.4125%" y="613" width="0.1946%" height="15" fill="rgb(241,112,44)" fg:x="1425" fg:w="3"/><text x="92.6625%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.4773%" y="597" width="0.1297%" height="15" fill="rgb(224,28,25)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="92.4773%" y="581" width="0.1297%" height="15" fill="rgb(209,201,1)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="92.4773%" y="565" width="0.1297%" height="15" fill="rgb(231,30,22)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="92.4773%" y="549" width="0.1297%" height="15" fill="rgb(247,96,31)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="92.4773%" y="533" width="0.1297%" height="15" fill="rgb(251,100,12)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="92.4773%" y="517" width="0.1297%" height="15" fill="rgb(224,174,7)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.4773%" y="501" width="0.1297%" height="15" fill="rgb(231,168,19)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="511.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.4773%" y="485" width="0.1297%" height="15" fill="rgb(226,85,5)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="92.4773%" y="469" width="0.1297%" height="15" fill="rgb(210,215,5)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="92.4773%" y="453" width="0.1297%" height="15" fill="rgb(233,70,8)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="463.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="92.4773%" y="437" width="0.1297%" height="15" fill="rgb(229,109,53)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="447.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="92.4773%" y="421" width="0.1297%" height="15" fill="rgb(213,125,35)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="431.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="92.4773%" y="405" width="0.1297%" height="15" fill="rgb(215,12,48)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="415.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.4773%" y="389" width="0.1297%" height="15" fill="rgb(207,12,38)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="92.4773%" y="373" width="0.1297%" height="15" fill="rgb(216,229,2)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="383.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="92.4773%" y="357" width="0.1297%" height="15" fill="rgb(229,209,31)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="367.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="92.4773%" y="341" width="0.1297%" height="15" fill="rgb(239,57,22)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="351.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="92.4773%" y="325" width="0.1297%" height="15" fill="rgb(239,119,54)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="335.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="92.4773%" y="309" width="0.1297%" height="15" fill="rgb(231,80,45)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="92.4773%" y="293" width="0.1297%" height="15" fill="rgb(219,138,19)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="303.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="92.4773%" y="277" width="0.1297%" height="15" fill="rgb(216,53,26)" fg:x="1426" fg:w="2"/><text x="92.7273%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="92.5422%" y="261" width="0.0649%" height="15" fill="rgb(224,30,16)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="92.5422%" y="245" width="0.0649%" height="15" fill="rgb(224,151,24)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="92.5422%" y="229" width="0.0649%" height="15" fill="rgb(236,75,7)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="92.5422%" y="213" width="0.0649%" height="15" fill="rgb(248,106,42)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="92.5422%" y="197" width="0.0649%" height="15" fill="rgb(222,217,11)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="207.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="92.5422%" y="181" width="0.0649%" height="15" fill="rgb(234,143,31)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="191.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.5422%" y="165" width="0.0649%" height="15" fill="rgb(237,148,28)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="175.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.5422%" y="149" width="0.0649%" height="15" fill="rgb(241,151,6)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="159.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.5422%" y="133" width="0.0649%" height="15" fill="rgb(226,55,18)" fg:x="1427" fg:w="1"/><text x="92.7922%" y="143.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (4 samples, 0.26%)</title><rect x="92.4125%" y="949" width="0.2594%" height="15" fill="rgb(226,196,6)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="92.4125%" y="933" width="0.2594%" height="15" fill="rgb(251,228,11)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="92.4125%" y="917" width="0.2594%" height="15" fill="rgb(219,197,15)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="92.4125%" y="901" width="0.2594%" height="15" fill="rgb(243,105,44)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="92.4125%" y="885" width="0.2594%" height="15" fill="rgb(205,183,40)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="895.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="92.4125%" y="869" width="0.2594%" height="15" fill="rgb(232,138,46)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="92.4125%" y="853" width="0.2594%" height="15" fill="rgb(234,161,14)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="92.4125%" y="837" width="0.2594%" height="15" fill="rgb(238,211,18)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="92.4125%" y="821" width="0.2594%" height="15" fill="rgb(217,130,2)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="92.4125%" y="805" width="0.2594%" height="15" fill="rgb(251,17,29)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="92.4125%" y="789" width="0.2594%" height="15" fill="rgb(243,18,0)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="92.4125%" y="773" width="0.2594%" height="15" fill="rgb(227,220,45)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="92.4125%" y="757" width="0.2594%" height="15" fill="rgb(212,34,2)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="92.4125%" y="741" width="0.2594%" height="15" fill="rgb(236,23,8)" fg:x="1425" fg:w="4"/><text x="92.6625%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="92.6070%" y="725" width="0.0649%" height="15" fill="rgb(210,113,39)" fg:x="1428" fg:w="1"/><text x="92.8570%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.6070%" y="709" width="0.0649%" height="15" fill="rgb(243,123,48)" fg:x="1428" fg:w="1"/><text x="92.8570%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.6070%" y="693" width="0.0649%" height="15" fill="rgb(223,175,36)" fg:x="1428" fg:w="1"/><text x="92.8570%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.6070%" y="677" width="0.0649%" height="15" fill="rgb(226,100,30)" fg:x="1428" fg:w="1"/><text x="92.8570%" y="687.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (43 samples, 2.79%)</title><rect x="89.9481%" y="997" width="2.7886%" height="15" fill="rgb(221,225,39)" fg:x="1387" fg:w="43"/><text x="90.1981%" y="1007.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (43 samples, 2.79%)</title><rect x="89.9481%" y="981" width="2.7886%" height="15" fill="rgb(224,222,42)" fg:x="1387" fg:w="43"/><text x="90.1981%" y="991.50">re..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (38 samples, 2.46%)</title><rect x="90.2724%" y="965" width="2.4643%" height="15" fill="rgb(221,53,1)" fg:x="1392" fg:w="38"/><text x="90.5224%" y="975.50">re..</text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="92.6719%" y="949" width="0.0649%" height="15" fill="rgb(216,187,48)" fg:x="1429" fg:w="1"/><text x="92.9219%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_end (1 samples, 0.06%)</title><rect x="92.6719%" y="933" width="0.0649%" height="15" fill="rgb(220,108,2)" fg:x="1429" fg:w="1"/><text x="92.9219%" y="943.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="92.6719%" y="917" width="0.0649%" height="15" fill="rgb(216,13,42)" fg:x="1429" fg:w="1"/><text x="92.9219%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.6719%" y="901" width="0.0649%" height="15" fill="rgb(205,14,29)" fg:x="1429" fg:w="1"/><text x="92.9219%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.6719%" y="885" width="0.0649%" height="15" fill="rgb(217,168,30)" fg:x="1429" fg:w="1"/><text x="92.9219%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.6719%" y="869" width="0.0649%" height="15" fill="rgb(246,173,54)" fg:x="1429" fg:w="1"/><text x="92.9219%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.7367%" y="965" width="0.0649%" height="15" fill="rgb(227,177,11)" fg:x="1430" fg:w="1"/><text x="92.9867%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.7367%" y="949" width="0.0649%" height="15" fill="rgb(223,215,51)" fg:x="1430" fg:w="1"/><text x="92.9867%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.7367%" y="933" width="0.0649%" height="15" fill="rgb(253,4,17)" fg:x="1430" fg:w="1"/><text x="92.9867%" y="943.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (2 samples, 0.13%)</title><rect x="92.7367%" y="981" width="0.1297%" height="15" fill="rgb(206,150,43)" fg:x="1430" fg:w="2"/><text x="92.9867%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="92.8016%" y="965" width="0.0649%" height="15" fill="rgb(241,100,52)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="92.8016%" y="949" width="0.0649%" height="15" fill="rgb(234,120,21)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="959.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="92.8016%" y="933" width="0.0649%" height="15" fill="rgb(231,60,11)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="943.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="92.8016%" y="917" width="0.0649%" height="15" fill="rgb(247,77,50)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.06%)</title><rect x="92.8016%" y="901" width="0.0649%" height="15" fill="rgb(251,199,54)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.06%)</title><rect x="92.8016%" y="885" width="0.0649%" height="15" fill="rgb(212,120,38)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.06%)</title><rect x="92.8016%" y="869" width="0.0649%" height="15" fill="rgb(250,161,37)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.06%)</title><rect x="92.8016%" y="853" width="0.0649%" height="15" fill="rgb(232,158,45)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="92.8016%" y="837" width="0.0649%" height="15" fill="rgb(233,114,2)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="92.8016%" y="821" width="0.0649%" height="15" fill="rgb(248,139,0)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.06%)</title><rect x="92.8016%" y="805" width="0.0649%" height="15" fill="rgb(222,164,18)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.06%)</title><rect x="92.8016%" y="789" width="0.0649%" height="15" fill="rgb(221,140,42)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="92.8016%" y="773" width="0.0649%" height="15" fill="rgb(209,186,11)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="92.8016%" y="757" width="0.0649%" height="15" fill="rgb(254,212,38)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="767.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="92.8016%" y="741" width="0.0649%" height="15" fill="rgb(219,156,31)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="751.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="92.8016%" y="725" width="0.0649%" height="15" fill="rgb(222,148,42)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.8016%" y="709" width="0.0649%" height="15" fill="rgb(225,65,5)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.8016%" y="693" width="0.0649%" height="15" fill="rgb(235,28,12)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.8016%" y="677" width="0.0649%" height="15" fill="rgb(245,58,4)" fg:x="1431" fg:w="1"/><text x="93.0516%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (1 samples, 0.06%)</title><rect x="92.8664%" y="949" width="0.0649%" height="15" fill="rgb(235,118,5)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="92.8664%" y="933" width="0.0649%" height="15" fill="rgb(253,196,3)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="92.8664%" y="917" width="0.0649%" height="15" fill="rgb(238,90,28)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="92.8664%" y="901" width="0.0649%" height="15" fill="rgb(254,227,4)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="92.8664%" y="885" width="0.0649%" height="15" fill="rgb(237,114,35)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="92.8664%" y="869" width="0.0649%" height="15" fill="rgb(221,147,29)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="92.8664%" y="853" width="0.0649%" height="15" fill="rgb(216,201,17)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="92.8664%" y="837" width="0.0649%" height="15" fill="rgb(251,46,50)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="92.8664%" y="821" width="0.0649%" height="15" fill="rgb(216,143,48)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="92.8664%" y="805" width="0.0649%" height="15" fill="rgb(224,62,51)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="92.8664%" y="789" width="0.0649%" height="15" fill="rgb(232,152,20)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="92.8664%" y="773" width="0.0649%" height="15" fill="rgb(233,194,7)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="92.8664%" y="757" width="0.0649%" height="15" fill="rgb(207,33,22)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.8664%" y="741" width="0.0649%" height="15" fill="rgb(226,54,34)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.8664%" y="725" width="0.0649%" height="15" fill="rgb(227,161,47)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.8664%" y="709" width="0.0649%" height="15" fill="rgb(218,58,37)" fg:x="1432" fg:w="1"/><text x="93.1164%" y="719.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="92.9313%" y="933" width="0.0649%" height="15" fill="rgb(208,173,18)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="92.9313%" y="917" width="0.0649%" height="15" fill="rgb(230,159,11)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="92.9313%" y="901" width="0.0649%" height="15" fill="rgb(238,90,51)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="92.9313%" y="885" width="0.0649%" height="15" fill="rgb(225,97,36)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="92.9313%" y="869" width="0.0649%" height="15" fill="rgb(211,205,42)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="92.9313%" y="853" width="0.0649%" height="15" fill="rgb(219,152,7)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="92.9313%" y="837" width="0.0649%" height="15" fill="rgb(222,79,10)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="92.9313%" y="821" width="0.0649%" height="15" fill="rgb(242,13,11)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.9313%" y="805" width="0.0649%" height="15" fill="rgb(231,143,41)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.9313%" y="789" width="0.0649%" height="15" fill="rgb(222,147,19)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.9313%" y="773" width="0.0649%" height="15" fill="rgb(235,5,39)" fg:x="1433" fg:w="1"/><text x="93.1813%" y="783.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (1 samples, 0.06%)</title><rect x="92.9961%" y="917" width="0.0649%" height="15" fill="rgb(246,155,51)" fg:x="1434" fg:w="1"/><text x="93.2461%" y="927.50"></text></g><g><title>&lt;&amp;str as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="92.9961%" y="901" width="0.0649%" height="15" fill="rgb(218,157,4)" fg:x="1434" fg:w="1"/><text x="93.2461%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="92.9961%" y="885" width="0.0649%" height="15" fill="rgb(226,184,4)" fg:x="1434" fg:w="1"/><text x="93.2461%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="92.9961%" y="869" width="0.0649%" height="15" fill="rgb(210,103,26)" fg:x="1434" fg:w="1"/><text x="93.2461%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="92.9961%" y="853" width="0.0649%" height="15" fill="rgb(228,23,31)" fg:x="1434" fg:w="1"/><text x="93.2461%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="93.0610%" y="789" width="0.0649%" height="15" fill="rgb(205,176,34)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="93.0610%" y="773" width="0.0649%" height="15" fill="rgb(246,213,37)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="93.0610%" y="757" width="0.0649%" height="15" fill="rgb(213,52,45)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="93.0610%" y="741" width="0.0649%" height="15" fill="rgb(249,9,52)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.0610%" y="725" width="0.0649%" height="15" fill="rgb(205,97,16)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.0610%" y="709" width="0.0649%" height="15" fill="rgb(214,11,46)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.0610%" y="693" width="0.0649%" height="15" fill="rgb(221,66,18)" fg:x="1435" fg:w="1"/><text x="93.3110%" y="703.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (4 samples, 0.26%)</title><rect x="92.9313%" y="949" width="0.2594%" height="15" fill="rgb(213,49,1)" fg:x="1433" fg:w="4"/><text x="93.1813%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (3 samples, 0.19%)</title><rect x="92.9961%" y="933" width="0.1946%" height="15" fill="rgb(232,75,51)" fg:x="1434" fg:w="3"/><text x="93.2461%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (2 samples, 0.13%)</title><rect x="93.0610%" y="917" width="0.1297%" height="15" fill="rgb(208,218,40)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="927.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (2 samples, 0.13%)</title><rect x="93.0610%" y="901" width="0.1297%" height="15" fill="rgb(206,144,50)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="911.50"></text></g><g><title>redb::tree_store::page_store::lru_cache::LRUCache&lt;T&gt;::get (2 samples, 0.13%)</title><rect x="93.0610%" y="885" width="0.1297%" height="15" fill="rgb(216,9,51)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="895.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.13%)</title><rect x="93.0610%" y="869" width="0.1297%" height="15" fill="rgb(226,6,53)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.13%)</title><rect x="93.0610%" y="853" width="0.1297%" height="15" fill="rgb(216,9,50)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.13%)</title><rect x="93.0610%" y="837" width="0.1297%" height="15" fill="rgb(214,101,31)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="847.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="93.0610%" y="821" width="0.1297%" height="15" fill="rgb(247,85,17)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="831.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="93.0610%" y="805" width="0.1297%" height="15" fill="rgb(248,138,25)" fg:x="1435" fg:w="2"/><text x="93.3110%" y="815.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="93.1258%" y="789" width="0.0649%" height="15" fill="rgb(225,146,20)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="799.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="93.1258%" y="773" width="0.0649%" height="15" fill="rgb(224,184,17)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="783.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.06%)</title><rect x="93.1258%" y="757" width="0.0649%" height="15" fill="rgb(231,10,20)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="93.1258%" y="741" width="0.0649%" height="15" fill="rgb(210,93,37)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.1258%" y="725" width="0.0649%" height="15" fill="rgb(226,84,42)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.1258%" y="709" width="0.0649%" height="15" fill="rgb(253,192,7)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.1258%" y="693" width="0.0649%" height="15" fill="rgb(214,107,27)" fg:x="1436" fg:w="1"/><text x="93.3758%" y="703.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="93.1907%" y="917" width="0.0649%" height="15" fill="rgb(238,146,21)" fg:x="1437" fg:w="1"/><text x="93.4407%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.1907%" y="901" width="0.0649%" height="15" fill="rgb(209,136,30)" fg:x="1437" fg:w="1"/><text x="93.4407%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.1907%" y="885" width="0.0649%" height="15" fill="rgb(226,60,22)" fg:x="1437" fg:w="1"/><text x="93.4407%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.1907%" y="869" width="0.0649%" height="15" fill="rgb(243,92,26)" fg:x="1437" fg:w="1"/><text x="93.4407%" y="879.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (7 samples, 0.45%)</title><rect x="92.8664%" y="965" width="0.4540%" height="15" fill="rgb(211,85,33)" fg:x="1432" fg:w="7"/><text x="93.1164%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (2 samples, 0.13%)</title><rect x="93.1907%" y="949" width="0.1297%" height="15" fill="rgb(243,187,44)" fg:x="1437" fg:w="2"/><text x="93.4407%" y="959.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="93.1907%" y="933" width="0.1297%" height="15" fill="rgb(251,172,23)" fg:x="1437" fg:w="2"/><text x="93.4407%" y="943.50"></text></g><g><title>redb::types::TypeName::from_bytes (1 samples, 0.06%)</title><rect x="93.2555%" y="917" width="0.0649%" height="15" fill="rgb(254,162,50)" fg:x="1438" fg:w="1"/><text x="93.5055%" y="927.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="93.2555%" y="901" width="0.0649%" height="15" fill="rgb(239,14,53)" fg:x="1438" fg:w="1"/><text x="93.5055%" y="911.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="93.2555%" y="885" width="0.0649%" height="15" fill="rgb(242,208,8)" fg:x="1438" fg:w="1"/><text x="93.5055%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.2555%" y="869" width="0.0649%" height="15" fill="rgb(225,61,41)" fg:x="1438" fg:w="1"/><text x="93.5055%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.2555%" y="853" width="0.0649%" height="15" fill="rgb(219,154,6)" fg:x="1438" fg:w="1"/><text x="93.5055%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.2555%" y="837" width="0.0649%" height="15" fill="rgb(227,223,44)" fg:x="1438" fg:w="1"/><text x="93.5055%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.3204%" y="821" width="0.0649%" height="15" fill="rgb(220,188,6)" fg:x="1439" fg:w="1"/><text x="93.5704%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.3204%" y="805" width="0.0649%" height="15" fill="rgb(216,65,22)" fg:x="1439" fg:w="1"/><text x="93.5704%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.3204%" y="789" width="0.0649%" height="15" fill="rgb(236,66,46)" fg:x="1439" fg:w="1"/><text x="93.5704%" y="799.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.13%)</title><rect x="93.3204%" y="949" width="0.1297%" height="15" fill="rgb(211,150,52)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="959.50"></text></g><g><title>&lt;redb::types::TypeName as core::cmp::PartialEq&gt;::eq (2 samples, 0.13%)</title><rect x="93.3204%" y="933" width="0.1297%" height="15" fill="rgb(253,89,19)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="943.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.13%)</title><rect x="93.3204%" y="917" width="0.1297%" height="15" fill="rgb(245,4,1)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="927.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.13%)</title><rect x="93.3204%" y="901" width="0.1297%" height="15" fill="rgb(230,109,16)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.13%)</title><rect x="93.3204%" y="885" width="0.1297%" height="15" fill="rgb(213,7,47)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.13%)</title><rect x="93.3204%" y="869" width="0.1297%" height="15" fill="rgb(242,148,14)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (2 samples, 0.13%)</title><rect x="93.3204%" y="853" width="0.1297%" height="15" fill="rgb(238,51,34)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="863.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="93.3204%" y="837" width="0.1297%" height="15" fill="rgb(222,49,22)" fg:x="1439" fg:w="2"/><text x="93.5704%" y="847.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="93.3852%" y="821" width="0.0649%" height="15" fill="rgb(237,102,50)" fg:x="1440" fg:w="1"/><text x="93.6352%" y="831.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="93.3852%" y="805" width="0.0649%" height="15" fill="rgb(237,195,8)" fg:x="1440" fg:w="1"/><text x="93.6352%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.3852%" y="789" width="0.0649%" height="15" fill="rgb(245,60,18)" fg:x="1440" fg:w="1"/><text x="93.6352%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.3852%" y="773" width="0.0649%" height="15" fill="rgb(253,74,32)" fg:x="1440" fg:w="1"/><text x="93.6352%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.3852%" y="757" width="0.0649%" height="15" fill="rgb(240,91,39)" fg:x="1440" fg:w="1"/><text x="93.6352%" y="767.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (12 samples, 0.78%)</title><rect x="92.7367%" y="997" width="0.7782%" height="15" fill="rgb(221,162,34)" fg:x="1430" fg:w="12"/><text x="92.9867%" y="1007.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (10 samples, 0.65%)</title><rect x="92.8664%" y="981" width="0.6485%" height="15" fill="rgb(223,32,2)" fg:x="1432" fg:w="10"/><text x="93.1164%" y="991.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (3 samples, 0.19%)</title><rect x="93.3204%" y="965" width="0.1946%" height="15" fill="rgb(245,220,46)" fg:x="1439" fg:w="3"/><text x="93.5704%" y="975.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match_untyped (1 samples, 0.06%)</title><rect x="93.4501%" y="949" width="0.0649%" height="15" fill="rgb(216,38,33)" fg:x="1441" fg:w="1"/><text x="93.7001%" y="959.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="93.4501%" y="933" width="0.0649%" height="15" fill="rgb(210,123,14)" fg:x="1441" fg:w="1"/><text x="93.7001%" y="943.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::TableType as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="93.4501%" y="917" width="0.0649%" height="15" fill="rgb(214,38,47)" fg:x="1441" fg:w="1"/><text x="93.7001%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.4501%" y="901" width="0.0649%" height="15" fill="rgb(244,180,16)" fg:x="1441" fg:w="1"/><text x="93.7001%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.4501%" y="885" width="0.0649%" height="15" fill="rgb(252,21,32)" fg:x="1441" fg:w="1"/><text x="93.7001%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.4501%" y="869" width="0.0649%" height="15" fill="rgb(245,218,31)" fg:x="1441" fg:w="1"/><text x="93.7001%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.5149%" y="901" width="0.0649%" height="15" fill="rgb(247,81,18)" fg:x="1442" fg:w="1"/><text x="93.7649%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.5149%" y="885" width="0.0649%" height="15" fill="rgb(220,151,1)" fg:x="1442" fg:w="1"/><text x="93.7649%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.5149%" y="869" width="0.0649%" height="15" fill="rgb(211,157,11)" fg:x="1442" fg:w="1"/><text x="93.7649%" y="879.50"></text></g><g><title>utxo::Utxo::get_by_address (98 samples, 6.36%)</title><rect x="87.2892%" y="1061" width="6.3554%" height="15" fill="rgb(239,46,30)" fg:x="1346" fg:w="98"/><text x="87.5392%" y="1071.50">utxo::Ut..</text></g><g><title>utxo::Utxo::compose (94 samples, 6.10%)</title><rect x="87.5486%" y="1045" width="6.0960%" height="15" fill="rgb(236,144,43)" fg:x="1350" fg:w="94"/><text x="87.7986%" y="1055.50">utxo::Ut..</text></g><g><title>utxo::Asset::range (74 samples, 4.80%)</title><rect x="88.8457%" y="1029" width="4.7990%" height="15" fill="rgb(206,71,45)" fg:x="1370" fg:w="74"/><text x="89.0957%" y="1039.50">utxo::..</text></g><g><title>utxo::Asset::compose (64 samples, 4.15%)</title><rect x="89.4942%" y="1013" width="4.1505%" height="15" fill="rgb(240,85,31)" fg:x="1380" fg:w="64"/><text x="89.7442%" y="1023.50">utxo:..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (2 samples, 0.13%)</title><rect x="93.5149%" y="997" width="0.1297%" height="15" fill="rgb(221,43,52)" fg:x="1442" fg:w="2"/><text x="93.7649%" y="1007.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="93.5149%" y="981" width="0.1297%" height="15" fill="rgb(243,106,22)" fg:x="1442" fg:w="2"/><text x="93.7649%" y="991.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="93.5149%" y="965" width="0.1297%" height="15" fill="rgb(209,138,38)" fg:x="1442" fg:w="2"/><text x="93.7649%" y="975.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="93.5149%" y="949" width="0.1297%" height="15" fill="rgb(216,63,40)" fg:x="1442" fg:w="2"/><text x="93.7649%" y="959.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="93.5149%" y="933" width="0.1297%" height="15" fill="rgb(206,115,21)" fg:x="1442" fg:w="2"/><text x="93.7649%" y="943.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="93.5149%" y="917" width="0.1297%" height="15" fill="rgb(235,53,44)" fg:x="1442" fg:w="2"/><text x="93.7649%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.5798%" y="901" width="0.0649%" height="15" fill="rgb(244,160,14)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="93.5798%" y="885" width="0.0649%" height="15" fill="rgb(223,16,19)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="93.5798%" y="869" width="0.0649%" height="15" fill="rgb(242,63,42)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="879.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="93.5798%" y="853" width="0.0649%" height="15" fill="rgb(209,66,49)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="863.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="93.5798%" y="837" width="0.0649%" height="15" fill="rgb(207,126,46)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="847.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="93.5798%" y="821" width="0.0649%" height="15" fill="rgb(218,160,41)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.5798%" y="805" width="0.0649%" height="15" fill="rgb(234,125,46)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.5798%" y="789" width="0.0649%" height="15" fill="rgb(205,66,36)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="93.5798%" y="773" width="0.0649%" height="15" fill="rgb(220,135,16)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="93.5798%" y="757" width="0.0649%" height="15" fill="rgb(214,217,54)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="93.5798%" y="741" width="0.0649%" height="15" fill="rgb(206,30,9)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="93.5798%" y="725" width="0.0649%" height="15" fill="rgb(207,196,5)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="93.5798%" y="709" width="0.0649%" height="15" fill="rgb(227,116,12)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.5798%" y="693" width="0.0649%" height="15" fill="rgb(235,227,13)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="703.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.5798%" y="677" width="0.0649%" height="15" fill="rgb(238,212,29)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="93.5798%" y="661" width="0.0649%" height="15" fill="rgb(230,152,17)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="671.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="93.5798%" y="645" width="0.0649%" height="15" fill="rgb(220,197,1)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="655.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="93.5798%" y="629" width="0.0649%" height="15" fill="rgb(229,227,40)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="639.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="93.5798%" y="613" width="0.0649%" height="15" fill="rgb(227,179,16)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="623.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="93.5798%" y="597" width="0.0649%" height="15" fill="rgb(246,116,44)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="93.5798%" y="581" width="0.0649%" height="15" fill="rgb(205,191,4)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="93.5798%" y="565" width="0.0649%" height="15" fill="rgb(245,69,19)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.5798%" y="549" width="0.0649%" height="15" fill="rgb(230,29,26)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.5798%" y="533" width="0.0649%" height="15" fill="rgb(239,192,26)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.5798%" y="517" width="0.0649%" height="15" fill="rgb(219,92,16)" fg:x="1443" fg:w="1"/><text x="93.8298%" y="527.50"></text></g><g><title>&lt;redb::multimap_table::MultimapValue&lt;V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="93.6446%" y="1045" width="0.0649%" height="15" fill="rgb(246,147,43)" fg:x="1444" fg:w="1"/><text x="93.8946%" y="1055.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="93.6446%" y="1029" width="0.0649%" height="15" fill="rgb(222,147,11)" fg:x="1444" fg:w="1"/><text x="93.8946%" y="1039.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.6446%" y="1013" width="0.0649%" height="15" fill="rgb(243,71,8)" fg:x="1444" fg:w="1"/><text x="93.8946%" y="1023.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.6446%" y="997" width="0.0649%" height="15" fill="rgb(250,36,12)" fg:x="1444" fg:w="1"/><text x="93.8946%" y="1007.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.6446%" y="981" width="0.0649%" height="15" fill="rgb(207,168,14)" fg:x="1444" fg:w="1"/><text x="93.8946%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="93.7095%" y="1045" width="0.0649%" height="15" fill="rgb(254,210,51)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="1055.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="93.7095%" y="1029" width="0.0649%" height="15" fill="rgb(236,152,38)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="1039.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="93.7095%" y="1013" width="0.0649%" height="15" fill="rgb(240,164,36)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="1023.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="93.7095%" y="997" width="0.0649%" height="15" fill="rgb(210,171,36)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="1007.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="93.7095%" y="981" width="0.0649%" height="15" fill="rgb(254,156,34)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.7095%" y="965" width="0.0649%" height="15" fill="rgb(216,204,23)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="975.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.7095%" y="949" width="0.0649%" height="15" fill="rgb(230,75,38)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="959.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="93.7095%" y="933" width="0.0649%" height="15" fill="rgb(248,197,25)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="943.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="93.7095%" y="917" width="0.0649%" height="15" fill="rgb(234,121,26)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="927.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="93.7095%" y="901" width="0.0649%" height="15" fill="rgb(220,41,36)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="911.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="93.7095%" y="885" width="0.0649%" height="15" fill="rgb(227,33,32)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="895.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="93.7095%" y="869" width="0.0649%" height="15" fill="rgb(208,214,54)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.7095%" y="853" width="0.0649%" height="15" fill="rgb(205,37,38)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="93.7095%" y="837" width="0.0649%" height="15" fill="rgb(252,2,0)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="93.7095%" y="821" width="0.0649%" height="15" fill="rgb(212,171,10)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="93.7095%" y="805" width="0.0649%" height="15" fill="rgb(239,35,46)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.7095%" y="789" width="0.0649%" height="15" fill="rgb(209,34,42)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.7095%" y="773" width="0.0649%" height="15" fill="rgb(237,9,4)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.7095%" y="757" width="0.0649%" height="15" fill="rgb(254,55,38)" fg:x="1445" fg:w="1"/><text x="93.9595%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="93.7743%" y="949" width="0.0649%" height="15" fill="rgb(222,95,29)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="93.7743%" y="933" width="0.0649%" height="15" fill="rgb(241,218,37)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="93.7743%" y="917" width="0.0649%" height="15" fill="rgb(225,89,28)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="93.7743%" y="901" width="0.0649%" height="15" fill="rgb(231,17,25)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="93.7743%" y="885" width="0.0649%" height="15" fill="rgb(206,216,48)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="93.7743%" y="869" width="0.0649%" height="15" fill="rgb(247,190,28)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="93.7743%" y="853" width="0.0649%" height="15" fill="rgb(216,196,12)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="93.7743%" y="837" width="0.0649%" height="15" fill="rgb(232,114,19)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.06%)</title><rect x="93.7743%" y="821" width="0.0649%" height="15" fill="rgb(240,60,14)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="831.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="93.7743%" y="805" width="0.0649%" height="15" fill="rgb(250,108,9)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="815.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="93.7743%" y="789" width="0.0649%" height="15" fill="rgb(227,228,21)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="93.7743%" y="773" width="0.0649%" height="15" fill="rgb(254,16,52)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="93.7743%" y="757" width="0.0649%" height="15" fill="rgb(222,58,2)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.7743%" y="741" width="0.0649%" height="15" fill="rgb(253,68,14)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.7743%" y="725" width="0.0649%" height="15" fill="rgb(226,96,17)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.7743%" y="709" width="0.0649%" height="15" fill="rgb(227,199,2)" fg:x="1446" fg:w="1"/><text x="94.0243%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="93.7743%" y="1029" width="0.1297%" height="15" fill="rgb(228,227,48)" fg:x="1446" fg:w="2"/><text x="94.0243%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::UtxoPointer&gt;,redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="93.7743%" y="1013" width="0.1297%" height="15" fill="rgb(249,183,0)" fg:x="1446" fg:w="2"/><text x="94.0243%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (2 samples, 0.13%)</title><rect x="93.7743%" y="997" width="0.1297%" height="15" fill="rgb(250,89,38)" fg:x="1446" fg:w="2"/><text x="94.0243%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="93.7743%" y="981" width="0.1297%" height="15" fill="rgb(240,227,8)" fg:x="1446" fg:w="2"/><text x="94.0243%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="93.7743%" y="965" width="0.1297%" height="15" fill="rgb(242,197,35)" fg:x="1446" fg:w="2"/><text x="94.0243%" y="975.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="93.8392%" y="949" width="0.0649%" height="15" fill="rgb(224,37,41)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="959.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="93.8392%" y="933" width="0.0649%" height="15" fill="rgb(236,127,7)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="943.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="93.8392%" y="917" width="0.0649%" height="15" fill="rgb(230,62,52)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="927.50"></text></g><g><title>std::thread::panicking (1 samples, 0.06%)</title><rect x="93.8392%" y="901" width="0.0649%" height="15" fill="rgb(235,114,23)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="911.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.06%)</title><rect x="93.8392%" y="885" width="0.0649%" height="15" fill="rgb(211,55,40)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="895.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.06%)</title><rect x="93.8392%" y="869" width="0.0649%" height="15" fill="rgb(228,123,1)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="93.8392%" y="853" width="0.0649%" height="15" fill="rgb(244,208,8)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="93.8392%" y="837" width="0.0649%" height="15" fill="rgb(237,118,14)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.8392%" y="821" width="0.0649%" height="15" fill="rgb(219,170,13)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.8392%" y="805" width="0.0649%" height="15" fill="rgb(212,39,43)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.8392%" y="789" width="0.0649%" height="15" fill="rgb(244,191,2)" fg:x="1447" fg:w="1"/><text x="94.0892%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="93.9040%" y="1029" width="0.0649%" height="15" fill="rgb(219,201,46)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="93.9040%" y="1013" width="0.0649%" height="15" fill="rgb(218,82,7)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="93.9040%" y="997" width="0.0649%" height="15" fill="rgb(208,192,8)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="1007.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="93.9040%" y="981" width="0.0649%" height="15" fill="rgb(244,54,32)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="93.9040%" y="965" width="0.0649%" height="15" fill="rgb(240,43,52)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="93.9040%" y="949" width="0.0649%" height="15" fill="rgb(233,134,29)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="93.9040%" y="933" width="0.0649%" height="15" fill="rgb(236,128,10)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="93.9040%" y="917" width="0.0649%" height="15" fill="rgb(207,46,54)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="93.9040%" y="901" width="0.0649%" height="15" fill="rgb(248,140,35)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="93.9040%" y="885" width="0.0649%" height="15" fill="rgb(241,103,35)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (1 samples, 0.06%)</title><rect x="93.9040%" y="869" width="0.0649%" height="15" fill="rgb(223,19,48)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.9040%" y="853" width="0.0649%" height="15" fill="rgb(238,177,46)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.9040%" y="837" width="0.0649%" height="15" fill="rgb(213,102,15)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.9040%" y="821" width="0.0649%" height="15" fill="rgb(254,135,52)" fg:x="1448" fg:w="1"/><text x="94.1540%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="93.9689%" y="997" width="0.0649%" height="15" fill="rgb(240,59,6)" fg:x="1449" fg:w="1"/><text x="94.2189%" y="1007.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="93.9689%" y="981" width="0.0649%" height="15" fill="rgb(207,226,5)" fg:x="1449" fg:w="1"/><text x="94.2189%" y="991.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="93.9689%" y="965" width="0.0649%" height="15" fill="rgb(208,167,17)" fg:x="1449" fg:w="1"/><text x="94.2189%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="94.0337%" y="981" width="0.0649%" height="15" fill="rgb(254,94,10)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="991.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="94.0337%" y="965" width="0.0649%" height="15" fill="rgb(229,33,11)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="975.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="94.0337%" y="949" width="0.0649%" height="15" fill="rgb(249,145,48)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="959.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="94.0337%" y="933" width="0.0649%" height="15" fill="rgb(253,68,54)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.0337%" y="917" width="0.0649%" height="15" fill="rgb(223,27,42)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.0337%" y="901" width="0.0649%" height="15" fill="rgb(235,123,13)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.0337%" y="885" width="0.0649%" height="15" fill="rgb(244,154,7)" fg:x="1450" fg:w="1"/><text x="94.2837%" y="895.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="94.0337%" y="997" width="0.1297%" height="15" fill="rgb(214,30,25)" fg:x="1450" fg:w="2"/><text x="94.2837%" y="1007.50"></text></g><g><title>bincode::options (1 samples, 0.06%)</title><rect x="94.0986%" y="981" width="0.0649%" height="15" fill="rgb(252,189,13)" fg:x="1451" fg:w="1"/><text x="94.3486%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.0986%" y="965" width="0.0649%" height="15" fill="rgb(234,27,40)" fg:x="1451" fg:w="1"/><text x="94.3486%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.0986%" y="949" width="0.0649%" height="15" fill="rgb(252,199,25)" fg:x="1451" fg:w="1"/><text x="94.3486%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.0986%" y="933" width="0.0649%" height="15" fill="rgb(234,207,20)" fg:x="1451" fg:w="1"/><text x="94.3486%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.1634%" y="677" width="0.0649%" height="15" fill="rgb(244,220,10)" fg:x="1452" fg:w="1"/><text x="94.4134%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.1634%" y="661" width="0.0649%" height="15" fill="rgb(247,68,23)" fg:x="1452" fg:w="1"/><text x="94.4134%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.1634%" y="645" width="0.0649%" height="15" fill="rgb(254,61,4)" fg:x="1452" fg:w="1"/><text x="94.4134%" y="655.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="94.1634%" y="981" width="0.1297%" height="15" fill="rgb(245,208,35)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="991.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="94.1634%" y="965" width="0.1297%" height="15" fill="rgb(235,90,11)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="94.1634%" y="949" width="0.1297%" height="15" fill="rgb(239,139,43)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="94.1634%" y="933" width="0.1297%" height="15" fill="rgb(209,187,9)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="94.1634%" y="917" width="0.1297%" height="15" fill="rgb(241,30,6)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="94.1634%" y="901" width="0.1297%" height="15" fill="rgb(216,104,1)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="911.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="94.1634%" y="885" width="0.1297%" height="15" fill="rgb(238,55,39)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="94.1634%" y="869" width="0.1297%" height="15" fill="rgb(226,151,41)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.1634%" y="853" width="0.1297%" height="15" fill="rgb(228,73,40)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.1634%" y="837" width="0.1297%" height="15" fill="rgb(215,81,0)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="94.1634%" y="821" width="0.1297%" height="15" fill="rgb(209,52,39)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="94.1634%" y="805" width="0.1297%" height="15" fill="rgb(221,127,5)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="94.1634%" y="789" width="0.1297%" height="15" fill="rgb(213,215,6)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="94.1634%" y="773" width="0.1297%" height="15" fill="rgb(214,118,13)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="94.1634%" y="757" width="0.1297%" height="15" fill="rgb(207,205,41)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.1634%" y="741" width="0.1297%" height="15" fill="rgb(218,208,45)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="751.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.1634%" y="725" width="0.1297%" height="15" fill="rgb(244,81,54)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="94.1634%" y="709" width="0.1297%" height="15" fill="rgb(244,175,1)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="719.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="94.1634%" y="693" width="0.1297%" height="15" fill="rgb(232,128,28)" fg:x="1452" fg:w="2"/><text x="94.4134%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="94.2283%" y="677" width="0.0649%" height="15" fill="rgb(234,83,13)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="94.2283%" y="661" width="0.0649%" height="15" fill="rgb(233,222,35)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="671.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="94.2283%" y="645" width="0.0649%" height="15" fill="rgb(244,204,21)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="94.2283%" y="629" width="0.0649%" height="15" fill="rgb(225,121,40)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="94.2283%" y="613" width="0.0649%" height="15" fill="rgb(231,89,18)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="623.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="94.2283%" y="597" width="0.0649%" height="15" fill="rgb(205,41,50)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="607.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="94.2283%" y="581" width="0.0649%" height="15" fill="rgb(254,25,22)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="591.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.2283%" y="565" width="0.0649%" height="15" fill="rgb(208,44,21)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="575.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.2283%" y="549" width="0.0649%" height="15" fill="rgb(237,59,53)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="559.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.2283%" y="533" width="0.0649%" height="15" fill="rgb(233,24,36)" fg:x="1453" fg:w="1"/><text x="94.4783%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.2931%" y="693" width="0.0649%" height="15" fill="rgb(216,92,41)" fg:x="1454" fg:w="1"/><text x="94.5431%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.2931%" y="677" width="0.0649%" height="15" fill="rgb(225,158,49)" fg:x="1454" fg:w="1"/><text x="94.5431%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.2931%" y="661" width="0.0649%" height="15" fill="rgb(244,11,16)" fg:x="1454" fg:w="1"/><text x="94.5431%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="94.2931%" y="773" width="0.1946%" height="15" fill="rgb(208,215,38)" fg:x="1454" fg:w="3"/><text x="94.5431%" y="783.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="94.2931%" y="757" width="0.1946%" height="15" fill="rgb(250,69,53)" fg:x="1454" fg:w="3"/><text x="94.5431%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="94.2931%" y="741" width="0.1946%" height="15" fill="rgb(240,187,52)" fg:x="1454" fg:w="3"/><text x="94.5431%" y="751.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="94.2931%" y="725" width="0.1946%" height="15" fill="rgb(235,22,25)" fg:x="1454" fg:w="3"/><text x="94.5431%" y="735.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="94.2931%" y="709" width="0.1946%" height="15" fill="rgb(213,173,22)" fg:x="1454" fg:w="3"/><text x="94.5431%" y="719.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="94.3580%" y="693" width="0.1297%" height="15" fill="rgb(218,47,0)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="703.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="94.3580%" y="677" width="0.1297%" height="15" fill="rgb(254,157,11)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.3580%" y="661" width="0.1297%" height="15" fill="rgb(233,154,6)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="671.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.3580%" y="645" width="0.1297%" height="15" fill="rgb(233,207,47)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="655.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="94.3580%" y="629" width="0.1297%" height="15" fill="rgb(249,128,18)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="94.3580%" y="613" width="0.1297%" height="15" fill="rgb(211,27,42)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="623.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="94.3580%" y="597" width="0.1297%" height="15" fill="rgb(240,163,26)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="607.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="94.3580%" y="581" width="0.1297%" height="15" fill="rgb(232,118,46)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="591.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="94.3580%" y="565" width="0.1297%" height="15" fill="rgb(238,158,34)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.3580%" y="549" width="0.1297%" height="15" fill="rgb(254,99,45)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.3580%" y="533" width="0.1297%" height="15" fill="rgb(247,205,20)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="94.3580%" y="517" width="0.1297%" height="15" fill="rgb(240,20,41)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="527.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (2 samples, 0.13%)</title><rect x="94.3580%" y="501" width="0.1297%" height="15" fill="rgb(231,22,43)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="511.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (2 samples, 0.13%)</title><rect x="94.3580%" y="485" width="0.1297%" height="15" fill="rgb(207,86,33)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="495.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (2 samples, 0.13%)</title><rect x="94.3580%" y="469" width="0.1297%" height="15" fill="rgb(231,148,5)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="479.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="94.3580%" y="453" width="0.1297%" height="15" fill="rgb(253,77,28)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="463.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="94.3580%" y="437" width="0.1297%" height="15" fill="rgb(253,227,9)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="94.3580%" y="421" width="0.1297%" height="15" fill="rgb(235,4,18)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="94.3580%" y="405" width="0.1297%" height="15" fill="rgb(205,206,45)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="94.3580%" y="389" width="0.1297%" height="15" fill="rgb(252,34,0)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="94.3580%" y="373" width="0.1297%" height="15" fill="rgb(213,56,7)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="94.3580%" y="357" width="0.1297%" height="15" fill="rgb(227,74,29)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="94.3580%" y="341" width="0.1297%" height="15" fill="rgb(221,32,48)" fg:x="1455" fg:w="2"/><text x="94.6080%" y="351.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (9 samples, 0.58%)</title><rect x="93.9689%" y="1029" width="0.5837%" height="15" fill="rgb(230,205,25)" fg:x="1449" fg:w="9"/><text x="94.2189%" y="1039.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (9 samples, 0.58%)</title><rect x="93.9689%" y="1013" width="0.5837%" height="15" fill="rgb(215,110,9)" fg:x="1449" fg:w="9"/><text x="94.2189%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (6 samples, 0.39%)</title><rect x="94.1634%" y="997" width="0.3891%" height="15" fill="rgb(245,220,47)" fg:x="1452" fg:w="6"/><text x="94.4134%" y="1007.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (4 samples, 0.26%)</title><rect x="94.2931%" y="981" width="0.2594%" height="15" fill="rgb(224,117,5)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="991.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (4 samples, 0.26%)</title><rect x="94.2931%" y="965" width="0.2594%" height="15" fill="rgb(242,208,25)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (4 samples, 0.26%)</title><rect x="94.2931%" y="949" width="0.2594%" height="15" fill="rgb(226,12,37)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="959.50"></text></g><g><title>bincode::config::Options::deserialize (4 samples, 0.26%)</title><rect x="94.2931%" y="933" width="0.2594%" height="15" fill="rgb(224,221,22)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="943.50"></text></g><g><title>bincode::internal::deserialize (4 samples, 0.26%)</title><rect x="94.2931%" y="917" width="0.2594%" height="15" fill="rgb(239,38,44)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="927.50"></text></g><g><title>bincode::internal::deserialize_seed (4 samples, 0.26%)</title><rect x="94.2931%" y="901" width="0.2594%" height="15" fill="rgb(218,25,46)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="911.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="94.2931%" y="885" width="0.2594%" height="15" fill="rgb(206,137,51)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (4 samples, 0.26%)</title><rect x="94.2931%" y="869" width="0.2594%" height="15" fill="rgb(233,174,3)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (4 samples, 0.26%)</title><rect x="94.2931%" y="853" width="0.2594%" height="15" fill="rgb(207,224,43)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="863.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (4 samples, 0.26%)</title><rect x="94.2931%" y="837" width="0.2594%" height="15" fill="rgb(230,46,27)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="847.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.26%)</title><rect x="94.2931%" y="821" width="0.2594%" height="15" fill="rgb(251,215,32)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="831.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="94.2931%" y="805" width="0.2594%" height="15" fill="rgb(244,219,19)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="815.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="94.2931%" y="789" width="0.2594%" height="15" fill="rgb(242,125,36)" fg:x="1454" fg:w="4"/><text x="94.5431%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.4877%" y="773" width="0.0649%" height="15" fill="rgb(251,211,12)" fg:x="1457" fg:w="1"/><text x="94.7377%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.4877%" y="757" width="0.0649%" height="15" fill="rgb(209,179,33)" fg:x="1457" fg:w="1"/><text x="94.7377%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.4877%" y="741" width="0.0649%" height="15" fill="rgb(205,161,48)" fg:x="1457" fg:w="1"/><text x="94.7377%" y="751.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="94.5525%" y="1013" width="0.0649%" height="15" fill="rgb(241,139,8)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (1 samples, 0.06%)</title><rect x="94.5525%" y="997" width="0.0649%" height="15" fill="rgb(246,159,53)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="1007.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="94.5525%" y="981" width="0.0649%" height="15" fill="rgb(212,62,27)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="991.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.06%)</title><rect x="94.5525%" y="965" width="0.0649%" height="15" fill="rgb(216,168,18)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="975.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="94.5525%" y="949" width="0.0649%" height="15" fill="rgb(228,136,50)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="94.5525%" y="933" width="0.0649%" height="15" fill="rgb(237,19,45)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="94.5525%" y="917" width="0.0649%" height="15" fill="rgb(249,150,28)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.5525%" y="901" width="0.0649%" height="15" fill="rgb(236,179,39)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.5525%" y="885" width="0.0649%" height="15" fill="rgb(250,113,27)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.5525%" y="869" width="0.0649%" height="15" fill="rgb(223,13,14)" fg:x="1458" fg:w="1"/><text x="94.8025%" y="879.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (2 samples, 0.13%)</title><rect x="94.5525%" y="1029" width="0.1297%" height="15" fill="rgb(226,68,24)" fg:x="1458" fg:w="2"/><text x="94.8025%" y="1039.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (1 samples, 0.06%)</title><rect x="94.6174%" y="1013" width="0.0649%" height="15" fill="rgb(239,40,50)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="1023.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (1 samples, 0.06%)</title><rect x="94.6174%" y="997" width="0.0649%" height="15" fill="rgb(209,187,0)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (1 samples, 0.06%)</title><rect x="94.6174%" y="981" width="0.0649%" height="15" fill="rgb(240,61,8)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="94.6174%" y="965" width="0.0649%" height="15" fill="rgb(236,137,5)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="94.6174%" y="949" width="0.0649%" height="15" fill="rgb(247,214,21)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="94.6174%" y="933" width="0.0649%" height="15" fill="rgb(244,115,25)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="94.6174%" y="917" width="0.0649%" height="15" fill="rgb(230,58,38)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="94.6174%" y="901" width="0.0649%" height="15" fill="rgb(206,122,6)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="94.6174%" y="885" width="0.0649%" height="15" fill="rgb(217,135,53)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="94.6174%" y="869" width="0.0649%" height="15" fill="rgb(225,120,8)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="94.6174%" y="853" width="0.0649%" height="15" fill="rgb(226,3,30)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="94.6174%" y="837" width="0.0649%" height="15" fill="rgb(214,159,38)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="94.6174%" y="821" width="0.0649%" height="15" fill="rgb(242,182,47)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="94.6174%" y="805" width="0.0649%" height="15" fill="rgb(245,202,26)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="815.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="94.6174%" y="789" width="0.0649%" height="15" fill="rgb(226,163,3)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.06%)</title><rect x="94.6174%" y="773" width="0.0649%" height="15" fill="rgb(219,4,4)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="783.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.06%)</title><rect x="94.6174%" y="757" width="0.0649%" height="15" fill="rgb(223,85,4)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.6174%" y="741" width="0.0649%" height="15" fill="rgb(242,170,11)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.6174%" y="725" width="0.0649%" height="15" fill="rgb(221,97,42)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.6174%" y="709" width="0.0649%" height="15" fill="rgb(231,206,45)" fg:x="1459" fg:w="1"/><text x="94.8674%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::collections::hash::map::HashMap&lt;redb::tree_store::page_store::base::PageNumber,u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="94.6822%" y="949" width="0.0649%" height="15" fill="rgb(216,23,48)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="959.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="94.6822%" y="933" width="0.0649%" height="15" fill="rgb(225,49,9)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="943.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (1 samples, 0.06%)</title><rect x="94.6822%" y="917" width="0.0649%" height="15" fill="rgb(247,24,47)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.06%)</title><rect x="94.6822%" y="901" width="0.0649%" height="15" fill="rgb(253,145,10)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.06%)</title><rect x="94.6822%" y="885" width="0.0649%" height="15" fill="rgb(206,62,10)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.6822%" y="869" width="0.0649%" height="15" fill="rgb(224,159,31)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.6822%" y="853" width="0.0649%" height="15" fill="rgb(234,184,15)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.6822%" y="837" width="0.0649%" height="15" fill="rgb(237,101,1)" fg:x="1460" fg:w="1"/><text x="94.9322%" y="847.50"></text></g><g><title>&lt;redb::table::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="94.6822%" y="1013" width="0.1297%" height="15" fill="rgb(211,99,29)" fg:x="1460" fg:w="2"/><text x="94.9322%" y="1023.50"></text></g><g><title>&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.13%)</title><rect x="94.6822%" y="997" width="0.1297%" height="15" fill="rgb(250,167,3)" fg:x="1460" fg:w="2"/><text x="94.9322%" y="1007.50"></text></g><g><title>redb::tree_store::btree_iters::RangeIterState::get_entry (2 samples, 0.13%)</title><rect x="94.6822%" y="981" width="0.1297%" height="15" fill="rgb(225,58,6)" fg:x="1460" fg:w="2"/><text x="94.9322%" y="991.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="94.6822%" y="965" width="0.1297%" height="15" fill="rgb(251,161,21)" fg:x="1460" fg:w="2"/><text x="94.9322%" y="975.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="94.7471%" y="949" width="0.0649%" height="15" fill="rgb(253,203,35)" fg:x="1461" fg:w="1"/><text x="94.9971%" y="959.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="94.7471%" y="933" width="0.0649%" height="15" fill="rgb(214,220,52)" fg:x="1461" fg:w="1"/><text x="94.9971%" y="943.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="94.7471%" y="917" width="0.0649%" height="15" fill="rgb(235,216,33)" fg:x="1461" fg:w="1"/><text x="94.9971%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.7471%" y="901" width="0.0649%" height="15" fill="rgb(231,79,26)" fg:x="1461" fg:w="1"/><text x="94.9971%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.7471%" y="885" width="0.0649%" height="15" fill="rgb(244,218,10)" fg:x="1461" fg:w="1"/><text x="94.9971%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.7471%" y="869" width="0.0649%" height="15" fill="rgb(238,15,9)" fg:x="1461" fg:w="1"/><text x="94.9971%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::Range&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,()&gt;&gt; (1 samples, 0.06%)</title><rect x="94.8119%" y="1013" width="0.0649%" height="15" fill="rgb(235,112,15)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::BtreeRangeIter&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,()&gt;&gt; (1 samples, 0.06%)</title><rect x="94.8119%" y="997" width="0.0649%" height="15" fill="rgb(239,126,18)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::btree_iters::RangeIterState&gt;&gt; (1 samples, 0.06%)</title><rect x="94.8119%" y="981" width="0.0649%" height="15" fill="rgb(253,171,19)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_iters::RangeIterState&gt; (1 samples, 0.06%)</title><rect x="94.8119%" y="965" width="0.0649%" height="15" fill="rgb(237,218,25)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;redb::tree_store::btree_iters::RangeIterState&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="94.8119%" y="949" width="0.0649%" height="15" fill="rgb(213,88,46)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;redb::tree_store::btree_iters::RangeIterState&gt;&gt; (1 samples, 0.06%)</title><rect x="94.8119%" y="933" width="0.0649%" height="15" fill="rgb(222,124,54)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="943.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="94.8119%" y="917" width="0.0649%" height="15" fill="rgb(209,206,42)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="927.50"></text></g><g><title>core::alloc::layout::Layout::for_value_raw (1 samples, 0.06%)</title><rect x="94.8119%" y="901" width="0.0649%" height="15" fill="rgb(219,25,49)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="911.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (1 samples, 0.06%)</title><rect x="94.8119%" y="885" width="0.0649%" height="15" fill="rgb(228,207,53)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="895.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="94.8119%" y="869" width="0.0649%" height="15" fill="rgb(224,3,4)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="879.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.8119%" y="853" width="0.0649%" height="15" fill="rgb(254,206,26)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="863.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.8119%" y="837" width="0.0649%" height="15" fill="rgb(209,4,26)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="847.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.8119%" y="821" width="0.0649%" height="15" fill="rgb(243,193,32)" fg:x="1462" fg:w="1"/><text x="95.0619%" y="831.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (1 samples, 0.06%)</title><rect x="94.8768%" y="965" width="0.0649%" height="15" fill="rgb(225,150,36)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="949" width="0.0649%" height="15" fill="rgb(225,131,26)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="959.50"></text></g><g><title>bincode::internal::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="933" width="0.0649%" height="15" fill="rgb(236,126,12)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="943.50"></text></g><g><title>bincode::internal::serialized_size (1 samples, 0.06%)</title><rect x="94.8768%" y="917" width="0.0649%" height="15" fill="rgb(238,167,44)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="901" width="0.0649%" height="15" fill="rgb(238,153,31)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="911.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="94.8768%" y="885" width="0.0649%" height="15" fill="rgb(254,41,51)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="869" width="0.0649%" height="15" fill="rgb(224,100,52)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="879.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="94.8768%" y="853" width="0.0649%" height="15" fill="rgb(246,226,38)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="837" width="0.0649%" height="15" fill="rgb(252,21,43)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="847.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="94.8768%" y="821" width="0.0649%" height="15" fill="rgb(250,44,8)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="805" width="0.0649%" height="15" fill="rgb(224,200,45)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="815.50"></text></g><g><title>&lt;bincode::ser::SizeCompound&lt;O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="94.8768%" y="789" width="0.0649%" height="15" fill="rgb(208,75,52)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="799.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="94.8768%" y="773" width="0.0649%" height="15" fill="rgb(213,167,20)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::ser::SizeChecker&lt;O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="94.8768%" y="757" width="0.0649%" height="15" fill="rgb(236,163,42)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="767.50"></text></g><g><title>bincode::ser::SizeChecker&lt;O&gt;::add_raw (1 samples, 0.06%)</title><rect x="94.8768%" y="741" width="0.0649%" height="15" fill="rgb(210,98,31)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="751.50"></text></g><g><title>&lt;&amp;mut O as bincode::config::internal::InternalOptions&gt;::limit (1 samples, 0.06%)</title><rect x="94.8768%" y="725" width="0.0649%" height="15" fill="rgb(246,166,15)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="735.50"></text></g><g><title>&lt;bincode::config::WithOtherIntEncoding&lt;O,I&gt; as bincode::config::internal::InternalOptions&gt;::limit (1 samples, 0.06%)</title><rect x="94.8768%" y="709" width="0.0649%" height="15" fill="rgb(214,114,7)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.8768%" y="693" width="0.0649%" height="15" fill="rgb(217,202,34)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.8768%" y="677" width="0.0649%" height="15" fill="rgb(227,226,29)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.8768%" y="661" width="0.0649%" height="15" fill="rgb(254,65,44)" fg:x="1463" fg:w="1"/><text x="95.1268%" y="671.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="94.9416%" y="613" width="0.0649%" height="15" fill="rgb(213,150,32)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="94.9416%" y="597" width="0.0649%" height="15" fill="rgb(208,86,46)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="94.9416%" y="581" width="0.0649%" height="15" fill="rgb(222,75,3)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="94.9416%" y="565" width="0.0649%" height="15" fill="rgb(225,213,9)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="94.9416%" y="549" width="0.0649%" height="15" fill="rgb(209,199,10)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="94.9416%" y="533" width="0.0649%" height="15" fill="rgb(213,18,17)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="94.9416%" y="517" width="0.0649%" height="15" fill="rgb(243,79,44)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="94.9416%" y="501" width="0.0649%" height="15" fill="rgb(226,20,5)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="94.9416%" y="485" width="0.0649%" height="15" fill="rgb(217,52,31)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="94.9416%" y="469" width="0.0649%" height="15" fill="rgb(229,42,7)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="94.9416%" y="453" width="0.0649%" height="15" fill="rgb(206,118,29)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="94.9416%" y="437" width="0.0649%" height="15" fill="rgb(248,132,44)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="94.9416%" y="421" width="0.0649%" height="15" fill="rgb(231,56,33)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="94.9416%" y="405" width="0.0649%" height="15" fill="rgb(208,31,11)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="94.9416%" y="389" width="0.0649%" height="15" fill="rgb(216,56,33)" fg:x="1464" fg:w="1"/><text x="95.1916%" y="399.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (2 samples, 0.13%)</title><rect x="94.9416%" y="949" width="0.1297%" height="15" fill="rgb(213,100,0)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="959.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="94.9416%" y="933" width="0.1297%" height="15" fill="rgb(236,166,18)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="94.9416%" y="917" width="0.1297%" height="15" fill="rgb(251,132,12)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="901" width="0.1297%" height="15" fill="rgb(216,117,7)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="911.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="885" width="0.1297%" height="15" fill="rgb(243,184,8)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="94.9416%" y="869" width="0.1297%" height="15" fill="rgb(212,91,32)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="879.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="853" width="0.1297%" height="15" fill="rgb(224,147,15)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="837" width="0.1297%" height="15" fill="rgb(228,84,10)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="94.9416%" y="821" width="0.1297%" height="15" fill="rgb(221,161,22)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="94.9416%" y="805" width="0.1297%" height="15" fill="rgb(250,132,20)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="94.9416%" y="789" width="0.1297%" height="15" fill="rgb(209,161,12)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="94.9416%" y="773" width="0.1297%" height="15" fill="rgb(232,142,42)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="94.9416%" y="757" width="0.1297%" height="15" fill="rgb(240,228,27)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="741" width="0.1297%" height="15" fill="rgb(243,0,31)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="725" width="0.1297%" height="15" fill="rgb(237,100,15)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="94.9416%" y="709" width="0.1297%" height="15" fill="rgb(230,26,48)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="94.9416%" y="693" width="0.1297%" height="15" fill="rgb(215,7,13)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="94.9416%" y="677" width="0.1297%" height="15" fill="rgb(227,172,5)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="94.9416%" y="661" width="0.1297%" height="15" fill="rgb(248,206,14)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="94.9416%" y="645" width="0.1297%" height="15" fill="rgb(231,62,54)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="94.9416%" y="629" width="0.1297%" height="15" fill="rgb(222,136,26)" fg:x="1464" fg:w="2"/><text x="95.1916%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0065%" y="613" width="0.0649%" height="15" fill="rgb(211,115,42)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.0065%" y="597" width="0.0649%" height="15" fill="rgb(234,5,17)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.0065%" y="581" width="0.0649%" height="15" fill="rgb(233,67,14)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.0065%" y="565" width="0.0649%" height="15" fill="rgb(225,133,51)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.0065%" y="549" width="0.0649%" height="15" fill="rgb(206,107,40)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.0065%" y="533" width="0.0649%" height="15" fill="rgb(210,56,9)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0065%" y="517" width="0.0649%" height="15" fill="rgb(222,204,4)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="527.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0065%" y="501" width="0.0649%" height="15" fill="rgb(210,168,3)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.0065%" y="485" width="0.0649%" height="15" fill="rgb(246,183,26)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.0065%" y="469" width="0.0649%" height="15" fill="rgb(228,27,31)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="479.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.0065%" y="453" width="0.0649%" height="15" fill="rgb(206,8,2)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="463.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.0065%" y="437" width="0.0649%" height="15" fill="rgb(251,229,16)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="447.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.0065%" y="421" width="0.0649%" height="15" fill="rgb(208,84,44)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0065%" y="405" width="0.0649%" height="15" fill="rgb(221,228,13)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0065%" y="389" width="0.0649%" height="15" fill="rgb(248,42,47)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="95.0065%" y="373" width="0.0649%" height="15" fill="rgb(222,124,41)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="383.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="95.0065%" y="357" width="0.0649%" height="15" fill="rgb(244,191,35)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="95.0065%" y="341" width="0.0649%" height="15" fill="rgb(222,223,54)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="95.0065%" y="325" width="0.0649%" height="15" fill="rgb(248,178,42)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.0065%" y="309" width="0.0649%" height="15" fill="rgb(238,21,24)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.0065%" y="293" width="0.0649%" height="15" fill="rgb(227,134,7)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.0065%" y="277" width="0.0649%" height="15" fill="rgb(205,191,1)" fg:x="1465" fg:w="1"/><text x="95.2565%" y="287.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0713%" y="613" width="0.0649%" height="15" fill="rgb(222,166,30)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0713%" y="597" width="0.0649%" height="15" fill="rgb(229,94,26)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.0713%" y="581" width="0.0649%" height="15" fill="rgb(246,97,2)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.0713%" y="565" width="0.0649%" height="15" fill="rgb(252,112,53)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.0713%" y="549" width="0.0649%" height="15" fill="rgb(225,52,38)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.0713%" y="533" width="0.0649%" height="15" fill="rgb(215,203,24)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.0713%" y="517" width="0.0649%" height="15" fill="rgb(210,122,52)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0713%" y="501" width="0.0649%" height="15" fill="rgb(209,161,44)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.0713%" y="485" width="0.0649%" height="15" fill="rgb(221,97,16)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="95.0713%" y="469" width="0.0649%" height="15" fill="rgb(209,87,13)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="479.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="95.0713%" y="453" width="0.0649%" height="15" fill="rgb(242,1,21)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="463.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="95.0713%" y="437" width="0.0649%" height="15" fill="rgb(251,170,41)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="447.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="95.0713%" y="421" width="0.0649%" height="15" fill="rgb(227,201,10)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="95.0713%" y="405" width="0.0649%" height="15" fill="rgb(231,100,29)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="415.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="95.0713%" y="389" width="0.0649%" height="15" fill="rgb(226,31,35)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="399.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.0713%" y="373" width="0.0649%" height="15" fill="rgb(254,99,26)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="383.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.0713%" y="357" width="0.0649%" height="15" fill="rgb(217,228,17)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="367.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.0713%" y="341" width="0.0649%" height="15" fill="rgb(226,132,8)" fg:x="1466" fg:w="1"/><text x="95.3213%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="95.0713%" y="725" width="0.1297%" height="15" fill="rgb(220,202,47)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="95.0713%" y="709" width="0.1297%" height="15" fill="rgb(245,194,10)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="95.0713%" y="693" width="0.1297%" height="15" fill="rgb(225,44,52)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="95.0713%" y="677" width="0.1297%" height="15" fill="rgb(235,10,4)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="95.0713%" y="661" width="0.1297%" height="15" fill="rgb(244,32,23)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="95.0713%" y="645" width="0.1297%" height="15" fill="rgb(210,115,0)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="95.0713%" y="629" width="0.1297%" height="15" fill="rgb(246,72,16)" fg:x="1466" fg:w="2"/><text x="95.3213%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.1362%" y="613" width="0.0649%" height="15" fill="rgb(223,32,10)" fg:x="1467" fg:w="1"/><text x="95.3862%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.1362%" y="597" width="0.0649%" height="15" fill="rgb(223,97,52)" fg:x="1467" fg:w="1"/><text x="95.3862%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.1362%" y="581" width="0.0649%" height="15" fill="rgb(238,69,38)" fg:x="1467" fg:w="1"/><text x="95.3862%" y="591.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (3 samples, 0.19%)</title><rect x="95.0713%" y="917" width="0.1946%" height="15" fill="rgb(226,61,1)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (3 samples, 0.19%)</title><rect x="95.0713%" y="901" width="0.1946%" height="15" fill="rgb(244,56,14)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (3 samples, 0.19%)</title><rect x="95.0713%" y="885" width="0.1946%" height="15" fill="rgb(242,164,18)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="895.50"></text></g><g><title>bincode::internal::deserialize (3 samples, 0.19%)</title><rect x="95.0713%" y="869" width="0.1946%" height="15" fill="rgb(217,130,28)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (3 samples, 0.19%)</title><rect x="95.0713%" y="853" width="0.1946%" height="15" fill="rgb(218,118,52)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="95.0713%" y="837" width="0.1946%" height="15" fill="rgb(251,112,38)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="95.0713%" y="821" width="0.1946%" height="15" fill="rgb(239,14,50)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="95.0713%" y="805" width="0.1946%" height="15" fill="rgb(228,141,54)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="95.0713%" y="789" width="0.1946%" height="15" fill="rgb(236,128,15)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="95.0713%" y="773" width="0.1946%" height="15" fill="rgb(206,140,54)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="95.0713%" y="757" width="0.1946%" height="15" fill="rgb(240,0,44)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="95.0713%" y="741" width="0.1946%" height="15" fill="rgb(243,207,23)" fg:x="1466" fg:w="3"/><text x="95.3213%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.2010%" y="725" width="0.0649%" height="15" fill="rgb(247,202,1)" fg:x="1468" fg:w="1"/><text x="95.4510%" y="735.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.2010%" y="709" width="0.0649%" height="15" fill="rgb(239,83,27)" fg:x="1468" fg:w="1"/><text x="95.4510%" y="719.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.2010%" y="693" width="0.0649%" height="15" fill="rgb(219,205,7)" fg:x="1468" fg:w="1"/><text x="95.4510%" y="703.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (6 samples, 0.39%)</title><rect x="94.9416%" y="965" width="0.3891%" height="15" fill="rgb(249,184,22)" fg:x="1464" fg:w="6"/><text x="95.1916%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_left (4 samples, 0.26%)</title><rect x="95.0713%" y="949" width="0.2594%" height="15" fill="rgb(230,150,14)" fg:x="1466" fg:w="4"/><text x="95.3213%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (4 samples, 0.26%)</title><rect x="95.0713%" y="933" width="0.2594%" height="15" fill="rgb(240,118,34)" fg:x="1466" fg:w="4"/><text x="95.3213%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="95.2659%" y="917" width="0.0649%" height="15" fill="rgb(227,162,21)" fg:x="1469" fg:w="1"/><text x="95.5159%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="95.2659%" y="901" width="0.0649%" height="15" fill="rgb(219,14,9)" fg:x="1469" fg:w="1"/><text x="95.5159%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="95.2659%" y="885" width="0.0649%" height="15" fill="rgb(223,226,16)" fg:x="1469" fg:w="1"/><text x="95.5159%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.2659%" y="869" width="0.0649%" height="15" fill="rgb(246,161,37)" fg:x="1469" fg:w="1"/><text x="95.5159%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.2659%" y="853" width="0.0649%" height="15" fill="rgb(205,221,43)" fg:x="1469" fg:w="1"/><text x="95.5159%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.2659%" y="837" width="0.0649%" height="15" fill="rgb(228,216,26)" fg:x="1469" fg:w="1"/><text x="95.5159%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.3307%" y="645" width="0.0649%" height="15" fill="rgb(251,33,17)" fg:x="1470" fg:w="1"/><text x="95.5807%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.3307%" y="629" width="0.0649%" height="15" fill="rgb(246,126,36)" fg:x="1470" fg:w="1"/><text x="95.5807%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.3307%" y="613" width="0.0649%" height="15" fill="rgb(217,160,24)" fg:x="1470" fg:w="1"/><text x="95.5807%" y="623.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (2 samples, 0.13%)</title><rect x="95.3307%" y="965" width="0.1297%" height="15" fill="rgb(211,64,12)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="975.50"></text></g><g><title>redb::tree_store::btree_iters::find_iter_right (2 samples, 0.13%)</title><rect x="95.3307%" y="949" width="0.1297%" height="15" fill="rgb(238,47,36)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="95.3307%" y="933" width="0.1297%" height="15" fill="rgb(210,157,42)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="95.3307%" y="917" width="0.1297%" height="15" fill="rgb(242,84,39)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="95.3307%" y="901" width="0.1297%" height="15" fill="rgb(207,65,41)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="95.3307%" y="885" width="0.1297%" height="15" fill="rgb(246,97,27)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="895.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="95.3307%" y="869" width="0.1297%" height="15" fill="rgb(229,9,43)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="95.3307%" y="853" width="0.1297%" height="15" fill="rgb(211,82,44)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="863.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="95.3307%" y="837" width="0.1297%" height="15" fill="rgb(253,45,54)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="95.3307%" y="821" width="0.1297%" height="15" fill="rgb(235,94,32)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="95.3307%" y="805" width="0.1297%" height="15" fill="rgb(252,143,1)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="95.3307%" y="789" width="0.1297%" height="15" fill="rgb(239,164,4)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="95.3307%" y="773" width="0.1297%" height="15" fill="rgb(222,25,39)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="95.3307%" y="757" width="0.1297%" height="15" fill="rgb(234,175,9)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="95.3307%" y="741" width="0.1297%" height="15" fill="rgb(247,200,41)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="95.3307%" y="725" width="0.1297%" height="15" fill="rgb(245,101,27)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="95.3307%" y="709" width="0.1297%" height="15" fill="rgb(221,29,7)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="95.3307%" y="693" width="0.1297%" height="15" fill="rgb(240,184,10)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="95.3307%" y="677" width="0.1297%" height="15" fill="rgb(251,85,15)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="95.3307%" y="661" width="0.1297%" height="15" fill="rgb(252,84,16)" fg:x="1470" fg:w="2"/><text x="95.5807%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.3956%" y="645" width="0.0649%" height="15" fill="rgb(233,136,6)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.3956%" y="629" width="0.0649%" height="15" fill="rgb(226,169,30)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.3956%" y="613" width="0.0649%" height="15" fill="rgb(241,83,18)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="623.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.3956%" y="597" width="0.0649%" height="15" fill="rgb(239,151,5)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.3956%" y="581" width="0.0649%" height="15" fill="rgb(238,56,13)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.3956%" y="565" width="0.0649%" height="15" fill="rgb(224,100,0)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="575.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.3956%" y="549" width="0.0649%" height="15" fill="rgb(231,168,26)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="559.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.3956%" y="533" width="0.0649%" height="15" fill="rgb(238,110,3)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="543.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.3956%" y="517" width="0.0649%" height="15" fill="rgb(216,190,1)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.3956%" y="501" width="0.0649%" height="15" fill="rgb(208,130,52)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.3956%" y="485" width="0.0649%" height="15" fill="rgb(233,74,12)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.3956%" y="469" width="0.0649%" height="15" fill="rgb(248,12,15)" fg:x="1471" fg:w="1"/><text x="95.6456%" y="479.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::range (10 samples, 0.65%)</title><rect x="94.8768%" y="1013" width="0.6485%" height="15" fill="rgb(228,18,29)" fg:x="1463" fg:w="10"/><text x="95.1268%" y="1023.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::range (10 samples, 0.65%)</title><rect x="94.8768%" y="997" width="0.6485%" height="15" fill="rgb(206,153,11)" fg:x="1463" fg:w="10"/><text x="95.1268%" y="1007.50"></text></g><g><title>redb::tree_store::btree_iters::BtreeRangeIter&lt;K,V&gt;::new (10 samples, 0.65%)</title><rect x="94.8768%" y="981" width="0.6485%" height="15" fill="rgb(216,50,30)" fg:x="1463" fg:w="10"/><text x="95.1268%" y="991.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page (1 samples, 0.06%)</title><rect x="95.4604%" y="965" width="0.0649%" height="15" fill="rgb(217,20,39)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (1 samples, 0.06%)</title><rect x="95.4604%" y="949" width="0.0649%" height="15" fill="rgb(232,130,46)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="959.50"></text></g><g><title>redb::tree_store::page_store::cached_file::PagedCachedFile::read (1 samples, 0.06%)</title><rect x="95.4604%" y="933" width="0.0649%" height="15" fill="rgb(233,141,43)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="95.4604%" y="917" width="0.0649%" height="15" fill="rgb(240,64,34)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="927.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.06%)</title><rect x="95.4604%" y="901" width="0.0649%" height="15" fill="rgb(230,28,31)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.06%)</title><rect x="95.4604%" y="885" width="0.0649%" height="15" fill="rgb(223,56,30)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.4604%" y="869" width="0.0649%" height="15" fill="rgb(248,134,16)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.4604%" y="853" width="0.0649%" height="15" fill="rgb(206,202,4)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.4604%" y="837" width="0.0649%" height="15" fill="rgb(219,116,48)" fg:x="1472" fg:w="1"/><text x="95.7104%" y="847.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (1 samples, 0.06%)</title><rect x="95.5253%" y="1013" width="0.0649%" height="15" fill="rgb(224,122,46)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="1023.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="95.5253%" y="997" width="0.0649%" height="15" fill="rgb(219,114,47)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="1007.50"></text></g><g><title>bincode::config::Options::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="981" width="0.0649%" height="15" fill="rgb(244,60,44)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="991.50"></text></g><g><title>bincode::internal::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="965" width="0.0649%" height="15" fill="rgb(243,226,25)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="975.50"></text></g><g><title>bincode::internal::deserialize_seed (1 samples, 0.06%)</title><rect x="95.5253%" y="949" width="0.0649%" height="15" fill="rgb(243,101,52)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="959.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="933" width="0.0649%" height="15" fill="rgb(207,69,25)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="943.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="917" width="0.0649%" height="15" fill="rgb(222,204,53)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="927.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.5253%" y="901" width="0.0649%" height="15" fill="rgb(234,84,49)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.5253%" y="885" width="0.0649%" height="15" fill="rgb(233,77,41)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="895.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.5253%" y="869" width="0.0649%" height="15" fill="rgb(221,200,42)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="879.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.5253%" y="853" width="0.0649%" height="15" fill="rgb(221,29,35)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="863.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.5253%" y="837" width="0.0649%" height="15" fill="rgb(221,71,22)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="821" width="0.0649%" height="15" fill="rgb(216,162,23)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="805" width="0.0649%" height="15" fill="rgb(248,32,48)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.5253%" y="789" width="0.0649%" height="15" fill="rgb(241,156,30)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.5253%" y="773" width="0.0649%" height="15" fill="rgb(237,196,46)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.5253%" y="757" width="0.0649%" height="15" fill="rgb(216,2,6)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.5253%" y="741" width="0.0649%" height="15" fill="rgb(214,47,16)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.5253%" y="725" width="0.0649%" height="15" fill="rgb(240,123,13)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="709" width="0.0649%" height="15" fill="rgb(206,47,48)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="693" width="0.0649%" height="15" fill="rgb(252,88,27)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.5253%" y="677" width="0.0649%" height="15" fill="rgb(218,105,30)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.5253%" y="661" width="0.0649%" height="15" fill="rgb(227,52,46)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.5253%" y="645" width="0.0649%" height="15" fill="rgb(222,190,21)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.5253%" y="629" width="0.0649%" height="15" fill="rgb(205,86,20)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="639.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.5253%" y="613" width="0.0649%" height="15" fill="rgb(233,45,1)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="597" width="0.0649%" height="15" fill="rgb(208,39,6)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="581" width="0.0649%" height="15" fill="rgb(211,178,22)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="95.5253%" y="565" width="0.0649%" height="15" fill="rgb(227,112,23)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="95.5253%" y="549" width="0.0649%" height="15" fill="rgb(214,41,4)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="95.5253%" y="533" width="0.0649%" height="15" fill="rgb(219,144,46)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="95.5253%" y="517" width="0.0649%" height="15" fill="rgb(253,176,50)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="95.5253%" y="501" width="0.0649%" height="15" fill="rgb(206,123,1)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="485" width="0.0649%" height="15" fill="rgb(250,111,32)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="95.5253%" y="469" width="0.0649%" height="15" fill="rgb(229,17,49)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="95.5253%" y="453" width="0.0649%" height="15" fill="rgb(250,123,19)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="95.5253%" y="437" width="0.0649%" height="15" fill="rgb(220,124,20)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="447.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="95.5253%" y="421" width="0.0649%" height="15" fill="rgb(242,85,25)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="431.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="95.5253%" y="405" width="0.0649%" height="15" fill="rgb(245,217,7)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="415.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u32 (1 samples, 0.06%)</title><rect x="95.5253%" y="389" width="0.0649%" height="15" fill="rgb(242,50,25)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="95.5253%" y="373" width="0.0649%" height="15" fill="rgb(251,210,24)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="383.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.5253%" y="357" width="0.0649%" height="15" fill="rgb(238,24,8)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="367.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.5253%" y="341" width="0.0649%" height="15" fill="rgb(211,96,19)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="351.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.5253%" y="325" width="0.0649%" height="15" fill="rgb(222,186,12)" fg:x="1473" fg:w="1"/><text x="95.7753%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.5901%" y="709" width="0.0649%" height="15" fill="rgb(212,70,49)" fg:x="1474" fg:w="1"/><text x="95.8401%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.5901%" y="693" width="0.0649%" height="15" fill="rgb(238,69,49)" fg:x="1474" fg:w="1"/><text x="95.8401%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.5901%" y="677" width="0.0649%" height="15" fill="rgb(225,13,3)" fg:x="1474" fg:w="1"/><text x="95.8401%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::table::ReadOnlyTable&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="95.5901%" y="997" width="0.1297%" height="15" fill="rgb(229,188,14)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree::Btree&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;,redbit::Bincode&lt;u64&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="95.5901%" y="981" width="0.1297%" height="15" fill="rgb(218,58,16)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;redb::tree_store::page_store::base::PageImpl&gt;&gt; (2 samples, 0.13%)</title><rect x="95.5901%" y="965" width="0.1297%" height="15" fill="rgb(206,213,49)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="95.5901%" y="949" width="0.1297%" height="15" fill="rgb(225,152,48)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="959.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="95.5901%" y="933" width="0.1297%" height="15" fill="rgb(216,103,42)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.13%)</title><rect x="95.5901%" y="917" width="0.1297%" height="15" fill="rgb(212,214,39)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.13%)</title><rect x="95.5901%" y="901" width="0.1297%" height="15" fill="rgb(249,52,41)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.13%)</title><rect x="95.5901%" y="885" width="0.1297%" height="15" fill="rgb(212,173,53)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="95.5901%" y="869" width="0.1297%" height="15" fill="rgb(232,222,21)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="95.5901%" y="853" width="0.1297%" height="15" fill="rgb(206,228,31)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.13%)</title><rect x="95.5901%" y="837" width="0.1297%" height="15" fill="rgb(231,121,16)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (2 samples, 0.13%)</title><rect x="95.5901%" y="821" width="0.1297%" height="15" fill="rgb(241,3,23)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.13%)</title><rect x="95.5901%" y="805" width="0.1297%" height="15" fill="rgb(220,68,37)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u32 (2 samples, 0.13%)</title><rect x="95.5901%" y="789" width="0.1297%" height="15" fill="rgb(212,23,49)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.13%)</title><rect x="95.5901%" y="773" width="0.1297%" height="15" fill="rgb(231,38,8)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.13%)</title><rect x="95.5901%" y="757" width="0.1297%" height="15" fill="rgb(222,137,29)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.13%)</title><rect x="95.5901%" y="741" width="0.1297%" height="15" fill="rgb(239,8,6)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.13%)</title><rect x="95.5901%" y="725" width="0.1297%" height="15" fill="rgb(224,142,47)" fg:x="1474" fg:w="2"/><text x="95.8401%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="95.6550%" y="709" width="0.0649%" height="15" fill="rgb(226,67,29)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="95.6550%" y="693" width="0.0649%" height="15" fill="rgb(212,144,29)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="703.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="95.6550%" y="677" width="0.0649%" height="15" fill="rgb(252,2,51)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="687.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="95.6550%" y="661" width="0.0649%" height="15" fill="rgb(246,103,52)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="95.6550%" y="645" width="0.0649%" height="15" fill="rgb(229,229,35)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="95.6550%" y="629" width="0.0649%" height="15" fill="rgb(209,83,15)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="95.6550%" y="613" width="0.0649%" height="15" fill="rgb(218,54,16)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.6550%" y="597" width="0.0649%" height="15" fill="rgb(205,2,26)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.6550%" y="581" width="0.0649%" height="15" fill="rgb(248,180,0)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.6550%" y="565" width="0.0649%" height="15" fill="rgb(231,136,16)" fg:x="1475" fg:w="1"/><text x="95.9050%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="95.7198%" y="997" width="0.0649%" height="15" fill="rgb(215,90,4)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="95.7198%" y="981" width="0.0649%" height="15" fill="rgb(251,131,3)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="95.7198%" y="965" width="0.0649%" height="15" fill="rgb(244,47,21)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="95.7198%" y="949" width="0.0649%" height="15" fill="rgb(231,115,9)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.06%)</title><rect x="95.7198%" y="933" width="0.0649%" height="15" fill="rgb(241,119,20)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.06%)</title><rect x="95.7198%" y="917" width="0.0649%" height="15" fill="rgb(224,99,0)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="95.7198%" y="901" width="0.0649%" height="15" fill="rgb(219,213,18)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="911.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="95.7198%" y="885" width="0.0649%" height="15" fill="rgb(209,71,34)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="95.7198%" y="869" width="0.0649%" height="15" fill="rgb(245,203,20)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="95.7198%" y="853" width="0.0649%" height="15" fill="rgb(221,44,20)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="863.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="95.7198%" y="837" width="0.0649%" height="15" fill="rgb(229,97,0)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.06%)</title><rect x="95.7198%" y="821" width="0.0649%" height="15" fill="rgb(206,56,49)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.7198%" y="805" width="0.0649%" height="15" fill="rgb(208,216,41)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.7198%" y="789" width="0.0649%" height="15" fill="rgb(231,31,6)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.7198%" y="773" width="0.0649%" height="15" fill="rgb(239,88,23)" fg:x="1476" fg:w="1"/><text x="95.9698%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;u64&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="95.7847%" y="997" width="0.0649%" height="15" fill="rgb(227,111,45)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (1 samples, 0.06%)</title><rect x="95.7847%" y="981" width="0.0649%" height="15" fill="rgb(207,167,18)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (1 samples, 0.06%)</title><rect x="95.7847%" y="965" width="0.0649%" height="15" fill="rgb(253,127,17)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="95.7847%" y="949" width="0.0649%" height="15" fill="rgb(211,229,9)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="95.7847%" y="933" width="0.0649%" height="15" fill="rgb(249,25,14)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="95.7847%" y="917" width="0.0649%" height="15" fill="rgb(237,177,4)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="95.7847%" y="901" width="0.0649%" height="15" fill="rgb(248,163,50)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="95.7847%" y="885" width="0.0649%" height="15" fill="rgb(246,67,42)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="95.7847%" y="869" width="0.0649%" height="15" fill="rgb(228,136,45)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="95.7847%" y="853" width="0.0649%" height="15" fill="rgb(218,93,4)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="95.7847%" y="837" width="0.0649%" height="15" fill="rgb(209,82,29)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.06%)</title><rect x="95.7847%" y="821" width="0.0649%" height="15" fill="rgb(213,219,38)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="831.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.06%)</title><rect x="95.7847%" y="805" width="0.0649%" height="15" fill="rgb(233,212,17)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.7847%" y="789" width="0.0649%" height="15" fill="rgb(225,65,3)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.7847%" y="773" width="0.0649%" height="15" fill="rgb(226,25,1)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.7847%" y="757" width="0.0649%" height="15" fill="rgb(229,83,27)" fg:x="1477" fg:w="1"/><text x="96.0347%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="95.8495%" y="885" width="0.0649%" height="15" fill="rgb(245,80,47)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="895.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="95.8495%" y="869" width="0.0649%" height="15" fill="rgb(213,79,27)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="879.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.06%)</title><rect x="95.8495%" y="853" width="0.0649%" height="15" fill="rgb(232,38,28)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="863.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.06%)</title><rect x="95.8495%" y="837" width="0.0649%" height="15" fill="rgb(253,63,39)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="847.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="95.8495%" y="821" width="0.0649%" height="15" fill="rgb(222,204,17)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.8495%" y="805" width="0.0649%" height="15" fill="rgb(254,135,49)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.8495%" y="789" width="0.0649%" height="15" fill="rgb(226,203,24)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.8495%" y="773" width="0.0649%" height="15" fill="rgb(225,2,17)" fg:x="1478" fg:w="1"/><text x="96.0995%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redbit::Bincode&lt;utxo::AssetPointer&gt;&gt;&gt; (2 samples, 0.13%)</title><rect x="95.8495%" y="997" width="0.1297%" height="15" fill="rgb(234,135,43)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="95.8495%" y="981" width="0.1297%" height="15" fill="rgb(224,14,46)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="95.8495%" y="965" width="0.1297%" height="15" fill="rgb(206,42,0)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="975.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="95.8495%" y="949" width="0.1297%" height="15" fill="rgb(244,38,23)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (2 samples, 0.13%)</title><rect x="95.8495%" y="933" width="0.1297%" height="15" fill="rgb(230,25,21)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 0.13%)</title><rect x="95.8495%" y="917" width="0.1297%" height="15" fill="rgb(252,217,28)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 0.13%)</title><rect x="95.8495%" y="901" width="0.1297%" height="15" fill="rgb(251,4,49)" fg:x="1478" fg:w="2"/><text x="96.0995%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.06%)</title><rect x="95.9144%" y="885" width="0.0649%" height="15" fill="rgb(217,126,31)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="95.9144%" y="869" width="0.0649%" height="15" fill="rgb(242,181,33)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.06%)</title><rect x="95.9144%" y="853" width="0.0649%" height="15" fill="rgb(241,108,6)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.06%)</title><rect x="95.9144%" y="837" width="0.0649%" height="15" fill="rgb(238,87,39)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="95.9144%" y="821" width="0.0649%" height="15" fill="rgb(244,101,49)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="831.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="95.9144%" y="805" width="0.0649%" height="15" fill="rgb(211,43,42)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="95.9144%" y="789" width="0.0649%" height="15" fill="rgb(210,93,2)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.9144%" y="773" width="0.0649%" height="15" fill="rgb(242,149,32)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.9144%" y="757" width="0.0649%" height="15" fill="rgb(228,1,6)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.9144%" y="741" width="0.0649%" height="15" fill="rgb(221,0,20)" fg:x="1479" fg:w="1"/><text x="96.1644%" y="751.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="95.9792%" y="965" width="0.0649%" height="15" fill="rgb(230,39,32)" fg:x="1480" fg:w="1"/><text x="96.2292%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="95.9792%" y="949" width="0.0649%" height="15" fill="rgb(240,89,38)" fg:x="1480" fg:w="1"/><text x="96.2292%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="95.9792%" y="933" width="0.0649%" height="15" fill="rgb(208,221,23)" fg:x="1480" fg:w="1"/><text x="96.2292%" y="943.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="96.0441%" y="965" width="0.0649%" height="15" fill="rgb(220,145,29)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="975.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="96.0441%" y="949" width="0.0649%" height="15" fill="rgb(219,146,23)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="96.0441%" y="933" width="0.0649%" height="15" fill="rgb(244,114,49)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="96.0441%" y="917" width="0.0649%" height="15" fill="rgb(221,17,10)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="96.0441%" y="901" width="0.0649%" height="15" fill="rgb(228,133,21)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="96.0441%" y="885" width="0.0649%" height="15" fill="rgb(218,81,30)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="96.0441%" y="869" width="0.0649%" height="15" fill="rgb(240,29,36)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="96.0441%" y="853" width="0.0649%" height="15" fill="rgb(246,0,36)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="96.0441%" y="837" width="0.0649%" height="15" fill="rgb(217,79,8)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="96.0441%" y="821" width="0.0649%" height="15" fill="rgb(229,124,44)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.0441%" y="805" width="0.0649%" height="15" fill="rgb(210,187,22)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.0441%" y="789" width="0.0649%" height="15" fill="rgb(212,115,40)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.0441%" y="773" width="0.0649%" height="15" fill="rgb(210,2,54)" fg:x="1481" fg:w="1"/><text x="96.2941%" y="783.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u16&gt;::serialize (1 samples, 0.06%)</title><rect x="96.1089%" y="869" width="0.0649%" height="15" fill="rgb(227,168,43)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="879.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="96.1089%" y="853" width="0.0649%" height="15" fill="rgb(249,92,8)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="863.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u16 (1 samples, 0.06%)</title><rect x="96.1089%" y="837" width="0.0649%" height="15" fill="rgb(239,111,35)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="847.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u16 (1 samples, 0.06%)</title><rect x="96.1089%" y="821" width="0.0649%" height="15" fill="rgb(230,126,13)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="831.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u16 (1 samples, 0.06%)</title><rect x="96.1089%" y="805" width="0.0649%" height="15" fill="rgb(243,116,33)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="815.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::write_u16 (1 samples, 0.06%)</title><rect x="96.1089%" y="789" width="0.0649%" height="15" fill="rgb(246,103,21)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="96.1089%" y="773" width="0.0649%" height="15" fill="rgb(237,53,26)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="783.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.1089%" y="757" width="0.0649%" height="15" fill="rgb(213,121,15)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="767.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.1089%" y="741" width="0.0649%" height="15" fill="rgb(251,83,35)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="751.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.1089%" y="725" width="0.0649%" height="15" fill="rgb(222,79,8)" fg:x="1482" fg:w="1"/><text x="96.3589%" y="735.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::as_bytes (2 samples, 0.13%)</title><rect x="96.1089%" y="965" width="0.1297%" height="15" fill="rgb(217,74,36)" fg:x="1482" fg:w="2"/><text x="96.3589%" y="975.50"></text></g><g><title>bincode::config::Options::serialize (2 samples, 0.13%)</title><rect x="96.1089%" y="949" width="0.1297%" height="15" fill="rgb(221,14,30)" fg:x="1482" fg:w="2"/><text x="96.3589%" y="959.50"></text></g><g><title>bincode::internal::serialize (2 samples, 0.13%)</title><rect x="96.1089%" y="933" width="0.1297%" height="15" fill="rgb(216,221,5)" fg:x="1482" fg:w="2"/><text x="96.3589%" y="943.50"></text></g><g><title>bincode::internal::serialize_into (2 samples, 0.13%)</title><rect x="96.1089%" y="917" width="0.1297%" height="15" fill="rgb(236,118,16)" fg:x="1482" fg:w="2"/><text x="96.3589%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::AssetPointer&gt;::serialize (2 samples, 0.13%)</title><rect x="96.1089%" y="901" width="0.1297%" height="15" fill="rgb(243,91,43)" fg:x="1482" fg:w="2"/><text x="96.3589%" y="911.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.13%)</title><rect x="96.1089%" y="885" width="0.1297%" height="15" fill="rgb(231,110,7)" fg:x="1482" fg:w="2"/><text x="96.3589%" y="895.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::UtxoPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="96.1738%" y="869" width="0.0649%" height="15" fill="rgb(217,80,6)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="879.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="96.1738%" y="853" width="0.0649%" height="15" fill="rgb(251,116,7)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::TxPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="96.1738%" y="837" width="0.0649%" height="15" fill="rgb(236,70,22)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="847.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="96.1738%" y="821" width="0.0649%" height="15" fill="rgb(245,13,10)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::ser::Serialize for utxo::BlockPointer&gt;::serialize (1 samples, 0.06%)</title><rect x="96.1738%" y="805" width="0.0649%" height="15" fill="rgb(233,146,34)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="815.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.06%)</title><rect x="96.1738%" y="789" width="0.0649%" height="15" fill="rgb(241,196,34)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="799.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.06%)</title><rect x="96.1738%" y="773" width="0.0649%" height="15" fill="rgb(207,150,20)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="96.1738%" y="757" width="0.0649%" height="15" fill="rgb(251,27,52)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="767.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (1 samples, 0.06%)</title><rect x="96.1738%" y="741" width="0.0649%" height="15" fill="rgb(221,76,2)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="751.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (1 samples, 0.06%)</title><rect x="96.1738%" y="725" width="0.0649%" height="15" fill="rgb(242,94,41)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="735.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (1 samples, 0.06%)</title><rect x="96.1738%" y="709" width="0.0649%" height="15" fill="rgb(245,9,8)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.06%)</title><rect x="96.1738%" y="693" width="0.0649%" height="15" fill="rgb(236,139,26)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.06%)</title><rect x="96.1738%" y="677" width="0.0649%" height="15" fill="rgb(249,11,18)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="96.1738%" y="661" width="0.0649%" height="15" fill="rgb(206,175,35)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="96.1738%" y="645" width="0.0649%" height="15" fill="rgb(231,3,46)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.1738%" y="629" width="0.0649%" height="15" fill="rgb(243,27,8)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.1738%" y="613" width="0.0649%" height="15" fill="rgb(223,53,13)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.1738%" y="597" width="0.0649%" height="15" fill="rgb(248,68,15)" fg:x="1483" fg:w="1"/><text x="96.4238%" y="607.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.2387%" y="741" width="0.0649%" height="15" fill="rgb(216,61,26)" fg:x="1484" fg:w="1"/><text x="96.4887%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.2387%" y="725" width="0.0649%" height="15" fill="rgb(213,201,24)" fg:x="1484" fg:w="1"/><text x="96.4887%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.2387%" y="709" width="0.0649%" height="15" fill="rgb(214,20,17)" fg:x="1484" fg:w="1"/><text x="96.4887%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.3035%" y="453" width="0.0649%" height="15" fill="rgb(206,21,46)" fg:x="1485" fg:w="1"/><text x="96.5535%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.3035%" y="437" width="0.0649%" height="15" fill="rgb(234,222,24)" fg:x="1485" fg:w="1"/><text x="96.5535%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.3035%" y="421" width="0.0649%" height="15" fill="rgb(221,25,26)" fg:x="1485" fg:w="1"/><text x="96.5535%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="96.3035%" y="581" width="0.1297%" height="15" fill="rgb(241,148,26)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="96.3035%" y="565" width="0.1297%" height="15" fill="rgb(248,119,35)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="575.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="96.3035%" y="549" width="0.1297%" height="15" fill="rgb(239,126,23)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="559.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="96.3035%" y="533" width="0.1297%" height="15" fill="rgb(247,120,25)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="543.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="96.3035%" y="517" width="0.1297%" height="15" fill="rgb(220,93,32)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="96.3035%" y="501" width="0.1297%" height="15" fill="rgb(236,46,26)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="96.3035%" y="485" width="0.1297%" height="15" fill="rgb(229,20,45)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="96.3035%" y="469" width="0.1297%" height="15" fill="rgb(225,168,41)" fg:x="1485" fg:w="2"/><text x="96.5535%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="96.3684%" y="453" width="0.0649%" height="15" fill="rgb(253,123,20)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="96.3684%" y="437" width="0.0649%" height="15" fill="rgb(244,17,29)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="96.3684%" y="421" width="0.0649%" height="15" fill="rgb(242,196,24)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="431.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="96.3684%" y="405" width="0.0649%" height="15" fill="rgb(210,113,45)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="415.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.3684%" y="389" width="0.0649%" height="15" fill="rgb(205,129,3)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="399.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.3684%" y="373" width="0.0649%" height="15" fill="rgb(232,74,10)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="383.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.3684%" y="357" width="0.0649%" height="15" fill="rgb(251,63,43)" fg:x="1486" fg:w="1"/><text x="96.6184%" y="367.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="96.4332%" y="277" width="0.1297%" height="15" fill="rgb(228,215,15)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="287.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="96.4332%" y="261" width="0.1297%" height="15" fill="rgb(233,179,38)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.13%)</title><rect x="96.4332%" y="245" width="0.1297%" height="15" fill="rgb(227,187,9)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (2 samples, 0.13%)</title><rect x="96.4332%" y="229" width="0.1297%" height="15" fill="rgb(231,89,27)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.13%)</title><rect x="96.4332%" y="213" width="0.1297%" height="15" fill="rgb(225,117,1)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.13%)</title><rect x="96.4332%" y="197" width="0.1297%" height="15" fill="rgb(239,120,49)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.13%)</title><rect x="96.4332%" y="181" width="0.1297%" height="15" fill="rgb(236,137,37)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="191.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (2 samples, 0.13%)</title><rect x="96.4332%" y="165" width="0.1297%" height="15" fill="rgb(239,73,42)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="96.4332%" y="149" width="0.1297%" height="15" fill="rgb(207,169,6)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="96.4332%" y="133" width="0.1297%" height="15" fill="rgb(228,171,10)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="96.4332%" y="117" width="0.1297%" height="15" fill="rgb(217,228,47)" fg:x="1487" fg:w="2"/><text x="96.6832%" y="127.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="96.3035%" y="597" width="0.3243%" height="15" fill="rgb(227,116,17)" fg:x="1485" fg:w="5"/><text x="96.5535%" y="607.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="96.4332%" y="581" width="0.1946%" height="15" fill="rgb(245,128,36)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="591.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="96.4332%" y="565" width="0.1946%" height="15" fill="rgb(221,139,3)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="96.4332%" y="549" width="0.1946%" height="15" fill="rgb(207,59,54)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="559.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="96.4332%" y="533" width="0.1946%" height="15" fill="rgb(231,129,12)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="543.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="96.4332%" y="517" width="0.1946%" height="15" fill="rgb(235,49,17)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="527.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="96.4332%" y="501" width="0.1946%" height="15" fill="rgb(229,175,11)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="96.4332%" y="485" width="0.1946%" height="15" fill="rgb(206,187,30)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="495.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (3 samples, 0.19%)</title><rect x="96.4332%" y="469" width="0.1946%" height="15" fill="rgb(214,39,19)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="479.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.19%)</title><rect x="96.4332%" y="453" width="0.1946%" height="15" fill="rgb(243,92,46)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (3 samples, 0.19%)</title><rect x="96.4332%" y="437" width="0.1946%" height="15" fill="rgb(240,125,36)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="447.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (3 samples, 0.19%)</title><rect x="96.4332%" y="421" width="0.1946%" height="15" fill="rgb(217,193,45)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (3 samples, 0.19%)</title><rect x="96.4332%" y="405" width="0.1946%" height="15" fill="rgb(230,127,16)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="415.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (3 samples, 0.19%)</title><rect x="96.4332%" y="389" width="0.1946%" height="15" fill="rgb(208,161,0)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.19%)</title><rect x="96.4332%" y="373" width="0.1946%" height="15" fill="rgb(251,69,39)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (3 samples, 0.19%)</title><rect x="96.4332%" y="357" width="0.1946%" height="15" fill="rgb(229,86,22)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="96.4332%" y="341" width="0.1946%" height="15" fill="rgb(223,67,43)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="351.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (3 samples, 0.19%)</title><rect x="96.4332%" y="325" width="0.1946%" height="15" fill="rgb(254,80,31)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="335.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (3 samples, 0.19%)</title><rect x="96.4332%" y="309" width="0.1946%" height="15" fill="rgb(225,149,52)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="319.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (3 samples, 0.19%)</title><rect x="96.4332%" y="293" width="0.1946%" height="15" fill="rgb(214,169,18)" fg:x="1487" fg:w="3"/><text x="96.6832%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.5629%" y="277" width="0.0649%" height="15" fill="rgb(236,224,43)" fg:x="1489" fg:w="1"/><text x="96.8129%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.5629%" y="261" width="0.0649%" height="15" fill="rgb(251,125,34)" fg:x="1489" fg:w="1"/><text x="96.8129%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.5629%" y="245" width="0.0649%" height="15" fill="rgb(224,39,44)" fg:x="1489" fg:w="1"/><text x="96.8129%" y="255.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.45%)</title><rect x="96.3035%" y="613" width="0.4540%" height="15" fill="rgb(206,111,46)" fg:x="1485" fg:w="7"/><text x="96.5535%" y="623.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="96.6278%" y="597" width="0.1297%" height="15" fill="rgb(227,147,50)" fg:x="1490" fg:w="2"/><text x="96.8778%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="96.6278%" y="581" width="0.1297%" height="15" fill="rgb(239,144,36)" fg:x="1490" fg:w="2"/><text x="96.8778%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="96.6278%" y="565" width="0.1297%" height="15" fill="rgb(216,17,19)" fg:x="1490" fg:w="2"/><text x="96.8778%" y="575.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 0.58%)</title><rect x="96.2387%" y="821" width="0.5837%" height="15" fill="rgb(211,192,29)" fg:x="1484" fg:w="9"/><text x="96.4887%" y="831.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="96.2387%" y="805" width="0.5837%" height="15" fill="rgb(238,195,20)" fg:x="1484" fg:w="9"/><text x="96.4887%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="96.2387%" y="789" width="0.5837%" height="15" fill="rgb(213,210,42)" fg:x="1484" fg:w="9"/><text x="96.4887%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (9 samples, 0.58%)</title><rect x="96.2387%" y="773" width="0.5837%" height="15" fill="rgb(244,4,49)" fg:x="1484" fg:w="9"/><text x="96.4887%" y="783.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.58%)</title><rect x="96.2387%" y="757" width="0.5837%" height="15" fill="rgb(254,106,42)" fg:x="1484" fg:w="9"/><text x="96.4887%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="96.3035%" y="741" width="0.5188%" height="15" fill="rgb(222,182,12)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="96.3035%" y="725" width="0.5188%" height="15" fill="rgb(228,160,15)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.52%)</title><rect x="96.3035%" y="709" width="0.5188%" height="15" fill="rgb(243,149,43)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="719.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (8 samples, 0.52%)</title><rect x="96.3035%" y="693" width="0.5188%" height="15" fill="rgb(245,150,32)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (8 samples, 0.52%)</title><rect x="96.3035%" y="677" width="0.5188%" height="15" fill="rgb(205,43,19)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="96.3035%" y="661" width="0.5188%" height="15" fill="rgb(249,189,35)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="671.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="96.3035%" y="645" width="0.5188%" height="15" fill="rgb(223,9,0)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="96.3035%" y="629" width="0.5188%" height="15" fill="rgb(213,142,45)" fg:x="1485" fg:w="8"/><text x="96.5535%" y="639.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.7575%" y="613" width="0.0649%" height="15" fill="rgb(208,148,2)" fg:x="1492" fg:w="1"/><text x="97.0075%" y="623.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.7575%" y="597" width="0.0649%" height="15" fill="rgb(207,191,42)" fg:x="1492" fg:w="1"/><text x="97.0075%" y="607.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.7575%" y="581" width="0.0649%" height="15" fill="rgb(215,218,38)" fg:x="1492" fg:w="1"/><text x="97.0075%" y="591.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (11 samples, 0.71%)</title><rect x="96.2387%" y="885" width="0.7134%" height="15" fill="rgb(223,195,24)" fg:x="1484" fg:w="11"/><text x="96.4887%" y="895.50"></text></g><g><title>bincode::config::Options::deserialize (11 samples, 0.71%)</title><rect x="96.2387%" y="869" width="0.7134%" height="15" fill="rgb(254,60,30)" fg:x="1484" fg:w="11"/><text x="96.4887%" y="879.50"></text></g><g><title>bincode::internal::deserialize (11 samples, 0.71%)</title><rect x="96.2387%" y="853" width="0.7134%" height="15" fill="rgb(223,2,9)" fg:x="1484" fg:w="11"/><text x="96.4887%" y="863.50"></text></g><g><title>bincode::internal::deserialize_seed (11 samples, 0.71%)</title><rect x="96.2387%" y="837" width="0.7134%" height="15" fill="rgb(253,134,46)" fg:x="1484" fg:w="11"/><text x="96.4887%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="96.8223%" y="821" width="0.1297%" height="15" fill="rgb(206,209,20)" fg:x="1493" fg:w="2"/><text x="97.0723%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="96.8223%" y="805" width="0.1297%" height="15" fill="rgb(253,104,42)" fg:x="1493" fg:w="2"/><text x="97.0723%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="96.8223%" y="789" width="0.1297%" height="15" fill="rgb(223,47,23)" fg:x="1493" fg:w="2"/><text x="97.0723%" y="799.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (12 samples, 0.78%)</title><rect x="96.2387%" y="949" width="0.7782%" height="15" fill="rgb(247,148,44)" fg:x="1484" fg:w="12"/><text x="96.4887%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (12 samples, 0.78%)</title><rect x="96.2387%" y="933" width="0.7782%" height="15" fill="rgb(221,224,16)" fg:x="1484" fg:w="12"/><text x="96.4887%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (12 samples, 0.78%)</title><rect x="96.2387%" y="917" width="0.7782%" height="15" fill="rgb(252,103,29)" fg:x="1484" fg:w="12"/><text x="96.4887%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (12 samples, 0.78%)</title><rect x="96.2387%" y="901" width="0.7782%" height="15" fill="rgb(244,185,34)" fg:x="1484" fg:w="12"/><text x="96.4887%" y="911.50"></text></g><g><title>&lt;utxo::AssetPointer as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="96.9520%" y="885" width="0.0649%" height="15" fill="rgb(218,18,50)" fg:x="1495" fg:w="1"/><text x="97.2020%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="96.9520%" y="869" width="0.0649%" height="15" fill="rgb(234,105,8)" fg:x="1495" fg:w="1"/><text x="97.2020%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="96.9520%" y="853" width="0.0649%" height="15" fill="rgb(249,51,19)" fg:x="1495" fg:w="1"/><text x="97.2020%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="96.9520%" y="837" width="0.0649%" height="15" fill="rgb(233,132,7)" fg:x="1495" fg:w="1"/><text x="97.2020%" y="847.50"></text></g><g><title>&lt;bincode::config::trailing::RejectTrailing as bincode::config::trailing::TrailingBytes&gt;::check_end (1 samples, 0.06%)</title><rect x="97.0169%" y="853" width="0.0649%" height="15" fill="rgb(229,181,43)" fg:x="1496" fg:w="1"/><text x="97.2669%" y="863.50"></text></g><g><title>bincode::de::read::SliceReader::is_finished (1 samples, 0.06%)</title><rect x="97.0169%" y="837" width="0.0649%" height="15" fill="rgb(223,20,7)" fg:x="1496" fg:w="1"/><text x="97.2669%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.06%)</title><rect x="97.0169%" y="821" width="0.0649%" height="15" fill="rgb(245,13,34)" fg:x="1496" fg:w="1"/><text x="97.2669%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.0169%" y="805" width="0.0649%" height="15" fill="rgb(242,0,53)" fg:x="1496" fg:w="1"/><text x="97.2669%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.0169%" y="789" width="0.0649%" height="15" fill="rgb(233,115,19)" fg:x="1496" fg:w="1"/><text x="97.2669%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.0169%" y="773" width="0.0649%" height="15" fill="rgb(216,170,26)" fg:x="1496" fg:w="1"/><text x="97.2669%" y="783.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null (1 samples, 0.06%)</title><rect x="97.0817%" y="565" width="0.0649%" height="15" fill="rgb(233,13,0)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="575.50"></text></g><g><title>core::ub_checks::maybe_is_aligned_and_not_null::runtime (1 samples, 0.06%)</title><rect x="97.0817%" y="549" width="0.0649%" height="15" fill="rgb(228,79,21)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.06%)</title><rect x="97.0817%" y="533" width="0.0649%" height="15" fill="rgb(244,17,41)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.06%)</title><rect x="97.0817%" y="517" width="0.0649%" height="15" fill="rgb(253,152,11)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.06%)</title><rect x="97.0817%" y="501" width="0.0649%" height="15" fill="rgb(254,94,47)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="511.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.0817%" y="485" width="0.0649%" height="15" fill="rgb(239,66,43)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="495.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.0817%" y="469" width="0.0649%" height="15" fill="rgb(251,25,22)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="479.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.0817%" y="453" width="0.0649%" height="15" fill="rgb(227,65,46)" fg:x="1497" fg:w="1"/><text x="97.3317%" y="463.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="97.0817%" y="693" width="0.1297%" height="15" fill="rgb(240,180,32)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="703.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="97.0817%" y="677" width="0.1297%" height="15" fill="rgb(242,11,35)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="687.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="97.0817%" y="661" width="0.1297%" height="15" fill="rgb(221,41,49)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="671.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (2 samples, 0.13%)</title><rect x="97.0817%" y="645" width="0.1297%" height="15" fill="rgb(253,80,52)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="655.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (2 samples, 0.13%)</title><rect x="97.0817%" y="629" width="0.1297%" height="15" fill="rgb(232,152,28)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.13%)</title><rect x="97.0817%" y="613" width="0.1297%" height="15" fill="rgb(219,110,12)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.13%)</title><rect x="97.0817%" y="597" width="0.1297%" height="15" fill="rgb(218,98,43)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.13%)</title><rect x="97.0817%" y="581" width="0.1297%" height="15" fill="rgb(253,96,49)" fg:x="1497" fg:w="2"/><text x="97.3317%" y="591.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="97.1466%" y="565" width="0.0649%" height="15" fill="rgb(238,132,17)" fg:x="1498" fg:w="1"/><text x="97.3966%" y="575.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="97.1466%" y="549" width="0.0649%" height="15" fill="rgb(208,82,25)" fg:x="1498" fg:w="1"/><text x="97.3966%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.1466%" y="533" width="0.0649%" height="15" fill="rgb(237,77,13)" fg:x="1498" fg:w="1"/><text x="97.3966%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.1466%" y="517" width="0.0649%" height="15" fill="rgb(230,6,11)" fg:x="1498" fg:w="1"/><text x="97.3966%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.1466%" y="501" width="0.0649%" height="15" fill="rgb(207,29,48)" fg:x="1498" fg:w="1"/><text x="97.3966%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (3 samples, 0.19%)</title><rect x="97.0817%" y="725" width="0.1946%" height="15" fill="rgb(247,105,22)" fg:x="1497" fg:w="3"/><text x="97.3317%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (3 samples, 0.19%)</title><rect x="97.0817%" y="709" width="0.1946%" height="15" fill="rgb(223,114,44)" fg:x="1497" fg:w="3"/><text x="97.3317%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="97.2114%" y="693" width="0.0649%" height="15" fill="rgb(242,3,46)" fg:x="1499" fg:w="1"/><text x="97.4614%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.2114%" y="677" width="0.0649%" height="15" fill="rgb(243,197,8)" fg:x="1499" fg:w="1"/><text x="97.4614%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.2114%" y="661" width="0.0649%" height="15" fill="rgb(238,171,27)" fg:x="1499" fg:w="1"/><text x="97.4614%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.2114%" y="645" width="0.0649%" height="15" fill="rgb(254,144,27)" fg:x="1499" fg:w="1"/><text x="97.4614%" y="655.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="97.2763%" y="533" width="0.0649%" height="15" fill="rgb(216,203,36)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="97.2763%" y="517" width="0.0649%" height="15" fill="rgb(247,27,26)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="97.2763%" y="501" width="0.0649%" height="15" fill="rgb(234,180,24)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="511.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="97.2763%" y="485" width="0.0649%" height="15" fill="rgb(221,50,43)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="495.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="97.2763%" y="469" width="0.0649%" height="15" fill="rgb(236,50,6)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="479.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.2763%" y="453" width="0.0649%" height="15" fill="rgb(245,172,32)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="463.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.2763%" y="437" width="0.0649%" height="15" fill="rgb(207,54,46)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="447.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.2763%" y="421" width="0.0649%" height="15" fill="rgb(218,67,44)" fg:x="1500" fg:w="1"/><text x="97.5263%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="97.2763%" y="613" width="0.1297%" height="15" fill="rgb(208,152,22)" fg:x="1500" fg:w="2"/><text x="97.5263%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="97.2763%" y="597" width="0.1297%" height="15" fill="rgb(243,177,0)" fg:x="1500" fg:w="2"/><text x="97.5263%" y="607.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="97.2763%" y="581" width="0.1297%" height="15" fill="rgb(212,75,12)" fg:x="1500" fg:w="2"/><text x="97.5263%" y="591.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="97.2763%" y="565" width="0.1297%" height="15" fill="rgb(212,129,29)" fg:x="1500" fg:w="2"/><text x="97.5263%" y="575.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="97.2763%" y="549" width="0.1297%" height="15" fill="rgb(241,229,35)" fg:x="1500" fg:w="2"/><text x="97.5263%" y="559.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="97.3411%" y="533" width="0.0649%" height="15" fill="rgb(232,49,32)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="97.3411%" y="517" width="0.0649%" height="15" fill="rgb(243,119,48)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.06%)</title><rect x="97.3411%" y="501" width="0.0649%" height="15" fill="rgb(212,205,30)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="97.3411%" y="485" width="0.0649%" height="15" fill="rgb(218,175,42)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="97.3411%" y="469" width="0.0649%" height="15" fill="rgb(230,156,27)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="479.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="97.3411%" y="453" width="0.0649%" height="15" fill="rgb(254,32,43)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="463.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="97.3411%" y="437" width="0.0649%" height="15" fill="rgb(246,89,34)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.06%)</title><rect x="97.3411%" y="421" width="0.0649%" height="15" fill="rgb(247,162,17)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.3411%" y="405" width="0.0649%" height="15" fill="rgb(219,71,37)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.3411%" y="389" width="0.0649%" height="15" fill="rgb(210,184,7)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.3411%" y="373" width="0.0649%" height="15" fill="rgb(245,16,32)" fg:x="1501" fg:w="1"/><text x="97.5911%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="97.4060%" y="549" width="0.0649%" height="15" fill="rgb(209,62,7)" fg:x="1502" fg:w="1"/><text x="97.6560%" y="559.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.4060%" y="533" width="0.0649%" height="15" fill="rgb(215,16,15)" fg:x="1502" fg:w="1"/><text x="97.6560%" y="543.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.4060%" y="517" width="0.0649%" height="15" fill="rgb(223,60,14)" fg:x="1502" fg:w="1"/><text x="97.6560%" y="527.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.4060%" y="501" width="0.0649%" height="15" fill="rgb(244,134,12)" fg:x="1502" fg:w="1"/><text x="97.6560%" y="511.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="97.4708%" y="421" width="0.0649%" height="15" fill="rgb(224,3,41)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="431.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="97.4708%" y="405" width="0.0649%" height="15" fill="rgb(213,84,2)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="97.4708%" y="389" width="0.0649%" height="15" fill="rgb(213,216,27)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="97.4708%" y="373" width="0.0649%" height="15" fill="rgb(218,76,35)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="97.4708%" y="357" width="0.0649%" height="15" fill="rgb(253,89,24)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="97.4708%" y="341" width="0.0649%" height="15" fill="rgb(217,188,40)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.4708%" y="325" width="0.0649%" height="15" fill="rgb(237,79,38)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.4708%" y="309" width="0.0649%" height="15" fill="rgb(215,116,13)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.4708%" y="293" width="0.0649%" height="15" fill="rgb(249,66,35)" fg:x="1503" fg:w="1"/><text x="97.7208%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (2 samples, 0.13%)</title><rect x="97.4708%" y="501" width="0.1297%" height="15" fill="rgb(253,86,18)" fg:x="1503" fg:w="2"/><text x="97.7208%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="97.4708%" y="485" width="0.1297%" height="15" fill="rgb(209,175,36)" fg:x="1503" fg:w="2"/><text x="97.7208%" y="495.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (2 samples, 0.13%)</title><rect x="97.4708%" y="469" width="0.1297%" height="15" fill="rgb(253,149,3)" fg:x="1503" fg:w="2"/><text x="97.7208%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (2 samples, 0.13%)</title><rect x="97.4708%" y="453" width="0.1297%" height="15" fill="rgb(242,124,49)" fg:x="1503" fg:w="2"/><text x="97.7208%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (2 samples, 0.13%)</title><rect x="97.4708%" y="437" width="0.1297%" height="15" fill="rgb(219,171,24)" fg:x="1503" fg:w="2"/><text x="97.7208%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.5357%" y="421" width="0.0649%" height="15" fill="rgb(216,121,30)" fg:x="1504" fg:w="1"/><text x="97.7857%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.5357%" y="405" width="0.0649%" height="15" fill="rgb(234,165,21)" fg:x="1504" fg:w="1"/><text x="97.7857%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.5357%" y="389" width="0.0649%" height="15" fill="rgb(234,103,40)" fg:x="1504" fg:w="1"/><text x="97.7857%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="97.6005%" y="405" width="0.0649%" height="15" fill="rgb(250,137,24)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="97.6005%" y="389" width="0.0649%" height="15" fill="rgb(253,22,21)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="399.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="97.6005%" y="373" width="0.0649%" height="15" fill="rgb(243,22,5)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="383.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="97.6005%" y="357" width="0.0649%" height="15" fill="rgb(212,56,7)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="97.6005%" y="341" width="0.0649%" height="15" fill="rgb(223,190,49)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="97.6005%" y="325" width="0.0649%" height="15" fill="rgb(221,110,35)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="335.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="97.6005%" y="309" width="0.0649%" height="15" fill="rgb(212,113,34)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="319.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="97.6005%" y="293" width="0.0649%" height="15" fill="rgb(216,125,47)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="97.6005%" y="277" width="0.0649%" height="15" fill="rgb(251,112,19)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="97.6005%" y="261" width="0.0649%" height="15" fill="rgb(254,200,41)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="97.6005%" y="245" width="0.0649%" height="15" fill="rgb(225,17,42)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="97.6005%" y="229" width="0.0649%" height="15" fill="rgb(208,105,35)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="97.6005%" y="213" width="0.0649%" height="15" fill="rgb(210,125,51)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="223.50"></text></g><g><title>core::ub_checks::is_valid_allocation_size (1 samples, 0.06%)</title><rect x="97.6005%" y="197" width="0.0649%" height="15" fill="rgb(227,213,18)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="207.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.6005%" y="181" width="0.0649%" height="15" fill="rgb(221,174,32)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="191.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.6005%" y="165" width="0.0649%" height="15" fill="rgb(234,23,1)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="175.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.6005%" y="149" width="0.0649%" height="15" fill="rgb(209,65,17)" fg:x="1505" fg:w="1"/><text x="97.8505%" y="159.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.45%)</title><rect x="97.2763%" y="629" width="0.4540%" height="15" fill="rgb(206,224,31)" fg:x="1500" fg:w="7"/><text x="97.5263%" y="639.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (5 samples, 0.32%)</title><rect x="97.4060%" y="613" width="0.3243%" height="15" fill="rgb(230,20,38)" fg:x="1502" fg:w="5"/><text x="97.6560%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.32%)</title><rect x="97.4060%" y="597" width="0.3243%" height="15" fill="rgb(211,9,41)" fg:x="1502" fg:w="5"/><text x="97.6560%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (5 samples, 0.32%)</title><rect x="97.4060%" y="581" width="0.3243%" height="15" fill="rgb(233,214,4)" fg:x="1502" fg:w="5"/><text x="97.6560%" y="591.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.32%)</title><rect x="97.4060%" y="565" width="0.3243%" height="15" fill="rgb(225,60,54)" fg:x="1502" fg:w="5"/><text x="97.6560%" y="575.50"></text></g><g><title>serde::de::SeqAccess::next_element (4 samples, 0.26%)</title><rect x="97.4708%" y="549" width="0.2594%" height="15" fill="rgb(206,228,35)" fg:x="1503" fg:w="4"/><text x="97.7208%" y="559.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 0.26%)</title><rect x="97.4708%" y="533" width="0.2594%" height="15" fill="rgb(212,178,50)" fg:x="1503" fg:w="4"/><text x="97.7208%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (4 samples, 0.26%)</title><rect x="97.4708%" y="517" width="0.2594%" height="15" fill="rgb(206,192,33)" fg:x="1503" fg:w="4"/><text x="97.7208%" y="527.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="97.6005%" y="501" width="0.1297%" height="15" fill="rgb(238,210,1)" fg:x="1505" fg:w="2"/><text x="97.8505%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="97.6005%" y="485" width="0.1297%" height="15" fill="rgb(205,65,52)" fg:x="1505" fg:w="2"/><text x="97.8505%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="97.6005%" y="469" width="0.1297%" height="15" fill="rgb(237,204,51)" fg:x="1505" fg:w="2"/><text x="97.8505%" y="479.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="97.6005%" y="453" width="0.1297%" height="15" fill="rgb(213,119,51)" fg:x="1505" fg:w="2"/><text x="97.8505%" y="463.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="97.6005%" y="437" width="0.1297%" height="15" fill="rgb(244,156,37)" fg:x="1505" fg:w="2"/><text x="97.8505%" y="447.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="97.6005%" y="421" width="0.1297%" height="15" fill="rgb(249,96,18)" fg:x="1505" fg:w="2"/><text x="97.8505%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.6654%" y="405" width="0.0649%" height="15" fill="rgb(231,65,11)" fg:x="1506" fg:w="1"/><text x="97.9154%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.6654%" y="389" width="0.0649%" height="15" fill="rgb(240,187,2)" fg:x="1506" fg:w="1"/><text x="97.9154%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.6654%" y="373" width="0.0649%" height="15" fill="rgb(242,121,39)" fg:x="1506" fg:w="1"/><text x="97.9154%" y="383.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (8 samples, 0.52%)</title><rect x="97.2763%" y="693" width="0.5188%" height="15" fill="rgb(233,205,18)" fg:x="1500" fg:w="8"/><text x="97.5263%" y="703.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (8 samples, 0.52%)</title><rect x="97.2763%" y="677" width="0.5188%" height="15" fill="rgb(219,67,33)" fg:x="1500" fg:w="8"/><text x="97.5263%" y="687.50"></text></g><g><title>serde::de::SeqAccess::next_element (8 samples, 0.52%)</title><rect x="97.2763%" y="661" width="0.5188%" height="15" fill="rgb(227,84,12)" fg:x="1500" fg:w="8"/><text x="97.5263%" y="671.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (8 samples, 0.52%)</title><rect x="97.2763%" y="645" width="0.5188%" height="15" fill="rgb(227,42,52)" fg:x="1500" fg:w="8"/><text x="97.5263%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.7302%" y="629" width="0.0649%" height="15" fill="rgb(231,27,28)" fg:x="1507" fg:w="1"/><text x="97.9802%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.7302%" y="613" width="0.0649%" height="15" fill="rgb(238,42,2)" fg:x="1507" fg:w="1"/><text x="97.9802%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.7302%" y="597" width="0.0649%" height="15" fill="rgb(215,15,9)" fg:x="1507" fg:w="1"/><text x="97.9802%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="97.0817%" y="853" width="0.7782%" height="15" fill="rgb(205,195,15)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="863.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (12 samples, 0.78%)</title><rect x="97.0817%" y="837" width="0.7782%" height="15" fill="rgb(233,143,2)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (12 samples, 0.78%)</title><rect x="97.0817%" y="821" width="0.7782%" height="15" fill="rgb(207,108,8)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.78%)</title><rect x="97.0817%" y="805" width="0.7782%" height="15" fill="rgb(214,53,21)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="815.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (12 samples, 0.78%)</title><rect x="97.0817%" y="789" width="0.7782%" height="15" fill="rgb(238,212,36)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="799.50"></text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 0.78%)</title><rect x="97.0817%" y="773" width="0.7782%" height="15" fill="rgb(218,151,47)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="783.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.78%)</title><rect x="97.0817%" y="757" width="0.7782%" height="15" fill="rgb(245,160,3)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="767.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.78%)</title><rect x="97.0817%" y="741" width="0.7782%" height="15" fill="rgb(238,106,19)" fg:x="1497" fg:w="12"/><text x="97.3317%" y="751.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (9 samples, 0.58%)</title><rect x="97.2763%" y="725" width="0.5837%" height="15" fill="rgb(207,206,9)" fg:x="1500" fg:w="9"/><text x="97.5263%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.58%)</title><rect x="97.2763%" y="709" width="0.5837%" height="15" fill="rgb(254,40,10)" fg:x="1500" fg:w="9"/><text x="97.5263%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.7951%" y="693" width="0.0649%" height="15" fill="rgb(245,81,8)" fg:x="1508" fg:w="1"/><text x="98.0451%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.7951%" y="677" width="0.0649%" height="15" fill="rgb(214,119,17)" fg:x="1508" fg:w="1"/><text x="98.0451%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.7951%" y="661" width="0.0649%" height="15" fill="rgb(245,100,39)" fg:x="1508" fg:w="1"/><text x="98.0451%" y="671.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (14 samples, 0.91%)</title><rect x="97.0169%" y="933" width="0.9079%" height="15" fill="rgb(243,105,16)" fg:x="1496" fg:w="14"/><text x="97.2669%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (14 samples, 0.91%)</title><rect x="97.0169%" y="917" width="0.9079%" height="15" fill="rgb(214,53,2)" fg:x="1496" fg:w="14"/><text x="97.2669%" y="927.50"></text></g><g><title>bincode::config::Options::deserialize (14 samples, 0.91%)</title><rect x="97.0169%" y="901" width="0.9079%" height="15" fill="rgb(251,54,50)" fg:x="1496" fg:w="14"/><text x="97.2669%" y="911.50"></text></g><g><title>bincode::internal::deserialize (14 samples, 0.91%)</title><rect x="97.0169%" y="885" width="0.9079%" height="15" fill="rgb(244,121,37)" fg:x="1496" fg:w="14"/><text x="97.2669%" y="895.50"></text></g><g><title>bincode::internal::deserialize_seed (14 samples, 0.91%)</title><rect x="97.0169%" y="869" width="0.9079%" height="15" fill="rgb(236,158,39)" fg:x="1496" fg:w="14"/><text x="97.2669%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="97.8599%" y="853" width="0.0649%" height="15" fill="rgb(226,25,37)" fg:x="1509" fg:w="1"/><text x="98.1099%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.8599%" y="837" width="0.0649%" height="15" fill="rgb(222,71,46)" fg:x="1509" fg:w="1"/><text x="98.1099%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.8599%" y="821" width="0.0649%" height="15" fill="rgb(209,27,29)" fg:x="1509" fg:w="1"/><text x="98.1099%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.8599%" y="805" width="0.0649%" height="15" fill="rgb(210,196,17)" fg:x="1509" fg:w="1"/><text x="98.1099%" y="815.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="97.9248%" y="917" width="0.0649%" height="15" fill="rgb(236,76,23)" fg:x="1510" fg:w="1"/><text x="98.1748%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.9248%" y="901" width="0.0649%" height="15" fill="rgb(214,33,32)" fg:x="1510" fg:w="1"/><text x="98.1748%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.9248%" y="885" width="0.0649%" height="15" fill="rgb(243,16,26)" fg:x="1510" fg:w="1"/><text x="98.1748%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.9248%" y="869" width="0.0649%" height="15" fill="rgb(241,30,48)" fg:x="1510" fg:w="1"/><text x="98.1748%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::child_for_key (16 samples, 1.04%)</title><rect x="97.0169%" y="949" width="1.0376%" height="15" fill="rgb(241,106,1)" fg:x="1496" fg:w="16"/><text x="97.2669%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key (2 samples, 0.13%)</title><rect x="97.9248%" y="933" width="0.1297%" height="15" fill="rgb(230,62,29)" fg:x="1510" fg:w="2"/><text x="98.1748%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_offset (1 samples, 0.06%)</title><rect x="97.9896%" y="917" width="0.0649%" height="15" fill="rgb(207,166,53)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::BranchAccessor&lt;T&gt;::key_end (1 samples, 0.06%)</title><rect x="97.9896%" y="901" width="0.0649%" height="15" fill="rgb(244,54,13)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="911.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.06%)</title><rect x="97.9896%" y="885" width="0.0649%" height="15" fill="rgb(205,144,19)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="895.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (1 samples, 0.06%)</title><rect x="97.9896%" y="869" width="0.0649%" height="15" fill="rgb(225,165,45)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="879.50"></text></g><g><title> N]&gt;::try_from (1 samples, 0.06%)</title><rect x="97.9896%" y="853" width="0.0649%" height="15" fill="rgb(220,140,6)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="97.9896%" y="837" width="0.0649%" height="15" fill="rgb(234,69,14)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="97.9896%" y="821" width="0.0649%" height="15" fill="rgb(243,24,33)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="97.9896%" y="805" width="0.0649%" height="15" fill="rgb(253,100,43)" fg:x="1511" fg:w="1"/><text x="98.2396%" y="815.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="98.0545%" y="837" width="0.0649%" height="15" fill="rgb(221,168,15)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="847.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="98.0545%" y="821" width="0.0649%" height="15" fill="rgb(237,15,11)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="98.0545%" y="805" width="0.0649%" height="15" fill="rgb(229,207,40)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="98.0545%" y="789" width="0.0649%" height="15" fill="rgb(246,125,48)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="799.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="98.0545%" y="773" width="0.0649%" height="15" fill="rgb(231,65,10)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="783.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="98.0545%" y="757" width="0.0649%" height="15" fill="rgb(222,152,40)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="767.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="98.0545%" y="741" width="0.0649%" height="15" fill="rgb(214,12,30)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="98.0545%" y="725" width="0.0649%" height="15" fill="rgb(239,80,41)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="735.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="98.0545%" y="709" width="0.0649%" height="15" fill="rgb(206,175,27)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="719.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="98.0545%" y="693" width="0.0649%" height="15" fill="rgb(222,43,39)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="98.0545%" y="677" width="0.0649%" height="15" fill="rgb(243,47,50)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="687.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="98.0545%" y="661" width="0.0649%" height="15" fill="rgb(243,61,21)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="671.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="98.0545%" y="645" width="0.0649%" height="15" fill="rgb(208,172,5)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="655.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="98.0545%" y="629" width="0.0649%" height="15" fill="rgb(219,24,25)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="98.0545%" y="613" width="0.0649%" height="15" fill="rgb(235,42,41)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="98.0545%" y="597" width="0.0649%" height="15" fill="rgb(226,190,24)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="607.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="98.0545%" y="581" width="0.0649%" height="15" fill="rgb(216,55,27)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="591.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="98.0545%" y="565" width="0.0649%" height="15" fill="rgb(231,77,14)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="575.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="98.0545%" y="549" width="0.0649%" height="15" fill="rgb(208,108,34)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="559.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="98.0545%" y="533" width="0.0649%" height="15" fill="rgb(228,183,52)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="543.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="98.0545%" y="517" width="0.0649%" height="15" fill="rgb(224,152,1)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="527.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="98.0545%" y="501" width="0.0649%" height="15" fill="rgb(246,115,8)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="98.0545%" y="485" width="0.0649%" height="15" fill="rgb(211,76,13)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_checked (1 samples, 0.06%)</title><rect x="98.0545%" y="469" width="0.0649%" height="15" fill="rgb(233,214,49)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.06%)</title><rect x="98.0545%" y="453" width="0.0649%" height="15" fill="rgb(223,44,51)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="463.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.06%)</title><rect x="98.0545%" y="437" width="0.0649%" height="15" fill="rgb(225,111,51)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.06%)</title><rect x="98.0545%" y="421" width="0.0649%" height="15" fill="rgb(231,185,26)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.0545%" y="405" width="0.0649%" height="15" fill="rgb(233,111,30)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.0545%" y="389" width="0.0649%" height="15" fill="rgb(250,1,47)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.0545%" y="373" width="0.0649%" height="15" fill="rgb(254,210,3)" fg:x="1512" fg:w="1"/><text x="98.3045%" y="383.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="98.0545%" y="949" width="0.1297%" height="15" fill="rgb(234,14,22)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="98.0545%" y="933" width="0.1297%" height="15" fill="rgb(221,117,4)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="943.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Key&gt;::compare (2 samples, 0.13%)</title><rect x="98.0545%" y="917" width="0.1297%" height="15" fill="rgb(251,147,27)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="927.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="98.0545%" y="901" width="0.1297%" height="15" fill="rgb(226,52,11)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="911.50"></text></g><g><title>bincode::config::Options::deserialize (2 samples, 0.13%)</title><rect x="98.0545%" y="885" width="0.1297%" height="15" fill="rgb(229,222,5)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="895.50"></text></g><g><title>bincode::internal::deserialize (2 samples, 0.13%)</title><rect x="98.0545%" y="869" width="0.1297%" height="15" fill="rgb(232,76,2)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="879.50"></text></g><g><title>bincode::internal::deserialize_seed (2 samples, 0.13%)</title><rect x="98.0545%" y="853" width="0.1297%" height="15" fill="rgb(242,108,2)" fg:x="1512" fg:w="2"/><text x="98.3045%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="98.1193%" y="837" width="0.0649%" height="15" fill="rgb(213,165,6)" fg:x="1513" fg:w="1"/><text x="98.3693%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.1193%" y="821" width="0.0649%" height="15" fill="rgb(222,24,42)" fg:x="1513" fg:w="1"/><text x="98.3693%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.1193%" y="805" width="0.0649%" height="15" fill="rgb(242,170,24)" fg:x="1513" fg:w="1"/><text x="98.3693%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.1193%" y="789" width="0.0649%" height="15" fill="rgb(209,110,40)" fg:x="1513" fg:w="1"/><text x="98.3693%" y="799.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::get (35 samples, 2.27%)</title><rect x="95.9792%" y="997" width="2.2698%" height="15" fill="rgb(233,146,36)" fg:x="1480" fg:w="35"/><text x="96.2292%" y="1007.50">r..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (35 samples, 2.27%)</title><rect x="95.9792%" y="981" width="2.2698%" height="15" fill="rgb(229,33,32)" fg:x="1480" fg:w="35"/><text x="96.2292%" y="991.50">r..</text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (31 samples, 2.01%)</title><rect x="96.2387%" y="965" width="2.0104%" height="15" fill="rgb(225,55,34)" fg:x="1484" fg:w="31"/><text x="96.4887%" y="975.50">r..</text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_range (1 samples, 0.06%)</title><rect x="98.1842%" y="949" width="0.0649%" height="15" fill="rgb(217,32,50)" fg:x="1514" fg:w="1"/><text x="98.4342%" y="959.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::value_start (1 samples, 0.06%)</title><rect x="98.1842%" y="933" width="0.0649%" height="15" fill="rgb(206,110,53)" fg:x="1514" fg:w="1"/><text x="98.4342%" y="943.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="98.1842%" y="917" width="0.0649%" height="15" fill="rgb(247,25,10)" fg:x="1514" fg:w="1"/><text x="98.4342%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.1842%" y="901" width="0.0649%" height="15" fill="rgb(226,67,48)" fg:x="1514" fg:w="1"/><text x="98.4342%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.1842%" y="885" width="0.0649%" height="15" fill="rgb(239,73,28)" fg:x="1514" fg:w="1"/><text x="98.4342%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.1842%" y="869" width="0.0649%" height="15" fill="rgb(234,200,41)" fg:x="1514" fg:w="1"/><text x="98.4342%" y="879.50"></text></g><g><title>Unknown (1 samples, 0.06%)</title><rect x="98.2490%" y="981" width="0.0649%" height="15" fill="rgb(233,76,35)" fg:x="1515" fg:w="1"/><text x="98.4990%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.2490%" y="965" width="0.0649%" height="15" fill="rgb(238,166,31)" fg:x="1515" fg:w="1"/><text x="98.4990%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.2490%" y="949" width="0.0649%" height="15" fill="rgb(219,218,51)" fg:x="1515" fg:w="1"/><text x="98.4990%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.2490%" y="933" width="0.0649%" height="15" fill="rgb(221,82,53)" fg:x="1515" fg:w="1"/><text x="98.4990%" y="943.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="98.3139%" y="981" width="0.0649%" height="15" fill="rgb(218,179,13)" fg:x="1516" fg:w="1"/><text x="98.5639%" y="991.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.3139%" y="965" width="0.0649%" height="15" fill="rgb(210,53,38)" fg:x="1516" fg:w="1"/><text x="98.5639%" y="975.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.3139%" y="949" width="0.0649%" height="15" fill="rgb(214,167,31)" fg:x="1516" fg:w="1"/><text x="98.5639%" y="959.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.3139%" y="933" width="0.0649%" height="15" fill="rgb(223,26,5)" fg:x="1516" fg:w="1"/><text x="98.5639%" y="943.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="98.3787%" y="933" width="0.0649%" height="15" fill="rgb(218,95,23)" fg:x="1517" fg:w="1"/><text x="98.6287%" y="943.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.3787%" y="917" width="0.0649%" height="15" fill="rgb(248,205,45)" fg:x="1517" fg:w="1"/><text x="98.6287%" y="927.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.3787%" y="901" width="0.0649%" height="15" fill="rgb(211,76,6)" fg:x="1517" fg:w="1"/><text x="98.6287%" y="911.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.3787%" y="885" width="0.0649%" height="15" fill="rgb(250,176,29)" fg:x="1517" fg:w="1"/><text x="98.6287%" y="895.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_default (1 samples, 0.06%)</title><rect x="98.4436%" y="933" width="0.0649%" height="15" fill="rgb(240,107,31)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="943.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="98.4436%" y="917" width="0.0649%" height="15" fill="rgb(229,215,17)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="927.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="98.4436%" y="901" width="0.0649%" height="15" fill="rgb(240,79,8)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="911.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (1 samples, 0.06%)</title><rect x="98.4436%" y="885" width="0.0649%" height="15" fill="rgb(243,110,48)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.06%)</title><rect x="98.4436%" y="869" width="0.0649%" height="15" fill="rgb(236,201,9)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.06%)</title><rect x="98.4436%" y="853" width="0.0649%" height="15" fill="rgb(220,87,26)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.4436%" y="837" width="0.0649%" height="15" fill="rgb(212,118,27)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.4436%" y="821" width="0.0649%" height="15" fill="rgb(244,178,50)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.4436%" y="805" width="0.0649%" height="15" fill="rgb(215,204,7)" fg:x="1518" fg:w="1"/><text x="98.6936%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="98.5084%" y="869" width="0.0649%" height="15" fill="rgb(214,122,43)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="98.5084%" y="853" width="0.0649%" height="15" fill="rgb(251,178,26)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="98.5084%" y="837" width="0.0649%" height="15" fill="rgb(210,7,35)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.06%)</title><rect x="98.5084%" y="821" width="0.0649%" height="15" fill="rgb(227,164,54)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="831.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.06%)</title><rect x="98.5084%" y="805" width="0.0649%" height="15" fill="rgb(205,18,34)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.5084%" y="789" width="0.0649%" height="15" fill="rgb(239,50,19)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.5084%" y="773" width="0.0649%" height="15" fill="rgb(224,85,6)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.5084%" y="757" width="0.0649%" height="15" fill="rgb(252,167,34)" fg:x="1519" fg:w="1"/><text x="98.7584%" y="767.50"></text></g><g><title>redb::table::ReadOnlyTable&lt;K,V&gt;::new (4 samples, 0.26%)</title><rect x="98.3787%" y="981" width="0.2594%" height="15" fill="rgb(243,180,35)" fg:x="1517" fg:w="4"/><text x="98.6287%" y="991.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::new (4 samples, 0.26%)</title><rect x="98.3787%" y="965" width="0.2594%" height="15" fill="rgb(213,214,53)" fg:x="1517" fg:w="4"/><text x="98.6287%" y="975.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (4 samples, 0.26%)</title><rect x="98.3787%" y="949" width="0.2594%" height="15" fill="rgb(244,39,37)" fg:x="1517" fg:w="4"/><text x="98.6287%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="98.5084%" y="933" width="0.1297%" height="15" fill="rgb(215,141,14)" fg:x="1519" fg:w="2"/><text x="98.7584%" y="943.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="98.5084%" y="917" width="0.1297%" height="15" fill="rgb(210,2,42)" fg:x="1519" fg:w="2"/><text x="98.7584%" y="927.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.13%)</title><rect x="98.5084%" y="901" width="0.1297%" height="15" fill="rgb(252,189,47)" fg:x="1519" fg:w="2"/><text x="98.7584%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.13%)</title><rect x="98.5084%" y="885" width="0.1297%" height="15" fill="rgb(222,154,47)" fg:x="1519" fg:w="2"/><text x="98.7584%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="98.5733%" y="869" width="0.0649%" height="15" fill="rgb(228,20,37)" fg:x="1520" fg:w="1"/><text x="98.8233%" y="879.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="98.5733%" y="853" width="0.0649%" height="15" fill="rgb(236,17,4)" fg:x="1520" fg:w="1"/><text x="98.8233%" y="863.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.5733%" y="837" width="0.0649%" height="15" fill="rgb(222,211,31)" fg:x="1520" fg:w="1"/><text x="98.8233%" y="847.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.5733%" y="821" width="0.0649%" height="15" fill="rgb(218,134,25)" fg:x="1520" fg:w="1"/><text x="98.8233%" y="831.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.5733%" y="805" width="0.0649%" height="15" fill="rgb(218,97,43)" fg:x="1520" fg:w="1"/><text x="98.8233%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.6381%" y="901" width="0.0649%" height="15" fill="rgb(234,163,32)" fg:x="1521" fg:w="1"/><text x="98.8881%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.6381%" y="885" width="0.0649%" height="15" fill="rgb(251,171,42)" fg:x="1521" fg:w="1"/><text x="98.8881%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.6381%" y="869" width="0.0649%" height="15" fill="rgb(223,104,12)" fg:x="1521" fg:w="1"/><text x="98.8881%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::AccessGuard&lt;redb::tree_store::table_tree_base::InternalTableDefinition&gt;&gt; (2 samples, 0.13%)</title><rect x="98.6381%" y="949" width="0.1297%" height="15" fill="rgb(225,29,49)" fg:x="1521" fg:w="2"/><text x="98.8881%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::btree_base::EitherPage&gt; (2 samples, 0.13%)</title><rect x="98.6381%" y="933" width="0.1297%" height="15" fill="rgb(253,77,7)" fg:x="1521" fg:w="2"/><text x="98.8881%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;redb::tree_store::page_store::base::PageImpl&gt; (2 samples, 0.13%)</title><rect x="98.6381%" y="917" width="0.1297%" height="15" fill="rgb(213,81,26)" fg:x="1521" fg:w="2"/><text x="98.8881%" y="927.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="98.7030%" y="901" width="0.0649%" height="15" fill="rgb(246,126,6)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="98.7030%" y="885" width="0.0649%" height="15" fill="rgb(232,186,21)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="98.7030%" y="869" width="0.0649%" height="15" fill="rgb(215,126,18)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="98.7030%" y="853" width="0.0649%" height="15" fill="rgb(210,47,5)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="98.7030%" y="837" width="0.0649%" height="15" fill="rgb(240,70,6)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="847.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="98.7030%" y="821" width="0.0649%" height="15" fill="rgb(230,99,49)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="98.7030%" y="805" width="0.0649%" height="15" fill="rgb(212,57,36)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="815.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="98.7030%" y="789" width="0.0649%" height="15" fill="rgb(243,14,50)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="98.7030%" y="773" width="0.0649%" height="15" fill="rgb(240,2,53)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="783.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="98.7030%" y="757" width="0.0649%" height="15" fill="rgb(208,47,53)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="767.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="98.7030%" y="741" width="0.0649%" height="15" fill="rgb(235,186,39)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="98.7030%" y="725" width="0.0649%" height="15" fill="rgb(212,35,47)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="735.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.7030%" y="709" width="0.0649%" height="15" fill="rgb(248,59,37)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="719.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.7030%" y="693" width="0.0649%" height="15" fill="rgb(223,186,16)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="703.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.7030%" y="677" width="0.0649%" height="15" fill="rgb(215,106,35)" fg:x="1522" fg:w="1"/><text x="98.9530%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.06%)</title><rect x="98.7678%" y="917" width="0.0649%" height="15" fill="rgb(217,141,29)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.06%)</title><rect x="98.7678%" y="901" width="0.0649%" height="15" fill="rgb(221,227,46)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.06%)</title><rect x="98.7678%" y="885" width="0.0649%" height="15" fill="rgb(212,36,41)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="895.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="98.7678%" y="869" width="0.0649%" height="15" fill="rgb(222,35,11)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="98.7678%" y="853" width="0.0649%" height="15" fill="rgb(232,165,33)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.06%)</title><rect x="98.7678%" y="837" width="0.0649%" height="15" fill="rgb(211,38,20)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="847.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageNumber as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="98.7678%" y="821" width="0.0649%" height="15" fill="rgb(230,7,36)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1 samples, 0.06%)</title><rect x="98.7678%" y="805" width="0.0649%" height="15" fill="rgb(213,128,35)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.06%)</title><rect x="98.7678%" y="789" width="0.0649%" height="15" fill="rgb(218,11,14)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="98.7678%" y="773" width="0.0649%" height="15" fill="rgb(249,105,7)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="98.7678%" y="757" width="0.0649%" height="15" fill="rgb(226,125,21)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="98.7678%" y="741" width="0.0649%" height="15" fill="rgb(239,90,47)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="751.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="98.7678%" y="725" width="0.0649%" height="15" fill="rgb(226,19,1)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="98.7678%" y="709" width="0.0649%" height="15" fill="rgb(205,117,40)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="719.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="98.7678%" y="693" width="0.0649%" height="15" fill="rgb(234,6,54)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.06%)</title><rect x="98.7678%" y="677" width="0.0649%" height="15" fill="rgb(239,73,32)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.7678%" y="661" width="0.0649%" height="15" fill="rgb(226,197,12)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.7678%" y="645" width="0.0649%" height="15" fill="rgb(226,53,42)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.7678%" y="629" width="0.0649%" height="15" fill="rgb(234,99,30)" fg:x="1523" fg:w="1"/><text x="99.0178%" y="639.50"></text></g><g><title>&lt;redb::tree_store::page_store::base::PageImpl as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="98.7678%" y="933" width="0.1297%" height="15" fill="rgb(237,175,49)" fg:x="1523" fg:w="2"/><text x="99.0178%" y="943.50"></text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.06%)</title><rect x="98.8327%" y="917" width="0.0649%" height="15" fill="rgb(228,75,42)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="927.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="98.8327%" y="901" width="0.0649%" height="15" fill="rgb(223,162,48)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="911.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.06%)</title><rect x="98.8327%" y="885" width="0.0649%" height="15" fill="rgb(221,192,29)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="895.50"></text></g><g><title>std::thread::panicking (1 samples, 0.06%)</title><rect x="98.8327%" y="869" width="0.0649%" height="15" fill="rgb(249,150,41)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="879.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.06%)</title><rect x="98.8327%" y="853" width="0.0649%" height="15" fill="rgb(243,107,34)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="863.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.06%)</title><rect x="98.8327%" y="837" width="0.0649%" height="15" fill="rgb(214,227,11)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="98.8327%" y="821" width="0.0649%" height="15" fill="rgb(209,37,13)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="98.8327%" y="805" width="0.0649%" height="15" fill="rgb(249,124,20)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.8327%" y="789" width="0.0649%" height="15" fill="rgb(228,28,2)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.8327%" y="773" width="0.0649%" height="15" fill="rgb(244,55,1)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.8327%" y="757" width="0.0649%" height="15" fill="rgb(216,26,19)" fg:x="1524" fg:w="1"/><text x="99.0827%" y="767.50"></text></g><g><title>&lt;&amp;str as redb::types::Key&gt;::compare (1 samples, 0.06%)</title><rect x="98.8975%" y="869" width="0.0649%" height="15" fill="rgb(209,162,10)" fg:x="1525" fg:w="1"/><text x="99.1475%" y="879.50"></text></g><g><title>&lt;&amp;str as redb::types::Value&gt;::from_bytes (1 samples, 0.06%)</title><rect x="98.8975%" y="853" width="0.0649%" height="15" fill="rgb(235,168,42)" fg:x="1525" fg:w="1"/><text x="99.1475%" y="863.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="98.8975%" y="837" width="0.0649%" height="15" fill="rgb(240,24,14)" fg:x="1525" fg:w="1"/><text x="99.1475%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.8975%" y="821" width="0.0649%" height="15" fill="rgb(224,107,11)" fg:x="1525" fg:w="1"/><text x="99.1475%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.8975%" y="805" width="0.0649%" height="15" fill="rgb(226,48,4)" fg:x="1525" fg:w="1"/><text x="99.1475%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.8975%" y="789" width="0.0649%" height="15" fill="rgb(254,31,21)" fg:x="1525" fg:w="1"/><text x="99.1475%" y="799.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (2 samples, 0.13%)</title><rect x="98.8975%" y="917" width="0.1297%" height="15" fill="rgb(205,156,19)" fg:x="1525" fg:w="2"/><text x="99.1475%" y="927.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::find_key (2 samples, 0.13%)</title><rect x="98.8975%" y="901" width="0.1297%" height="15" fill="rgb(216,73,31)" fg:x="1525" fg:w="2"/><text x="99.1475%" y="911.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::position (2 samples, 0.13%)</title><rect x="98.8975%" y="885" width="0.1297%" height="15" fill="rgb(237,88,35)" fg:x="1525" fg:w="2"/><text x="99.1475%" y="895.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_unchecked (1 samples, 0.06%)</title><rect x="98.9624%" y="869" width="0.0649%" height="15" fill="rgb(254,79,48)" fg:x="1526" fg:w="1"/><text x="99.2124%" y="879.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_start (1 samples, 0.06%)</title><rect x="98.9624%" y="853" width="0.0649%" height="15" fill="rgb(211,66,36)" fg:x="1526" fg:w="1"/><text x="99.2124%" y="863.50"></text></g><g><title>redb::tree_store::btree_base::LeafAccessor::key_end (1 samples, 0.06%)</title><rect x="98.9624%" y="837" width="0.0649%" height="15" fill="rgb(222,13,1)" fg:x="1526" fg:w="1"/><text x="99.2124%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="98.9624%" y="821" width="0.0649%" height="15" fill="rgb(221,216,41)" fg:x="1526" fg:w="1"/><text x="99.2124%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="98.9624%" y="805" width="0.0649%" height="15" fill="rgb(220,10,17)" fg:x="1526" fg:w="1"/><text x="99.2124%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="98.9624%" y="789" width="0.0649%" height="15" fill="rgb(242,43,35)" fg:x="1526" fg:w="1"/><text x="99.2124%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.06%)</title><rect x="99.0272%" y="901" width="0.0649%" height="15" fill="rgb(216,182,18)" fg:x="1527" fg:w="1"/><text x="99.2772%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.0272%" y="885" width="0.0649%" height="15" fill="rgb(246,217,36)" fg:x="1527" fg:w="1"/><text x="99.2772%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.0272%" y="869" width="0.0649%" height="15" fill="rgb(208,107,8)" fg:x="1527" fg:w="1"/><text x="99.2772%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.0272%" y="853" width="0.0649%" height="15" fill="rgb(208,189,15)" fg:x="1527" fg:w="1"/><text x="99.2772%" y="863.50"></text></g><g><title>redb::tree_store::page_store::base::PageNumber::address_range (1 samples, 0.06%)</title><rect x="99.0921%" y="901" width="0.0649%" height="15" fill="rgb(211,70,9)" fg:x="1528" fg:w="1"/><text x="99.3421%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.0921%" y="885" width="0.0649%" height="15" fill="rgb(217,95,34)" fg:x="1528" fg:w="1"/><text x="99.3421%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.0921%" y="869" width="0.0649%" height="15" fill="rgb(240,223,2)" fg:x="1528" fg:w="1"/><text x="99.3421%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.0921%" y="853" width="0.0649%" height="15" fill="rgb(231,18,6)" fg:x="1528" fg:w="1"/><text x="99.3421%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.06%)</title><rect x="99.1569%" y="869" width="0.0649%" height="15" fill="rgb(254,44,46)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="99.1569%" y="853" width="0.0649%" height="15" fill="rgb(223,222,46)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="99.1569%" y="837" width="0.0649%" height="15" fill="rgb(229,163,13)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="99.1569%" y="821" width="0.0649%" height="15" fill="rgb(220,208,13)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.06%)</title><rect x="99.1569%" y="805" width="0.0649%" height="15" fill="rgb(244,28,53)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.06%)</title><rect x="99.1569%" y="789" width="0.0649%" height="15" fill="rgb(243,138,0)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.1569%" y="773" width="0.0649%" height="15" fill="rgb(209,90,49)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.1569%" y="757" width="0.0649%" height="15" fill="rgb(247,114,18)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.1569%" y="741" width="0.0649%" height="15" fill="rgb(221,14,46)" fg:x="1529" fg:w="1"/><text x="99.4069%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.13%)</title><rect x="99.1569%" y="901" width="0.1297%" height="15" fill="rgb(215,29,23)" fg:x="1529" fg:w="2"/><text x="99.4069%" y="911.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.13%)</title><rect x="99.1569%" y="885" width="0.1297%" height="15" fill="rgb(241,37,25)" fg:x="1529" fg:w="2"/><text x="99.4069%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.06%)</title><rect x="99.2218%" y="869" width="0.0649%" height="15" fill="rgb(225,17,22)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.06%)</title><rect x="99.2218%" y="853" width="0.0649%" height="15" fill="rgb(241,182,7)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="863.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1 samples, 0.06%)</title><rect x="99.2218%" y="837" width="0.0649%" height="15" fill="rgb(248,125,10)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="847.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1 samples, 0.06%)</title><rect x="99.2218%" y="821" width="0.0649%" height="15" fill="rgb(250,3,37)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.06%)</title><rect x="99.2218%" y="805" width="0.0649%" height="15" fill="rgb(237,102,7)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="815.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.2218%" y="789" width="0.0649%" height="15" fill="rgb(235,5,5)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="799.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.2218%" y="773" width="0.0649%" height="15" fill="rgb(249,147,38)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="783.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.2218%" y="757" width="0.0649%" height="15" fill="rgb(221,25,18)" fg:x="1530" fg:w="1"/><text x="99.4718%" y="767.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get (9 samples, 0.58%)</title><rect x="98.7678%" y="949" width="0.5837%" height="15" fill="rgb(211,88,9)" fg:x="1523" fg:w="9"/><text x="99.0178%" y="959.50"></text></g><g><title>redb::tree_store::btree::Btree&lt;K,V&gt;::get_helper (7 samples, 0.45%)</title><rect x="98.8975%" y="933" width="0.4540%" height="15" fill="rgb(219,62,54)" fg:x="1525" fg:w="7"/><text x="99.1475%" y="943.50"></text></g><g><title>redb::tree_store::page_store::page_manager::TransactionalMemory::get_page_extended (5 samples, 0.32%)</title><rect x="99.0272%" y="917" width="0.3243%" height="15" fill="rgb(243,133,46)" fg:x="1527" fg:w="5"/><text x="99.2772%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1 samples, 0.06%)</title><rect x="99.2866%" y="901" width="0.0649%" height="15" fill="rgb(214,168,53)" fg:x="1531" fg:w="1"/><text x="99.5366%" y="911.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.2866%" y="885" width="0.0649%" height="15" fill="rgb(250,58,7)" fg:x="1531" fg:w="1"/><text x="99.5366%" y="895.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.2866%" y="869" width="0.0649%" height="15" fill="rgb(249,131,5)" fg:x="1531" fg:w="1"/><text x="99.5366%" y="879.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.2866%" y="853" width="0.0649%" height="15" fill="rgb(234,40,44)" fg:x="1531" fg:w="1"/><text x="99.5366%" y="863.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table_untyped (13 samples, 0.84%)</title><rect x="98.6381%" y="965" width="0.8431%" height="15" fill="rgb(225,188,42)" fg:x="1521" fg:w="13"/><text x="98.8881%" y="975.50"></text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (2 samples, 0.13%)</title><rect x="99.3515%" y="949" width="0.1297%" height="15" fill="rgb(218,201,51)" fg:x="1532" fg:w="2"/><text x="99.6015%" y="959.50"></text></g><g><title>&lt;redb::tree_store::table_tree_base::InternalTableDefinition as redb::types::Value&gt;::from_bytes (2 samples, 0.13%)</title><rect x="99.3515%" y="933" width="0.1297%" height="15" fill="rgb(214,209,38)" fg:x="1532" fg:w="2"/><text x="99.6015%" y="943.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.13%)</title><rect x="99.3515%" y="917" width="0.1297%" height="15" fill="rgb(217,0,20)" fg:x="1532" fg:w="2"/><text x="99.6015%" y="927.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.13%)</title><rect x="99.3515%" y="901" width="0.1297%" height="15" fill="rgb(248,183,46)" fg:x="1532" fg:w="2"/><text x="99.6015%" y="911.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.13%)</title><rect x="99.3515%" y="885" width="0.1297%" height="15" fill="rgb(208,99,41)" fg:x="1532" fg:w="2"/><text x="99.6015%" y="895.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.13%)</title><rect x="99.3515%" y="869" width="0.1297%" height="15" fill="rgb(210,189,49)" fg:x="1532" fg:w="2"/><text x="99.6015%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="99.4812%" y="709" width="0.0649%" height="15" fill="rgb(239,191,42)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="99.4812%" y="693" width="0.0649%" height="15" fill="rgb(240,138,26)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.06%)</title><rect x="99.4812%" y="677" width="0.0649%" height="15" fill="rgb(234,45,22)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="99.4812%" y="661" width="0.0649%" height="15" fill="rgb(228,43,35)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.06%)</title><rect x="99.4812%" y="645" width="0.0649%" height="15" fill="rgb(215,201,54)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="99.4812%" y="629" width="0.0649%" height="15" fill="rgb(209,60,31)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.06%)</title><rect x="99.4812%" y="613" width="0.0649%" height="15" fill="rgb(232,66,12)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.06%)</title><rect x="99.4812%" y="597" width="0.0649%" height="15" fill="rgb(244,78,24)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="607.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.06%)</title><rect x="99.4812%" y="581" width="0.0649%" height="15" fill="rgb(249,65,27)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="591.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.06%)</title><rect x="99.4812%" y="565" width="0.0649%" height="15" fill="rgb(208,218,19)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="575.50"></text></g><g><title>_int_realloc (1 samples, 0.06%)</title><rect x="99.4812%" y="549" width="0.0649%" height="15" fill="rgb(212,181,38)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="559.50"></text></g><g><title>_int_malloc (1 samples, 0.06%)</title><rect x="99.4812%" y="533" width="0.0649%" height="15" fill="rgb(207,118,40)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="543.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.4812%" y="517" width="0.0649%" height="15" fill="rgb(207,126,20)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="527.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.4812%" y="501" width="0.0649%" height="15" fill="rgb(232,15,46)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="511.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.4812%" y="485" width="0.0649%" height="15" fill="rgb(254,33,30)" fg:x="1534" fg:w="1"/><text x="99.7312%" y="495.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.13%)</title><rect x="99.4812%" y="933" width="0.1297%" height="15" fill="rgb(233,92,20)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (2 samples, 0.13%)</title><rect x="99.4812%" y="917" width="0.1297%" height="15" fill="rgb(225,195,54)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="927.50"></text></g><g><title>alloc::fmt::format::{{closure}} (2 samples, 0.13%)</title><rect x="99.4812%" y="901" width="0.1297%" height="15" fill="rgb(208,196,7)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="911.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.13%)</title><rect x="99.4812%" y="885" width="0.1297%" height="15" fill="rgb(253,19,35)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="895.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.13%)</title><rect x="99.4812%" y="869" width="0.1297%" height="15" fill="rgb(228,180,1)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="879.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (2 samples, 0.13%)</title><rect x="99.4812%" y="853" width="0.1297%" height="15" fill="rgb(248,35,18)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="863.50"></text></g><g><title>core::fmt::write (2 samples, 0.13%)</title><rect x="99.4812%" y="837" width="0.1297%" height="15" fill="rgb(220,34,8)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="847.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.13%)</title><rect x="99.4812%" y="821" width="0.1297%" height="15" fill="rgb(219,223,17)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="831.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.13%)</title><rect x="99.4812%" y="805" width="0.1297%" height="15" fill="rgb(223,183,15)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.13%)</title><rect x="99.4812%" y="789" width="0.1297%" height="15" fill="rgb(253,184,45)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="799.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.13%)</title><rect x="99.4812%" y="773" width="0.1297%" height="15" fill="rgb(207,97,29)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.13%)</title><rect x="99.4812%" y="757" width="0.1297%" height="15" fill="rgb(250,170,27)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="99.4812%" y="741" width="0.1297%" height="15" fill="rgb(206,178,17)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.13%)</title><rect x="99.4812%" y="725" width="0.1297%" height="15" fill="rgb(213,92,46)" fg:x="1534" fg:w="2"/><text x="99.7312%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="99.5460%" y="709" width="0.0649%" height="15" fill="rgb(223,114,30)" fg:x="1535" fg:w="1"/><text x="99.7960%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.5460%" y="693" width="0.0649%" height="15" fill="rgb(207,228,9)" fg:x="1535" fg:w="1"/><text x="99.7960%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.5460%" y="677" width="0.0649%" height="15" fill="rgb(205,70,25)" fg:x="1535" fg:w="1"/><text x="99.7960%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.5460%" y="661" width="0.0649%" height="15" fill="rgb(252,45,30)" fg:x="1535" fg:w="1"/><text x="99.7960%" y="671.50"></text></g><g><title>redb::transactions::ReadTransaction::open_table (22 samples, 1.43%)</title><rect x="98.2490%" y="997" width="1.4267%" height="15" fill="rgb(219,185,54)" fg:x="1515" fg:w="22"/><text x="98.4990%" y="1007.50"></text></g><g><title>redb::tree_store::table_tree::TableTree::get_table (16 samples, 1.04%)</title><rect x="98.6381%" y="981" width="1.0376%" height="15" fill="rgb(219,208,54)" fg:x="1521" fg:w="16"/><text x="98.8881%" y="991.50"></text></g><g><title>redb::tree_store::table_tree_base::InternalTableDefinition::check_match (3 samples, 0.19%)</title><rect x="99.4812%" y="965" width="0.1946%" height="15" fill="rgb(207,164,54)" fg:x="1534" fg:w="3"/><text x="99.7312%" y="975.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::type_name (3 samples, 0.19%)</title><rect x="99.4812%" y="949" width="0.1946%" height="15" fill="rgb(240,155,22)" fg:x="1534" fg:w="3"/><text x="99.7312%" y="959.50"></text></g><g><title>redb::types::TypeName::new (1 samples, 0.06%)</title><rect x="99.6109%" y="933" width="0.0649%" height="15" fill="rgb(217,127,14)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="943.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.06%)</title><rect x="99.6109%" y="917" width="0.0649%" height="15" fill="rgb(232,179,42)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="927.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.06%)</title><rect x="99.6109%" y="901" width="0.0649%" height="15" fill="rgb(247,55,45)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.06%)</title><rect x="99.6109%" y="885" width="0.0649%" height="15" fill="rgb(217,11,18)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="895.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.06%)</title><rect x="99.6109%" y="869" width="0.0649%" height="15" fill="rgb(227,127,4)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.06%)</title><rect x="99.6109%" y="853" width="0.0649%" height="15" fill="rgb(217,97,45)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="99.6109%" y="837" width="0.0649%" height="15" fill="rgb(250,135,20)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="99.6109%" y="821" width="0.0649%" height="15" fill="rgb(224,213,26)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="99.6109%" y="805" width="0.0649%" height="15" fill="rgb(237,86,25)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="99.6109%" y="789" width="0.0649%" height="15" fill="rgb(251,105,18)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="99.6109%" y="773" width="0.0649%" height="15" fill="rgb(246,124,25)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="99.6109%" y="757" width="0.0649%" height="15" fill="rgb(210,90,3)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="99.6109%" y="741" width="0.0649%" height="15" fill="rgb(249,40,31)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.06%)</title><rect x="99.6109%" y="725" width="0.0649%" height="15" fill="rgb(231,228,1)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="99.6109%" y="709" width="0.0649%" height="15" fill="rgb(242,25,49)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.6109%" y="693" width="0.0649%" height="15" fill="rgb(224,142,22)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.6109%" y="677" width="0.0649%" height="15" fill="rgb(228,106,29)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.6109%" y="661" width="0.0649%" height="15" fill="rgb(207,2,15)" fg:x="1536" fg:w="1"/><text x="99.8609%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.6757%" y="805" width="0.0649%" height="15" fill="rgb(231,43,37)" fg:x="1537" fg:w="1"/><text x="99.9257%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.6757%" y="789" width="0.0649%" height="15" fill="rgb(245,193,12)" fg:x="1537" fg:w="1"/><text x="99.9257%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.6757%" y="773" width="0.0649%" height="15" fill="rgb(246,9,49)" fg:x="1537" fg:w="1"/><text x="99.9257%" y="783.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.6757%" y="901" width="0.1297%" height="15" fill="rgb(218,50,36)" fg:x="1537" fg:w="2"/><text x="99.9257%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.13%)</title><rect x="99.6757%" y="885" width="0.1297%" height="15" fill="rgb(225,206,16)" fg:x="1537" fg:w="2"/><text x="99.9257%" y="895.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_string (2 samples, 0.13%)</title><rect x="99.6757%" y="869" width="0.1297%" height="15" fill="rgb(242,52,5)" fg:x="1537" fg:w="2"/><text x="99.9257%" y="879.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::read_vec (2 samples, 0.13%)</title><rect x="99.6757%" y="853" width="0.1297%" height="15" fill="rgb(217,158,11)" fg:x="1537" fg:w="2"/><text x="99.9257%" y="863.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (2 samples, 0.13%)</title><rect x="99.6757%" y="837" width="0.1297%" height="15" fill="rgb(242,144,22)" fg:x="1537" fg:w="2"/><text x="99.9257%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.13%)</title><rect x="99.6757%" y="821" width="0.1297%" height="15" fill="rgb(236,191,3)" fg:x="1537" fg:w="2"/><text x="99.9257%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.06%)</title><rect x="99.7406%" y="805" width="0.0649%" height="15" fill="rgb(241,22,19)" fg:x="1538" fg:w="1"/><text x="99.9906%" y="815.50"></text></g><g><title>bincode::config::int::cast_u64_to_usize (1 samples, 0.06%)</title><rect x="99.7406%" y="789" width="0.0649%" height="15" fill="rgb(205,217,44)" fg:x="1538" fg:w="1"/><text x="99.9906%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.7406%" y="773" width="0.0649%" height="15" fill="rgb(231,53,3)" fg:x="1538" fg:w="1"/><text x="99.9906%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.7406%" y="757" width="0.0649%" height="15" fill="rgb(207,13,22)" fg:x="1538" fg:w="1"/><text x="99.9906%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.7406%" y="741" width="0.0649%" height="15" fill="rgb(234,62,29)" fg:x="1538" fg:w="1"/><text x="99.9906%" y="751.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (1 samples, 0.06%)</title><rect x="99.8054%" y="901" width="0.0649%" height="15" fill="rgb(226,175,44)" fg:x="1539" fg:w="1"/><text x="100.0554%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (1 samples, 0.06%)</title><rect x="99.8054%" y="885" width="0.0649%" height="15" fill="rgb(239,177,6)" fg:x="1539" fg:w="1"/><text x="100.0554%" y="895.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.8054%" y="869" width="0.0649%" height="15" fill="rgb(249,125,15)" fg:x="1539" fg:w="1"/><text x="100.0554%" y="879.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.8054%" y="853" width="0.0649%" height="15" fill="rgb(210,201,5)" fg:x="1539" fg:w="1"/><text x="100.0554%" y="863.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.8054%" y="837" width="0.0649%" height="15" fill="rgb(210,14,6)" fg:x="1539" fg:w="1"/><text x="100.0554%" y="847.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u16&gt;::deserialize (1 samples, 0.06%)</title><rect x="99.8703%" y="565" width="0.0649%" height="15" fill="rgb(239,141,15)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="99.8703%" y="549" width="0.0649%" height="15" fill="rgb(235,75,9)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="559.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u16 (1 samples, 0.06%)</title><rect x="99.8703%" y="533" width="0.0649%" height="15" fill="rgb(246,122,37)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="543.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (1 samples, 0.06%)</title><rect x="99.8703%" y="517" width="0.0649%" height="15" fill="rgb(235,75,52)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="527.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (1 samples, 0.06%)</title><rect x="99.8703%" y="501" width="0.0649%" height="15" fill="rgb(235,179,12)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="511.50"></text></g><g><title>&lt;bincode::byteorder::BigEndian as bincode::byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.06%)</title><rect x="99.8703%" y="485" width="0.0649%" height="15" fill="rgb(223,20,9)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="99.8703%" y="469" width="0.0649%" height="15" fill="rgb(223,75,22)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.06%)</title><rect x="99.8703%" y="453" width="0.0649%" height="15" fill="rgb(248,148,18)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="463.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping (1 samples, 0.06%)</title><rect x="99.8703%" y="437" width="0.0649%" height="15" fill="rgb(225,103,8)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="447.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.06%)</title><rect x="99.8703%" y="421" width="0.0649%" height="15" fill="rgb(237,168,17)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.8703%" y="405" width="0.0649%" height="15" fill="rgb(215,192,38)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.8703%" y="389" width="0.0649%" height="15" fill="rgb(237,69,28)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.8703%" y="373" width="0.0649%" height="15" fill="rgb(254,167,32)" fg:x="1540" fg:w="1"/><text x="100.1203%" y="383.50"></text></g><g><title>all (1,542 samples, 100%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(250,81,30)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1407.50"></text></g><g><title>utxo (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1381" width="100.0000%" height="15" fill="rgb(240,68,52)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1391.50">utxo</text></g><g><title>_start (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1365" width="100.0000%" height="15" fill="rgb(205,97,42)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1375.50">_start</text></g><g><title>__libc_start_main_impl (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1349" width="100.0000%" height="15" fill="rgb(217,10,22)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1359.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1333" width="100.0000%" height="15" fill="rgb(216,21,26)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1343.50">__libc_start_call_main</text></g><g><title>main (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(239,0,36)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1327.50">main</text></g><g><title>std::rt::lang_start (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1301" width="100.0000%" height="15" fill="rgb(216,162,28)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1311.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(246,22,39)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1295.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(222,84,49)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1279.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(250,38,34)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1263.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(236,0,38)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1247.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(237,205,54)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1231.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(221,80,35)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1215.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(237,204,22)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1199.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(213,108,15)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1183.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(251,187,9)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1167.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(250,61,9)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1151.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(230,131,33)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1135.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(239,117,11)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1119.50">core::ops::function::FnOnce::call_once</text></g><g><title>utxo::main (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(222,112,44)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1103.50">utxo::main</text></g><g><title>utxo::demo (1,542 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(251,33,25)" fg:x="0" fg:w="1542"/><text x="0.2500%" y="1087.50">utxo::demo</text></g><g><title>utxo::Utxo::get_by_datum (98 samples, 6.36%)</title><rect x="93.6446%" y="1061" width="6.3554%" height="15" fill="rgb(208,171,34)" fg:x="1444" fg:w="98"/><text x="93.8946%" y="1071.50">utxo::Ut..</text></g><g><title>utxo::Utxo::compose (96 samples, 6.23%)</title><rect x="93.7743%" y="1045" width="6.2257%" height="15" fill="rgb(250,166,54)" fg:x="1446" fg:w="96"/><text x="94.0243%" y="1055.50">utxo::Ut..</text></g><g><title>utxo::Asset::range (82 samples, 5.32%)</title><rect x="94.6822%" y="1029" width="5.3178%" height="15" fill="rgb(212,148,2)" fg:x="1460" fg:w="82"/><text x="94.9322%" y="1039.50">utxo::A..</text></g><g><title>utxo::Asset::compose (68 samples, 4.41%)</title><rect x="95.5901%" y="1013" width="4.4099%" height="15" fill="rgb(224,92,39)" fg:x="1474" fg:w="68"/><text x="95.8401%" y="1023.50">utxo:..</text></g><g><title>redb::tree_store::btree_base::AccessGuard&lt;V&gt;::value (5 samples, 0.32%)</title><rect x="99.6757%" y="997" width="0.3243%" height="15" fill="rgb(250,28,16)" fg:x="1537" fg:w="5"/><text x="99.9257%" y="1007.50"></text></g><g><title>&lt;redbit::Bincode&lt;T&gt; as redb::types::Value&gt;::from_bytes (5 samples, 0.32%)</title><rect x="99.6757%" y="981" width="0.3243%" height="15" fill="rgb(227,128,26)" fg:x="1537" fg:w="5"/><text x="99.9257%" y="991.50"></text></g><g><title>bincode::config::Options::deserialize (5 samples, 0.32%)</title><rect x="99.6757%" y="965" width="0.3243%" height="15" fill="rgb(248,66,7)" fg:x="1537" fg:w="5"/><text x="99.9257%" y="975.50"></text></g><g><title>bincode::internal::deserialize (5 samples, 0.32%)</title><rect x="99.6757%" y="949" width="0.3243%" height="15" fill="rgb(215,124,51)" fg:x="1537" fg:w="5"/><text x="99.9257%" y="959.50"></text></g><g><title>bincode::internal::deserialize_seed (5 samples, 0.32%)</title><rect x="99.6757%" y="933" width="0.3243%" height="15" fill="rgb(207,91,1)" fg:x="1537" fg:w="5"/><text x="99.9257%" y="943.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.32%)</title><rect x="99.6757%" y="917" width="0.3243%" height="15" fill="rgb(217,207,38)" fg:x="1537" fg:w="5"/><text x="99.9257%" y="927.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.8703%" y="901" width="0.1297%" height="15" fill="rgb(240,118,9)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="99.8703%" y="885" width="0.1297%" height="15" fill="rgb(224,147,4)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="895.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="99.8703%" y="869" width="0.1297%" height="15" fill="rgb(205,105,13)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="879.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::AssetPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="99.8703%" y="853" width="0.1297%" height="15" fill="rgb(251,78,39)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="863.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="99.8703%" y="837" width="0.1297%" height="15" fill="rgb(225,60,44)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="847.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="99.8703%" y="821" width="0.1297%" height="15" fill="rgb(221,228,40)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="831.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.8703%" y="805" width="0.1297%" height="15" fill="rgb(215,104,30)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="815.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.8703%" y="789" width="0.1297%" height="15" fill="rgb(206,183,3)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="99.8703%" y="773" width="0.1297%" height="15" fill="rgb(236,199,25)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="99.8703%" y="757" width="0.1297%" height="15" fill="rgb(230,107,29)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="767.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::UtxoPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="99.8703%" y="741" width="0.1297%" height="15" fill="rgb(216,12,37)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="751.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="99.8703%" y="725" width="0.1297%" height="15" fill="rgb(238,165,28)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="735.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="99.8703%" y="709" width="0.1297%" height="15" fill="rgb(226,173,5)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.8703%" y="693" width="0.1297%" height="15" fill="rgb(229,9,37)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="703.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.8703%" y="677" width="0.1297%" height="15" fill="rgb(252,194,43)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.13%)</title><rect x="99.8703%" y="661" width="0.1297%" height="15" fill="rgb(215,58,45)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (2 samples, 0.13%)</title><rect x="99.8703%" y="645" width="0.1297%" height="15" fill="rgb(218,34,51)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="655.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::TxPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.13%)</title><rect x="99.8703%" y="629" width="0.1297%" height="15" fill="rgb(230,104,27)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (2 samples, 0.13%)</title><rect x="99.8703%" y="613" width="0.1297%" height="15" fill="rgb(250,9,6)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.13%)</title><rect x="99.8703%" y="597" width="0.1297%" height="15" fill="rgb(245,10,16)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.13%)</title><rect x="99.8703%" y="581" width="0.1297%" height="15" fill="rgb(227,182,27)" fg:x="1540" fg:w="2"/><text x="100.1203%" y="591.50"></text></g><g><title>utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize (1 samples, 0.06%)</title><rect x="99.9351%" y="565" width="0.0649%" height="15" fill="rgb(225,91,37)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.06%)</title><rect x="99.9351%" y="549" width="0.0649%" height="15" fill="rgb(240,16,41)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="559.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.06%)</title><rect x="99.9351%" y="533" width="0.0649%" height="15" fill="rgb(214,108,54)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="543.50"></text></g><g><title>&lt;utxo::_::&lt;impl serde::de::Deserialize for utxo::BlockPointer&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.06%)</title><rect x="99.9351%" y="517" width="0.0649%" height="15" fill="rgb(253,65,28)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="527.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.06%)</title><rect x="99.9351%" y="501" width="0.0649%" height="15" fill="rgb(246,105,4)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="511.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.06%)</title><rect x="99.9351%" y="485" width="0.0649%" height="15" fill="rgb(223,163,37)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.06%)</title><rect x="99.9351%" y="469" width="0.0649%" height="15" fill="rgb(206,202,31)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize (1 samples, 0.06%)</title><rect x="99.9351%" y="453" width="0.0649%" height="15" fill="rgb(241,202,54)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="463.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="99.9351%" y="437" width="0.0649%" height="15" fill="rgb(220,22,45)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="447.50"></text></g><g><title>&lt;bincode::config::int::FixintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (1 samples, 0.06%)</title><rect x="99.9351%" y="421" width="0.0649%" height="15" fill="rgb(234,215,40)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="431.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (1 samples, 0.06%)</title><rect x="99.9351%" y="405" width="0.0649%" height="15" fill="rgb(220,3,5)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="415.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (1 samples, 0.06%)</title><rect x="99.9351%" y="389" width="0.0649%" height="15" fill="rgb(210,8,15)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="399.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read_exact (1 samples, 0.06%)</title><rect x="99.9351%" y="373" width="0.0649%" height="15" fill="rgb(218,113,45)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="383.50"></text></g><g><title>&lt;bincode::de::read::SliceReader as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="99.9351%" y="357" width="0.0649%" height="15" fill="rgb(249,208,10)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.06%)</title><rect x="99.9351%" y="341" width="0.0649%" height="15" fill="rgb(250,145,17)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="351.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.06%)</title><rect x="99.9351%" y="325" width="0.0649%" height="15" fill="rgb(254,24,13)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="335.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.06%)</title><rect x="99.9351%" y="309" width="0.0649%" height="15" fill="rgb(244,36,15)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="319.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.06%)</title><rect x="99.9351%" y="293" width="0.0649%" height="15" fill="rgb(228,168,26)" fg:x="1541" fg:w="1"/><text x="100.1851%" y="303.50"></text></g></svg></svg>