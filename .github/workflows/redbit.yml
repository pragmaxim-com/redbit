name: Update README with Example Code

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Run Cargo Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Run tests
        run: cargo test --package utxo

  performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: setup | rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Binaries (flamegraph)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-binaries-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-binaries-${{ runner.os }}-

      - name: Run Criterion Benchmarks
        run: |
          cargo bench --package utxo --bench utxo
          find target/criterion -path "*/base/estimates.json" -print0 | while IFS= read -r -d '' file; do
            FUNCTION=$(basename $(dirname $(dirname "$file")))
            if [[ "$FUNCTION" == "criterion" ]]; then
              continue
            fi
            TIME_NS=$(jq -r '.mean.point_estimate' "$file")
            if [[ "$TIME_NS" != "null" && "$TIME_NS" != "0" ]]; then
              OPS_PER_S=$(awk "BEGIN {print 1000000000 / $TIME_NS}") # Convert to ops/s
              OPS_PER_S=$(awk "BEGIN {printf \"%.0f\", $OPS_PER_S}") # Round to whole number
            else
              OPS_PER_S=0 # Prevent division by zero errors
            fi
            echo "$FUNCTION,$OPS_PER_S" >> benchmarks.csv
          done
      
          (cat benchmarks.csv | sort -t, -k2 -n) > sorted_benchmarks.csv
          mv sorted_benchmarks.csv benchmarks.csv

      - name: Update README
        run: |
          LIB_CONTENT=$(cat examples/utxo/src/lib.rs | sed 's/^/    /')
          MAIN_CONTENT=$(cat examples/utxo/src/demo.rs | sed 's/^/    /')

          # Update BEGIN_LIB and BEGIN_MAIN sections
          awk -v lib_content="$LIB_CONTENT" -v main_content="$MAIN_CONTENT" '
            BEGIN { in_lib = 0; in_main = 0 }
            /<!-- BEGIN_LIB -->/ { print; print "```rust"; print lib_content; print "```"; in_lib = 1; next }
            /<!-- END_LIB -->/ { print; in_lib = 0; next }
            /<!-- BEGIN_MAIN -->/ { print; print "```rust"; print main_content; print "```"; in_main = 1; next }
            /<!-- END_MAIN -->/ { print; in_main = 0; next }
            !in_lib && !in_main { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md

          # Prepare formatted benchmark lines
          HEADER=$(printf "%-45s %10s\n" "function" "ops/s")
          BODY=$(tail -n +2 benchmarks.csv | awk -F, '{ printf "%-45s %10s\n", $1, $2 }')
          FORMATTED_BENCH="$HEADER\n-------------------------------------------------------------\n$BODY"

          # Escape double quotes and backslashes
          ESCAPED_BENCH=$(echo -e "$FORMATTED_BENCH" | sed 's/\\/\\\\/g; s/"/\\"/g')

          # Replace section between BEGIN_BENCH and END_BENCH
          awk -v bench_block="$ESCAPED_BENCH" '
            BEGIN { in_bench = 0 }
            /<!-- BEGIN_BENCH -->/ {
              print;
              print "```";
              print bench_block;
              print "```";
              in_bench = 1;
              next
            }
            /<!-- END_BENCH -->/ { print; in_bench = 0; next }
            !in_bench { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md

      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@users.noreply.github.com"
          git diff --quiet || (git add README.md && git commit -m "Auto-update README with example code" && git push)
