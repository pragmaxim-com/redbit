name: Update README with Example Code

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Run Cargo Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Run tests
        run: |
          cargo test --package redbit
          cargo test --package chain
          cargo test --package btc --features ci
          cargo test --package btc --features integration,ci
          cargo test --package cardano --features ci
          cargo test --package cardano --features integration,ci
          cargo test --package ergo --features ci
          cargo test --package ergo --features integration,ci
          cargo test --package demo --features ci
          cargo test --package demo --features integration,ci

  performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: setup | rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust Binaries (flamegraph)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-binaries-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-binaries-${{ runner.os }}-

      - name: Run Built-in Rust Benchmarks and Extract Metrics
        run: |
          run_bench() {
            PACKAGE=$1
            OUT_FILE="${PACKAGE}_bench_output.txt"
            CSV_FILE="${PACKAGE}_benchmarks.csv"

            echo "Running benchmarks for $PACKAGE ..."
            cargo bench --package "$PACKAGE" -- --nocapture | tee "$OUT_FILE"

            # Extract and process lines with `bench:`
            grep 'bench:' "$OUT_FILE" | while read -r line; do
              # Extract full function name regardless of spacing
              FUNCTION=$(echo "$line" | sed -n 's/^test \([^ ]*\) \+\.\.\. bench:.*/\1/p')

              # Extract time in ns/iter
              TIME_NS=$(echo "$line" | grep -oP 'bench:\s+\K[0-9.,]+' | tr -d ',')

              # Convert TIME_NS to ops/sec
              OPS_PER_S=$(awk "BEGIN {if ($TIME_NS > 0) printf \"%.0f\", 1000000000 / $TIME_NS; else print 0}")

              echo "$FUNCTION,$OPS_PER_S" >> "$CSV_FILE"
            done

            sort -t, -k2 -n "$CSV_FILE" -o "$CSV_FILE"
          }

          run_bench demo
          cargo bench --package btc --bench btc_benchmark -- --quiet

      - name: Update README with documentation
        run: |
          LIB_CONTENT=$(cat examples/demo/src/model_v1.rs | sed 's/^/    /')
          MAIN_CONTENT=$(cat examples/demo/src/run.rs | sed 's/^/    /')

          # Update BEGIN_LIB and BEGIN_MAIN sections
          awk -v lib_content="$LIB_CONTENT" -v main_content="$MAIN_CONTENT" '
            BEGIN { in_lib = 0; in_main = 0 }
            /<!-- BEGIN_LIB -->/ { print; print "```rust"; print lib_content; print "```"; in_lib = 1; next }
            /<!-- END_LIB -->/ { print; in_lib = 0; next }
            /<!-- BEGIN_MAIN -->/ { print; print "```rust"; print main_content; print "```"; in_main = 1; next }
            /<!-- END_MAIN -->/ { print; in_main = 0; next }
            !in_lib && !in_main { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md

      - name: Update Readme with bench results
        run: |
          # Prepare formatted benchmark lines
          HEADER=$(printf "%-60s %10s\n" "function" "ops/s")
          BODY=$(cat demo_benchmarks.csv | awk -F, '{ printf "%-60s %10s\n", $1, $2 }')
          FORMATTED_BENCH="$HEADER\n-------------------------------------------------------------\n$BODY"

          # Escape double quotes and backslashes
          ESCAPED_BENCH=$(echo -e "$FORMATTED_BENCH" | sed 's/\\/\\\\/g; s/"/\\"/g')

          # Replace section between BEGIN_BENCH and END_BENCH
          awk -v bench_block="$ESCAPED_BENCH" '
            BEGIN { in_bench = 0 }
            /<!-- BEGIN_BENCH -->/ {
              print;
              print "```";
              print bench_block;
              print "```";
              in_bench = 1;
              next
            }
            /<!-- END_BENCH -->/ { print; in_bench = 0; next }
            !in_bench { print }
          ' README.md > README.md.tmp && mv README.md.tmp README.md

      - name: Commit benchmark HTML
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@users.noreply.github.com"

          # Copy the Criterion report to repo root
          cp target/criterion/report/index.html benchmark.html

          # Stage and commit if there are changes
          git add benchmark.html
          git diff --cached --quiet || git commit -m "Auto-update benchmark HTML" 
          git diff --quiet || (git add README.md && git commit -m "Auto-update README with example code" && git push)
          git push
